
MegaBomber.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  0000e1c4  0000e2c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000e1c4  00000000  00000000  00000100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000f1e  00800120  00800120  0000e2e0  2**5
                  ALLOC
  3 .debug_aranges 00000570  00000000  00000000  0000e2ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00001332  00000000  00000000  0000e83e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000839c  00000000  00000000  0000fb70  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b56  00000000  00000000  00017f0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00006abe  00000000  00000000  00018a62  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000a60  00000000  00000000  0001f520  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000014a9  00000000  00000000  0001ff80  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00003faa  00000000  00000000  00021429  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000010d8  00000000  00000000  000253d3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
}

/**
 * Performs a software reset
 */
void SoftReset(void){        
       0:	0c 94 c9 3c 	jmp	0x7992	; 0x7992 <__ctors_end>
	absoluteTime=0;

	
}

void RestartSong(){	
       4:	0c 94 59 3d 	jmp	0x7ab2	; 0x7ab2 <__bad_interrupt>
             dest+=xdiffDest;
          }
       }


void SlowBlitSprite(unsigned char spriteNo,unsigned char ramTileNo,unsigned int xy,unsigned int dxdy){
       8:	0c 94 59 3d 	jmp	0x7ab2	; 0x7ab2 <__bad_interrupt>

}

u8 GetNumRounds(){
   return 3;
}
       c:	0c 94 59 3d 	jmp	0x7ab2	; 0x7ab2 <__bad_interrupt>
      10:	0c 94 59 3d 	jmp	0x7ab2	; 0x7ab2 <__bad_interrupt>
      14:	0c 94 59 3d 	jmp	0x7ab2	; 0x7ab2 <__bad_interrupt>
      18:	0c 94 59 3d 	jmp	0x7ab2	; 0x7ab2 <__bad_interrupt>
      1c:	0c 94 59 3d 	jmp	0x7ab2	; 0x7ab2 <__bad_interrupt>
      20:	0c 94 59 3d 	jmp	0x7ab2	; 0x7ab2 <__bad_interrupt>
      24:	0c 94 59 3d 	jmp	0x7ab2	; 0x7ab2 <__bad_interrupt>
      28:	0c 94 59 3d 	jmp	0x7ab2	; 0x7ab2 <__bad_interrupt>
      2c:	0c 94 59 3d 	jmp	0x7ab2	; 0x7ab2 <__bad_interrupt>
      30:	0c 94 59 3d 	jmp	0x7ab2	; 0x7ab2 <__bad_interrupt>
      34:	0c 94 78 3f 	jmp	0x7ef0	; 0x7ef0 <__vector_13>
      38:	0c 94 59 3d 	jmp	0x7ab2	; 0x7ab2 <__bad_interrupt>
      3c:	0c 94 59 3d 	jmp	0x7ab2	; 0x7ab2 <__bad_interrupt>
      40:	0c 94 59 3d 	jmp	0x7ab2	; 0x7ab2 <__bad_interrupt>
      44:	0c 94 59 3d 	jmp	0x7ab2	; 0x7ab2 <__bad_interrupt>
      48:	0c 94 59 3d 	jmp	0x7ab2	; 0x7ab2 <__bad_interrupt>
      4c:	0c 94 59 3d 	jmp	0x7ab2	; 0x7ab2 <__bad_interrupt>
      50:	0c 94 59 3d 	jmp	0x7ab2	; 0x7ab2 <__bad_interrupt>
      54:	0c 94 59 3d 	jmp	0x7ab2	; 0x7ab2 <__bad_interrupt>
      58:	0c 94 59 3d 	jmp	0x7ab2	; 0x7ab2 <__bad_interrupt>
      5c:	0c 94 59 3d 	jmp	0x7ab2	; 0x7ab2 <__bad_interrupt>
      60:	0c 94 59 3d 	jmp	0x7ab2	; 0x7ab2 <__bad_interrupt>
      64:	0c 94 59 3d 	jmp	0x7ab2	; 0x7ab2 <__bad_interrupt>
      68:	0c 94 59 3d 	jmp	0x7ab2	; 0x7ab2 <__bad_interrupt>
      6c:	0c 94 59 3d 	jmp	0x7ab2	; 0x7ab2 <__bad_interrupt>

00000070 <patchCommands>:
      70:	fa 44 08 45 d2 45 82 49 6e 49 0b 45 1a 45 29 45     .D.E.E.InI.E.E)E
      80:	56 49 37 45 45 45                                   VI7EEE

00000086 <fader>:
      86:	00 40 88 91 d2 e4 ad b5 b6 be bf ff                 .@..........

00000092 <pallet>:
      92:	fe 01 ac 5f ff 8a 77 dc 0f 01 49 5f 5b 49 77 52     ..._..w...I_[IwR
      a2:	0f 01 7b 5f 7b 61 b7 73 0f 01 0c ff 0f 0b af 17     ..{_{a.s........
      b2:	db 00 00 00 00 00 00 00 00 01 0c 0f 27 0e 2f 01     ............'./.
      c2:	49 92 a3 ed ff 1e 2f 66 5d                          I...../f]

000000cb <strUzeboxOffset>:
      cb:	53 58 43 45 4d 56 00                                SXCEMV.

000000d2 <strMegaBomber>:
      d2:	4d 45 47 41 20 42 4f 4d 42 45 52 00                 MEGA BOMBER.

000000de <strBattleGame>:
      de:	42 41 54 54 4c 45 33 47 41 4d 45 00                 BATTLE3GAME.

000000ea <strUzeboxLive>:
      ea:	55 5a 45 42 4f 58 33 4c 49 56 45 00                 UZEBOX3LIVE.

000000f6 <strLocal>:
      f6:	4c 4f 43 41 4c 00                                   LOCAL.

000000fc <strUzenet>:
      fc:	55 5a 45 4e 45 54 00                                UZENET.

00000103 <strNetwork>:
     103:	4e 45 54 57 4f 52 4b 00                             NETWORK.

0000010b <strOptions>:
     10b:	4f 50 54 49 4f 4e 53 00                             OPTIONS.

00000113 <strVanity>:
     113:	4c 45 45 20 57 45 42 45 52 20 32 30 31 31 00        LEE WEBER 2011.

00000122 <strGettingList>:
     122:	35 47 45 54 54 49 4e 47 33 4c 49 53 54 35 00        5GETTING3LIST5.

00000131 <strPing>:
     131:	50 49 4e 47 00                                      PING.

00000136 <strNoGames>:
     136:	4e 4f 33 47 41 4d 45 53 33 46 4f 55 4e 44 00        NO3GAMES3FOUND.

00000145 <strEmpty>:
     145:	35 35 45 4d 50 54 59 35 35 33 00                    55EMPTY553.

00000150 <strBack>:
     150:	42 41 43 4b 00                                      BACK.

00000155 <strQuit>:
     155:	51 55 49 54 00                                      QUIT.

0000015a <strRefresh>:
     15a:	52 45 46 52 45 53 48 00                             REFRESH.

00000162 <strBattleSetup>:
     162:	42 41 54 54 4c 45 20 53 45 54 55 50 00              BATTLE SETUP.

0000016f <strGameType>:
     16f:	47 41 4d 45 20 54 59 50 45 00                       GAME TYPE.

00000179 <strSingle>:
     179:	53 49 4e 47 4c 45 00                                SINGLE.

00000180 <strTeam>:
     180:	54 45 41 4d 00                                      TEAM.

00000185 <strRound>:
     185:	52 4f 55 4e 44 00                                   ROUND.

0000018b <strBlitz>:
     18b:	42 4c 4f 43 4b 00                                   BLOCK.

00000191 <strTime>:
     191:	54 49 4d 45 00                                      TIME.

00000196 <strMatches>:
     196:	4d 41 54 43 48 45 53 00                             MATCHES.

0000019e <strPlayers>:
     19e:	50 4c 41 59 45 52 53 00                             PLAYERS.

000001a6 <strCpu>:
     1a6:	43 50 55 00                                         CPU.

000001aa <strMan>:
     1aa:	4d 41 4e 00                                         MAN.

000001ae <strGhost>:
     1ae:	47 48 4f 53 54 00                                   GHOST.

000001b4 <strOn>:
     1b4:	4f 4e 20 00                                         ON .

000001b8 <strOff>:
     1b8:	4f 46 46 00                                         OFF.

000001bc <str1P>:
     1bc:	31 50 20 00                                         1P .

000001c0 <str2P>:
     1c0:	32 50 20 00                                         2P .

000001c4 <str3P>:
     1c4:	33 50 20 00                                         3P .

000001c8 <str4P>:
     1c8:	34 50 20 00                                         4P .

000001cc <strMap>:
     1cc:	4d 41 50 00                                         MAP.

000001d0 <FontTiles>:
     1d0:	38 4c c6 c6 c6 64 38 00 18 38 18 18 18 18 7e 00     8L...d8..8....~.
     1e0:	7c c6 0e 3c 78 e0 fe 00 7e 0c 18 3c 06 c6 7c 00     |..<x...~..<..|.
     1f0:	1c 3c 6c cc fe 0c 0c 00 fc c0 fc 06 06 c6 7c 00     .<l...........|.
     200:	38 6c c6 c6 fe c6 c6 00 fc c6 c6 fc c6 c6 fc 00     8l..............
     210:	3c 66 c0 c0 c0 66 3c 00 f8 cc c6 c6 c6 cc f8 00     <f...f<.........
     220:	fe c0 c0 fc c0 c0 fe 00 fe c0 c0 fc c0 c0 c0 00     ................
     230:	3e 60 c0 ce c6 66 3c 00 c6 c6 c6 fe c6 c6 c6 00     >`...f<.........
     240:	7e 18 18 18 18 18 7e 00 1e 0c 0c 0c 0c 8c 78 00     ~.....~.......x.
     250:	c6 cc d8 f0 f8 dc ce 00 60 60 60 60 60 60 7e 00     ........``````~.
     260:	c6 ee fe fe d6 c6 c6 00 c6 e6 f6 fe de ce c6 00     ................
     270:	7c c6 c6 c6 c6 c6 7c 00 fc c6 c6 c6 fc c0 c0 00     |.....|.........
     280:	7c c6 c6 c6 de cc 7a 00 fc c6 c6 ce f8 dc ce 00     |.....z.........
     290:	78 cc c0 7c 06 c6 7c 00 fc 30 30 30 30 30 30 00     x..|..|..000000.
     2a0:	c6 c6 c6 c6 c6 c6 7c 00 c6 c6 c6 ee 7c 38 10 00     ......|.....|8..
     2b0:	c6 c6 d6 fe fe ee c6 00 c6 ee 7c 38 7c ee c6 00     ..........|8|...
     2c0:	66 66 66 3c 18 18 18 00 fe 0e 1c 38 70 e0 fe 00     fff<.......8p...

000002d0 <HurryPixels>:
     2d0:	55 55 55 55 55 55 55 55 55 55 55 55 55 55 55 55     UUUUUUUUUUUUUUUU
     2e0:	00 40 00 80 40 80 40 80 40 80 40 80 40 80 40 80     .@..@.@.@.@.@.@.
     2f0:	40 00 80 00 80 40 80 40 80 40 80 40 80 40 80 40     @....@.@.@.@.@.@
     300:	40 40 80 80 80 80 80 80 80 80 80 80 80 80 80 c0     @@..............
     310:	00 40 00 80 00 80 40 80 40 80 40 80 40 80 40 80     .@....@.@.@.@.@.
     320:	40 00 80 00 80 00 80 40 80 40 80 40 80 40 c0 40     @......@.@.@.@.@
     330:	40 40 80 80 80 80 80 80 80 80 80 80 80 80 40 40     @@............@@
     340:	00 00 40 00 c0 00 c0 00 c0 00 c0 00 40 00 00 00     ..@.........@...
     350:	40 40 80 80 80 80 80 80 80 80 80 80 80 80 80 80     @@..............
     360:	40 00 80 00 80 00 80 40 80 40 80 40 80 40 80 40     @......@.@.@.@.@
     370:	40 00 80 00 80 40 80 40 80 40 80 40 80 40 80 40     @....@.@.@.@.@.@
     380:	80 80 80 80 80 80 80 80 80 80 40 40 c0 c0 40 40     ..........@@..@@
     390:	40 80 40 80 40 80 40 80 40 80 40 40 40 40 00 00     @.@.@.@.@.@@@@..
     3a0:	80 40 80 40 80 40 80 40 c0 40 40 00 c0 00 40 00     .@.@.@.@.@@...@.
     3b0:	80 80 80 80 80 80 80 80 80 80 40 40 c0 c0 40 40     ..........@@..@@
     3c0:	00 80 00 80 40 80 40 80 40 80 40 40 40 c0 00 40     ....@.@.@.@@@..@
     3d0:	80 00 80 00 80 40 80 40 80 40 40 40 c0 40 40 00     .....@.@.@@@.@@.
     3e0:	40 40 40 40 40 40 40 40 40 40 40 40 00 c0 00 40     @@@@@@@@@@@@...@
	...
     400:	80 80 80 80 80 80 80 80 80 c0 40 40 40 c0 00 40     ..........@@@..@
     410:	40 80 40 80 40 80 40 80 40 80 00 40 00 c0 00 40     @.@.@.@.@..@...@
     420:	40 40 c0 00 40 00 00 00 00 00 00 00 00 00 00 00     @@..@...........
     430:	40 40 40 40 80 40 80 40 80 40 40 40 c0 40 40 00     @@@@.@.@.@@@.@@.

00000440 <HurryMap>:
     440:	0c 02 00 01 02 03 04 05 06 07 08 01 09 0a 0b 0c     ................
     450:	0d 0e 0f 10 11 12 13 14 15 16                       ..........

0000045a <HurryPallet>:
     45a:	00 80 c0 ff                                         ....

0000045e <MapTiles>:
     45e:	5c 13 5c 13 0a 13 13 53 53 13 53 5c 0a 13 13 53     \.\....SS.S\...S
     46e:	53 13 53 13 0a 0a 13 13 53 13 0a 0a 1b 0a 0a 13     S.S.....S.......
     47e:	0a 0a 13 53 53 0a 0a 0a 0a 13 53 5c 5c 53 0a 0a     ...SS.....S\\S..
     48e:	0a 53 53 53 53 5c 0a 0a 0a 53 53 53 53 53 13 0a     .SSSS\...SSSSS..
     49e:	53 53 5c 53 5c 0a 53 53 53 53 53 53 0a 1b 13 53     SS\S\.SSSSSS...S
     4ae:	53 53 1b 13 0a 1b 0a 53 13 13 13 13 1b 53 0a 53     SS.....S.....S.S
     4be:	0a 0a 13 0a 0a 5c 53 0a 0a 0a 0a 0a 53 53 5c 53     .....\S.....SS\S
     4ce:	13 13 0a 0a 13 13 0a 53 13 13 13 0a 0a 53 53 53     .......S.....SSS
     4de:	0a 13 53 53 53 13 13 0a 5c 0a 13 13 13 13 0a 53     ..SSS...\......S
     4ee:	53 5c 0a 0a 0a 0a 53 5c 53 0a 13 13 0a 53 53 5c     S\....S\S....SS\
     4fe:	53 0a 0a 13 0a 53 53 13 53 13 0a 0a 13 1b 1b 1b     S....SS.S.......
     50e:	53 13 0a 0a 0a 1b 1b 13 0a 0a 13 0a 1b 0a 13 53     S..............S
     51e:	0a 0a 0a 0a 53 53 53 53 1b 0a 0a 0a 5c 13 0a 0a     ....SSSS....\...
     52e:	0a 0a 53 53 53 5c 13 53 0a 13 13 53 53 53 5c 53     ..SSS\.S...SSS\S
     53e:	0a 0a 0a 13 13 53 53 53 0a 5c 5c 0a 0a 13 0a 53     .....SSS.\\....S
     54e:	53 53 5c 5c 5c 0a 0a 0a 53 5c 13 53 5c 0a 5c 5c     SS\\\...S\.S\.\\
     55e:	5c 13 5c 13 0a 09 09 09 53 13 53 5c 09 52 5b 52     \.\.....S.S\.R[R
     56e:	53 13 53 13 09 5b 52 5b 53 13 0a 09 52 5b 52 52     S.S..[R[S...R[RR
     57e:	0a 0a 09 09 52 5b 52 52 0a 13 09 52 5b 52 52 52     ....R[RR...R[RRR
     58e:	0a 09 09 52 52 52 52 5b 0a 09 52 52 52 5b 52 5b     ...RRRR[..RRR[R[
     59e:	53 53 5c 53 5c 0a 53 53 09 09 09 53 0a 1b 13 53     SS\S\.SS...S...S
     5ae:	09 ff 5b 09 0a 1b 0a 53 5b ff 5b 5b 09 53 0a 53     ..[....S[.[[.S.S
     5be:	ff ff ff 5b 09 5c 53 0a ad ff ff ad 52 09 5c 53     ...[.\S.....R.\S
     5ce:	ad ad ff 5b 5b 52 09 53 ad ad 5b 5b ad 52 52 09     ...[[R.S..[[.RR.
     5de:	09 52 52 52 52 5b 52 5b 09 52 52 52 5b 52 52 5b     .RRRR[R[.RRR[RR[
     5ee:	09 52 52 52 5b 52 52 5b 09 09 52 5b 5b 52 5b 5b     .RRR[RR[..R[[R[[
     5fe:	09 09 5b ad 52 52 5b 5b 53 09 09 52 09 5b 5b 52     ..[.RR[[S..R.[[R
     60e:	53 13 09 09 09 09 52 09 0a 0a 13 0a 1b 0a 09 09     S.....R.........
     61e:	ad ad ad ad ad 09 5b 09 ad ad ff ff ff ff 09 09     ......[.........
     62e:	5b ad ff ff 5b ff 5b 09 5b 52 ff ff ff ad 5b 09     [...[.[.[R....[.
     63e:	ad 52 ad ff ff 5b 09 09 5b 09 52 ad ff 09 09 53     .R...[..[.R....S
     64e:	52 09 09 09 09 09 0a 0a 09 09 09 09 5c 0a 5c 5c     R...........\.\\
     65e:	5c 13 5c 03 03 03 13 53 53 13 03 06 27 06 03 53     \.\....SS...'..S
     66e:	53 03 06 27 37 27 03 13 53 03 06 06 27 27 03 13     S..'7'..S...''..
     67e:	0a 0a 03 06 06 03 0a 0a 0a 13 03 03 03 53 0a 0a     .............S..
     68e:	0a 53 53 53 53 5c 03 03 0a 53 53 03 03 03 06 06     .SSSS\...SS.....
     69e:	53 53 5c 53 5c 0a 53 53 53 53 53 03 03 03 13 53     SS\S\.SSSSS....S
     6ae:	53 53 03 06 27 06 03 53 13 03 06 27 37 27 03 53     SS..'..S...'7'.S
     6be:	0a 03 06 27 37 27 03 0a 03 03 06 06 06 03 5c 53     ...'7'........\S
     6ce:	03 06 03 03 03 13 0a 53 03 06 06 06 03 03 53 53     .......S......SS
     6de:	09 03 03 03 09 09 09 03 09 09 03 09 09 03 09 06     ................
     6ee:	09 03 03 03 06 03 09 06 09 09 03 06 06 09 03 06     ................
     6fe:	09 09 06 27 03 09 06 06 53 09 09 03 09 06 06 03     ...'....S.......
     70e:	53 13 09 09 09 09 03 09 0a 0a 13 0a 1b 0a 09 09     S...............
     71e:	27 27 27 27 27 09 06 09 27 27 37 37 37 37 09 09     '''''...''7777..
     72e:	06 37 37 37 06 37 06 09 27 03 37 37 37 27 06 09     .777.7..'.777'..
     73e:	27 03 27 37 37 06 09 09 06 09 03 27 37 09 09 53     '.'77......'7..S
     74e:	03 09 09 09 09 09 0a 0a 09 09 09 09 5c 0a 5c 5c     ............\.\\
     75e:	5c 13 5c 13 0a 13 13 53 53 13 03 03 03 13 13 53     \.\....SS......S
     76e:	53 03 27 27 03 0a 13 13 53 03 06 27 03 0a 0a 13     S.''....S..'....
     77e:	0a 03 03 06 03 0a 0a 03 0a 13 03 03 5c 53 03 06     ............\S..
     78e:	0a 53 53 03 03 5c 03 06 0a 53 53 53 03 03 06 27     .SS..\...SSS...'
     79e:	53 53 5c 53 5c 0a 53 53 53 53 53 53 03 03 13 53     SS\S\.SSSSSS...S
     7ae:	53 53 1b 03 06 37 03 53 13 13 13 03 06 27 03 53     SS...7.S.....'.S
     7be:	03 0a 13 0a 03 03 53 0a 06 03 0a 0a 53 53 5c 53     ......S.....SS\S
     7ce:	06 03 0a 0a 13 13 0a 53 03 03 03 0a 0a 53 53 53     .......S.....SSS
     7de:	0a 13 03 06 03 06 06 06 5c 03 03 06 03 06 27 06     ........\.....'.
     7ee:	53 03 06 03 03 27 27 06 03 06 06 06 27 27 06 06     S....''.....''..
     7fe:	03 06 06 27 27 03 06 06 53 03 06 06 06 06 06 06     ...''...S.......
     80e:	53 13 03 03 03 06 03 03 0a 0a 13 0a 03 03 03 53     S..............S
     81e:	03 06 03 06 06 03 53 53 03 03 27 27 03 03 0a 0a     ......SS..''....
     82e:	03 27 27 27 06 03 13 53 06 27 27 37 27 27 03 53     .'''...S.''7''.S
     83e:	06 06 27 37 37 27 06 03 06 06 27 27 27 27 06 03     ..'77'....''''..
     84e:	03 03 06 27 06 03 03 0a 53 03 03 03 03 0a 5c 5c     ...'....S.....\\
     85e:	5c 13 5c 13 0a 13 13 53 53 03 53 5c 0a 13 13 53     \.\....SS.S\...S
     86e:	03 06 03 13 0a 0a 13 13 53 03 0a 0a 1b 0a 0a 13     ........S.......
     87e:	0a 0a 13 53 53 0a 0a 0a 0a 13 03 5c 5c 53 0a 0a     ...SS......\\S..
     88e:	0a 03 03 53 03 03 03 0a 0a 53 03 53 03 27 03 03     ...S.....S.S.'..
     89e:	53 53 5c 53 5c 0a 53 53 53 53 53 53 0a 1b 03 53     SS\S\.SSSSSS...S
     8ae:	53 53 1b 13 0a 03 06 53 13 13 13 13 1b 53 0a 53     SS.....S.....S.S
     8be:	0a 0a 03 0a 0a 5c 53 0a 0a 0a 03 03 03 53 5c 53     .....\S......S\S
     8ce:	13 03 06 03 13 13 0a 53 03 03 06 03 0a 53 53 53     .......S.....SSS
     8de:	0a 13 53 03 06 27 27 37 5c 0a 13 03 06 27 06 27     ..S..''7\....'.'
     8ee:	53 03 03 06 06 03 06 03 03 03 06 03 03 03 06 06     S...............
     8fe:	03 03 06 27 37 06 03 06 53 03 06 06 27 27 03 03     ...'7...S...''..
     90e:	53 13 03 06 03 03 1b 03 0a 0a 03 03 03 0a 13 53     S..............S
     91e:	03 03 03 0a 53 53 53 53 03 37 06 03 03 13 0a 0a     ....SSSS.7......
     92e:	06 06 03 03 27 03 13 53 27 03 03 27 37 27 03 53     ....'..S'..'7'.S
     93e:	06 03 06 27 37 27 03 53 03 03 06 27 27 03 03 53     ...'7'.S...''..S
     94e:	06 03 03 03 03 03 0a 0a 03 5c 13 03 5c 0a 5c 5c     .........\..\.\\
     95e:	5c 13 5c 13 0a 13 13 53 53 03 53 5c 0a 13 13 53     \.\....SS.S\...S
     96e:	53 03 03 13 0a 0a 13 13 53 13 0a 0a 1b 0a 0a 13     S.......S.......
     97e:	0a 0a 13 53 53 0a 0a 0a 0a 13 53 5c 5c 53 0a 0a     ...SS.....S\\S..
     98e:	0a 53 53 53 53 5c 0a 03 0a 53 03 03 53 53 03 03     .SSSS\...S..SS..
     99e:	53 53 5c 53 5c 0a 53 53 53 53 53 53 0a 03 13 53     SS\S\.SSSSSS...S
     9ae:	53 53 1b 13 03 03 03 53 13 13 13 13 1b 03 0a 53     SS.....S.......S
     9be:	0a 0a 13 0a 0a 5c 53 0a 03 0a 0a 0a 53 53 5c 53     .....\S.....SS\S
     9ce:	13 03 0a 0a 13 13 0a 53 03 03 03 03 0a 53 53 53     .......S.....SSS
     9de:	0a 13 53 03 06 06 03 03 5c 0a 13 03 03 03 03 03     ..S.....\.......
     9ee:	53 5c 0a 0a 0a 0a 53 03 53 0a 03 03 0a 53 03 06     S\....S.S....S..
     9fe:	53 03 06 06 03 53 03 03 03 03 27 06 03 1b 1b 03     S....S....'.....
     a0e:	53 03 03 06 03 1b 1b 13 0a 0a 03 0a 1b 0a 13 53     S..............S
     a1e:	27 27 03 03 53 53 53 53 06 27 27 03 5c 13 0a 0a     ''..SSSS.''.\...
     a2e:	03 03 03 03 53 5c 13 53 06 27 03 03 03 53 5c 53     ....S\.S.'...S\S
     a3e:	06 27 27 27 27 03 53 53 03 03 03 06 06 03 0a 53     .''''.SS.......S
     a4e:	53 53 5c 03 03 0a 0a 0a 53 5c 13 03 5c 0a 5c 5c     SS\.....S\..\.\\
     a5e:	5c 13 5c 13 0a 13 13 53 53 13 53 5c 0a 13 13 53     \.\....SS.S\...S
     a6e:	03 03 53 13 0a 0a 13 13 53 13 0a 0a 1b 0a 0a 13     ..S.....S.......
     a7e:	0a 0a 03 53 53 0a 0a 0a 0a 13 53 5c 5c 53 0a 0a     ...SS.....S\\S..
     a8e:	0a 53 53 53 53 5c 0a 0a 0a 03 53 53 53 53 13 03     .SSSS\....SSSS..
     a9e:	53 53 5c 53 5c 0a 53 53 53 53 53 53 0a 03 13 53     SS\S\.SSSSSS...S
     aae:	53 53 1b 13 0a 1b 0a 53 13 13 13 13 1b 53 0a 53     SS.....S.....S.S
     abe:	0a 0a 13 0a 0a 5c 53 0a 0a 0a 0a 0a 53 53 5c 53     .....\S.....SS\S
     ace:	13 13 0a 0a 13 13 0a 53 13 13 13 0a 0a 53 53 53     .......S.....SSS
     ade:	0a 13 03 53 06 03 03 03 5c 0a 13 13 03 13 0a 53     ...S....\......S
     aee:	53 5c 0a 0a 0a 0a 53 03 53 0a 13 13 0a 53 03 5c     S\....S.S....S.\
     afe:	53 03 03 13 0a 53 03 03 53 03 06 06 13 1b 03 1b     S....S..S.......
     b0e:	53 13 03 03 0a 1b 1b 13 0a 0a 13 0a 1b 0a 13 53     S..............S
     b1e:	0a 06 03 0a 53 53 53 53 1b 06 06 0a 5c 13 0a 0a     ....SSSS....\...
     b2e:	0a 03 03 53 53 5c 13 53 0a 13 03 03 53 03 5c 53     ...SS\.S....S.\S
     b3e:	03 0a 03 03 06 03 53 53 0a 5c 5c 06 06 03 0a 53     ......SS.\\....S
     b4e:	53 53 5c 03 03 0a 0a 0a 53 5c 13 53 5c 0a 5c 5c     SS\.....S\.S\.\\
     b5e:	0a 0a 0a 0a 09 09 09 09 0a 53 09 09 5c 5c 5c ae     .........S..\\\.
     b6e:	0a 09 5c 5c 4a 4a 4a 4a 09 5c 5c 4a 4a 4a 4a 4a     ..\\JJJJ.\\JJJJJ
     b7e:	09 ae 4a 4a 4a 03 03 03 09 ae 4a 03 03 03 03 03     ..JJJ.....J.....
     b8e:	09 5c 4a 03 06 27 06 03 09 4a ae 5c 03 03 03 03     .\J..'...J.\....
     b9e:	09 09 09 09 5c 13 13 53 ae f7 f7 ae 09 09 5c 53     ....\..S......\S
     bae:	4a 4a 4a 4a ae f7 09 53 4a 4a 4a 4a 4a 5c 5c 09     JJJJ...SJJJJJ\\.
     bbe:	03 03 03 4a 4a 4a ae 09 06 03 03 03 03 4a ae 09     ...JJJ.......J..
     bce:	03 03 06 03 03 4a 5c 09 03 03 03 03 5c 5c 4a 09     .....J\.....\\J.
     bde:	09 4a 4a 5c ae f7 ff f7 09 4a 5c 4a 4a 4a 4a 4a     .JJ\.....J\JJJJJ
     bee:	09 4a 5c 4a 4a 4a 4a 4a 13 09 09 09 5c 4a 4a 4a     .J\JJJJJ....\JJJ
     bfe:	06 09 f7 ae 09 09 4a 4a 09 ae ff f7 09 5c 09 4a     ......JJ.....\.J
     c0e:	09 5c ae 09 5c ae 09 03 53 09 09 0a 09 09 06 27     .\..\...S......'
     c1e:	ae ae 5c 5c 4a 4a 5c 09 4a 4a 4a 5c 5c 5c 5c 09     ..\\JJ\.JJJ\\\\.
     c2e:	4a 5c 5c ae f7 5c 4a 09 4a 5c 5c ae 4a 09 09 06     J\\..\J.J\\.J...
     c3e:	4a 4a 5c 5c 09 f7 f7 09 4a 4a 4a 09 ae ff f7 09     JJ\\....JJJ.....
     c4e:	03 09 09 09 5c ae ae 09 27 06 03 0a 09 09 09 53     ....\...'......S
     c5e:	0a 0a 0a 0a 09 09 09 09 0a 53 09 09 5c 5c 5c ae     .........S..\\\.
     c6e:	0a 09 5c 5c 4a 4a 4a 4a 09 5c 5c 4a 4a 4a 4a 4a     ..\\JJJJ.\\JJJJJ
     c7e:	09 ae 4a 4a 4a 03 06 03 09 ae 4a 03 03 03 03 03     ..JJJ.....J.....
     c8e:	09 5c 4a 03 03 06 03 03 09 4a ae 5c 03 03 03 03     .\J......J.\....
     c9e:	09 09 09 09 5c 13 13 53 ae f7 f7 ae 09 09 5c 53     ....\..S......\S
     cae:	4a 4a 4a 4a ae f7 09 53 4a 4a 4a 4a 4a 5c 5c 09     JJJJ...SJJJJJ\\.
     cbe:	03 03 03 4a 4a 4a ae 09 06 06 03 03 03 4a ae 09     ...JJJ.......J..
     cce:	03 03 03 03 03 4a 5c 09 03 03 06 03 5c 5c 4a 09     .....J\.....\\J.
     cde:	09 4a 4a 5c ae f7 ff f7 09 4a 5c 4a 4a 4a 4a 4a     .JJ\.....J\JJJJJ
     cee:	09 4a 5c 4a 4a 4a 4a 4a 13 09 09 09 5c 4a 4a 4a     .J\JJJJJ....\JJJ
     cfe:	27 09 f7 ae 09 09 4a 4a 09 ae ff f7 09 5c 09 4a     '.....JJ.....\.J
     d0e:	09 5c ae 09 5c ae 09 09 53 09 09 0a 09 09 06 06     .\..\...S.......
     d1e:	ae ae 5c 5c 4a 4a 5c 09 4a 4a 4a 5c 5c 5c 5c 09     ..\\JJ\.JJJ\\\\.
     d2e:	4a 5c 5c ae f7 5c 4a 09 4a 5c 5c ae 4a 09 09 06     J\\..\J.J\\.J...
     d3e:	4a 4a 5c 5c 09 f7 f7 09 4a 4a 4a 09 ae ff f7 09     JJ\\....JJJ.....
     d4e:	03 03 09 09 5c ae ae 09 27 37 06 0a 09 09 09 53     ....\...'7.....S
     d5e:	0a 0a 0a 0a 09 09 09 09 0a 53 09 09 5c 5c 5c ae     .........S..\\\.
     d6e:	0a 09 5c 5c 4a 4a 4a 4a 09 5c 5c 4a 4a 4a 4a 4a     ..\\JJJJ.\\JJJJJ
     d7e:	09 ae 4a 4a 4a 03 03 03 09 ae 4a 03 06 03 03 03     ..JJJ.....J.....
     d8e:	09 5c 4a 03 03 03 03 06 09 4a ae 5c 03 06 03 03     .\J......J.\....
     d9e:	09 09 09 09 5c 13 13 53 ae f7 f7 ae 09 09 5c 53     ....\..S......\S
     dae:	4a 4a 4a 4a ae f7 09 53 4a 4a 4a 4a 4a 5c 5c 09     JJJJ...SJJJJJ\\.
     dbe:	03 03 03 4a 4a 4a ae 09 03 03 03 03 03 4a ae 09     ...JJJ.......J..
     dce:	06 03 03 03 06 4a 5c 09 03 03 03 03 5c 5c 4a 09     .....J\.....\\J.
     dde:	09 4a 4a 5c ae f7 ff f7 09 4a 5c 4a 4a 4a 4a 4a     .JJ\.....J\JJJJJ
     dee:	09 4a 5c 4a 4a 4a 4a 4a 13 09 09 09 5c 4a 4a 4a     .J\JJJJJ....\JJJ
     dfe:	13 09 f7 ae 09 09 4a 4a 09 ae ff f7 09 5c 09 4a     ......JJ.....\.J
     e0e:	09 5c ae 09 5c ae 09 09 53 09 09 0a 09 09 0a 06     .\..\...S.......
     e1e:	ae ae 5c 5c 4a 4a 5c 09 4a 4a 4a 5c 5c 5c 5c 09     ..\\JJ\.JJJ\\\\.
     e2e:	4a 5c 5c ae f7 5c 4a 09 4a 5c 5c ae 4a 09 09 13     J\\..\J.J\\.J...
     e3e:	4a 4a 5c 5c 09 f7 f7 09 4a 4a 4a 09 ae ff f7 09     JJ\\....JJJ.....
     e4e:	09 03 03 09 5c ae ae 09 27 27 06 03 09 09 09 53     ....\...''.....S
     e5e:	0a 0a 0a 0a 09 09 09 09 0a 53 09 09 5c 5c 5c ae     .........S..\\\.
     e6e:	0a 09 5c 5c 4a 4a 4a 4a 09 5c 5c 4a 4a 4a 4a 4a     ..\\JJJJ.\\JJJJJ
     e7e:	09 ae 4a 4a 4a 03 03 03 09 ae 4a 03 03 06 03 03     ..JJJ.....J.....
     e8e:	09 5c 4a 03 03 03 03 03 09 4a ae 5c 03 03 03 06     .\J......J.\....
     e9e:	09 09 09 09 5c 13 13 53 ae f7 f7 ae 09 09 5c 53     ....\..S......\S
     eae:	4a 4a 4a 4a ae f7 09 53 4a 4a 4a 4a 4a 5c 5c 09     JJJJ...SJJJJJ\\.
     ebe:	06 06 03 4a 4a 4a ae 09 03 03 03 03 03 4a ae 09     ...JJJ.......J..
     ece:	03 03 03 03 03 4a 5c 09 03 03 06 03 5c 5c 4a 09     .....J\.....\\J.
     ede:	09 4a 4a 5c ae f7 ff f7 09 4a 5c 4a 4a 4a 4a 4a     .JJ\.....J\JJJJJ
     eee:	09 4a 5c 4a 4a 4a 4a 4a 13 09 09 09 5c 4a 4a 4a     .J\JJJJJ....\JJJ
     efe:	27 09 f7 ae 09 09 4a 4a 09 ae ff f7 09 5c 09 4a     '.....JJ.....\.J
     f0e:	09 5c ae 09 5c ae 09 09 53 09 09 0a 09 09 06 27     .\..\...S......'
     f1e:	ae ae 5c 5c 4a 4a 5c 09 4a 4a 4a 5c 5c 5c 5c 09     ..\\JJ\.JJJ\\\\.
     f2e:	4a 5c 5c ae f7 5c 4a 09 4a 5c 5c ae 4a 09 09 27     J\\..\J.J\\.J..'
     f3e:	4a 4a 5c 5c 09 f7 f7 09 4a 4a 4a 09 ae ff f7 09     JJ\\....JJJ.....
     f4e:	06 09 09 09 5c ae ae 09 37 27 06 0a 09 09 09 53     ....\...7'.....S
     f5e:	5c 13 5c 13 0f 1f 37 37 53 13 53 0f 0f 1f 37 37     \.\...77S.S...77
     f6e:	53 13 0f 13 0f 1f 1f 37 53 13 0a 0f 0f 1f 37 37     S......7S.....77
     f7e:	0a 0f 13 0f 0f 1f 1f 37 0a 13 53 0f 0f 0f 1f 37     .......7..S....7
     f8e:	0a 53 53 53 0f 0f 1f 37 0a 53 0f 53 0f 0f 1f 37     .SSS...7.S.S...7
     f9e:	37 1f 0f 0f 5c 0a 53 53 37 37 0f 53 0a 1b 13 53     7...\.SS77.S...S
     fae:	37 37 0f 13 0f 1b 0a 53 37 37 0f 0f 1b 53 0a 53     77.....S77...S.S
     fbe:	37 1f 0f 0a 0f 5c 53 0a 1f 1f 0f 0a 53 53 5c 53     7....\S.....SS\S
     fce:	37 1f 0f 0a 0f 13 0a 53 37 1f 0f 0a 0a 53 53 53     7......S7....SSS
     fde:	0a 13 53 53 0f 1f 1f 37 5c 0a 13 13 0f 1f 37 37     ..SS...7\.....77
     fee:	53 5c 0f 0a 0f 1f 37 37 53 0a 13 13 0f 1f 37 37     S\....77S.....77
     ffe:	53 0a 0a 13 0f 0f 1f 37 53 0f 0a 0a 13 0f 1f 37     S......7S......7
    100e:	53 13 0a 0a 0a 0f 1f 37 0a 0a 13 0a 0f 1f 1f 37     S......7.......7
    101e:	37 1f 0f 0a 53 53 53 53 37 1f 0f 0a 5c 13 0a 0a     7...SSSS7...\...
    102e:	37 0f 0f 53 53 5c 13 53 37 0f 13 53 53 53 5c 53     7..SS\.S7..SSS\S
    103e:	37 0f 0a 13 0f 53 53 53 37 0f 0f 0a 0a 13 0a 53     7....SSS7......S
    104e:	37 1f 0f 5c 5c 0a 0a 0a 37 1f 0f 53 5c 0a 5c 5c     7..\\...7..S\.\\
    105e:	5c 13 5c 13 0a 13 13 53 53 13 53 5c 0a 13 13 53     \.\....SS.S\...S
    106e:	53 13 53 13 0a 0a 13 13 53 13 0a 0f 1b 0a 0f 13     S.S.....S.......
    107e:	0f 0a 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 1f 1f 1f 0f     ................
    108e:	1f 1f 1f 1f 1f 37 1f 1f 37 37 1f 37 37 37 37 1f     .....7..77.7777.
    109e:	53 53 5c 53 5c 0a 53 53 53 53 53 53 0a 1b 13 53     SS\S\.SSSSSS...S
    10ae:	53 53 1b 13 0a 1b 0a 53 13 13 0f 13 1b 53 0a 53     SS.....S.....S.S
    10be:	0a 0f 13 0a 0f 5c 53 0f 0f 0f 0f 0f 0f 0f 0f 0f     .....\S.........
    10ce:	1f 1f 1f 1f 1f 1f 0f 0f 1f 1f 37 37 37 37 1f 1f     ..........7777..
    10de:	37 37 37 37 37 37 37 37 37 1f 1f 1f 37 37 37 1f     777777777...777.
    10ee:	1f 1f 1f 1f 1f 1f 1f 1f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    10fe:	0f 0a 0a 13 0f 0f 53 13 53 13 0f 0a 13 1b 1b 0f     ......S.S.......
    110e:	53 13 0a 0a 0a 1b 1b 13 0a 0a 13 0a 1b 0a 13 53     S..............S
    111e:	1f 37 37 37 37 37 37 1f 1f 1f 1f 1f 1f 1f 1f 0f     .777777.........
    112e:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 13 0f 0f 0f 5c 53     ..............\S
    113e:	0a 0a 0a 13 13 53 53 53 0a 5c 5c 0a 0a 13 0a 53     .....SSS.\\....S
    114e:	53 53 5c 5c 5c 0a 0a 0a 53 5c 13 53 5c 0a 5c 5c     SS\\\...S\.S\.\\
    115e:	5c 13 5c 0f 0f 1f 37 37 53 0f 53 5c 0f 1f 37 37     \.\...77S.S\..77
    116e:	53 13 53 0f 0f 1f 37 37 53 13 0f 0f 1f 1f 37 37     S.S...77S.....77
    117e:	0f 0f 0f 1f 1f 37 37 1f 0f 0f 1f 1f 37 37 1f 1f     .....77.....77..
    118e:	37 37 1f 1f 37 1f 1f 37 37 37 37 37 37 1f 37 37     77..7..777777.77
    119e:	37 37 1f 0f 0f 0a 53 53 37 37 1f 0f 0f 1b 0f 53     77....SS77.....S
    11ae:	37 37 37 1f 0f 1b 0a 0f 37 37 37 1f 0f 0f 0a 53     777.....777....S
    11be:	1f 37 37 37 1f 1f 0f 0f 1f 1f 37 37 37 1f 1f 1f     .777......777...
    11ce:	37 37 37 37 37 1f 1f 1f bf 37 37 37 37 37 37 37     77777....7777777
    11de:	37 37 37 37 1f 37 37 bf 37 37 37 37 1f 37 37 bf     7777.77.7777.77.
    11ee:	1f 37 1f 37 37 1f 37 37 0f 0f 1f 1f 1f 37 37 37     .7.77.77.....777
    11fe:	53 0f 0f 0f 1f 1f 37 37 53 13 0a 0f 1f 1f 1f 1f     S.....77S.......
    120e:	53 13 0a 0a 0f 1f 37 37 0a 0f 13 0a 0f 1f 37 37     S.....77......77
    121e:	bf bf 37 37 1f 37 37 37 bf bf 37 37 1f 37 37 37     ..77.777..77.777
    122e:	bf 37 37 37 1f 37 1f 1f 37 37 37 1f 1f 1f 1f 1f     .777.7..777.....
    123e:	37 37 1f 1f 1f 0f 0f 0f 37 37 1f 1f 0f 0f 0f 53     77......77.....S
    124e:	37 37 1f 0f 0f 0a 0a 0a 37 37 1f 0f 5c 0a 0f 5c     77......77..\..\
    125e:	5c 13 5c 13 0a 13 13 53 53 13 53 5c 0a 13 13 0f     \.\....SS.S\....
    126e:	53 13 53 13 0a 0a 13 13 53 13 0a 0a 1b 0a 0f 0f     S.S.....S.......
    127e:	0a 0a 13 53 53 0f 0f 1f 0a 13 53 5c 5c 53 0f 1f     ...SS.....S\\S..
    128e:	0a 53 53 53 53 5c 1f 1f 0a 53 53 0f 53 0f 1f 37     .SSSS\...SS.S..7
    129e:	53 53 5c 53 5c 0a 53 53 53 0f 53 53 0a 1b 13 53     SS\S\.SSS.SS...S
    12ae:	53 53 1b 13 0a 1b 0a 53 1f 0f 0f 13 1b 53 0a 53     SS.....S.....S.S
    12be:	1f 1f 0f 0f 0a 0f 53 0a 37 37 0f 0f 53 53 5c 53     ......S.77..SS\S
    12ce:	37 37 1f 0f 13 13 0a 53 37 37 1f 0f 0a 53 53 53     77.....S77...SSS
    12de:	0a 13 53 53 53 0f 1f 37 5c 0a 13 13 13 0f 1f 37     ..SSS..7\......7
    12ee:	53 5c 0a 0a 0a 0f 0f 1f 53 0a 13 13 0a 53 0f 1f     S\......S....S..
    12fe:	53 0a 0a 13 0f 53 0f 37 53 13 0a 0a 13 0f 0f 37     S....S.7S......7
    130e:	53 13 0a 0f 0a 0f 1f 37 0a 0a 13 0a 1b 0f 1f 1f     S......7........
    131e:	37 37 1f 0f 53 53 0f 53 37 37 0f 0f 0f 13 0a 0a     77..SS.S77......
    132e:	1f 37 0f 0f 0f 5c 13 53 37 37 0f 0f 53 53 5c 53     .7...\.S77..SS\S
    133e:	37 37 0f 0f 13 53 0f 53 37 37 1f 0f 0a 13 0a 53     77...S.S77.....S
    134e:	1f 37 1f 0f 5c 0f 0a 0a 37 37 1f 0f 5c 0a 5c 5c     .7..\...77..\.\\
    135e:	5c 13 0f 13 0f 1f 37 37 53 13 53 0f 0f 1f 37 37     \.....77S.S...77
    136e:	53 13 53 13 0f 1f 37 37 53 13 0f 0a 0f 1f 37 37     S.S...77S.....77
    137e:	0a 0a 13 53 0f 1f 1f 37 0a 13 53 5c 0f 0f 1f 37     ...S...7..S\...7
    138e:	0a 53 53 0f 0f 0f 1f 37 0a 53 53 53 0f 1f 1f 37     .SS....7.SSS...7
    139e:	1f 0f 5c 53 5c 0a 53 53 1f 0f 0f 53 0a 1b 13 53     ..\S\.SS...S...S
    13ae:	1f 0f 1b 13 0a 1b 0a 53 1f 0f 13 13 1b 53 0a 53     .......S.....S.S
    13be:	1f 0f 13 0f 0a 5c 53 0a 1f 0f 0f 0a 53 53 5c 53     .....\S.....SS\S
    13ce:	1f 0f 0a 0a 13 13 0a 53 1f 0f 13 0a 0a 53 53 53     .......S.....SSS
    13de:	0a 13 53 53 0f 1f 37 37 5c 0a 13 13 0f 0f 1f 37     ..SS..77\......7
    13ee:	53 5c 0f 0a 0a 0f 1f 1f 53 0a 13 13 0a 0f 0f 0f     S\......S.......
    13fe:	53 0a 0a 13 0a 53 53 13 53 13 0a 0a 13 1b 1b 0f     S....SS.S.......
    140e:	53 13 0a 0a 0a 1b 0f 13 0a 0a 13 0a 1b 0a 13 53     S..............S
    141e:	37 1f 0f 0a 53 53 53 53 1f 1f 0f 0a 0f 13 0a 0a     7...SSSS........
    142e:	1f 0f 0f 53 53 5c 13 53 0f 0f 13 53 53 53 5c 53     ...SS\.S...SSS\S
    143e:	0a 0a 0a 13 13 53 53 53 0a 5c 0f 0a 0a 13 0a 53     .....SSS.\.....S
    144e:	53 53 5c 5c 5c 0a 0a 0a 53 5c 13 53 5c 0a 5c 5c     SS\\\...S\.S\.\\
    145e:	5c 13 5c 13 0a 13 13 53 53 13 53 5c 0a 13 13 53     \.\....SS.S\...S
    146e:	53 13 53 13 0a 0a 13 13 53 13 0a 0a 1b 0a 0a 13     S.S.....S.......
    147e:	0a 0a 13 53 53 0f 0a 0a 0a 13 53 5c 5c 53 0f 0f     ...SS.....S\\S..
    148e:	0a 53 53 53 0f 0f 0f 1f 0a 53 53 53 0f 1f 1f 37     .SSS.....SSS...7
    149e:	53 53 5c 53 5c 0a 53 53 53 53 53 53 0a 1b 13 53     SS\S\.SSSSSS...S
    14ae:	53 53 1b 13 0a 1b 0a 53 0f 13 0f 13 1b 0f 0a 53     SS.....S.......S
    14be:	0f 0f 13 0a 0f 5c 0f 0a 0f 0f 0f 0f 0f 0f 0f 0f     .....\..........
    14ce:	1f 1f 1f 0f 0f 0f 1f 1f 37 37 37 1f 1f 1f 1f 1f     ........777.....
    14de:	0a 13 53 0f 0f 1f 37 37 5c 0a 13 13 0f 1f 1f 37     ..S...77\......7
    14ee:	53 5c 0a 0a 0f 0f 1f 1f 53 0a 13 0f 0a 0f 0f 0f     S\......S.......
    14fe:	53 0a 0a 13 0a 53 0f 13 53 13 0a 0a 13 1b 1b 1b     S....S..S.......
    150e:	53 13 0a 0a 0a 1b 1b 13 0a 0a 13 0a 1b 0a 13 53     S..............S
    151e:	37 37 37 37 37 37 37 37 37 37 37 1f 1f 1f 1f 1f     77777777777.....
    152e:	0f 1f 1f 0f 0f 0f 0f 0f 0f 0f 0f 53 53 0f 5c 0f     ...........SS.\.
    153e:	0f 0a 0a 13 13 53 0f 53 0a 5c 5c 0a 0a 13 0a 53     .....S.S.\\....S
    154e:	53 53 5c 5c 5c 0a 0a 0a 53 5c 13 53 5c 0a 5c 5c     SS\\\...S\.S\.\\
    155e:	5c 13 5c 13 0a 13 13 53 53 13 53 5c 0a 13 13 53     \.\....SS.S\...S
    156e:	53 13 53 13 0a 0f 13 13 0f 13 0a 0f 1b 0a 0a 13     S.S.............
    157e:	0a 0a 0f 0f 0f 0f 0f 0f 0f 0f 0f 1f 1f 1f 1f 1f     ................
    158e:	0f 1f 1f 1f 1f 37 37 37 1f 37 37 37 37 37 37 37     .....777.7777777
    159e:	53 53 5c 53 5c 0a 53 53 53 53 53 53 0a 1b 13 53     SS\S\.SSSSSS...S
    15ae:	53 53 1b 13 0a 1b 0a 53 13 0f 13 13 1b 53 0a 53     SS.....S.....S.S
    15be:	0f 0f 13 0a 0a 5c 53 0a 0f 0f 0f 0a 53 53 5c 53     .....\S.....SS\S
    15ce:	37 1f 1f 0f 13 13 0a 53 37 37 1f 0f 0a 53 53 53     7......S77...SSS
    15de:	37 37 37 37 37 37 37 1f 1f 1f 1f 0f 0f 1f 1f 0f     7777777.........
    15ee:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 13 0f 53 53 5c     .............SS\
    15fe:	53 0a 0f 13 0a 53 0f 13 53 13 0a 0a 13 1b 1b 1b     S....S..S.......
    160e:	53 13 0a 0a 0a 1b 1b 13 0a 0a 13 0a 1b 0a 13 53     S..............S
    161e:	1f 1f 0f 0f 53 53 53 53 0f 0f 0f 0a 5c 13 0a 0a     ....SSSS....\...
    162e:	0f 0a 53 53 53 5c 13 53 0a 13 13 53 53 53 5c 53     ..SSS\.S...SSS\S
    163e:	0a 0a 0a 13 13 53 53 53 0a 5c 5c 0a 0a 13 0a 53     .....SSS.\\....S
    164e:	53 53 5c 5c 5c 0a 0a 0a 53 5c 13 53 5c 0a 5c 5c     SS\\\...S\.S\.\\
    165e:	5c 13 5c 0f 1f 1f 37 bf 53 13 0f 0f 0f 1f 37 37     \.\...7.S.....77
    166e:	53 0f 53 0f 0f 1f 1f 37 53 13 0f 0f 0f 1f 37 bf     S.S....7S.....7.
    167e:	0f 0a 0f 0f 0f 1f 37 bf 0a 13 0f 0f 0f 1f 37 bf     ......7.......7.
    168e:	0a 53 53 0f 0f 37 37 bf 0a 0f 53 0f 1f 37 37 37     .SS..77...S..777
    169e:	bf 37 1f 1f 0f 0f 53 53 37 37 37 1f 0f 1b 13 53     .7....SS777....S
    16ae:	bf 37 37 1f 0f 1b 0f 53 bf 37 37 1f 0f 0f 0a 53     .77....S.77....S
    16be:	bf 37 1f 1f 0f 5c 0f 0a 37 1f 1f 1f 0f 53 5c 53     .7...\..7....S\S
    16ce:	37 37 1f 1f 0f 13 0f 53 bf 37 37 1f 0f 53 53 53     77.....S.77..SSS
    16de:	0a 13 53 0f 0f 1f 1f bf 5c 0a 13 0f 0f 1f 37 bf     ..S.....\.....7.
    16ee:	53 0f 0a 0f 0f 1f 37 bf 53 0a 13 13 0f 37 37 bf     S.....7.S....77.
    16fe:	53 0a 0a 0f 0f 37 37 bf 53 13 0a 0a 0f 37 37 bf     S....77.S....77.
    170e:	53 13 0a 0a 0f 1f 37 37 0a 0a 13 0f 0f 1f 37 1f     S.....77......7.
    171e:	bf 37 37 1f 0f 53 53 53 bf 37 37 1f 0f 13 0a 0a     .77..SSS.77.....
    172e:	bf 37 1f 1f 0f 5c 13 53 bf 37 1f 0f 53 53 5c 53     .7...\.S.7..SS\S
    173e:	bf 37 1f 0f 13 53 53 53 37 37 1f 1f 0a 13 0a 53     .7...SSS77.....S
    174e:	37 37 37 1f 0f 0a 0a 0a bf 37 37 1f 0f 0a 5c 5c     777......77...\\
    175e:	5c 13 5c 13 0a 13 13 53 53 13 53 0f 0a 13 0f 53     \.\....SS.S....S
    176e:	0f 13 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 1f 1f 0f 0f     ................
    177e:	1f 1f 0f 0f 1f 1f 1f 1f 37 1f 1f 1f 1f 37 37 1f     ........7....77.
    178e:	37 37 37 37 37 37 37 37 bf bf 37 37 bf bf bf bf     77777777..77....
    179e:	53 53 5c 53 5c 0a 53 53 53 53 53 53 0a 1b 13 53     SS\S\.SSSSSS...S
    17ae:	53 53 0f 13 0a 1b 0f 53 13 0f 13 13 0f 53 0a 0f     SS.....S.....S..
    17be:	0f 0f 0f 0f 0f 0f 0f 1f 1f 1f 1f 1f 1f 37 37 37     .............777
    17ce:	37 1f 1f 37 37 37 bf bf 37 37 37 bf bf bf bf bf     7..777..777.....
    17de:	bf 37 37 bf bf bf bf 37 37 1f 37 37 37 37 37 37     .77....77.777777
    17ee:	1f 1f 1f 37 37 37 37 37 1f 1f 1f 1f 1f 0f 0f 0f     ...77777........
    17fe:	0f 0f 0f 0f 0f 0f 0f 0f 0f 13 0a 0f 0f 0f 1b 1b     ................
    180e:	53 13 0f 0a 0a 1b 1b 0f 0a 0a 13 0a 1b 0a 13 53     S..............S
    181e:	37 37 37 bf bf bf bf 37 37 1f 37 37 bf bf 37 37     777....77.77..77
    182e:	1f 1f 1f 37 37 37 37 37 0f 1f 1f 1f 1f 1f 1f 0f     ...77777........
    183e:	0f 0f 0a 13 0f 0f 0f 53 0a 5c 5c 0a 0a 13 0a 53     .......S.\\....S
    184e:	53 53 5c 5c 0f 0a 0a 0a 53 5c 13 53 5c 0a 5c 5c     SS\\....S\.S\.\\
    185e:	5c 13 5c 0f 0f 1f 37 bf 53 0f 0f 0f 1f 1f 37 bf     \.\...7.S.....7.
    186e:	53 0f 0f 1f 1f 1f 37 37 0f 0f 1f 1f 37 37 37 37     S.....77....7777
    187e:	0f 1f 1f 1f 37 37 bf bf 37 37 37 1f 37 37 37 bf     ....77..777.777.
    188e:	37 37 37 37 37 37 bf bf bf bf bf 37 37 bf bf 37     777777.....77..7
    189e:	bf bf 37 1f 0f 0f 53 53 bf bf 37 1f 0f 0f 0f 53     ..7...SS..7....S
    18ae:	37 37 37 1f 0f 0f 0f 0f 37 37 37 1f 1f 0f 0f 0f     777.....777.....
    18be:	bf bf 37 37 1f 1f 1f 1f bf bf 37 37 37 1f 1f 37     ..77......777..7
    18ce:	bf bf bf 37 37 1f 37 37 bf bf bf 37 37 37 37 bf     ...77.77...7777.
    18de:	bf bf 37 37 37 bf bf 37 37 37 37 37 37 bf bf 37     ..777..777777..7
    18ee:	1f 1f 37 37 37 37 bf bf 1f 1f 1f 1f 37 37 37 bf     ..7777......777.
    18fe:	0f 0f 1f 1f 37 37 37 37 53 0f 0f 1f 1f 37 37 37     ....7777S....777
    190e:	53 13 0f 0f 1f 37 37 bf 0f 0a 13 0f 1f 1f 37 bf     S....77.......7.
    191e:	37 bf bf 37 37 37 37 bf 37 bf bf 37 bf 37 37 37     7..7777.7..7.777
    192e:	bf bf bf 37 bf 37 37 1f bf bf 37 bf 37 37 1f 1f     ...7.77...7.77..
    193e:	37 37 37 37 37 1f 1f 0f 37 37 37 37 1f 1f 0f 0f     77777...7777....
    194e:	bf 37 1f 1f 1f 0f 0f 0a bf 37 1f 1f 0f 0f 5c 0f     .7.......7....\.
    195e:	5c 13 5c 13 0a 13 13 53 53 13 53 5c 0a 13 13 53     \.\....SS.S\...S
    196e:	53 13 53 13 0a 0a 0f 13 53 13 0a 0a 1b 0a 0a 13     S.S.....S.......
    197e:	0a 0a 13 53 53 0f 0f 1f 0a 13 53 0f 5c 0f 1f 1f     ...SS.....S.\...
    198e:	0a 53 53 53 0f 0f 1f 37 0a 53 53 53 0f 1f 1f 37     .SSS...7.SSS...7
    199e:	53 53 5c 53 5c 0a 53 53 53 53 53 53 0a 1b 13 53     SS\S\.SSSSSS...S
    19ae:	53 0f 1b 13 0a 1b 0a 53 13 13 13 13 1b 53 0a 53     S......S.....S.S
    19be:	1f 0f 0f 0a 0a 5c 53 0a 1f 1f 0f 0f 53 53 0f 53     .....\S.....SS.S
    19ce:	37 37 1f 0f 0f 13 0a 53 bf 37 1f 1f 0f 53 53 53     77.....S.7...SSS
    19de:	0a 13 0f 53 0f 0f 1f 37 5c 0a 13 13 0f 0f 1f 37     ...S...7\......7
    19ee:	53 5c 0a 0a 0f 0f 1f 1f 53 0a 13 13 0a 0f 1f 1f     S\......S.......
    19fe:	53 0a 0a 0f 0a 0f 1f 37 53 13 0a 0a 0f 0f 1f 37     S......7S......7
    1a0e:	53 13 0f 0a 0f 0f 1f 37 0a 0a 13 0a 0f 0f 1f 1f     S......7........
    1a1e:	bf bf 1f 1f 0f 53 53 0f 37 37 1f 1f 0f 0f 0a 0a     .....SS.77......
    1a2e:	1f bf 37 1f 0f 0f 13 53 37 bf 37 1f 0f 53 5c 53     ..7....S7.7..S\S
    1a3e:	bf bf 37 1f 0f 53 53 0f bf 37 1f 1f 0f 13 0a 53     ..7..SS..7.....S
    1a4e:	1f 37 1f 0f 0f 0a 0f 0a 37 37 37 0f 0f 0a 5c 5c     .7......777...\\
    1a5e:	5c 0f 5c 0f 0f 1f 1f bf 53 13 0f 0f 1f 1f 37 bf     \.\.....S.....7.
    1a6e:	53 13 53 0f 1f 37 37 bf 53 0f 0a 0f 1f 37 37 bf     S.S..77.S....77.
    1a7e:	0a 0a 13 0f 1f 37 37 bf 0a 13 53 0f 1f 1f 37 bf     .....77...S...7.
    1a8e:	0a 53 0f 0f 1f 1f 1f 37 0a 53 53 0f 0f 1f 1f 37     .S.....7.SS....7
    1a9e:	37 37 1f 0f 5c 0a 53 53 37 37 1f 0f 0f 1b 13 53     77..\.SS77.....S
    1aae:	37 1f 1f 0f 0a 1b 0a 53 37 1f 1f 0f 1b 53 0a 53     7......S7....S.S
    1abe:	1f 1f 1f 0f 0a 0f 53 0a 37 1f 1f 0f 0f 53 5c 53     ......S.7....S\S
    1ace:	37 37 1f 0f 13 13 0a 53 37 37 1f 0f 0a 53 53 53     77.....S77...SSS
    1ade:	0a 13 53 0f 0f 1f 37 37 5c 0a 13 13 0f 1f 1f 37     ..S...77\......7
    1aee:	53 0f 0a 0a 0f 0f 1f 1f 53 0a 13 13 0a 0f 0f 0f     S.......S.......
    1afe:	53 0a 0a 13 0f 53 53 13 53 13 0a 0a 13 1b 1b 0f     S....SS.S.......
    1b0e:	53 13 0a 0a 0a 1b 0f 13 0a 0a 13 0a 1b 0a 13 53     S..............S
    1b1e:	bf 37 1f 0f 0f 53 53 53 37 1f 1f 0f 0f 13 0f 0a     .7...SSS7.......
    1b2e:	1f 1f 0f 0f 53 5c 13 53 0f 0f 0f 53 0f 53 5c 53     ....S\.S...S.S\S
    1b3e:	0a 0a 0a 13 13 53 53 53 0a 5c 0f 0a 0a 13 0a 53     .....SSS.\.....S
    1b4e:	53 53 5c 5c 5c 0a 0a 0a 53 5c 13 53 5c 0a 5c 5c     SS\\\...S\.S\.\\
    1b5e:	5c 13 5c 13 0a 13 13 53 53 13 53 5c 0a 13 13 53     \.\....SS.S\...S
    1b6e:	53 13 53 13 0a 0a 13 13 53 13 0a 0a 1b 0a 0f 13     S.S.....S.......
    1b7e:	0a 0a 13 53 53 0a 0f 0f 0a 13 53 0f 5c 0f 0f 0f     ...SS.....S.\...
    1b8e:	0a 53 53 53 0f 0f 1f 1f 0a 53 53 53 0f 1f 1f 37     .SSS.....SSS...7
    1b9e:	53 53 5c 53 5c 0a 53 53 53 53 53 53 0a 1b 13 53     SS\S\.SSSSSS...S
    1bae:	0f 53 1b 13 0a 1b 0a 53 13 13 0f 0f 1b 0f 0a 0f     .S.....S........
    1bbe:	0f 0f 0f 0f 0f 0f 0f 0f 1f 1f 1f 1f 1f 1f 1f 1f     ................
    1bce:	37 37 37 1f 1f 37 37 37 37 37 37 bf bf bf 37 37     777..777777...77
    1bde:	0a 13 53 53 0f 1f 37 37 5c 0a 13 0f 0f 1f 37 37     ..SS..77\.....77
    1bee:	53 5c 0a 0a 0f 1f 37 37 53 0a 13 13 0f 0f 1f 37     S\....77S......7
    1bfe:	53 0a 0a 0f 0a 0f 0f 1f 53 13 0a 0a 13 1b 0f 0f     S.......S.......
    1c0e:	53 13 0a 0a 0a 0f 1b 13 0a 0a 13 0a 1b 0a 13 53     S..............S
    1c1e:	bf bf bf 37 37 bf bf 37 37 bf bf 37 37 37 37 37     ...77..77..77777
    1c2e:	37 37 bf 37 37 1f 1f 1f 37 1f 1f 1f 1f 0f 0f 0f     77.77...7.......
    1c3e:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 5c 0a 0f 13 0f 53     ..........\....S
    1c4e:	53 53 0f 5c 5c 0f 0a 0a 53 5c 13 53 5c 0a 5c 5c     SS.\\...S\.S\.\\
    1c5e:	5c 13 5c 13 0a 13 13 53 0f 13 53 5c 0a 0f 13 53     \.\....S..S\...S
    1c6e:	53 13 53 0f 0a 0a 13 13 0f 0f 0f 0f 0f 0f 0f 0f     S.S.............
    1c7e:	0f 1f 1f 1f 1f 1f 0f 0f 1f 37 37 37 37 1f 1f 1f     .........7777...
    1c8e:	37 37 37 37 37 37 37 37 bf 37 37 bf bf bf bf 37     77777777.77....7
    1c9e:	53 53 5c 53 5c 0a 53 53 53 0f 53 53 0a 1b 13 53     SS\S\.SSS.SS...S
    1cae:	0f 53 1b 0f 0a 1b 0a 53 0f 0f 0f 13 1b 53 0a 53     .S.....S.....S.S
    1cbe:	1f 0f 0f 0f 0a 5c 53 0a 37 1f 1f 0f 53 53 5c 53     .....\S.7...SS\S
    1cce:	37 37 1f 0f 13 13 0a 53 37 37 1f 0f 0a 53 53 53     77.....S77...SSS
    1cde:	bf 1f 37 37 37 37 37 37 37 1f 37 37 37 37 1f 1f     ..7777777.7777..
    1cee:	1f 1f 1f 1f 1f 1f 1f 0f 0f 1f 0f 0f 0f 0f 0f 0f     ................
    1cfe:	0f 0f 0f 13 0f 53 53 13 53 13 0f 0a 13 1b 0f 1b     .....SS.S.......
    1d0e:	53 13 0a 0a 0a 1b 1b 13 0a 0a 13 0a 1b 0a 13 53     S..............S
    1d1e:	1f 1f 0f 0f 53 53 53 53 1f 0f 0f 0a 5c 13 0a 0a     ....SSSS....\...
    1d2e:	0f 0f 53 0f 53 5c 13 53 0f 13 13 53 53 53 5c 53     ..S.S\.S...SSS\S
    1d3e:	0f 0a 0a 13 13 53 53 53 0a 5c 5c 0a 0a 13 0a 53     .....SSS.\\....S
    1d4e:	53 53 5c 5c 5c 0a 0a 0a 53 5c 13 53 5c 0a 5c 5c     SS\\\...S\.S\.\\
    1d5e:	5c 13 0f 1f 1f 1f 37 bf 53 13 0f 1f 1f 37 37 ff     \.....7.S....77.
    1d6e:	53 13 0f 1f 37 bf bf ff 53 13 0f 1f 37 bf ff ff     S...7...S...7...
    1d7e:	0a 0a 0f 1f 37 bf bf bf 0f 13 0f 1f 37 bf bf bf     ....7.......7...
    1d8e:	0a 53 0f 1f 37 37 1f 37 0a 53 53 0f 1f 1f 37 37     .S..77.7.SS...77
    1d9e:	ff ff bf 37 1f 0f 0f 53 ff ff bf 37 1f 0f 0f 53     ...7...S...7...S
    1dae:	ff ff bf 37 0f 0f 0f 53 ff ff 37 37 1f 0f 0f 53     ...7...S..77...S
    1dbe:	bf 37 37 1f 1f 0f 53 0a 37 37 37 1f 1f 0f 5c 0f     .77...S.777...\.
    1dce:	bf bf bf 37 1f 0f 0a 53 bf ff bf 37 1f 0f 53 53     ...7...S...7..SS
    1dde:	0a 13 53 0f 0f 37 37 bf 5c 0a 0f 0f 0f 37 bf bf     ..S..77.\....7..
    1dee:	53 5c 0f 0f 1f bf ff ff 53 0a 13 0f 1f bf ff ff     S\......S.......
    1dfe:	53 0a 0f 0f 1f bf bf bf 53 13 0a 0f 1f 37 37 37     S.......S....777
    1e0e:	53 0f 0a 0f 1f 37 bf bf 0a 0a 13 0f 1f 37 37 bf     S....7.......77.
    1e1e:	ff ff bf 37 0f 53 53 53 ff ff bf 37 0f 0f 0a 0a     ...7.SSS...7....
    1e2e:	ff bf bf 37 0f 0f 13 53 ff bf 37 37 0f 53 5c 53     ...7...S..77.S\S
    1e3e:	bf 37 37 1f 0f 53 53 53 37 37 1f 1f 0f 0f 0a 53     .77..SSS77.....S
    1e4e:	bf 37 37 37 0f 0a 0a 0a bf bf 37 37 0f 0a 5c 5c     .777......77..\\
    1e5e:	5c 0f 5c 13 0f 13 13 53 53 0f 0f 0f 0a 13 0f 53     \.\....SS......S
    1e6e:	0f 0f 1f 1f 0f 0f 0f 0f 0f 0f 1f 1f 1f 1f 1f 1f     ................
    1e7e:	1f 1f 37 37 37 37 1f 1f 37 bf bf bf bf bf 37 37     ..7777..7.....77
    1e8e:	bf bf bf ff ff ff bf 37 ff ff ff ff ff ff ff ff     .......7........
    1e9e:	53 53 5c 53 5c 0a 53 53 53 53 53 53 0a 0f 13 53     SS\S\.SSSSSS...S
    1eae:	0f 53 0f 0f 0f 1b 0a 0f 0f 0f 0f 0f 0f 0f 0f 0f     .S..............
    1ebe:	1f 1f 1f 1f 1f 1f 1f 1f 1f 37 37 37 bf bf bf bf     .........777....
    1ece:	37 bf bf ff ff ff bf bf ff ff ff ff ff ff ff bf     7...............
    1ede:	ff ff ff ff ff ff ff bf bf bf bf ff ff ff ff 37     ...............7
    1eee:	37 37 bf bf bf bf 37 37 37 1f 37 37 37 37 1f 1f     77....777.7777..
    1efe:	1f 1f 1f 1f 1f 1f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    1f0e:	0f 0f 0a 0f 0a 0f 0f 13 0a 0f 13 0a 1b 0a 13 53     ...............S
    1f1e:	ff ff ff ff ff ff ff bf bf bf ff ff ff bf bf bf     ................
    1f2e:	37 bf bf bf bf bf bf 37 37 37 37 37 37 37 37 1f     7......77777777.
    1f3e:	0f 0f 0f 0f 0f 0f 0f 0f 0a 5c 0f 0a 0a 13 0f 53     .........\.....S
    1f4e:	0f 53 5c 5c 0f 0a 0a 0f 53 5c 13 53 5c 0a 5c 5c     .S\\....S\.S\.\\
    1f5e:	5c 13 0f 1f 37 bf bf bf 53 0f 0f 1f 37 bf bf bf     \...7...S...7...
    1f6e:	0f 0f 1f 37 37 bf bf 37 1f 1f 37 37 bf bf bf bf     ...77..7..77....
    1f7e:	1f 37 37 bf bf ff ff ff 1f 37 37 bf ff ff ff ff     .77......77.....
    1f8e:	37 bf 37 bf ff ff ff ff bf ff bf bf ff bf ff ff     7.7.............
    1f9e:	bf bf 37 37 1f 0f 0f 53 bf 37 37 37 1f 0f 0f 0f     ..77...S.777....
    1fae:	37 37 37 37 1f 1f 0f 0f bf bf bf 37 37 1f 1f 1f     7777.......77...
    1fbe:	ff bf bf bf 37 37 37 1f ff ff bf bf bf 37 37 37     ....777......777
    1fce:	ff ff ff ff bf bf 37 bf ff ff ff ff bf bf 37 bf     ......7.......7.
    1fde:	ff ff bf bf ff bf bf ff ff bf bf bf bf ff bf bf     ................
    1fee:	bf bf bf 37 bf ff ff ff 37 37 37 37 bf bf bf ff     ...7....7777....
    1ffe:	1f 37 37 37 37 bf bf bf 0f 0f 1f 37 37 37 37 bf     .7777......7777.
    200e:	53 0f 0f 1f 37 37 37 37 0a 0a 0f 1f 1f 1f 1f bf     S...7777........
    201e:	ff ff ff ff bf bf bf ff bf ff ff ff bf bf bf bf     ................
    202e:	ff ff bf bf bf bf bf bf ff ff bf bf 37 37 37 37     ............7777
    203e:	bf bf bf 37 37 1f 1f 1f bf bf 37 37 37 1f 0f 0f     ...77.....777...
    204e:	37 bf bf 37 37 1f 0f 0f bf ff bf 37 37 1f 0f 5c     7..77......77..\
    205e:	5c 0f 5c 13 0a 13 13 53 53 13 53 0f 0a 13 0f 53     \.\....SS.S....S
    206e:	53 13 53 13 0f 0f 0f 0f 53 13 0f 0f 0f 1f 1f 37     S.S.....S......7
    207e:	0a 0a 13 0f 1f 1f 37 37 0a 0f 53 0f 1f 37 37 bf     ......77..S..77.
    208e:	0a 53 53 0f 1f 37 bf ff 0a 53 0f 0f 1f 37 ff ff     .SS..7...S...7..
    209e:	53 53 5c 53 5c 0f 53 53 53 53 0f 53 0a 1b 13 53     SS\S\.SSSS.S...S
    20ae:	0f 0f 0f 13 0f 1b 0a 0f 1f 37 1f 0f 1b 53 0a 53     .........7...S.S
    20be:	37 37 37 0f 0f 5c 0f 0a bf bf 37 1f 0f 0f 5c 53     777..\....7...\S
    20ce:	ff bf 37 1f 0f 0f 0a 53 ff ff 37 37 1f 0f 0f 53     ..7....S..77...S
    20de:	0a 13 0f 0f 0f 1f bf ff 5c 0a 13 0f 1f 37 bf ff     ........\....7..
    20ee:	53 5c 0f 0f 1f 37 37 bf 53 0a 0f 0f 1f 1f 1f 37     S\...77.S......7
    20fe:	53 0a 0a 0f 1f 1f 37 ff 53 13 0a 0f 1f 37 bf ff     S.....7.S....7..
    210e:	53 13 0f 0f 1f 37 bf ff 0a 0a 13 0f 1f 37 bf bf     S....7.......7..
    211e:	ff ff bf 37 1f 0f 53 53 ff ff bf 37 1f 0f 0f 0a     ...7..SS...7....
    212e:	bf bf bf 37 1f 0f 0f 53 bf bf bf 37 1f 0f 5c 53     ...7...S...7..\S
    213e:	ff ff bf 37 1f 0f 53 0f ff ff bf 1f 1f 0f 0a 53     ...7..S........S
    214e:	ff bf 37 1f 1f 0f 0a 0a 37 37 1f 1f 1f 0f 5c 0f     ..7.....77....\.
    215e:	5c 13 0f 1f 1f 1f 37 ff 53 0f 0f 1f 1f 37 bf ff     \.....7.S....7..
    216e:	53 13 0f 1f 37 37 bf ff 53 13 0f 1f 37 37 bf ff     S...77..S...77..
    217e:	0a 0a 0f 1f 1f 37 37 bf 0a 13 0f 0f 1f 37 37 37     .....77......777
    218e:	0a 53 0f 0f 1f 1f 1f 1f 0a 53 53 0f 1f 1f 37 37     .S.......SS...77
    219e:	ff bf 37 1f 0f 0f 53 53 ff ff 37 1f 0f 1b 13 53     ..7...SS..7....S
    21ae:	ff ff 37 1f 0f 1b 0a 53 ff bf 1f 1f 0f 53 0a 53     ..7....S.....S.S
    21be:	bf bf 1f 0f 0f 5c 53 0a bf bf 1f 0f 0f 53 5c 53     .....\S......S\S
    21ce:	ff bf 37 1f 0f 13 0a 53 ff 37 37 1f 0f 53 53 53     ..7....S.77..SSS
    21de:	0a 13 53 0f 1f 37 bf ff 5c 0f 13 0f 1f 37 bf ff     ..S..7..\....7..
    21ee:	53 5c 0a 0f 0f 1f 37 bf 53 0a 13 13 0f 1f 1f 37     S\....7.S......7
    21fe:	53 0a 0f 13 0a 0f 0f 1f 53 13 0a 0a 13 1b 0f 0f     S.......S.......
    220e:	53 13 0a 0f 0a 1b 1b 13 0a 0a 13 0a 1b 0a 13 53     S..............S
    221e:	ff bf 37 1f 0f 0f 53 0f bf bf 37 1f 0f 13 0a 0a     ..7...S...7.....
    222e:	bf 37 37 1f 0f 5c 13 53 37 37 1f 0f 0f 0f 5c 53     .77..\.S77....\S
    223e:	1f 1f 1f 0f 13 53 53 53 0f 0f 0f 0a 0f 0f 0a 53     .....SSS.......S
    224e:	53 53 5c 5c 5c 0a 0a 0a 53 0f 13 53 5c 0a 5c 5c     SS\\\...S..S\.\\
    225e:	5c 13 5c 13 0f 13 13 53 53 13 53 5c 0a 13 13 0f     \.\....SS.S\....
    226e:	53 13 53 13 0f 0a 0f 0f 53 13 0f 0a 0f 0f 0f 0f     S.S.....S.......
    227e:	0a 0a 13 0f 0f 1f 1f 37 0f 13 0f 1f 1f 37 37 bf     .......7.....77.
    228e:	0a 0f 0f 1f 37 37 bf ff 0a 0f 0f 1f 37 bf ff ff     ....77......7...
    229e:	53 53 5c 53 5c 0a 53 53 53 53 53 0f 0a 1b 13 0f     SS\S\.SSSSS.....
    22ae:	53 0f 1b 13 0f 1b 0f 53 0f 0f 0f 0f 0f 0f 0f 0f     S......S........
    22be:	0f 1f 1f 1f 1f 1f 1f 1f 37 37 37 1f 37 37 37 37     ........777.7777
    22ce:	bf 37 bf bf bf bf bf 37 ff bf ff ff ff ff bf bf     .7.....7........
    22de:	0f 0f 0f 1f 37 bf ff ff 5c 0f 0f 1f 37 37 bf bf     ....7...\...77..
    22ee:	53 0f 0f 1f 1f 37 37 1f 53 0a 13 0f 1f 1f 1f 1f     S....77.S.......
    22fe:	53 0a 0f 13 0f 0f 0f 0f 53 13 0a 0a 0f 1b 1b 0f     S.......S.......
    230e:	53 13 0a 0a 0a 0f 1b 13 0a 0a 13 0a 1b 0a 13 53     S..............S
    231e:	bf bf bf ff ff ff bf bf bf 37 bf bf bf bf 37 bf     .........7....7.
    232e:	37 37 37 37 37 37 37 37 37 37 37 37 1f 1f 1f 37     777777777777...7
    233e:	1f 1f 1f 0f 0f 0f 1f 1f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    234e:	53 53 5c 5c 5c 0a 0f 0a 53 0f 13 53 5c 0f 5c 5c     SS\\\...S..S\.\\
    235e:	5c 13 5c 13 0a 13 13 53 53 13 0f 5c 0a 0f 13 53     \.\....SS..\...S
    236e:	0f 0f 0f 0f 0f 0f 0f 0f 1f 1f 1f 1f 1f 1f 1f 0f     ................
    237e:	37 37 1f 1f 1f 37 37 37 37 37 37 bf bf ff bf 37     77...777777....7
    238e:	37 bf bf bf bf ff ff 37 bf bf ff ff bf ff ff bf     7......7........
    239e:	53 53 5c 53 5c 0a 53 53 53 0f 53 0f 0a 1b 13 53     SS\S\.SSS.S....S
    23ae:	0f 0f 0f 13 0a 1b 0a 53 1f 1f 0f 0f 1b 53 0a 53     .......S.....S.S
    23be:	37 1f 1f 0f 0f 5c 53 0a 37 37 37 1f 0f 53 0f 53     7....\S.777..S.S
    23ce:	bf bf 37 37 1f 0f 0a 53 ff bf bf 37 1f 0f 53 53     ..77...S...7..SS
    23de:	37 bf ff ff bf bf bf bf 37 bf ff ff bf 37 37 37     7.......7....777
    23ee:	37 37 37 37 37 1f 1f 37 1f 1f 1f 1f 0f 0f 1f 1f     77777..7........
    23fe:	0f 0f 0f 0f 0f 0f 0f 0f 53 0f 0a 0f 13 0f 1b 1b     ........S.......
    240e:	53 13 0a 0a 0a 1b 0f 13 0a 0a 13 0a 1b 0a 13 53     S..............S
    241e:	ff ff bf 37 1f 0f 53 53 bf bf 37 37 1f 0f 0a 0a     ...7..SS..77....
    242e:	37 37 37 1f 1f 0f 13 53 37 1f 1f 1f 0f 53 5c 53     777....S7....S\S
    243e:	0f 0f 0f 0f 0f 53 0f 53 0f 0f 0f 0a 0a 13 0a 53     .....S.S.......S
    244e:	53 0f 5c 5c 5c 0a 0a 0a 53 5c 0f 53 5c 0a 5c 5c     S.\\\...S\.S\.\\
    245e:	5c 13 5c 13 0a 13 13 53 53 13 53 5c 0a 13 13 53     \.\....SS.S\...S
    246e:	53 13 53 13 0a 0a 01 01 53 13 0a 0a 01 01 49 49     S.S.....S.....II
    247e:	0a 0a 13 01 92 92 92 01 0a 13 01 92 a3 ed 01 a3     ................
    248e:	0a 53 01 92 ed ff 01 ed 0a 01 49 92 ed a3 01 a3     .S........I.....
    249e:	53 53 5c 53 5c 1e 53 53 53 53 53 53 1e 2f 1e 53     SS\S\.SSSSSS./.S
    24ae:	01 53 1b 13 1e 2f 1e 53 01 01 01 01 66 1e 0a 53     .S.../.S....f..S
    24be:	a3 a3 01 66 5d 01 53 0a ff 01 66 5d 01 53 5c 53     ...f].S...f].S\S
    24ce:	ed ed 01 01 01 13 0a 53 ed a3 a3 92 01 01 53 53     .......S......SS
    24de:	0a 01 49 92 92 92 92 01 5c 01 49 49 92 92 92 49     ..I.....\.II...I
    24ee:	53 01 49 49 49 49 49 49 53 0a 01 49 49 49 49 49     S.IIIIIIS..IIIII
    24fe:	53 0a 01 49 49 49 49 49 53 13 0a 01 49 49 49 49     S..IIIIIS...IIII
    250e:	53 13 0a 0a 01 01 49 49 0a 0a 13 0a 1b 0a 01 01     S.....II........
    251e:	a3 a3 92 01 49 01 53 53 01 01 01 49 49 01 0a 0a     ....I.SS...II...
    252e:	49 49 49 49 49 01 13 53 49 49 49 49 01 53 5c 53     IIIII..SIIII.S\S
    253e:	49 49 49 49 01 53 53 53 49 49 49 01 0a 13 0a 53     IIII.SSSIII....S
    254e:	49 01 01 5c 5c 0a 0a 0a 01 5c 13 53 5c 0a 5c 5c     I..\\....\.S\.\\
    255e:	5c 13 5c 13 0a 13 13 53 53 13 53 5c 0a 13 01 01     \.\....SS.S\....
    256e:	53 13 53 13 01 01 49 49 53 13 0a 01 49 92 92 49     S.S...IIS...I..I
    257e:	0a 0a 01 49 a3 ed a3 01 0a 13 01 a3 ff ff ed 01     ...I............
    258e:	0a 01 92 a3 ff ff a3 01 0a 01 92 92 a3 a3 92 92     ................
    259e:	53 53 5c 53 5c 0a 0e 53 01 01 53 53 0a 0e 1e 0e     SS\S\..S..SS....
    25ae:	49 01 01 01 01 0e 2f 0e 01 a3 a3 01 66 5d 0e 53     I...../.....f].S
    25be:	a3 ff 01 66 5d 01 53 0a ed ed ed 01 01 01 5c 53     ...f].S.......\S
    25ce:	a3 ed a3 a3 92 01 01 53 01 a3 a3 92 01 49 01 53     .......S.....I.S
    25de:	0a 01 49 92 92 92 92 92 5c 01 49 49 92 92 92 49     ..I.....\.II...I
    25ee:	53 01 49 49 49 49 49 49 53 0a 01 49 49 49 49 49     S.IIIIIIS..IIIII
    25fe:	53 0a 01 49 49 49 49 49 53 13 0a 01 49 49 49 49     S..IIIIIS...IIII
    260e:	53 13 0a 0a 01 01 49 49 0a 0a 13 0a 1b 0a 01 01     S.....II........
    261e:	49 01 01 01 49 49 01 53 49 49 49 49 49 49 01 0a     I...II.SIIIIII..
    262e:	49 49 49 49 49 49 01 53 49 49 49 49 49 01 5c 53     IIIIII.SIIIII.\S
    263e:	49 49 49 49 49 01 53 53 49 49 49 49 01 13 0a 53     IIIII.SSIIII...S
    264e:	49 49 01 01 5c 0a 0a 0a 01 01 13 53 5c 0a 5c 5c     II..\......S\.\\
    265e:	5c 13 5c 13 0a 01 01 01 53 13 53 01 01 49 92 92     \.\.....S.S..I..
    266e:	53 13 01 49 a3 ed a3 92 53 01 49 a3 ff ff ed 92     S..I....S.I.....
    267e:	0a 01 92 a3 ff ff a3 92 01 49 92 a3 ed ed 92 92     .........I......
    268e:	01 92 92 92 a3 a3 92 92 01 92 92 92 92 92 92 92     ................
    269e:	01 01 01 53 5c 0a 01 1e 49 49 01 01 01 01 66 2f     ...S\...II....f/
    26ae:	92 01 a3 a3 01 66 5d 01 01 a3 ff 01 66 5d 01 53     .....f].....f].S
    26be:	01 ed ed ed 01 01 01 0a 01 a3 ed a3 a3 92 01 01     ................
    26ce:	92 01 a3 a3 92 01 49 01 92 49 01 01 01 49 49 01     ......I..I...II.
    26de:	01 49 92 92 92 92 92 92 01 49 49 92 92 92 92 49     .I.......II....I
    26ee:	01 49 49 49 49 49 49 49 53 01 49 49 49 49 49 49     .IIIIIIIS.IIIIII
    26fe:	53 01 49 49 49 49 49 49 53 13 01 49 49 49 49 49     S.IIIIIIS..IIIII
    270e:	53 13 0a 01 01 49 49 49 0a 0a 13 0a 1b 01 01 01     S....III........
    271e:	49 49 49 49 49 49 49 01 49 49 49 49 49 49 49 01     IIIIIII.IIIIIII.
    272e:	49 49 49 49 49 49 49 01 49 49 49 49 49 49 01 53     IIIIIII.IIIIII.S
    273e:	49 49 49 49 49 49 01 53 49 49 49 49 49 01 0a 53     IIIIII.SIIIII..S
    274e:	49 49 49 01 01 0a 0a 0a 01 01 01 53 5c 0a 5c 5c     III........S\.\\
    275e:	0a 0a ff ff ff 0a 0a 13 4a ff ff 9b ff ff 0a 13     ........J.......
    276e:	4a ff 52 52 ff 4a 0a 13 ff ff 4a ff ff 4a 0a 13     J.RR.J....J..J..
    277e:	ff ff ff ff 0a 0a 0a 13 5c 5c 5c 5c 13 0a 0a 13     ........\\\\....
    278e:	13 13 13 13 13 0a 0a 13 0a 0a 0a 0a 0a 0a 0a 0a     ................
    279e:	0a 0a 0a ff 0a 0a 0a 13 4a ff ff ff 52 4a 0a 13     ........J...RJ..
    27ae:	4a 4a ff ff 4a 4a 0a 13 4a 52 ff ff 4a 4a 0a 13     JJ..JJ..JR..JJ..
    27be:	0a ff ff ff ff 0a 0a 13 5c 5c 5c 5c 13 0a 0a 13     ........\\\\....
    27ce:	13 13 13 13 13 0a 0a 13 0a 0a 0a 0a 0a 0a 0a 0a     ................
    27de:	0a 0a ff ff ff 0a 0a 13 4a ff ff 9b ff ff 0a 13     ........J.......
    27ee:	4a 4a 52 ff ff 4a 0a 13 4a ff ff 4a 4a 4a 0a 13     JJR..J..J..JJJ..
    27fe:	ff ff ff ff ff 0a 0a 13 5c 5c 5c 5c 13 0a 0a 13     ........\\\\....
    280e:	13 13 13 13 13 0a 0a 13 0a 0a 0a 0a 0a 0a 0a 0a     ................
    281e:	0a ff ff ff ff 0a 0a 13 4a ff 52 9b ff ff 0a 13     ........J.R.....
    282e:	4a 4a ff ff ff 4a 0a 13 ff ff 4a ff ff 4a 0a 13     JJ...J....J..J..
    283e:	ff ff ff ff 0a 0a 0a 13 5c 5c 5c 5c 13 0a 0a 13     ........\\\\....
    284e:	13 13 13 13 13 0a 0a 13 0a 0a 0a 0a 0a 0a 0a 0a     ................
    285e:	0a 0a 0a ff ff ff 0a 13 4a 52 ff ff ff ff 0a 13     ........JR......
    286e:	4a ff ff 52 ff 4a 0a 13 ff ff ff ff ff ff 0a 13     J..R.J..........
    287e:	0a 0a 0a ff ff 0a 0a 13 5c 5c 5c 5c 13 0a 0a 13     ........\\\\....
    288e:	13 13 13 13 13 0a 0a 13 0a 0a 0a 0a 0a 0a 0a 0a     ................
    289e:	0a ff ff ff ff ff 0a 13 4a ff 52 9b 52 4a 0a 13     ........J.R.RJ..
    28ae:	ff ff ff ff 4a 4a 0a 13 4a 52 4a ff ff 4a 0a 13     ....JJ..JRJ..J..
    28be:	ff ff ff ff 0a 0a 0a 13 5c 5c 5c 5c 13 0a 0a 13     ........\\\\....
    28ce:	13 13 13 13 13 0a 0a 13 0a 0a 0a 0a 0a 0a 0a 0a     ................
    28de:	0a 0a ff ff ff ff 0a 13 4a ff ff 9b 52 4a 0a 13     ........J...RJ..
    28ee:	ff ff ff ff 4a 4a 0a 13 ff ff 4a ff ff 4a 0a 13     ....JJ....J..J..
    28fe:	ff ff ff ff 0a 0a 0a 13 5c 5c 5c 5c 13 0a 0a 13     ........\\\\....
    290e:	13 13 13 13 13 0a 0a 13 0a 0a 0a 0a 0a 0a 0a 0a     ................
    291e:	0a ff ff ff ff ff 0a 13 4a 52 52 ff ff 4a 0a 13     ........JRR..J..
    292e:	4a ff ff 52 4a 4a 0a 13 ff ff 4a 4a 4a 4a 0a 13     J..RJJ....JJJJ..
    293e:	ff ff 0a 0a 0a 0a 0a 13 5c 5c 5c 5c 13 0a 0a 13     ........\\\\....
    294e:	13 13 13 13 13 0a 0a 13 0a 0a 0a 0a 0a 0a 0a 0a     ................
    295e:	0a 0a ff ff ff 0a 0a 13 4a ff ff 9b ff ff 0a 13     ........J.......
    296e:	4a ff ff ff ff 4a 0a 13 ff ff 4a ff ff 4a 0a 13     J....J....J..J..
    297e:	ff ff ff ff 0a 0a 0a 13 5c 5c 5c 5c 13 0a 0a 13     ........\\\\....
    298e:	13 13 13 13 13 0a 0a 13 0a 0a 0a 0a 0a 0a 0a 0a     ................
    299e:	0a 0a 0a ff ff ff 0a 13 4a 52 ff ff 52 ff 0a 13     ........JR..R...
    29ae:	4a 4a ff ff ff ff 0a 13 4a 52 4a ff ff ff 0a 13     JJ......JRJ.....
    29be:	0a ff ff ff ff 0a 0a 13 5c 5c 5c 5c 13 0a 0a 13     ........\\\\....
    29ce:	13 13 13 13 13 0a 0a 13 0a 0a 0a 0a 0a 0a 0a 0a     ................
    29de:	0a 0a 0a 0a 0a 0a 0a 13 4a 52 ff ff 52 4a 0a 13     ........JR..RJ..
    29ee:	4a 4a 52 52 4a 4a 0a 13 4a 52 ff ff 4a 4a 0a 13     JJRRJJ..JR..JJ..
    29fe:	0a 0a 0a 0a 0a 0a 0a 13 5c 5c 5c 5c 13 0a 0a 13     ........\\\\....
    2a0e:	13 13 13 13 13 0a 0a 13 0a 0a 0a 0a 0a 0a 0a 0a     ................
    2a1e:	07 07 07 07 07 07 07 07 07 69 69 69 69 69 00 03     .........iiiii..
    2a2e:	07 69 69 69 69 69 00 a3 07 69 69 69 69 00 37 37     .iiiii...iiii.77
    2a3e:	07 69 69 69 69 69 00 d8 07 69 69 69 69 00 37 37     .iiiii...iiii.77
    2a4e:	07 69 69 00 00 00 00 d8 07 69 00 11 ec ff ff ec     .ii......i......
    2a5e:	07 07 07 07 07 07 07 07 03 03 03 03 03 00 69 07     ..............i.
    2a6e:	ff ec a3 d8 11 00 69 07 1f 0f a3 d8 11 00 69 07     ......i.......i.
    2a7e:	d8 d8 a3 d8 11 00 69 07 1f 0f a3 d8 11 00 69 07     ......i.......i.
    2a8e:	d8 d8 a3 d8 11 00 69 07 ec ec a3 d8 11 00 69 07     ......i.......i.
    2a9e:	07 00 11 ec ff ec ec ec 07 00 d8 ec 00 00 a3 a3     ................
    2aae:	07 00 11 00 37 37 00 11 07 69 00 37 5a 11 37 00     ....77...i.7Z.7.
    2abe:	07 69 00 37 11 11 1f 00 07 69 69 00 37 1f 00 69     .i.7.....ii.7..i
    2ace:	07 69 69 69 00 00 69 69 07 07 07 07 07 07 07 07     .iii..ii........
    2ade:	ec a3 d8 d8 d8 11 00 07 d8 d8 00 00 11 11 00 07     ................
    2aee:	11 00 37 37 00 11 00 07 00 37 5a 11 37 00 00 07     ..77.....7Z.7...
    2afe:	00 37 11 11 1f 00 69 07 69 00 37 1f 00 69 69 07     .7....i.i.7..ii.
    2b0e:	69 69 00 00 69 69 69 07 07 07 07 07 07 07 07 07     ii..iii.........
    2b1e:	07 07 07 07 07 07 07 07 07 69 69 69 69 69 69 03     .........iiiiii.
    2b2e:	07 69 69 69 69 69 03 1f 07 69 69 69 03 03 1f 37     .iiiii...iii...7
    2b3e:	07 69 69 03 1f ff ff 37 07 69 03 1f ff ff 37 37     .ii....7.i....77
    2b4e:	07 69 03 ff 37 00 ff 37 07 03 1f 37 37 00 ff 37     .i..7..7...77..7
    2b5e:	07 07 07 07 07 07 07 07 69 69 03 69 69 03 69 07     ........ii.ii.i.
    2b6e:	03 03 37 03 03 1f 03 07 03 37 37 03 37 1f 03 07     ..7......77.7...
    2b7e:	37 37 37 37 37 1f 03 07 ff 37 37 37 37 1f 03 07     77777....7777...
    2b8e:	00 ff 37 37 37 1f 03 07 00 ff 37 37 37 1f 03 07     ..777.....777...
    2b9e:	07 03 37 37 37 00 ff 37 07 03 37 37 ff 37 37 37     ..777..7..77.777
    2bae:	07 03 1f 37 03 00 00 00 07 03 1f 37 37 03 0f 0f     ...7.......77...
    2bbe:	07 69 03 1f 37 37 03 03 07 69 69 03 03 37 37 37     .i..77...ii..777
    2bce:	07 69 69 69 69 03 03 03 07 07 07 07 07 07 07 07     .iiii...........
    2bde:	00 ff 37 37 37 1f 03 07 37 37 37 37 37 1f 03 07     ..777...77777...
    2bee:	00 00 37 37 1f 03 69 07 00 1f 37 37 1f 03 69 07     ..77..i...77..i.
    2bfe:	1f 37 37 1f 03 69 69 07 37 1f 03 03 69 69 69 07     .77..ii.7...iii.
    2c0e:	03 03 69 69 69 69 69 07 07 07 07 07 07 07 07 07     ..iiiii.........
    2c1e:	07 07 07 07 07 07 07 07 07 69 69 69 69 00 00 00     .........iiii...
    2c2e:	07 69 69 00 00 00 11 11 07 69 00 00 11 5a 5a 00     .ii......i...ZZ.
    2c3e:	07 69 00 11 ec ff a3 00 07 00 11 5a ff ec a3 00     .i.........Z....
    2c4e:	07 00 5a a3 ec a3 5a 11 07 00 5a 5a a3 5a 5a 5a     ..Z...Z...ZZ.ZZZ
    2c5e:	07 07 07 07 07 07 07 07 00 00 00 69 00 00 69 07     ...........i..i.
    2c6e:	00 5a 11 00 ff 0f 00 07 a3 ff 00 ff a3 00 69 07     .Z............i.
    2c7e:	ff ec 00 00 00 00 69 07 a3 a3 5a 11 11 00 00 07     ......i...Z.....
    2c8e:	00 5a 11 11 00 00 00 07 11 00 00 00 00 00 00 07     .Z..............
    2c9e:	07 00 5a 5a 5a 5a 5a 5a 07 00 11 5a 5a 5a 5a 5a     ..ZZZZZZ...ZZZZZ
    2cae:	07 00 00 11 5a 5a 5a 11 07 69 00 00 11 11 11 11     ....ZZZ..i......
    2cbe:	07 69 00 00 00 11 11 11 07 69 69 00 00 00 00 00     .i.......ii.....
    2cce:	07 69 69 69 69 00 00 00 07 07 07 07 07 07 07 07     .iiii...........
    2cde:	5a 11 11 11 00 00 00 07 11 11 11 00 00 00 00 07     Z...............
    2cee:	11 11 11 00 00 00 00 07 11 11 00 00 00 00 69 07     ..............i.
    2cfe:	00 00 00 00 00 00 69 07 00 00 00 00 00 69 69 07     ......i......ii.
    2d0e:	00 00 00 69 69 69 69 07 07 07 07 07 07 07 07 07     ...iiii.........
    2d1e:	07 07 07 07 07 07 07 07 07 69 00 00 00 00 69 00     .........i....i.
    2d2e:	07 00 00 ff a3 00 00 ff 07 00 a3 ec a3 5a 00 00     .............Z..
    2d3e:	07 00 5a a3 5a 5a 00 37 07 00 00 5a 5a 00 00 37     ..Z.ZZ.7...ZZ..7
    2d4e:	07 69 00 00 00 00 37 1f 07 69 1f 37 37 37 03 00     .i....7..i.777..
    2d5e:	00 07 07 07 07 07 07 07 ff 00 69 69 69 69 69 07     ..........iiiii.
    2d6e:	00 69 69 69 69 69 69 07 69 69 1f 69 69 69 69 07     .iiiiii.ii.iiii.
    2d7e:	69 37 69 69 69 69 69 07 37 1f 69 1f 37 69 00 07     i7iiiii.7.i.7i..
    2d8e:	37 37 37 37 69 00 ae 07 00 03 1f 69 00 ae ff 07     7777i......i....
    2d9e:	07 69 69 37 37 03 03 ff 07 1f 37 37 37 00 0f 37     .ii77.....777..7
    2dae:	07 69 69 37 37 00 0f 0f 07 69 37 37 1f 37 00 0f     .ii77....i77.7..
    2dbe:	07 1f 1f 69 69 37 69 00 07 69 69 69 69 1f 69 69     ...ii7i..iiii.ii
    2dce:	07 69 69 69 69 69 69 69 07 07 07 07 07 07 07 07     .iiiiiii........
    2dde:	37 0f 00 00 ae ff ff 07 37 37 0f 00 ff ff ff 07     7.......77......
    2dee:	37 37 1f 0f 5a ff a3 07 0f 1f 1f 0f 03 a3 00 07     77..Z...........
    2dfe:	0f 0f 0f 1f 0f 00 69 07 00 03 0f 0f 03 00 69 07     ......i.......i.
    2e0e:	69 00 00 00 00 69 69 07 07 07 07 07 07 07 07 07     i....ii.........
    2e1e:	07 07 07 07 07 07 07 00 07 69 69 69 00 00 00 ec     .........iii....
    2e2e:	07 69 69 00 ec ff 00 d8 07 69 69 00 d8 ec 00 11     .ii......ii.....
    2e3e:	07 69 69 00 11 d8 00 d8 07 69 69 00 d8 d8 00 d8     .ii......ii.....
    2e4e:	07 69 00 00 00 00 00 00 07 00 ec ff 00 11 d8 d8     .i..............
    2e5e:	00 07 07 07 07 07 07 07 ff 00 00 00 69 69 69 07     ............iii.
    2e6e:	ec 00 ec ff 00 69 69 07 ec 00 d8 ec 00 69 69 07     .....ii......ii.
    2e7e:	ec 00 11 ec 00 69 69 07 d8 00 d8 ec 00 69 69 07     .....ii......ii.
    2e8e:	00 00 00 00 11 69 69 07 d8 11 d8 00 11 69 69 07     .....ii......ii.
    2e9e:	07 00 d8 ec ec 00 11 d8 07 00 00 d8 11 ec ec 11     ................
    2eae:	07 69 00 11 d8 d8 ff ec 07 69 69 00 11 d8 ec ec     .i.......ii.....
    2ebe:	07 69 69 69 00 11 d8 ec 07 69 69 69 69 00 11 d8     .iii.....iiii...
    2ece:	07 69 69 69 00 11 d8 d8 07 07 07 07 00 00 00 00     .iii............
    2ede:	11 ec ec d8 00 69 69 07 00 d8 ec ec 00 69 69 07     .....ii......ii.
    2eee:	00 d8 ec d8 00 69 69 07 00 d8 d8 11 00 69 69 07     .....ii......ii.
    2efe:	00 d8 d8 00 69 69 69 07 00 11 00 69 69 69 69 07     ....iii....iiii.
    2f0e:	ec ec d8 00 69 69 69 07 00 00 00 00 07 07 07 07     ....iii.........
    2f1e:	06 06 06 06 06 06 06 06 06 69 69 69 69 69 11 11     .........iiiii..
    2f2e:	06 69 69 69 11 11 ec ff 06 69 69 11 a3 ff ff ff     .iii.....ii.....
    2f3e:	06 69 11 a3 ff ff ff ff 06 69 00 a3 00 00 ec ff     .i.......i......
    2f4e:	06 00 a3 00 00 00 00 ff 06 00 a3 00 00 0f 00 ff     ................
    2f5e:	06 06 06 06 06 06 06 06 11 11 69 69 69 69 69 06     ..........iiiii.
    2f6e:	ff ec 11 11 69 69 69 06 ff ff ff a3 11 69 69 06     ....iii......ii.
    2f7e:	ff ff ff ff a3 11 69 06 ff ec 00 00 a3 00 69 06     ......i.......i.
    2f8e:	ff 00 00 00 00 a3 00 06 ff 00 0f 00 00 a3 00 06     ................
    2f9e:	06 00 a3 11 00 00 ae a3 06 00 a3 ff ff ff ff 00     ................
    2fae:	06 69 00 00 ec ff a3 00 06 69 69 00 ff ff ff ff     .i.......ii.....
    2fbe:	06 69 69 00 ff 00 ff 00 06 69 69 00 a3 00 a3 00     .ii......ii.....
    2fce:	06 69 69 00 00 00 00 00 06 06 06 06 06 06 06 06     .ii.............
    2fde:	a3 ae 00 00 11 a3 00 06 00 ff ff ff ff a3 00 06     ................
    2fee:	00 a3 ff ec 00 00 69 06 ff ff ff ff 00 69 69 06     ......i......ii.
    2ffe:	00 ff 00 ff 00 69 69 06 00 a3 00 a3 00 69 69 06     .....ii......ii.
    300e:	00 00 00 00 00 69 69 06 06 06 06 06 06 06 06 06     .....ii.........
    301e:	5c 13 09 5a ad 09 0a 0a 5c 13 09 5a ad 09 0a 0a     \..Z....\..Z....
    302e:	53 09 09 5a ad 09 09 09 09 25 09 5a ad 09 25 2e     S..Z.....%.Z..%.
    303e:	09 25 09 5a ad 09 25 2e 09 25 09 5a ad 09 25 25     .%.Z..%..%.Z..%%
    304e:	0a 09 09 5a ad 09 09 09 0a 53 09 5a ad 09 0a 0a     ...Z.....S.Z....
    305e:	0a 0a 09 5a ad 09 53 13 0a 0a 09 5a ad 09 13 13     ...Z..S....Z....
    306e:	09 09 09 5a ad 09 09 53 2e 2e 09 5a ad 09 2e 09     ...Z...S...Z....
    307e:	2e 2e 09 5a ad 09 2e 09 25 25 09 5a ad 09 25 09     ...Z....%%.Z..%.
    308e:	09 09 09 5a ad 09 09 53 0a 0a 09 5a ad 09 53 53     ...Z...S...Z..SS
    309e:	5c 13 09 5a ad 09 0a 0a 53 13 09 5a ad 09 0a 0a     \..Z....S..Z....
    30ae:	53 09 09 5a ad 09 09 09 09 25 09 5a ad 09 25 2e     S..Z.....%.Z..%.
    30be:	09 25 09 5a ad 09 25 2e 09 25 09 5a ad 09 25 25     .%.Z..%..%.Z..%%
    30ce:	0a 09 09 5a ad 09 09 09 0a 53 09 5a ad 09 0a 0a     ...Z.....S.Z....
    30de:	0a 0a 09 5a ad 09 53 53 0a 0a 09 5a ad 09 13 53     ...Z..SS...Z...S
    30ee:	09 09 09 5a ad 09 09 53 2e 2e 09 5a ad 09 2e 09     ...Z...S...Z....
    30fe:	2e 2e 09 5a ad 09 2e 09 25 25 09 5a ad 09 25 09     ...Z....%%.Z..%.
    310e:	09 09 09 5a ad 09 09 53 0a 0a 09 5a ad 09 53 53     ...Z...S...Z..SS
    311e:	0a 53 09 09 09 53 53 0a 53 09 25 2e 2e 09 0a 0a     .S...SS.S.%.....
    312e:	09 09 09 09 09 09 09 09 ad ad ad ad ad ad ad ad     ................
    313e:	5a 5a 5a 5a 5a 5a 5a 5a 09 09 09 09 09 09 09 09     ZZZZZZZZ........
    314e:	0a 09 25 25 25 09 0a 0a 0a 09 25 2e 2e 09 0a 0a     ..%%%.....%.....
    315e:	0a 53 09 09 09 53 53 0a 53 09 25 2e 2e 09 0a 53     .S...SS.S.%....S
    316e:	09 09 09 09 09 09 09 09 ad ad ad ad ad ad ad ad     ................
    317e:	5a 5a 5a 5a 5a 5a 5a 5a 09 09 09 09 09 09 09 09     ZZZZZZZZ........
    318e:	0a 09 25 25 25 09 0a 0a 0a 09 25 2e 2e 09 0a 0a     ..%%%.....%.....
    319e:	0a 09 25 2e 2e 09 0a 0a 09 09 09 09 09 09 09 09     ..%.............
    31ae:	ad ad ad ad ad ad ad ad 5a 5a 5a 5a 5a 5a 5a 5a     ........ZZZZZZZZ
    31be:	09 09 09 09 09 09 09 09 0a 09 25 2e 2e 09 0a 0a     ..........%.....
    31ce:	0a 09 25 25 25 09 0a 0a 0a 0a 09 09 09 53 53 0a     ..%%%........SS.
    31de:	0a 09 25 2e 2e 09 0a 0a 09 09 09 09 09 09 09 09     ..%.............
    31ee:	ad ad ad ad ad ad ad ad 5a 5a 5a 5a 5a 5a 5a 5a     ........ZZZZZZZZ
    31fe:	09 09 09 09 09 09 09 09 0a 09 25 2e 2e 09 0a 0a     ..........%.....
    320e:	0a 09 25 25 25 09 0a 0a 0a 53 09 09 09 53 53 0a     ..%%%....S...SS.
    321e:	53 53 0a 5c 53 5c 53 53 53 13 1a 0a 53 53 53 53     SS.\S\SSS...SSSS
    322e:	09 09 09 0a 13 1a 53 53 ad 5a 5a 09 09 09 13 13     ......SS.ZZ.....
    323e:	ad ad ad ad ad 5a 09 09 09 09 5a 5a ad ad ad 5a     .....Z....ZZ...Z
    324e:	0a 0a 09 09 09 5a ad ad 0a 0a 0a 0a 0a 09 09 5a     .....Z.........Z
    325e:	53 13 13 0a 13 5c 13 5c 53 13 13 0a 5c 53 13 53     S....\.\S...\S.S
    326e:	13 13 0a 0a 13 53 13 53 13 0a 0a 1a 0a 0a 13 53     .....S.S.......S
    327e:	0a 09 09 53 53 13 0a 0a 09 25 25 09 5c 53 13 0a     ...SS....%%.\S..
    328e:	5a 09 2e 25 09 53 53 0a ad ad 09 25 09 53 53 0a     Z..%.SS....%.SS.
    329e:	0a 0a 0a 0a 0a 09 25 09 0a 0a 0a 0a 09 25 2e 25     ......%......%.%
    32ae:	09 09 0a 09 25 2e 2e 2e ad 5a 09 25 2e 2e 2e 25     ....%....Z.%...%
    32be:	5a ad ad 09 25 2e 25 09 09 5a ad ad 09 25 09 0a     Z...%.%..Z...%..
    32ce:	09 09 5a ad 5a 09 0a 0a 5c 09 09 ad 5a 09 0a 0a     ..Z.Z...\...Z...
    32de:	5a ad ad 09 53 53 13 0a 09 5a ad 5a 09 13 0a 5c     Z...SS...Z.Z...\
    32ee:	25 09 ad ad 09 0a 5c 53 09 09 5a ad 09 13 0a 53     %.....\S..Z....S
    32fe:	0a 09 5a ad 5a 09 0a 53 0a 0a 09 ad 5a 09 13 53     ..Z.Z..S....Z..S
    330e:	0a 0a 09 ad 5a 09 13 53 0a 0a 09 ad 5a 09 0a 0a     ....Z..S....Z...
    331e:	5c 09 09 ad 5a 09 0a 0a 09 09 5a ad 5a 09 0a 0a     \...Z.....Z.Z...
    332e:	09 5a ad ad 09 25 09 0a 5a ad ad 09 25 2e 25 09     .Z...%..Z...%.%.
    333e:	ad 5a 09 25 2e 2e 2e 25 09 09 0a 09 25 2e 2e 2e     .Z.%...%....%...
    334e:	0a 0a 0a 0a 09 25 2e 25 0a 0a 0a 0a 0a 09 25 09     .....%.%......%.
    335e:	0a 0a 09 ad 5a 09 0a 0a 0a 0a 09 ad 5a 09 13 53     ....Z.......Z..S
    336e:	0a 0a 09 ad 5a 09 13 53 0a 09 5a ad 5a 09 0a 53     ....Z..S..Z.Z..S
    337e:	09 09 5a ad 09 13 0a 53 25 09 ad ad 09 0a 5c 53     ..Z....S%.....\S
    338e:	09 5a ad 5a 09 13 0a 5c 5a ad ad 09 53 53 13 0a     .Z.Z...\Z...SS..
    339e:	53 53 0a 5c 53 09 09 5a 09 09 09 09 09 5a ad ad     SS.\S..Z.....Z..
    33ae:	ad ad ad ad ad ad ad 5a 5a 5a 5a 5a 5a 5a 09 09     .......ZZZZZZZ..
    33be:	09 09 09 09 09 09 0a 0a 53 5c 53 53 0a 0a 0a 0a     ........S\SS....
    33ce:	53 0a 13 13 0a 0a 13 13 53 53 53 0a 53 53 53 53     S.......SSS.SSSS
    33de:	ad ad 09 25 09 53 53 0a 5a 09 2e 25 09 53 53 0a     ...%.SS.Z..%.SS.
    33ee:	09 25 25 09 5c 53 13 0a 0a 09 09 53 53 13 0a 0a     .%%.\S.....SS...
    33fe:	13 0a 0a 1a 0a 0a 13 53 13 13 0a 0a 13 53 13 53     .......S.....S.S
    340e:	53 13 13 0a 5c 53 13 53 53 13 13 0a 13 5c 13 5c     S...\S.SS....\.\
    341e:	53 53 09 5a ad 09 0a 53 53 0a 09 5a ad 09 53 53     SS.Z...SS..Z..SS
    342e:	53 13 09 5a ad 09 0a 0a 0a 13 09 5a ad 09 53 5c     S..Z.......Z..S\
    343e:	53 0a 09 5a ad 09 53 53 53 0a 09 5a ad ad 09 09     S..Z..SSS..Z....
    344e:	53 13 0a 09 5a ad ad 09 53 13 0a 0a 09 5a ad 5a     S...Z...S....Z.Z
    345e:	0a 0a 09 5a ad 09 09 5c 0a 0a 09 5a ad ad 09 09     ...Z...\...Z....
    346e:	0a 0a 0a 09 5a ad ad 09 0a 0a 09 25 09 5a ad ad     ....Z......%.Z..
    347e:	0a 09 25 2e 25 09 5a 5a 09 25 2e 2e 2e 25 09 09     ..%.%.ZZ.%...%..
    348e:	25 2e 2e 2e 25 09 0a 0a 09 25 2e 25 09 0a 0a 0a     %...%....%.%....
    349e:	53 53 13 13 0a 09 5a ad 13 13 13 0a 09 25 09 ad     SS....Z......%..
    34ae:	13 13 0a 0a 09 25 2e 09 0a 0a 0a 1a 53 09 25 25     .....%......S.%%
    34be:	13 5c 13 0a 53 5c 09 09 5c 53 53 0a 13 53 53 53     .\..S\..\SS..SSS
    34ce:	13 13 13 13 0a 13 53 53 5c 53 53 53 0a 0a 0a 0a     ......SS\SSS....
    34de:	5a 09 25 09 0a 0a 0a 0a ad 5a 09 09 09 09 09 09     Z.%......Z......
    34ee:	ad ad ad ad ad ad ad ad 09 5a 5a 5a 5a 5a 5a 5a     .........ZZZZZZZ
    34fe:	53 09 09 09 09 09 09 09 53 13 0a 13 0a 53 0a 0a     S.......S....S..
    350e:	13 0a 5c 0a 0a 13 13 0a 0a 5c 53 53 53 53 53 0a     ..\......\SSSSS.
    351e:	0a 09 09 09 09 09 09 09 09 ec f6 f6 f6 f6 f6 f6     ................
    352e:	09 f6 90 e2 e2 e2 e2 e2 09 f6 09 90 e2 e2 e2 e2     ................
    353e:	09 f6 09 90 90 90 90 90 09 f6 09 09 09 09 09 09     ................
    354e:	09 ec f6 f6 f6 f6 f6 f6 09 e2 e2 e2 e2 e2 e2 e2     ................
    355e:	09 09 09 09 09 09 09 0a f6 f6 f6 f6 f6 f6 ec 09     ................
    356e:	e2 e2 e2 e2 e2 90 f6 09 e2 e2 e2 e2 90 09 f6 09     ................
    357e:	90 90 90 90 90 09 f6 09 09 09 09 09 09 09 f6 09     ................
    358e:	f6 f6 f6 f6 f6 f6 ec 09 e2 e2 e2 e2 e2 e2 e2 09     ................
    359e:	09 e2 ec ec ec ec e2 90 09 09 ec ec ec ec ec e2     ................
    35ae:	09 09 e2 ec ec ec ec ec 09 09 09 ec ec ec ec ec     ................
    35be:	09 09 09 e2 ec ec ec ec 0a 09 09 09 09 09 09 09     ................
    35ce:	0a 09 09 09 ad ad 09 09 0a 0a 09 09 09 09 09 09     ................
    35de:	90 e2 ec ec ec ec e2 09 e2 ec ec ec ec ec 09 09     ................
    35ee:	ec ec ec ec ec e2 09 09 ec ec ec ec ec 09 09 09     ................
    35fe:	ec ec ec ec e2 09 09 09 09 09 09 09 09 09 0a 0a     ................
    360e:	09 09 ad ad 09 09 0a 0a 09 09 09 09 09 53 53 0a     .............SS.
    361e:	ee 9c 9b 9b 52 4a 4a 52 a5 9c 9c 9b 52 4a 4a 4a     ....RJJR....RJJJ
    362e:	9c 9c 9b 52 52 1a 4a 4a 9b 52 52 52 52 52 4a 4a     ...RR.JJ.RRRRRJJ
    363e:	52 52 52 9b 9b 52 4a 4a 9b 9c 9b 52 52 4a 4a 4a     RRR..RJJ...RRJJJ
    364e:	9b 9b 9b 52 52 4a 4a 4a 52 52 52 9b 52 4a 4a 4a     ...RRJJJRRR.RJJJ
    365e:	0a 0a 0a 13 5c 5c 0a 0a 0a 13 0a 0a 5c 5c 0a 4a     ....\\......\\.J
    366e:	0a 5c 0a 0a 13 5c 13 0a 0a ad 13 0a 0a 5c 5c 0a     .\...\.......\\.
    367e:	0a ad 5c 0a 0a 13 5c 13 0a ad 5c 0a 4a 0a 13 13     ..\...\...\.J...
    368e:	0a ad 5c 0a 52 0a 13 13 0a ad 5c 0a 52 0a 0a 13     ..\.R.....\.R...
    369e:	0a 0a 0a 15 27 09 09 52 4a 52 15 27 09 27 15 09     ....'..RJR.'.'..
    36ae:	4a 15 27 37 09 37 37 37 4a 15 27 37 09 27 37 37     J.'7.777J.'7.'77
    36be:	0a 13 5c 5c 5c 09 27 37 0a 15 27 37 37 37 09 09     ..\\\.'7..'777..
    36ce:	13 13 15 27 37 37 37 37 0a 0a 0a 15 15 27 27 27     ...'7777.....'''
    36de:	09 09 27 15 0a 0a 0a 0a 15 27 09 27 15 4a 52 52     ..'......'.'.JRR
    36ee:	37 37 09 37 27 15 4a 52 37 27 09 37 27 15 4a 4a     77.7'.JR7'.7'.JJ
    36fe:	27 09 5c 5c 5c 13 0a 0a 09 37 37 37 27 15 5c 5c     '.\\\....777'.\\
    370e:	37 37 37 27 15 13 13 13 27 27 15 15 0a 0a 0a 0a     777'....''......
    371e:	0a 0a 0a 0a 0a 0a 0a 13 4a 52 52 9b 52 4a 0a 13     ........JRR.RJ..
    372e:	4a 4a 52 52 4a 4a 0a 13 4a 52 4a 4a 4a 4a 0a 13     JJRRJJ..JRJJJJ..
    373e:	0a 0a 0a 0a 0a 0a 0a 13 5c 5c 5c 5c 13 0a 0a 13     ........\\\\....
    374e:	13 13 13 13 13 0a 0a 13 0a 0a 0a 0a 0a 0a 0a 0a     ................
    375e:	5c 0a 0a 0a 0a 0a 0a 0a 5c 0a 52 4a 4a 4a 52 52     \.......\.RJJJRR
    376e:	13 0a 9b 52 4a 4a 4a 52 5c 0a 52 9b 52 4a 4a 4a     ...RJJJR\.R.RJJJ
    377e:	13 0a 0a 0a 0a 0a 0a 0a 13 0a 5c 5c 5c 5c 5c 5c     ..........\\\\\\
    378e:	13 0a 13 13 13 13 13 13 0a 0a 0a 0a 0a 0a 0a 0a     ................
    379e:	0a 0a 0a 15 27 09 09 52 4a 52 15 27 09 27 15 09     ....'..RJR.'.'..
    37ae:	4a 15 27 37 09 37 37 37 4a 15 27 37 09 27 37 37     J.'7.777J.'7.'77
    37be:	0a 13 5c 5c 5c 09 27 37 5c 15 27 37 37 37 09 09     ..\\\.'7\.'777..
    37ce:	13 13 15 27 37 37 37 37 0a 0a 0a 15 15 27 27 27     ...'7777.....'''
    37de:	09 09 27 15 0a 0a 0a 0a 15 27 09 27 15 4a 52 4a     ..'......'.'.JRJ
    37ee:	37 37 09 37 27 15 4a 4a 37 27 09 37 27 15 52 4a     77.7'.JJ7'.7'.RJ
    37fe:	27 09 5c 5c 5c 13 0a 0a 09 37 37 37 27 15 5c 0a     '.\\\....777'.\.
    380e:	37 37 37 27 15 13 0a 13 27 27 15 15 0a 0a 0a 0a     777'....''......
    381e:	0a 0a 5c 5c 13 0a 0a 0a 4a 0a 5c 5c 0a 0a 13 0a     ..\\....J.\\....
    382e:	0a 13 5c 13 0a 0a 5c 0a 0a 5c 5c 0a 0a 13 ad 0a     ..\...\..\\.....
    383e:	13 5c 13 0a 0a 5c ad 0a 13 13 0a 4a 0a 5c ad 0a     .\...\.....J.\..
    384e:	13 13 0a 52 0a 5c ad 0a 13 0a 0a 52 0a 5c ad 0a     ...R.\.....R.\..
    385e:	4a 4a 52 9b 9c 9c 52 9b 4a 4a 52 9b 9c a5 52 9c     JJR...R.JJR...R.
    386e:	4a 4a 52 1a 9b 9c 52 9c 4a 4a 1a 1a 9b 9b 52 9b     JJR...R.JJ....R.
    387e:	4a 4a 4a 52 9b 52 52 9b 4a 4a 4a 52 52 52 9b 9b     JJJR.RR.JJJRRR..
    388e:	4a 4a 4a 52 52 52 52 52 52 9b 52 52 52 9b 9c 9c     JJJRRRRRR.RRR...
    389e:	9b 52 9c 9c 9b 52 4a 4a 9c 52 a5 9c 9b 52 4a 4a     .R...RJJ.R...RJJ
    38ae:	9c 52 9c 9b 1a 52 4a 4a 9b 52 9b 9b 1a 1a 4a 4a     .R...RJJ.R....JJ
    38be:	9b 52 52 9b 52 4a 4a 4a 9b 9b 52 52 52 4a 4a 4a     .RR.RJJJ..RRRJJJ
    38ce:	52 52 52 52 52 4a 4a 4a 9c 9c 9b 52 52 52 9b 52     RRRRRJJJ...RRR.R
    38de:	0a ad 5c 0a 9b 0a 5c 0a 0a 5c 5c 0a 52 0a 5c 0a     ..\...\..\\.R.\.
    38ee:	09 09 5c 0a 15 13 5c 0a 0a 13 09 15 27 5c 15 0a     ..\...\.....'\..
    38fe:	0a 5c 09 09 37 5c 37 0a 0a ad 09 a5 09 09 37 27     .\..7\7.......7'
    390e:	0a ad 09 9b 09 27 09 27 0a 09 27 09 15 37 27 09     .....'.'..'..7'.
    391e:	0a 5c 0a 9b 0a 5c ad 0a 0a 5c 0a 52 0a 5c 5c 0a     .\...\...\.R.\\.
    392e:	0a 5c 13 15 0a 5c 09 09 0a 15 5c 27 15 09 13 0a     .\...\....\'....
    393e:	0a 37 5c 37 09 09 5c 0a 27 37 09 09 a5 09 ad 0a     .7\7..\.'7......
    394e:	27 09 27 09 9b 09 ad 0a 09 27 37 15 09 27 09 0a     '.'......'7..'..
    395e:	52 4a 4a 52 9b 9b 9c ee 4a 4a 4a 52 9b 9c 9c a5     RJJR....JJJR....
    396e:	4a 4a 1a 52 52 9b 9c 9c 4a 4a 52 52 52 52 52 9b     JJ.RR...JJRRRRR.
    397e:	4a 4a 52 9b 9b 52 52 52 4a 4a 4a 52 52 9b 9c 9b     JJR..RRRJJJRR...
    398e:	4a 4a 4a 52 52 9b 9b 9b 4a 4a 4a 52 9b 52 52 52     JJJRR...JJJR.RRR
    399e:	0a 09 37 37 37 37 37 09 0a 09 27 37 37 37 27 09     ..77777...'777'.
    39ae:	0a 37 09 27 37 27 09 37 0a 27 37 09 09 09 37 27     .7.'7'.7.'7...7'
    39be:	0a 27 37 37 37 5c 37 0a 0a 15 27 37 37 5c 27 0a     .'777\7...'77\'.
    39ce:	0a ad 15 15 27 13 15 0a 0a ad 5c 0a 15 13 5c 0a     ....'.....\...\.
    39de:	09 37 37 37 37 37 09 0a 09 27 37 37 37 27 09 0a     .77777...'777'..
    39ee:	37 09 27 37 27 09 37 0a 27 37 09 09 09 37 27 0a     7.'7'.7.'7...7'.
    39fe:	0a 37 5c 37 37 37 27 0a 0a 27 5c 37 37 27 15 0a     .7\777'..'\77'..
    3a0e:	0a 15 13 27 15 15 ad 0a 0a 5c 13 15 0a 5c ad 0a     ...'.....\...\..
    3a1e:	0a ad 5c 0a 9b 0a 5c 0a 0a ad 0a 0a 52 0a 5c 0a     ..\...\.....R.\.
    3a2e:	0a 0a 13 0a 9b 0a 5c 0a 0a 13 ad 0a 52 0a 5c 0a     ......\.....R.\.
    3a3e:	0a ad ad ad 0a 0a 5c 0a 0a 13 ad 13 0a 0a 5c 0a     ......\.......\.
    3a4e:	0a 0a 13 5c 13 0a 5c 0a 0a 0a 0a 5c 5c 0a 5c 0a     ...\..\....\\.\.
    3a5e:	0a 5c 0a 9b 0a 5c ad 0a 0a 5c 0a 52 0a 0a ad 0a     .\...\...\.R....
    3a6e:	0a 5c 0a 9b 0a 13 0a 0a 0a 5c 0a 52 0a ad 13 0a     .\.......\.R....
    3a7e:	0a 5c 0a 0a ad ad ad 0a 0a 5c 0a 0a 13 ad 13 0a     .\.......\......
    3a8e:	0a 5c 0a 13 5c 13 0a 0a 0a 5c 0a 5c 5c 0a 0a 0a     .\..\....\.\\...
    3a9e:	0a 13 0a 13 5c 13 0a 0a 0a 5c 0a 0a 5c 5c 0a 0a     ....\....\..\\..
    3aae:	0a ad 13 0a 13 13 13 0a 0a ad 5c 0a 0a 13 13 0a     ..........\.....
    3abe:	0a ad 5c 0a 0a 13 13 0a 0a ad 5c 0a 52 0a 13 0a     ..\.......\.R...
    3ace:	0a ad 5c 0a 52 0a 13 0a 0a ad 5c 0a 9b 0a 0a 0a     ..\.R.....\.....
    3ade:	0a 0a 13 5c 13 0a 13 0a 0a 0a 5c 5c 0a 0a 5c 0a     ...\......\\..\.
    3aee:	0a 13 13 13 0a 13 ad 0a 0a 13 13 0a 0a 5c ad 0a     .............\..
    3afe:	0a 13 13 0a 0a 5c ad 0a 0a 13 0a 52 0a 5c ad 0a     .....\.....R.\..
    3b0e:	0a 13 0a 52 0a 5c ad 0a 0a 0a 0a 9b 0a 5c ad 0a     ...R.\.......\..
    3b1e:	52 52 52 9b 52 4a 4a 4a ee 9c 9b 9b 52 4a 4a 52     RRR.RJJJ....RJJR
    3b2e:	a5 9c 9c 9b 52 4a 4a 4a 9c 9c 9b 52 52 1a 4a 4a     ....RJJJ...RR.JJ
    3b3e:	9b 52 52 52 52 52 4a 4a 52 52 52 9b 9b 52 4a 4a     .RRRRRJJRRR..RJJ
    3b4e:	9b 9c 9b 52 52 4a 4a 4a 9b 9b 9b 52 52 4a 4a 4a     ...RRJJJ...RRJJJ

00003b5e <BorderFrames>:
    3b5e:	00 01 02 03 04 05 06 03 04 05 06 03 04 04 04 04     ................
    3b6e:	04 05 06 03 04 05 06 03 04 05 06 07 08 09 0a 0b     ................
    3b7e:	00 0e 0a 10 00 12 0a 0b 00 0e 0a 10 00 12 0a 0b     ................
    3b8e:	00 0e 0a 10 00 12 0a 0b 00 0e 0a 10 00 12 0a 0b     ................
    3b9e:	00 0e 0a 10 00 12 0a 0b 00 0e 0c 0d 0f 09 11 0d     ................
    3bae:	13 09 0c 0d 0f 09 11 0d 13 09 0c 0d 0f 09 11 0d     ................
    3bbe:	13 09 0c 0d 0f 09 11 0d 13 09 0c 0d 0f 09 11 0d     ................
    3bce:	13 09 0c 0d 0f 09 ff                                .......

00003bd5 <BorderTable>:
    3bd5:	00 01                                               ..

00003bd7 <BorderFrameTimes>:
    3bd7:	1e 1e                                               ..

00003bd9 <GameMaps>:
    3bd9:	fe 00 00 00 00 04 04 04 04 04 04 00 fe 00 1c 04     ................
    3be9:	1c 00 1c 04 1c 04 1c 04 1c 00 04 04 04 04 c3 b3     ................
    3bf9:	b3 b3 b7 04 04 04 04 04 1c 04 1c 04 1c 04 1c af     ................
    3c09:	1c 04 1c 04 04 04 04 04 04 00 04 00 af 04 04 04     ................
    3c19:	04 04 1c 04 1c 04 1c 04 1c af 1c 04 1c 04 04 04     ................
    3c29:	04 04 00 00 04 00 af 04 04 04 04 04 1c 04 1c af     ................
    3c39:	1c 04 1c af 1c 04 1c 04 04 04 04 04 bf b3 b3 b3     ................
    3c49:	bb 04 04 04 04 00 1c 04 1c 04 1c 04 1c 04 1c 04     ................
    3c59:	1c 00 fe 00 04 04 04 04 04 04 04 04 04 00 fe        ...............

00003c68 <IcePos>:
    3c68:	16 06 16 06 0e 0c 06 12 16 14                       ..........

00003c72 <IglooPos>:
    3c72:	04 08 14 0c                                         ....

00003c76 <IglooMap>:
    3c76:	b7 b8 c7 c8 ba bb b9 c5 cf d0 c6 bc d9 c9 d1 d2     ................
    3c86:	cb da ca d5 d3 d4 d6 cc bd be cd ce c1 c2 bf c0     ................
    3c96:	d7 d8 c3 c4                                         ....

00003c9a <GuiTiles>:
	...
    3ce2:	00 12 63 63 63 63 63 63 00 12 12 63 63 63 63 63     ..cccccc...ccccc
    3cf2:	00 12 12 12 63 63 63 63 00 12 12 12 63 12 12 12     ....cccc....c...
    3d02:	00 12 12 12 63 63 12 12 00 12 12 12 63 63 63 12     ....cc......ccc.
    3d12:	00 12 12 12 63 63 63 00 00 00 00 00 00 00 00 00     ....ccc.........
    3d22:	63 63 63 63 63 63 63 00 63 63 63 63 63 63 63 00     ccccccc.ccccccc.
    3d32:	63 63 63 63 63 63 63 00 12 12 12 12 63 63 63 00     ccccccc.....ccc.
    3d42:	12 12 12 12 63 63 63 00 12 12 12 12 63 63 63 00     ....ccc.....ccc.
    3d52:	00 12 12 12 63 63 63 00 00 12 12 12 63 63 63 00     ....ccc.....ccc.
    3d62:	63 63 12 12 63 63 63 00 63 63 63 12 63 63 63 00     cc..ccc.ccc.ccc.
    3d72:	63 63 63 63 63 63 63 00 12 12 12 12 12 63 63 00     ccccccc......cc.
    3d82:	12 12 12 12 12 12 63 00 12 12 12 12 12 12 12 00     ......c.........
	...
    3d9a:	00 12 12 12 63 63 63 00 00 12 12 12 63 63 63 63     ....ccc.....cccc
    3daa:	00 12 12 12 63 63 63 63 00 12 12 12 63 63 63 63     ....cccc....cccc
    3dba:	00 12 12 12 12 12 12 12 00 12 12 12 12 12 12 12     ................
    3dca:	00 12 12 12 12 12 12 12 00 00 00 00 00 00 00 00     ................
	...
    3de2:	63 63 63 63 63 63 63 63 63 63 63 63 63 63 63 63     cccccccccccccccc
    3df2:	63 63 63 63 63 63 63 63 12 12 12 12 12 12 12 12     cccccccc........
    3e02:	12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12     ................
	...
    3e22:	00 63 63 63 63 63 63 63 00 63 63 63 63 63 63 63     .ccccccc.ccccccc
    3e32:	00 63 63 63 63 63 63 63 00 12 12 12 12 12 12 12     .ccccccc........
    3e42:	00 12 12 12 12 12 12 12 00 12 12 12 12 12 12 12     ................
	...
    3e5a:	00 12 12 12 63 63 63 00 00 12 12 12 63 63 63 00     ....ccc.....ccc.
    3e6a:	00 12 12 12 63 63 63 00 00 12 12 12 63 63 63 00     ....ccc.....ccc.
    3e7a:	00 12 12 12 63 63 63 00 00 12 12 12 63 63 63 00     ....ccc.....ccc.
    3e8a:	00 12 12 12 63 63 63 00 00 00 00 00 00 00 00 00     ....ccc.........
    3e9a:	00 12 12 12 63 63 63 00 00 12 12 12 63 63 63 00     ....ccc.....ccc.
    3eaa:	00 12 12 12 63 63 63 00 00 12 12 12 63 63 63 00     ....ccc.....ccc.
    3eba:	00 12 12 12 63 63 63 00 00 12 12 12 63 63 63 00     ....ccc.....ccc.
    3eca:	00 12 12 12 63 63 63 00 00 12 12 12 63 63 63 00     ....ccc.....ccc.
	...
    3eee:	00 01 01 01 01 01 00 01 01 5b 5b 5b 01 5b 01 5b     .........[[[.[.[
    3efe:	ff ff ff ff 01 ff 5b ff ff ff ff ff 01 ff 5b ff     ......[.......[.
    3f0e:	ff 01 5b ff 01 ff ff ff ff ff 01 ff 00 00 00 00     ..[.............
	...
    3f2a:	01 01 01 01 01 01 01 00 ff ff ff ff ff 5b 5b 01     .............[[.
    3f3a:	01 ff ff ff ff ff 5b 01 5b 01 01 01 01 01 01 00     ......[.[.......
    3f4a:	ff 01 5b 5b 01 00 00 00 ff 01 ff ff 01 00 00 00     ..[[............
    3f5a:	01 ff ff 01 01 01 01 5b 01 ff 5b ff 5b 5b 5b 01     .......[..[.[[[.
    3f6a:	01 5b 01 01 5b ff ff 5b 01 01 00 00 01 01 01 01     .[..[..[........
	...
    3f9a:	ff 01 01 01 01 00 00 00 01 5b ff ff 01 00 00 00     .........[......
    3faa:	01 01 01 01 01 00 00 00 5b ff ff 01 00 00 00 00     ........[.......
    3fba:	01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

00003fda <GuiMap>:
    3fda:	03 03 28 29 2a 2b 2c 2d 2e 2f 2e                    ..()*+,-./.

00003fe5 <GameSprites>:
    3fe5:	00 00 00 00 00 01 01 01 00 00 00 01 01 02 01 03     ................
    3ff5:	00 00 01 02 04 04 01 03 00 01 05 04 04 04 02 01     ................
    4005:	00 01 02 04 04 04 04 04 00 01 02 04 04 04 04 04     ................
    4015:	00 01 02 04 04 04 04 04 00 01 02 04 04 04 04 04     ................
    4025:	00 01 05 02 04 04 04 04 00 00 01 02 02 02 04 04     ................
    4035:	00 00 00 01 05 02 02 02 00 00 00 01 01 01 01 01     ................
    4045:	00 00 00 01 06 01 05 07 00 00 01 06 02 05 07 07     ................
    4055:	00 00 01 06 01 01 01 01 00 01 03 03 01 01 01 01     ................
    4065:	00 01 03 03 01 05 07 07 00 00 01 01 01 01 05 05     ................
    4075:	00 00 00 00 01 06 01 01 00 00 00 01 01 02 01 01     ................
    4085:	00 00 01 08 03 03 08 01 00 01 01 03 03 03 03 01     ................
    4095:	00 00 01 01 01 01 01 01 00 00 00 00 01 01 01 01     ................
    40a5:	00 00 00 00 00 00 01 01 00 00 00 00 00 01 03 03     ................
    40b5:	00 00 00 01 01 01 03 03 00 00 01 05 04 04 01 01     ................
    40c5:	00 01 05 04 04 04 02 02 00 01 02 04 04 04 04 04     ................
    40d5:	00 01 02 04 04 04 04 04 00 01 02 04 04 04 04 04     ................
	...
    40ed:	01 01 01 00 00 00 00 00 01 04 02 01 01 00 00 00     ................
    40fd:	02 04 04 04 05 01 00 00 04 04 04 04 04 05 01 00     ................
    410d:	04 04 04 04 04 02 01 00 04 04 04 04 04 02 01 00     ................
    411d:	04 04 04 04 04 02 01 00 00 01 02 02 04 04 04 04     ................
    412d:	00 01 05 02 02 02 04 04 00 00 01 02 02 02 02 02     ................
    413d:	00 00 00 01 05 02 02 02 00 00 00 01 01 01 01 01     ................
    414d:	00 00 00 01 06 01 05 07 00 00 01 06 01 05 07 07     ................
    415d:	00 00 01 06 01 01 01 01 04 04 04 04 02 02 01 00     ................
    416d:	04 04 02 02 02 05 01 00 02 02 02 02 02 01 00 00     ................
    417d:	02 02 02 05 01 00 00 00 01 01 01 01 01 00 00 00     ................
    418d:	07 05 01 06 01 00 00 00 07 07 05 06 06 01 00 00     ................
    419d:	01 01 01 08 08 01 00 00 00 00 01 08 01 01 01 01     ................
    41ad:	00 00 00 01 01 01 05 07 00 00 00 01 03 03 01 05     ................
    41bd:	00 00 01 08 03 03 08 01 00 00 01 03 03 03 03 01     ................
    41cd:	00 01 01 08 03 03 08 01 00 00 01 01 08 08 01 01     ................
    41dd:	00 00 00 00 01 01 01 01 01 01 01 08 08 01 00 00     ................
    41ed:	07 07 05 01 01 00 00 00 05 05 01 01 01 00 00 00     ................
    41fd:	01 01 03 08 01 00 00 00 01 08 03 03 08 01 00 00     ................
    420d:	01 01 01 01 01 01 01 00 01 01 01 01 01 01 00 00     ................
    421d:	01 01 01 01 00 00 00 00 00 00 00 00 00 01 01 00     ................
    422d:	00 00 00 00 01 03 03 01 00 00 00 00 01 03 03 01     ................
    423d:	00 00 00 01 01 01 01 02 00 00 01 02 04 02 02 04     ................
    424d:	00 01 05 04 04 04 04 04 00 01 02 04 04 04 04 04     ................
    425d:	00 01 02 04 04 04 04 04 00 00 00 00 00 00 00 00     ................
	...
    4275:	01 01 01 00 00 00 00 00 04 04 02 01 01 00 00 00     ................
    4285:	04 04 04 04 07 01 00 00 04 04 04 04 04 05 01 00     ................
    4295:	04 04 04 04 04 02 01 00 04 04 04 04 04 02 01 00     ................
    42a5:	00 01 02 04 04 04 04 04 00 01 02 04 04 04 04 04     ................
    42b5:	00 01 05 02 04 04 04 04 00 00 01 02 02 02 02 02     ................
    42c5:	00 00 00 01 05 02 02 02 00 00 00 00 01 01 01 01     ................
    42d5:	00 00 00 01 06 01 05 07 00 00 00 01 01 01 07 07     ................
    42e5:	04 04 04 04 04 02 01 00 04 04 04 04 02 02 01 00     ................
    42f5:	04 04 02 02 02 05 01 00 02 02 02 02 05 01 00 00     ................
    4305:	02 02 05 01 01 00 00 00 01 01 01 01 01 00 00 00     ................
    4315:	07 07 01 06 01 00 00 00 07 07 01 06 06 01 00 00     ................
    4325:	00 00 00 01 03 03 01 01 00 00 01 08 03 03 08 01     ................
    4335:	00 00 01 03 03 03 03 01 00 00 01 03 03 03 03 01     ................
    4345:	00 00 01 03 03 03 03 01 00 01 01 08 03 03 08 01     ................
    4355:	00 00 01 01 03 03 01 01 00 00 00 00 01 01 01 01     ................
    4365:	01 01 01 08 08 01 00 00 01 01 01 01 01 01 00 00     ................
    4375:	07 07 05 01 01 00 00 00 05 05 01 08 01 00 00 00     ................
    4385:	01 01 08 08 01 01 00 00 01 01 01 01 01 01 01 00     ................
    4395:	01 01 01 01 01 01 00 00 01 01 01 01 00 00 00 00     ................
    43a5:	00 00 00 00 00 01 01 01 00 00 00 01 01 02 04 04     ................
    43b5:	00 00 01 05 04 04 04 04 00 01 05 04 04 04 04 04     ................
    43c5:	00 01 02 04 04 04 04 04 00 01 02 04 08 08 08 08     ................
    43d5:	00 01 02 08 06 01 06 06 00 01 02 08 06 01 06 06     ................
    43e5:	00 01 02 08 06 01 06 06 00 00 01 02 08 08 08 08     ................
    43f5:	00 00 00 01 02 02 02 02 00 00 00 01 01 01 01 01     ................
    4405:	00 00 00 01 06 01 05 07 00 00 01 06 02 05 07 07     ................
    4415:	00 00 01 06 01 01 01 06 00 01 03 03 01 01 01 06     ................
    4425:	00 01 03 03 01 05 07 07 00 00 01 01 01 01 05 07     ................
    4435:	00 00 00 00 01 06 01 01 00 00 00 01 01 02 01 01     ................
    4445:	00 00 01 08 03 03 08 01 00 01 01 03 03 03 08 01     ................
    4455:	00 00 01 01 01 01 01 01 00 00 00 00 01 01 01 01     ................
    4465:	00 00 00 00 00 00 01 01 00 00 00 00 00 01 01 01     ................
    4475:	00 00 00 01 01 02 04 04 00 00 01 05 04 04 04 04     ................
    4485:	00 01 05 04 04 04 04 04 00 01 02 04 04 04 04 04     ................
    4495:	00 01 02 04 04 04 04 04 00 01 02 04 04 08 08 08     ................
	...
    44ad:	01 01 01 00 00 00 00 00 04 02 02 01 01 00 00 00     ................
    44bd:	04 04 04 04 05 01 00 00 04 04 04 04 04 05 01 00     ................
    44cd:	04 04 04 04 04 02 01 00 04 04 04 04 04 02 01 00     ................
    44dd:	08 08 08 08 08 02 01 00 00 01 02 04 08 06 01 06     ................
    44ed:	00 01 05 04 08 06 01 06 00 00 01 02 08 06 01 06     ................
    44fd:	00 00 00 01 05 08 08 08 00 00 00 01 01 01 01 01     ................
    450d:	00 00 00 01 06 01 05 07 00 00 01 06 02 05 07 07     ................
    451d:	00 00 01 02 01 01 01 06 06 06 06 01 06 08 01 00     ................
    452d:	06 06 06 01 06 08 01 00 06 06 06 01 06 01 00 00     ................
    453d:	08 08 08 08 01 00 00 00 01 01 01 01 01 00 00 00     ................
    454d:	07 05 01 06 01 00 00 00 07 07 05 01 06 01 00 00     ................
    455d:	06 01 01 03 03 01 00 00 00 00 01 08 01 01 01 06     ................
    456d:	00 00 01 08 01 01 05 07 00 00 00 01 03 03 01 05     ................
    457d:	00 00 01 08 03 03 08 01 00 00 01 03 03 03 03 01     ................
    458d:	00 01 01 08 03 03 08 01 00 00 01 01 08 08 01 01     ................
    459d:	00 00 00 00 01 01 01 01 06 01 01 03 03 01 00 00     ................
    45ad:	07 07 05 01 01 00 00 00 05 05 01 01 01 00 00 00     ................
    45bd:	01 01 03 08 01 00 00 00 01 08 03 03 08 01 00 00     ................
    45cd:	01 01 01 01 01 01 01 00 01 01 01 01 01 01 00 00     ................
    45dd:	01 01 01 01 00 00 00 00 00 00 00 00 00 01 01 00     ................
    45ed:	00 00 00 00 01 08 08 01 00 00 00 00 01 01 01 01     ................
    45fd:	00 00 00 01 01 02 04 04 00 00 01 05 04 04 04 04     ................
    460d:	00 01 05 04 04 04 04 04 00 01 02 04 04 04 04 04     ................
    461d:	00 01 02 04 04 04 04 04 00 00 00 00 00 00 00 00     ................
	...
    4635:	01 01 01 00 00 00 00 00 04 04 02 01 01 00 00 00     ................
    4645:	04 04 04 04 07 01 00 00 04 04 04 04 02 05 01 00     ................
    4655:	04 04 04 04 04 02 01 00 04 04 04 04 04 02 01 00     ................
    4665:	00 01 02 04 04 04 04 04 00 01 02 04 04 04 08 08     ................
    4675:	00 01 05 04 04 08 06 01 00 00 01 02 04 08 06 01     ................
    4685:	00 00 00 01 05 08 08 01 00 00 00 00 01 01 01 01     ................
    4695:	00 00 00 01 06 01 05 07 00 00 00 01 01 01 07 07     ................
    46a5:	04 04 04 04 04 02 01 00 08 08 08 08 08 08 01 00     ................
    46b5:	06 06 06 06 01 08 01 00 06 06 06 06 01 01 00 00     ................
    46c5:	06 06 03 08 01 00 00 00 01 01 01 01 01 00 00 00     ................
    46d5:	07 01 08 03 08 01 00 00 07 01 03 03 03 01 00 00     ................
    46e5:	00 00 00 01 03 03 01 06 00 00 01 08 03 03 08 01     ................
    46f5:	00 00 01 03 03 03 03 01 00 00 01 03 03 03 03 01     ................
    4705:	00 00 01 03 03 03 03 01 00 01 01 08 03 03 08 01     ................
    4715:	00 00 01 01 03 03 01 01 00 00 00 00 01 01 01 01     ................
    4725:	06 01 08 03 08 01 00 00 06 01 01 01 01 01 00 00     ................
    4735:	07 07 05 01 01 00 00 00 05 05 01 08 01 00 00 00     ................
    4745:	01 01 08 08 01 01 00 00 01 01 01 01 01 01 01 00     ................
    4755:	01 01 01 01 01 01 00 00 01 01 01 01 00 00 00 00     ................
    4765:	00 00 00 00 00 01 01 01 00 01 01 00 01 05 02 02     ................
    4775:	01 03 08 01 05 02 04 04 01 08 01 05 02 02 04 04     ................
    4785:	00 01 01 02 02 04 04 04 00 00 01 02 02 04 04 04     ................
    4795:	00 00 01 02 02 04 04 04 00 00 01 02 02 02 04 04     ................
    47a5:	01 01 01 00 00 00 00 00 04 04 02 01 01 00 00 00     ................
    47b5:	04 04 04 04 02 01 00 00 04 04 04 04 04 05 01 00     ................
    47c5:	04 04 04 04 04 02 01 00 04 04 08 08 08 08 01 00     ................
    47d5:	04 08 06 01 06 06 01 00 04 08 06 01 06 06 01 00     ................
    47e5:	00 00 01 05 02 02 04 04 00 00 00 01 05 02 02 04     ................
    47f5:	00 00 00 00 01 01 05 02 00 00 00 00 00 00 01 01     ................
    4805:	00 00 00 00 00 00 01 05 00 00 00 00 00 00 01 05     ................
    4815:	00 00 00 00 00 00 01 01 00 00 00 00 00 00 01 01     ................
    4825:	04 08 06 01 06 06 01 00 04 04 08 08 08 08 01 00     ................
    4835:	02 02 02 02 05 01 00 00 01 01 01 01 01 00 00 00     ................
    4845:	01 06 01 07 01 00 00 00 01 06 01 07 07 01 00 00     ................
    4855:	01 06 01 01 06 01 00 00 01 03 03 01 06 01 00 00     ................
    4865:	00 00 00 00 00 00 01 05 00 00 00 00 00 00 00 01     ................
    4875:	00 00 00 00 00 00 00 01 00 00 00 00 00 01 01 01     ................
    4885:	00 00 00 01 01 01 01 08 00 00 01 01 01 01 01 03     ................
    4895:	00 00 00 01 01 01 01 01 00 00 00 00 00 01 01 01     ................
    48a5:	01 03 03 01 05 01 00 00 01 01 01 05 01 00 00 00     ................
    48b5:	06 01 01 01 00 00 00 00 02 01 01 01 01 00 00 00     ................
    48c5:	03 03 03 08 01 01 01 00 03 03 03 03 01 01 01 01     ................
    48d5:	01 01 01 01 01 01 01 00 01 01 01 01 01 00 00 00     ................
	...
    48ed:	00 00 01 01 00 01 01 01 00 01 03 08 01 05 02 02     ................
    48fd:	00 01 08 01 05 02 04 04 00 00 01 05 02 02 04 04     ................
    490d:	00 00 01 02 02 04 04 04 00 00 01 02 02 04 04 04     ................
    491d:	00 00 01 02 02 04 04 04 00 00 00 00 00 00 00 00     ................
    492d:	01 01 01 00 00 00 00 00 04 04 02 01 01 00 00 00     ................
    493d:	04 04 04 04 02 01 00 00 04 04 04 04 04 05 01 00     ................
    494d:	04 04 04 04 04 02 01 00 04 04 04 02 08 08 01 00     ................
    495d:	04 08 08 08 06 06 01 00 00 00 01 02 02 04 04 04     ................
    496d:	00 00 01 05 02 02 04 04 00 00 00 01 05 02 04 04     ................
    497d:	00 00 00 00 01 01 05 02 00 00 00 00 00 01 01 01     ................
    498d:	00 00 00 00 00 00 01 05 00 00 00 00 00 01 01 05     ................
    499d:	00 00 00 00 01 08 01 01 08 06 01 06 06 06 01 00     ................
    49ad:	08 06 01 06 06 06 01 00 08 06 01 06 08 08 01 00     ................
    49bd:	02 08 08 08 05 01 00 00 01 01 01 01 01 00 00 00     ................
    49cd:	01 06 01 05 01 00 00 00 01 01 06 06 01 01 00 00     ................
    49dd:	01 01 01 01 03 03 01 00 00 00 00 00 01 08 01 01     ................
    49ed:	00 00 00 00 00 01 01 05 00 00 00 00 01 01 06 06     ................
    49fd:	00 00 00 01 08 06 06 01 00 00 00 01 03 03 03 03     ................
    4a0d:	00 00 01 01 01 03 03 03 00 00 00 01 01 01 01 01     ................
    4a1d:	00 00 00 00 00 01 01 01 01 01 01 01 03 03 01 00     ................
    4a2d:	05 07 07 05 01 01 01 00 01 05 05 01 08 08 01 00     ................
    4a3d:	01 01 01 08 08 08 01 00 08 01 01 08 08 01 01 00     ................
    4a4d:	03 01 01 01 01 01 01 01 01 01 01 01 01 01 01 00     ................
    4a5d:	01 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00     ................
    4a6d:	00 00 01 01 00 00 00 00 00 01 03 08 01 01 01 01     ................
    4a7d:	00 01 08 01 05 02 02 04 00 00 01 05 02 04 04 04     ................
    4a8d:	00 01 05 02 02 04 04 04 00 01 02 02 04 04 04 04     ................
    4a9d:	00 01 02 02 04 04 04 04 00 00 00 00 00 00 00 00     ................
	...
    4ab5:	01 01 01 00 00 00 00 00 04 02 02 01 00 00 00 00     ................
    4ac5:	04 04 04 02 01 00 00 00 04 04 04 04 05 01 00 00     ................
    4ad5:	04 04 04 04 08 01 00 00 04 04 04 08 01 01 00 00     ................
    4ae5:	00 01 02 02 04 04 04 04 00 01 02 02 04 04 04 08     ................
    4af5:	00 01 05 02 04 04 08 06 00 00 01 05 02 04 08 06     ................
    4b05:	00 00 00 01 05 02 08 06 00 00 00 00 01 01 05 08     ................
    4b15:	00 00 00 01 01 01 01 01 00 00 01 08 08 01 05 01     ................
    4b25:	04 08 08 06 01 01 00 00 08 06 06 06 01 01 00 00     ................
    4b35:	01 06 06 06 08 01 00 00 01 06 06 08 01 00 00 00     ................
    4b45:	01 08 08 05 01 00 00 00 08 01 01 01 01 01 00 00     ................
    4b55:	05 05 06 01 03 03 01 00 05 05 01 01 03 03 01 00     ................
    4b65:	00 00 01 08 08 01 01 01 00 00 00 01 01 01 01 01     ................
    4b75:	00 00 01 01 01 01 01 05 00 01 08 03 08 06 06 05     ................
    4b85:	00 01 08 03 03 08 01 01 00 01 01 08 03 03 08 01     ................
    4b95:	00 00 01 01 01 01 01 01 00 00 00 00 01 01 01 01     ................
    4ba5:	05 01 01 06 01 01 01 00 01 01 01 06 01 08 08 01     ................
    4bb5:	07 07 05 05 01 08 08 01 05 05 05 01 08 08 08 01     ................
    4bc5:	01 01 01 01 08 08 01 00 01 01 01 01 01 01 01 00     ................
    4bd5:	01 01 01 01 01 01 00 00 01 01 01 01 00 00 00 00     ................
	...
    4bed:	00 00 01 01 00 01 01 01 00 01 03 08 01 05 02 02     ................
    4bfd:	00 01 08 08 01 02 04 04 00 00 01 01 02 02 04 04     ................
    4c0d:	00 00 01 05 02 04 04 04 00 00 01 02 02 04 04 04     ................
    4c1d:	00 00 01 02 02 04 04 04 00 00 00 00 00 00 00 00     ................
    4c2d:	01 01 01 00 00 00 00 00 04 04 02 01 01 00 00 00     ................
    4c3d:	04 04 04 04 02 01 00 00 04 04 04 04 04 05 01 00     ................
    4c4d:	04 04 04 08 02 02 01 00 04 04 08 06 08 08 01 00     ................
    4c5d:	04 04 08 06 01 06 01 00 00 00 01 02 02 02 04 04     ................
    4c6d:	00 00 01 05 02 02 04 04 00 00 00 01 05 02 02 04     ................
    4c7d:	00 00 00 00 01 01 05 02 00 00 00 00 00 01 01 01     ................
    4c8d:	00 00 00 00 00 00 01 01 00 00 00 00 00 00 01 06     ................
    4c9d:	00 00 00 00 00 01 03 03 04 04 08 06 01 06 01 00     ................
    4cad:	04 04 08 06 01 06 01 00 04 04 04 08 08 08 01 00     ................
    4cbd:	02 02 02 02 05 01 00 00 01 01 01 01 01 00 00 00     ................
    4ccd:	06 06 01 07 01 00 00 00 06 01 05 07 07 01 01 00     ................
    4cdd:	01 01 01 01 06 01 01 00 00 00 00 00 00 01 03 03     ................
    4ced:	00 00 00 00 00 01 01 01 00 00 00 00 00 01 08 08     ................
    4cfd:	00 00 00 00 00 01 08 08 00 00 00 01 01 01 01 08     ................
    4d0d:	00 00 01 01 01 01 01 01 00 00 00 01 01 01 01 01     ................
    4d1d:	00 00 00 00 00 01 01 01 01 01 01 01 06 01 00 00     ................
    4d2d:	05 07 05 05 01 01 00 00 05 05 06 01 08 08 01 00     ................
    4d3d:	08 01 01 06 03 03 01 00 08 01 08 03 03 08 01 00     ................
    4d4d:	01 01 03 03 08 01 01 01 01 01 01 01 01 01 01 00     ................
    4d5d:	01 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00     ................
    4d6d:	00 00 01 01 00 00 00 00 00 01 03 08 01 01 01 01     ................
    4d7d:	00 01 08 08 01 05 02 04 00 00 01 01 02 02 04 04     ................
    4d8d:	00 00 01 02 02 04 04 04 00 01 05 02 02 04 04 04     ................
    4d9d:	00 01 02 02 02 04 04 04 00 00 00 00 00 00 00 00     ................
	...
    4db5:	01 01 01 00 00 00 00 00 04 02 05 01 00 00 00 00     ................
    4dc5:	04 04 04 02 01 00 00 00 04 04 04 02 05 01 00 00     ................
    4dd5:	04 04 08 08 02 01 00 00 04 04 08 06 08 01 00 00     ................
    4de5:	00 01 02 02 02 04 04 04 00 01 02 02 02 04 04 04     ................
    4df5:	00 01 01 02 02 02 04 04 00 00 01 05 02 02 02 02     ................
    4e05:	00 00 00 01 01 05 02 02 00 00 00 00 01 01 01 01     ................
    4e15:	00 00 00 00 01 01 06 06 00 00 00 01 03 03 01 01     ................
    4e25:	04 04 08 06 01 01 00 00 04 04 08 06 01 01 00 00     ................
    4e35:	04 04 04 08 01 01 00 00 04 04 04 02 08 01 00 00     ................
    4e45:	02 02 02 05 01 01 01 00 01 01 01 01 01 08 08 01     ................
    4e55:	06 01 07 01 01 08 08 01 01 05 07 07 01 01 01 00     ................
    4e65:	00 00 00 01 03 03 01 01 00 00 00 01 01 01 01 01     ................
    4e75:	00 00 00 01 08 08 01 05 00 00 00 01 08 08 01 05     ................
    4e85:	00 00 01 01 01 08 08 01 00 01 01 01 01 01 01 01     ................
    4e95:	00 00 01 01 01 01 01 01 00 00 00 00 01 01 01 01     ................
    4ea5:	01 01 01 06 01 01 00 00 01 01 01 06 01 01 01 00     ................
    4eb5:	07 07 05 05 01 08 08 01 05 05 06 06 08 03 03 01     ................
    4ec5:	01 01 01 08 03 03 08 01 01 01 01 03 03 08 01 00     ................
    4ed5:	01 01 01 01 01 01 00 00 01 01 01 01 00 00 00 00     ................
    4ee5:	00 00 00 00 00 01 01 01 00 00 00 01 01 02 04 04     ................
    4ef5:	00 00 01 05 04 04 04 04 00 01 05 04 04 04 04 04     ................
    4f05:	00 01 02 04 04 04 04 04 00 01 02 04 08 08 08 08     ................
    4f15:	00 01 02 08 06 01 06 06 00 01 01 08 06 01 06 06     ................
    4f25:	01 03 03 01 06 01 06 06 01 03 03 01 08 08 08 08     ................
    4f35:	01 08 08 01 02 02 04 04 00 01 02 06 01 01 01 01     ................
    4f45:	00 00 01 02 06 01 05 07 00 00 00 01 02 05 07 07     ................
    4f55:	00 00 00 00 01 01 01 06 00 00 00 00 01 01 01 06     ................
    4f65:	00 00 00 00 01 05 07 07 00 00 00 00 00 01 05 07     ................
    4f75:	00 01 01 00 01 06 01 01 01 03 03 01 06 01 01 01     ................
    4f85:	01 08 03 03 01 01 01 01 00 01 08 03 08 01 01 01     ................
    4f95:	00 00 01 08 08 01 01 01 00 00 00 01 01 01 01 01     ................
    4fa5:	00 00 01 01 00 01 01 01 00 01 03 01 01 02 04 04     ................
    4fb5:	00 01 01 05 04 04 04 04 00 00 05 04 04 04 04 04     ................
    4fc5:	00 01 02 04 04 04 04 04 00 01 02 04 04 04 08 08     ................
    4fd5:	00 01 02 04 04 08 06 01 00 01 01 01 01 08 06 01     ................
    4fe5:	01 01 01 00 00 00 00 00 04 04 02 01 01 00 00 00     ................
    4ff5:	04 04 04 02 05 01 00 00 04 04 04 04 02 05 01 00     ................
    5005:	04 04 04 04 02 02 01 00 08 08 08 08 08 08 01 00     ................
    5015:	06 06 06 06 01 06 01 00 06 06 06 06 01 06 01 00     ................
    5025:	00 01 08 03 08 01 06 01 00 01 03 03 03 01 08 08     ................
    5035:	00 01 08 03 08 01 02 02 00 00 01 01 02 06 01 01     ................
    5045:	00 00 00 00 01 02 06 01 00 00 00 00 00 01 05 07     ................
    5055:	00 00 00 00 00 01 01 01 00 00 00 00 00 01 01 01     ................
    5065:	06 06 06 06 01 06 01 01 08 08 08 08 08 08 01 01     ................
    5075:	02 02 02 02 02 01 08 01 01 01 01 01 01 02 01 00     ................
    5085:	07 07 05 01 02 01 00 00 07 07 07 05 01 00 00 00     ................
    5095:	01 06 06 01 01 00 00 00 01 06 06 01 01 00 00 00     ................
    50a5:	00 00 00 00 00 01 07 07 00 00 00 00 00 01 05 05     ................
    50b5:	00 00 01 01 00 01 06 01 00 01 03 03 01 06 02 01     ................
    50c5:	00 01 03 08 08 01 01 01 00 01 01 08 08 08 01 01     ................
    50d5:	00 01 01 01 08 08 01 01 00 00 01 01 01 01 01 01     ................
    50e5:	07 07 07 05 01 00 00 00 07 07 05 01 87 01 01 00     ................
    50f5:	05 05 01 06 01 03 03 01 01 01 01 01 03 03 08 01     ................
    5105:	01 01 01 08 03 08 01 00 01 01 01 08 08 01 01 00     ................
    5115:	01 01 01 01 01 01 00 00 01 01 01 01 00 00 00 00     ................
	...
    512d:	00 01 01 00 00 01 01 01 01 03 08 01 01 02 04 04     ................
    513d:	01 08 01 05 04 04 04 04 00 01 05 04 04 04 04 04     ................
    514d:	00 01 02 04 04 04 04 04 00 01 02 04 04 04 04 04     ................
    515d:	00 01 02 04 01 01 01 08 00 00 00 00 00 00 00 00     ................
    516d:	01 01 01 00 00 00 00 00 04 04 02 01 01 00 00 00     ................
    517d:	04 04 04 02 05 01 00 00 04 04 04 04 02 05 01 00     ................
    518d:	04 04 04 04 02 02 01 00 08 08 08 08 08 08 01 00     ................
    519d:	06 01 06 06 06 06 01 01 00 01 02 01 08 03 08 01     ................
    51ad:	00 01 02 01 03 03 03 01 00 01 05 01 08 03 08 01     ................
    51bd:	00 00 01 02 01 06 01 02 00 00 00 01 01 06 02 01     ................
    51cd:	00 00 00 00 00 01 06 01 00 00 00 00 00 01 05 05     ................
    51dd:	00 00 00 00 00 01 01 01 06 01 06 06 06 06 01 01     ................
    51ed:	06 01 06 06 06 06 01 01 08 08 08 08 08 08 01 01     ................
    51fd:	02 02 02 02 02 01 01 00 01 01 01 01 01 01 00 00     ................
    520d:	05 07 07 05 01 01 00 00 05 05 07 07 01 00 00 00     ................
    521d:	01 01 06 06 01 00 00 00 00 00 00 00 00 01 01 01     ................
    522d:	00 00 00 00 01 01 05 05 00 00 00 01 03 03 01 05     ................
    523d:	00 00 00 01 03 03 01 06 00 00 00 01 08 08 01 01     ................
    524d:	00 00 01 01 08 08 08 01 00 01 01 01 01 08 08 01     ................
    525d:	00 00 01 01 01 01 01 01 01 01 06 06 01 01 00 00     ................
    526d:	07 07 07 01 01 08 01 00 05 07 01 02 01 03 03 01     ................
    527d:	05 05 05 01 02 08 08 01 01 01 01 01 08 08 01 00     ................
    528d:	01 01 01 01 08 01 01 00 01 01 01 01 01 01 00 00     ................
    529d:	01 01 01 01 00 00 00 00 00 00 00 00 00 00 00 01     ................
    52ad:	00 00 00 00 01 01 01 03 00 00 00 01 02 02 01 08     ................
    52bd:	00 00 01 02 04 04 02 01 00 01 05 04 04 04 04 04     ................
    52cd:	00 01 02 04 04 04 04 04 00 01 02 04 04 04 04 04     ................
    52dd:	00 01 02 04 04 04 04 04 00 01 02 02 08 08 08 08     ................
    52ed:	00 01 02 08 06 01 06 06 00 00 01 08 06 01 06 06     ................
    52fd:	00 00 00 01 03 01 06 06 00 00 00 01 01 01 01 01     ................
    530d:	00 00 01 06 01 05 07 07 00 00 01 06 01 01 01 06     ................
    531d:	00 00 00 01 01 01 01 06 00 00 00 00 01 05 07 07     ................
    532d:	00 00 00 00 01 01 05 07 00 00 00 00 01 06 01 01     ................
    533d:	00 00 00 01 01 02 01 01 00 00 01 08 03 03 08 01     ................
    534d:	00 01 01 03 03 03 08 01 00 00 01 01 01 01 01 01     ................
    535d:	00 00 00 00 01 01 01 01 00 00 00 01 01 06 05 07     ................
    536d:	00 00 01 08 01 02 01 05 00 00 01 08 08 01 08 01     ................
    537d:	00 00 01 08 08 08 08 01 00 00 01 01 08 08 01 01     ................
    538d:	00 01 01 01 01 01 01 01 00 00 01 01 01 01 01 01     ................
    539d:	00 00 00 00 01 01 01 01 00 00 00 00 01 01 05 05     ................
    53ad:	00 00 00 01 03 03 01 05 00 00 01 08 03 03 08 01     ................
    53bd:	00 00 01 03 03 03 03 01 00 00 01 08 03 03 08 01     ................
    53cd:	00 01 01 01 08 08 01 01 00 00 01 01 01 01 01 01     ................
    53dd:	00 00 00 00 01 01 01 01 00 01 02 02 08 08 08 08     ................
    53ed:	00 01 02 08 06 06 06 06 00 00 01 08 06 01 06 06     ................
    53fd:	00 00 00 01 03 06 06 06 00 00 00 01 01 01 01 01     ................
    540d:	00 00 01 06 01 05 07 07 00 00 01 06 01 01 01 06     ................
    541d:	00 00 00 01 01 01 01 06 00 00 00 00 00 01 01 01     ................
    542d:	00 00 00 01 01 02 04 04 00 00 01 05 04 04 04 04     ................
    543d:	00 01 05 04 04 04 04 04 00 01 02 04 04 04 04 04     ................
    544d:	00 01 02 04 08 08 08 08 00 01 02 08 06 01 06 06     ................
    545d:	00 01 02 08 06 01 06 06 00 01 05 08 06 01 06 06     ................
    546d:	00 00 01 02 08 08 08 08 00 00 00 01 05 02 02 04     ................
    547d:	00 00 00 01 01 01 01 01 00 00 00 01 06 01 05 07     ................
    548d:	00 00 01 06 01 05 07 07 00 00 01 06 01 01 01 06     ................
    549d:	00 00 00 01 01 01 01 06 00 01 05 08 06 01 06 06     ................
    54ad:	00 00 01 02 08 08 08 08 01 00 00 01 05 02 02 04     ................
    54bd:	08 01 01 01 01 01 01 01 08 06 06 06 02 01 05 07     ................
    54cd:	01 01 01 01 05 05 07 07 00 00 00 01 01 01 01 06     ................
    54dd:	00 00 00 01 01 01 01 06 00 00 00 00 00 00 00 00     ................
	...
    54f5:	00 01 01 01 00 00 00 00 01 03 03 08 01 00 00 00     ................
    5505:	01 03 08 08 06 00 00 00 00 01 01 01 01 00 00 00     ................
	...
    5529:	00 01 01 01 00 00 00 01 01 02 04 04 00 00 01 05     ................
    5539:	04 04 04 04 00 01 05 04 04 04 04 04 00 01 02 04     ................
    5549:	04 04 04 04 00 01 02 02 08 08 08 08 00 01 01 08     ................
    5559:	06 01 06 06 01 03 03 01 06 01 06 06 01 03 08 01     ................
    5569:	06 01 06 06 01 08 08 01 08 08 08 08 00 01 06 01     ................
    5579:	05 02 02 04 00 01 06 06 01 01 01 01 00 00 01 06     ................
    5589:	02 01 05 07 00 00 00 01 05 05 07 07 00 00 00 01     ................
    5599:	01 01 01 06 00 00 00 01 01 01 01 06 00 00 00 00     ................
    55a9:	00 00 00 01 00 00 00 00 00 00 01 03 00 00 00 00     ................
    55b9:	00 00 01 08 00 00 00 00 00 01 01 01 00 00 00 01     ................
    55c9:	01 02 04 04 00 00 01 02 04 04 04 04 00 01 05 04     ................
    55d9:	04 04 04 04 00 01 02 04 04 04 04 04 00 01 02 04     ................
    55e9:	04 04 04 04 00 01 02 08 08 08 08 08 00 01 02 08     ................
    55f9:	06 01 06 06 00 01 05 08 06 01 06 06 00 00 01 08     ................
    5609:	06 01 06 06 00 00 00 01 08 08 08 08 00 00 00 00     ................
    5619:	01 01 01 01 00 00 00 01 02 01 05 05 00 00 01 06     ................
    5629:	01 05 05 07 00 00 01 03 08 01 05 07 00 00 01 03     ................
    5639:	03 01 01 06 00 00 01 03 08 01 01 05 00 00 01 01     ................
    5649:	01 08 08 01 00 01 01 08 03 03 08 01 00 00 01 01     ................
    5659:	01 01 01 01 00 00 00 00 01 01 01 01 00 00 00 00     ................
    5669:	00 01 01 01 00 00 00 01 01 02 04 04 00 00 01 02     ................
    5679:	04 04 04 04 00 01 02 04 04 04 04 04 00 01 02 04     ................
    5689:	04 04 04 04 00 01 02 04 08 08 08 08 00 01 02 08     ................
    5699:	06 01 06 06 00 01 01 08 06 01 06 06 01 03 03 01     ................
    56a9:	06 01 06 06 01 03 03 01 08 08 08 08 01 08 08 01     ................
    56b9:	02 02 02 02 00 01 02 06 01 01 01 01 00 00 01 02     ................
    56c9:	06 01 05 07 00 00 00 01 02 05 07 07 00 00 00 00     ................
    56d9:	01 01 01 06 00 00 00 00 01 01 01 06 00 00 00 00     ................
    56e9:	01 05 07 07 00 00 00 00 01 01 05 07 00 00 00 01     ................
    56f9:	08 06 01 01 00 00 01 08 03 06 08 01 00 00 01 08     ................
    5709:	03 08 08 01 00 00 01 08 08 08 08 01 00 00 00 01     ................
    5719:	08 08 01 00 00 00 00 00 01 01 00 00 00 00 00 00     ................
	...
    5741:	00 01 01 01 00 00 00 01 01 01 01 01 00 00 01 01     ................
    5751:	01 01 01 01 00 00 00 01 01 01 01 01 00 00 00 00     ................
    5761:	00 01 01 01 00 00 00 00 00 01 01 01 00 00 00 01     ................
    5771:	01 02 03 03 00 00 01 02 03 03 03 03 00 01 02 03     ................
    5781:	03 03 03 03 00 01 02 03 03 03 03 03 00 01 02 03     ................
    5791:	04 04 04 04 00 01 02 04 01 05 01 05 00 01 02 04     ................
    57a1:	05 01 05 05 00 01 02 04 01 05 01 05 00 01 01 01     ................
    57b1:	04 04 04 04 01 04 06 04 01 02 02 02 01 06 06 06     ................
    57c1:	01 01 01 01 01 04 06 04 01 02 05 05 00 01 01 01     ................
    57d1:	02 01 01 05 00 00 01 01 01 01 01 05 00 00 01 01     ................
    57e1:	02 05 05 05 00 00 01 01 01 02 05 05 00 01 06 06     ................
    57f1:	06 01 02 05 00 01 04 04 06 01 01 02 00 01 04 04     ................
    5801:	06 01 02 01 00 00 01 04 04 06 01 01 00 01 01 04     ................
    5811:	04 06 01 01 00 00 01 01 01 01 01 01 00 00 00 00     ................
    5821:	01 01 01 01 00 00 00 00 00 01 01 01 00 00 00 01     ................
    5831:	01 02 03 03 00 00 01 02 03 03 03 03 00 01 02 03     ................
    5841:	03 03 03 03 00 01 02 03 04 04 04 04 00 01 02 04     ................
    5851:	01 05 01 05 00 01 02 04 05 01 05 05 00 01 02 04     ................
    5861:	05 05 01 05 00 01 01 01 04 04 04 04 01 04 06 04     ................
    5871:	01 01 01 01 01 06 06 06 01 01 02 02 01 04 06 01     ................
    5881:	02 04 01 04 00 01 01 02 04 01 00 01 00 00 01 02     ................
    5891:	01 00 00 00 00 00 01 02 01 00 00 00 00 00 01 02     ................
    58a1:	04 01 00 00 00 00 01 02 01 00 00 00 00 01 01 01     ................
    58b1:	06 01 01 00 00 01 04 01 02 01 04 01 00 01 04 06     ................
    58c1:	01 01 02 04 00 01 04 04 06 06 01 01 00 01 01 04     ................
    58d1:	04 04 01 01 00 00 01 01 01 01 01 01 00 00 00 00     ................
    58e1:	01 01 01 01 00 00 00 00 00 01 01 01 00 00 00 01     ................
    58f1:	01 02 03 03 00 00 01 02 04 04 04 04 00 01 02 04     ................
    5901:	01 05 01 05 00 01 02 04 05 01 05 05 00 01 02 01     ................
    5911:	01 01 01 01 00 00 01 01 01 02 02 02 00 01 04 01     ................
    5921:	02 02 04 01 01 04 01 02 01 00 00 00 01 01 02 01     ................
    5931:	00 00 00 00 00 01 02 04 00 00 00 00 01 02 04 01     ................
    5941:	00 00 00 00 01 02 01 01 00 00 00 00 01 02 02 04     ................
    5951:	00 00 00 00 01 02 01 01 00 00 00 00 01 02 04 01     ................
    5961:	00 00 00 00 01 02 02 04 00 00 00 00 00 01 04 01     ................
    5971:	00 00 00 00 01 01 02 04 01 01 00 00 01 04 01 02     ................
    5981:	04 02 01 00 01 04 04 01 02 02 04 01 00 01 04 04     ................
    5991:	01 02 02 02 00 00 01 01 01 01 01 01 00 00 00 00     ................
    59a1:	01 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    59c9:	00 01 00 00 00 00 00 00 01 04 01 00 00 00 00 00     ................
    59d9:	00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    59f5:	00 01 00 00 00 00 00 00 01 04 01 00 00 00 00 00     ................
    5a05:	00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    5a1d:	00 01 00 00 00 00 00 00 01 04 01 00 00 00 00 00     ................
    5a2d:	00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    5a49:	00 01 00 00 00 00 00 00 01 04 01 00 00 00 00 00     ................
    5a59:	00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    5a79:	00 00 01 01 00 00 00 00 01 01 02 02 00 00 00 01     ................
    5a89:	03 03 03 01 00 00 01 03 04 05 01 04 00 00 01 03     ................
    5a99:	05 06 01 05 00 01 02 03 05 04 01 04 00 00 00 00     ................
    5aa9:	00 07 00 00 00 00 00 00 07 08 07 00 01 00 00 00     ................
    5ab9:	07 08 07 00 01 01 01 01 09 07 00 00 04 04 01 09     ................
    5ac9:	0a 01 00 00 06 01 09 0a 01 00 00 00 05 05 01 01     ................
    5ad9:	01 00 00 00 05 04 04 03 01 01 00 00 00 01 02 03     ................
    5ae9:	03 03 03 01 00 01 02 02 03 03 03 02 00 01 02 02     ................
    5af9:	02 02 02 02 00 00 01 02 02 02 02 02 00 00 01 02     ................
    5b09:	02 02 02 02 00 00 00 01 02 02 02 02 00 00 00 00     ................
    5b19:	01 01 02 02 00 00 00 00 00 00 01 01 04 04 03 01     ................
    5b29:	02 01 00 00 01 01 01 02 02 01 00 00 02 02 02 02     ................
    5b39:	02 01 00 00 02 02 02 02 01 00 00 00 02 02 02 02     ................
    5b49:	01 00 00 00 02 02 02 01 00 00 00 00 02 01 01 00     ................
    5b59:	00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    5b71:	00 00 01 01 00 00 00 00 01 01 02 02 00 00 00 01     ................
    5b81:	02 03 03 02 00 00 01 02 04 05 04 01 00 00 01 04     ................
    5b91:	06 06 05 01 00 01 03 04 06 06 04 01 00 01 03 03     ................
    5ba1:	04 04 03 03 00 00 00 00 00 00 0e 00 01 01 00 00     ................
    5bb1:	00 0e 07 0e 02 01 01 01 01 0e 08 0e 01 04 04 01     ................
    5bc1:	09 0a 0e 00 04 06 01 09 0a 01 00 00 05 05 05 01     ................
    5bd1:	01 01 00 00 04 05 04 04 03 01 01 00 01 04 04 03     ................
    5be1:	01 02 01 00 00 01 02 03 03 03 03 03 00 01 02 02     ................
    5bf1:	03 03 03 02 00 01 02 02 02 02 02 02 00 00 01 02     ................
    5c01:	02 02 02 02 00 00 01 02 02 02 02 02 00 00 00 01     ................
    5c11:	02 02 02 02 00 00 00 00 01 01 02 02 00 00 00 00     ................
    5c21:	00 00 01 01 02 01 01 01 02 02 01 00 02 02 02 02     ................
    5c31:	02 02 01 00 02 02 02 02 02 02 01 00 02 02 02 02     ................
    5c41:	02 01 00 00 02 02 02 02 02 01 00 00 02 02 02 02     ................
    5c51:	01 00 00 00 02 02 01 01 00 00 00 00 01 01 00 00     ................
	...
    5c69:	00 01 01 01 00 00 00 01 01 02 03 03 00 00 01 02     ................
    5c79:	04 05 04 03 00 01 02 04 06 06 05 03 00 01 03 04     ................
    5c89:	06 06 04 03 01 02 03 04 05 05 03 03 01 03 03 03     ................
    5c99:	04 04 03 03 01 03 03 03 03 03 03 03 01 01 01 00     ................
    5ca9:	00 00 01 07 02 02 01 01 01 01 09 08 03 01 04 04     ................
    5cb9:	01 09 0a 01 01 04 06 01 09 0a 01 00 01 05 05 05     ................
    5cc9:	01 01 01 00 01 04 05 04 04 03 01 01 03 01 04 04     ................
    5cd9:	03 01 02 01 03 02 01 01 01 02 02 01 01 02 03 03     ................
    5ce9:	03 03 03 03 01 02 02 03 03 03 03 02 01 02 02 02     ................
    5cf9:	02 02 02 02 00 01 02 02 02 02 02 02 00 01 02 02     ................
    5d09:	02 02 02 02 00 00 01 02 02 02 02 02 00 00 00 01     ................
    5d19:	01 02 02 02 00 00 00 00 00 01 01 01 02 02 02 02     ................
    5d29:	02 02 02 01 02 02 02 02 02 02 02 01 02 02 02 02     ................
    5d39:	02 02 02 01 02 02 02 02 02 02 01 00 02 02 02 02     ................
    5d49:	02 02 01 00 02 02 02 02 02 01 00 00 02 02 02 01     ................
    5d59:	01 00 00 00 01 01 01 00 00 00 00 00 00 00 00 00     ................
    5d69:	00 00 01 01 00 00 00 00 00 00 01 01 00 00 00 00     ................
    5d79:	00 00 01 01 00 00 00 00 00 00 01 01 00 00 00 00     ................
    5d89:	00 00 01 01 00 00 00 00 00 00 01 01 00 00 00 00     ................
    5d99:	00 00 01 01 00 00 00 00 00 00 01 01 00 00 00 01     ................
    5da9:	01 01 01 01 00 00 00 01 01 01 01 01 00 00 00 01     ................
    5db9:	01 01 01 01 00 00 00 01 01 01 01 01 00 00 00 01     ................
    5dc9:	01 01 01 01 00 00 00 01 01 01 01 01 00 00 00 01     ................
    5dd9:	01 01 01 01 00 00 00 01 01 01 01 01 01 01 01 01     ................
    5de9:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    5df9:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    5e09:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    5e19:	01 01 01 01 01 01 01 01 01 01 01 01 fe fe fe fe     ................
    5e29:	fe 01 01 01 fe fe fe 01 01 ac 01 5f fe fe 01 ac     ..........._....
    5e39:	ff ff 01 5f fe 01 8a ff ff ff ac 01 fe 01 ac ff     ..._............
    5e49:	ff ff ff ff fe 01 ac ff ff ff ff ff fe 01 ac ff     ................
    5e59:	ff ff ff ff fe 01 ac ff ff ff ff ff fe 01 8a ac     ................
    5e69:	ff ff ff ff 09 ec 01 ac ac ac ff ff 09 f6 01 01     ................
    5e79:	8a ac ac ac 09 01 0f 0f 01 01 01 01 09 01 0f ac     ................
    5e89:	77 8a dc dc 09 f6 01 01 8a dc dc dc 09 ec f6 f6     w...............
    5e99:	f6 f6 f6 f6 09 e2 e2 e2 e2 e2 e2 e2 fe fe fe fe     ................
    5ea9:	fe 00 00 00 fe fe fe 00 00 ac ff ff fe fe 00 8a     ................
    5eb9:	ff ff ff ff fe 00 8a ff ff ff ff ff fe 00 ac ff     ................
    5ec9:	ff ff ff ff fe 00 ac ff 0f 0f 0f 0f fe 00 ac 0f     ................
    5ed9:	77 00 77 77 fe 00 ac 0f 77 00 77 77 fe 00 8a 0f     w.ww....w.ww....
    5ee9:	77 00 77 77 09 ec 00 ac 0f 0f 0f 0f 09 f6 90 00     w.ww............
    5ef9:	8a ac ac ff 09 f6 09 00 00 00 00 00 09 f6 00 0f     ................
    5f09:	00 8a 8a dc 09 00 5f 5f 5f 00 dc dc 09 00 0f 0f     ......___.......
    5f19:	0f 00 f6 f6 09 e2 00 00 00 e2 e2 e2 fe fe fe fe     ................
    5f29:	fe 01 01 01 fe fe fe 01 01 ac ff ff fe fe 01 ac     ................
    5f39:	ff ff ff ff fe 01 8a ff ff ff ff ff fe 01 ac ff     ................
    5f49:	ff ff ff ff fe 01 0f 0f 0f 0f ff ff fe 01 77 77     ..............ww
    5f59:	01 77 0f ff fe 01 77 77 01 77 0f ff 01 01 01 fe     .w....ww.w......
    5f69:	fe fe fe fe ac ac 8a 01 fe 01 01 fe ff ff ac ac     ................
    5f79:	01 0f 5f 01 ff ff ac ac 8a 01 0f 01 ff ff ff ac     .._.............
    5f89:	ac 01 01 fe ff ff ff ac ac 01 fe fe ff ff ff ac     ................
    5f99:	ac 01 fe fe ff ff ac ac ac 01 fe fe fe 01 77 77     ..............ww
    5fa9:	01 77 0f ff 09 01 0f 0f 0f 0f ff ff 09 01 01 8a     .w..............
    5fb9:	ac ac ac ac 01 01 01 01 01 01 01 01 01 5f 0f 01     ............._..
    5fc9:	01 77 ac 8a 01 5f 0f 0f 77 ac 01 8a 01 0f 0f 01     .w..._..w.......
    5fd9:	01 01 f6 f6 09 01 01 e2 e2 e2 e2 e2 ff ff ac ac     ................
    5fe9:	8a 01 09 fe ff ac ac 8a 01 f6 ec 09 ac 8a 01 01     ................
    5ff9:	e2 90 f6 09 01 01 e2 e2 90 09 f6 09 8a 01 90 90     ................
    6009:	90 09 f6 09 8a 01 09 09 09 09 f6 09 f6 f6 f6 f6     ................
    6019:	f6 f6 ec 09 e2 e2 e2 e2 e2 e2 e2 09 09 e2 ec ec     ................
    6029:	ec ec e2 90 fe 09 ec ec ec ec ec e2 fe 09 e2 ec     ................
    6039:	ec ec ec ec fe fe 09 ec ec ec ec ec fe fe 09 e2     ................
    6049:	ec ec ec ec fe fe fe 09 09 09 09 09 fe fe fe 09     ................
    6059:	ad ad 09 fe fe fe fe fe 09 09 fe fe                 ............

00006065 <FrameTable>:
    6065:	00 00 01 01 02 02 01 03 04 05 06 07 08 00 09 0a     ................
    6075:	0b 0c 0d 0e 00 03 04 05 06 07 08 00 00 00 01 01     ................
    6085:	02 02 01 04 03 06 05 08 07 02 0a 09 0c 0b 0e 0d     ................
    6095:	02 04 03 06 05 08 07 02 0f 0f 10 10 11 11 01 12     ................
    60a5:	13 14 15 16 17 00 18 19 1a 1b 1c 1d 00 12 13 14     ................
    60b5:	15 16 17 00 0f 0f 10 10 11 11 01 13 12 15 14 17     ................
    60c5:	16 02 19 18 1b 1a 1d 1c 02 13 12 15 14 17 16 02     ................
    60d5:	1f 1e 21 20 23 22 02 25 24 27 26 29 28 02 2b 2a     ..! #".%$'&)(.+*
    60e5:	2d 2c 2f 2e 02 25 24 27 26 29 28 02 1f 1e 21 20     -,/..%$'&)(...! 
    60f5:	23 22 02 31 30 33 32 35 34 02 37 36 39 38 3b 3a     #".103254.7698;:
    6105:	02 31 30 33 32 35 34 02 1e 1f 20 21 22 23 00 24     .103254... !"#.$
    6115:	25 26 27 28 29 00 2a 2b 2c 2d 2e 2f 00 24 25 26     %&'().*+,-./.$%&
    6125:	27 28 29 00 1e 1f 20 21 22 23 00 30 31 32 33 34     '()... !"#.01234
    6135:	35 00 36 37 38 39 3a 3b 00 30 31 32 33 34 35 00     5.6789:;.012345.
    6145:	3c 3c 3d 3d 3e 3e 01 3f 40 41 42 43 44 00 45 46     <<==>>.?@ABCD.EF
    6155:	47 48 49 4a 00 3f 40 41 42 43 44 00 3c 3c 3d 3d     GHIJ.?@ABCD.<<==
    6165:	3e 3e 01 40 3f 42 41 44 43 02 46 45 48 47 4a 49     >>.@?BADC.FEHGJI
    6175:	02 40 3f 42 41 44 43 02 57 57 58 58 59 59 01 5a     .@?BADC.WWXXYY.Z
    6185:	5a 5b 5b 5c 5c 01 4b 4b 4c 4c 4d 4d 01 4b 4b 4c     Z[[\\.KKLLMM.KKL
    6195:	4c 4e 4d 01 4b 4b 4c 4c 4f 4d 01 4b 4b 50 50 4d     LNM.KKLLOM.KKPPM
    61a5:	4d 01 51 51 52 52 4d 4d 01 51 51 53 53 4d 4d 01     M.QQRRMM.QQSSMM.
    61b5:	55 55 56 56 4d 4d 01 5e 5e 5f 5f 60 60 01 61 61     UUVVMM.^^__``.aa
    61c5:	62 62 63 63 01 64 64 65 65 66 66 01 67 67 68 68     bbcc.ddeeff.gghh
    61d5:	69 69 01 ff ff 6a 6b 6c 6d 00 ff ff 6e 6f 70 71     ii...jklm...nopq
    61e5:	00 ff ff 72 73 74 75 00 ff ff ff ff 5d 5d 01 79     ...rstu.....]].y
    61f5:	79 7a 7a 81 81 01 7b 7b 7c 7c 81 81 01 7d 7e 7f     yzz...{{||...}~.
    6205:	80 81 81 07 7e 7d 80 7f 81 81 08                    ....~}.....

00006210 <MirrorTable>:
    6210:	00 00 00 00 00 00 00 01 00 01 00 01 01 01 01 01     ................
    6220:	01 01 00 00 01 00 01 00 00 00 01 01 00 00 00 00     ................
    6230:	00 01 01 01 00 00 00 01 00 00 00 00 00 00 00 01     ................
    6240:	01 01 01 01 00 01                                   ......

00006246 <FireSequence>:
    6246:	00 01 02 01 00 00                                   ......

0000624c <StaticFrameTable>:
    624c:	01                                                  .

0000624d <IdleFrames>:
    624d:	2a 2a 2b 2b 2a 2a 2c 2c 2a 2a 2b 2b 2a 2a 2c 2c     **++**,,**++**,,
    625d:	2a 2a 2b 2b 2a 2a 2c 2c 2a 2a 2d 2d 2a 2a 2d 2d     **++**,,**--**--
    626d:	2a 2a 2d 2a 2d 2a 2a 2e 2e 2f 30 2f 30 2f 30 2f     **-*-**../0/0/0/
    627d:	30 2f 30 2f                                         0/0/

00006281 <patch00>:
    6281:	00 02 03 00 09 80 00 0a 6f 01 00 ea 00 ff           ........o.....

0000628f <patch01>:
    628f:	00 02 00 00 09 c0 00 0a 78 00 07 96 00 00 23 05     ........x.....#.
    629f:	00 e7 05 00 d3 01 ff                                .......

000062a6 <patch02>:
    62a6:	00 02 04 00 07 a0 00 00 14 01 00 1e 00 02 04 01     ................
    62b6:	00 f0 01 00 f2 04 ff                                .......

000062bd <patch03>:
    62bd:	00 01 de 00 09 de 00 0a 78 00 07 91 00 00 1e 09     ........x.......
    62cd:	00 f1 00 01 16 02 00 1e 02 00 f6 02 00 f8 23 05     ..............#.
    62dd:	00 00 ff                                            ...

000062e0 <patch04>:
    62e0:	00 02 01 01 08 45 01 08 49 01 08 46 01 08 4a 01     .....E..I..F..J.
    62f0:	08 47 01 08 4b 01 08 48 01 08 4c 01 08 49 01 08     .G..K..H..L..I..
    6300:	4d 01 05 00 01 ff                                   M.....

00006306 <patch05>:
    6306:	00 02 01 01 08 45 01 08 49 01 08 46 01 08 4a 01     .....E..I..F..J.
    6316:	08 47 01 08 4b 01 08 48 01 08 4c 01 08 49 01 08     .G..K..H..L..I..
    6326:	4d 01 05 00 00 ff                                   M.....

0000632c <patch06>:
    632c:	00 02 01 01 08 45 01 08 49 0a 08 45 01 08 49 0a     .....E..I..E..I.
    633c:	08 45 01 08 49 0a 08 45 01 08 49 0a 08 45 01 08     .E..I..E..I..E..
    634c:	49 0a 05 00 00 ff                                   I.....

00006352 <patch07>:
    6352:	00 02 01 01 08 45 01 08 49 0a 08 45 01 08 49 0a     .....E..I..E..I.
    6362:	08 45 01 08 49 0a 08 45 01 08 49 0a 08 45 01 08     .E..I..E..I..E..
    6372:	49 0a 05 00 00 ff                                   I.....

00006378 <patch08>:
    6378:	00 02 02 00 08 2b 01 08 2d 01 08 2f 01 08 31 01     .....+..-../..1.
    6388:	08 30 01 05 00 01 ff                                .0.....

0000638f <patch09>:
    638f:	00 02 02 00 09 80 00 0a 6f 00 08 3a 02 08 38 02     ........o..:..8.
    639f:	08 36 02 08 34 01 08 33 01 08 32 01 05 00 01 ff     .6..4..3..2.....

000063af <patch10>:
    63af:	00 02 01 00 09 80 00 0a 6f 00 08 2c 02 08 30 04     ........o..,..0.
    63bf:	08 2c 02 08 30 01 08 28 03 05 00 01 ff              .,..0..(.....

000063cc <patch11>:
    63cc:	00 02 00 00 09 80 00 0a 6f 01 08 3a 02 08 3b 01     ........o..:..;.
    63dc:	08 3a 01 08 3c 02 08 3d 01 08 3c 00 09 c8 00 0a     .:..<..=..<.....
    63ec:	6f 01 08 3e 02 08 3f 01 08 3e 01 08 40 02 08 41     o..>..?..>..@..A
    63fc:	01 08 40 01 08 42 01 08 41 01 08 42 00 09 ff 00     ..@..B..A..B....
    640c:	0a 6f 00 02 00 01 08 45 02 08 47 01 08 45 02 08     .o.....E..G..E..
    641c:	48 01 08 45 02 08 49 01 08 45 02 08 4a 01 08 45     H..E..I..E..J..E
    642c:	02 08 4b 01 05 00 01 ff                             ..K.....

00006434 <patch12>:
    6434:	00 01 0e 00 07 aa 00 00 1e 01 00 ec 01 00 f8 01     ................
    6444:	00 fc 01 05 00 00 ff                                .......

0000644b <patch13>:
    644b:	00 02 00 00 08 2c 02 08 30 04 08 2c 02 08 30 01     .....,..0..,..0.
    645b:	08 28 03 05 00 01 ff                                .(.....

00006462 <patch14>:
    6462:	00 01 08 00 07 c8 00 00 e2 01 00 f1 01 00 f8 02     ................
    6472:	05 00 00 ff                                         ....

00006476 <patch15>:
    6476:	01 ff                                               ..

00006478 <patch16>:
    6478:	01 ff                                               ..

0000647a <patch17>:
    647a:	01 ff                                               ..

0000647c <patch18>:
    647c:	00 01 02 00 07 2c 00 00 e2 01 00 f1 01 00 f8 02     .....,..........
    648c:	05 00 00 ff                                         ....

00006490 <patch19>:
    6490:	01 ff                                               ..

00006492 <patch20>:
    6492:	01 ff                                               ..

00006494 <patch21>:
    6494:	01 ff                                               ..

00006496 <patch22>:
    6496:	00 01 04 00 07 2c 00 00 e2 01 00 f1 01 00 f8 02     .....,..........
    64a6:	05 00 00 ff                                         ....

000064aa <patches>:
    64aa:	00 00 00 81 62 00 00 00 00 00 00 00 8f 62 00 00     ....b........b..
    64ba:	00 00 00 00 00 a6 62 00 00 00 00 01 00 00 bd 62     ......b........b
    64ca:	00 00 00 00 00 00 00 e0 62 00 00 00 00 00 00 00     ........b.......
    64da:	06 63 00 00 00 00 00 00 00 2c 63 00 00 00 00 00     .c.......,c.....
    64ea:	00 00 52 63 00 00 00 00 00 00 00 78 63 00 00 00     ..Rc.......xc...
    64fa:	00 00 00 00 8f 63 00 00 00 00 00 00 00 af 63 00     .....c........c.
    650a:	00 00 00 00 00 00 cc 63 00 00 00 00 01 00 00 34     .......c.......4
    651a:	64 00 00 00 00 01 00 00 4b 64 00 00 00 00 01 00     d.......Kd......
    652a:	00 62 64 00 00 00 00 01 00 00 76 64 00 00 00 00     .bd.......vd....
    653a:	01 00 00 78 64 00 00 00 00 01 00 00 7a 64 00 00     ...xd.......zd..
    654a:	00 00 01 00 00 7c 64 00 00 00 00 01 00 00 90 64     .....|d........d
    655a:	00 00 00 00 01 00 00 92 64 00 00 00 00 01 00 00     ........d.......
    656a:	94 64 00 00 00 00 01 00 00 96 64 00 00 00 00        .d........d....

00006579 <StageSong>:
    6579:	00 c3 00 00 c2 02 00 c1 01 00 c0 00 00 b0 64 00     ..............d.
    6589:	00 64 00 00 b1 64 00 00 91 45 48 00 b1 64 00 00     .d...d...EH..d..
    6599:	b2 64 00 00 92 21 60 00 b3 64 00 00 93 0c 66 00     .d...!`..d....f.
    65a9:	ff 06 01 53 0b 91 4c 48 00 92 2d 60 06 91 4c 48     ...S..LH..-`..LH
    65b9:	05 45 48 00 92 21 60 00 93 0e 60 06 0e 40 06 91     .EH..!`...`..@..
    65c9:	4c 48 00 92 2d 60 00 93 0e 20 05 12 66 06 91 45     LH..-`... ..f..E
    65d9:	48 00 92 21 60 00 93 0c 66 06 0c 66 05 91 4c 48     H..!`...f..f..LH
    65e9:	00 92 2d 60 00 93 0e 40 06 0e 40 06 91 4d 48 00     ..-`...@..@..MH.
    65f9:	92 2e 60 00 93 0e 60 06 0e 40 05 0e 20 06 0e 60     ..`...`..@.. ..`
    6609:	06 91 45 48 00 92 21 60 00 93 12 60 0b 91 4c 48     ..EH..!`...`..LH
    6619:	00 92 2d 60 06 91 4c 48 05 45 48 00 92 21 60 00     ..-`..LH.EH..!`.
    6629:	93 0e 60 06 0e 40 06 91 4c 48 00 92 2d 60 00 93     ..`..@..LH..-`..
    6639:	0e 20 06 0e 60 05 91 4c 48 00 92 2d 60 00 93 12     . ..`..LH..-`...
    6649:	60 06 0e 60 06 91 4b 48 00 92 2c 60 05 93 0e 40     `..`..KH..,`...@
    6659:	06 91 4a 48 00 92 2b 60 00 93 0e 60 06 0e 40 05     ..JH..+`...`..@.
    6669:	91 49 48 00 92 2a 60 00 93 0e 20 06 0e 60 06 91     .IH..*`... ..`..
    6679:	45 48 00 92 21 60 00 93 12 60 00 0c 66 0b 91 4c     EH..!`...`..f..L
    6689:	48 00 92 2d 60 06 91 4c 48 06 45 48 00 92 21 60     H..-`..LH.EH..!`
    6699:	00 93 0e 60 05 0e 40 06 91 4c 48 00 92 2d 60 00     ...`..@..LH..-`.
    66a9:	93 0e 20 06 0e 60 05 91 45 48 00 92 21 60 00 93     .. ..`..EH..!`..
    66b9:	12 60 00 0c 66 06 0c 66 06 91 4c 48 00 92 2d 60     .`..f..f..LH..-`
    66c9:	00 93 0c 66 06 0e 40 05 91 4d 48 00 92 2e 60 00     ...f..@..MH...`.
    66d9:	93 0e 60 06 0e 40 06 0e 20 05 0e 60 06 91 45 48     ..`..@.. ..`..EH
    66e9:	00 92 21 60 00 93 12 60 0b 91 4c 48 00 92 2d 60     ..!`...`..LH..-`
    66f9:	06 91 4c 48 06 45 48 00 92 21 60 00 93 0e 60 06     ..LH.EH..!`...`.
    6709:	0e 40 05 91 4c 48 00 92 2d 60 00 93 0e 20 06 0e     .@..LH..-`... ..
    6719:	60 06 91 4c 48 00 92 2d 60 00 93 12 60 05 0e 60     `..LH..-`...`..`
    6729:	06 91 4b 48 00 92 2c 60 06 93 0e 40 05 91 4a 48     ..KH..,`...@..JH
    6739:	00 92 2b 60 00 93 0c 66 06 0c 66 06 91 49 48 00     ..+`...f..f..IH.
    6749:	92 2a 60 00 93 0c 66 06 0c 66 05 91 45 48 00 92     .*`...f..f..EH..
    6759:	21 60 00 93 12 60 00 0e 66 0c 90 51 60 00 91 4c     !`...`..f..Q`..L
    6769:	48 00 92 2d 60 05 91 4c 48 06 90 51 60 00 91 45     H..-`..LH..Q`..E
    6779:	48 00 92 21 60 00 93 0e 60 06 0e 40 05 90 4f 60     H..!`...`..@..O`
    6789:	00 91 4c 48 00 92 2d 60 00 93 0e 20 06 0e 60 06     ..LH..-`... ..`.
    6799:	90 51 60 00 91 45 48 00 92 21 60 00 93 12 60 06     .Q`..EH..!`...`.
    67a9:	0e 60 05 90 51 60 00 91 4c 48 00 92 2d 60 00 93     .`..Q`..LH..-`..
    67b9:	0e 40 06 90 4f 60 00 93 0e 40 06 90 54 60 00 91     .@..O`...@..T`..
    67c9:	4d 48 00 92 2e 60 00 93 0e 60 05 0e 40 06 0e 20     MH...`...`..@.. 
    67d9:	06 0e 60 05 91 45 48 00 92 21 60 00 93 12 60 0c     ..`..EH..!`...`.
    67e9:	90 51 60 00 91 4c 48 00 92 2d 60 06 91 4c 48 05     .Q`..LH..-`..LH.
    67f9:	90 51 60 00 91 45 48 00 92 21 60 00 93 0e 60 06     .Q`..EH..!`...`.
    6809:	0e 40 06 90 4f 60 00 91 4c 48 00 92 2d 60 00 93     .@..O`..LH..-`..
    6819:	0e 20 05 0e 60 06 90 51 60 00 91 4c 48 00 92 2d     . ..`..Q`..LH..-
    6829:	60 00 93 12 60 06 0e 60 05 90 51 60 00 91 4b 48     `...`..`..Q`..KH
    6839:	00 92 2c 60 00 93 0e 40 06 90 4f 60 00 93 0e 40     ..,`...@..O`...@
    6849:	06 90 48 60 00 91 4a 48 00 92 2b 60 00 93 0e 60     ..H`..JH..+`...`
    6859:	06 0e 40 05 91 49 48 00 92 2a 60 00 93 0e 20 06     ..@..IH..*`... .
    6869:	0e 60 06 90 4c 60 00 91 4c 48 00 92 28 60 00 93     .`..L`..LH..(`..
    6879:	12 60 0b 90 4f 60 00 91 53 48 00 92 34 60 06 91     .`..O`..SH..4`..
    6889:	53 48 00 92 34 60 05 90 4c 60 00 91 4c 48 00 92     SH..4`..L`..LH..
    6899:	28 60 00 93 0e 60 06 0e 40 06 90 4a 60 00 91 53     (`...`..@..J`..S
    68a9:	48 00 92 34 60 00 93 0e 20 06 0e 60 05 90 4c 60     H..4`... ..`..L`
    68b9:	00 91 4c 48 00 92 28 60 00 93 12 60 06 0e 60 06     ..LH..(`...`..`.
    68c9:	91 53 48 00 92 34 60 00 93 0e 40 05 0e 40 06 91     .SH..4`...@..@..
    68d9:	54 48 00 92 26 60 00 93 0e 60 06 0e 40 05 92 27     TH..&`...`..@..'
    68e9:	60 00 93 0e 20 06 0e 60 06 91 4c 48 00 92 28 60     `... ..`..LH..(`
    68f9:	00 93 12 60 0b 91 53 48 00 92 34 60 06 91 53 48     ...`..SH..4`..SH
    6909:	00 92 34 60 06 91 4c 48 00 92 28 60 00 93 0e 60     ..4`..LH..(`...`
    6919:	05 0e 40 06 91 53 48 00 92 34 60 00 93 0e 20 06     ..@..SH..4`... .
    6929:	0e 60 05 91 4c 48 00 92 28 60 00 93 0e 60 06 92     .`..LH..(`...`..
    6939:	34 60 00 93 0e 60 06 91 53 48 00 92 26 60 00 93     4`...`..SH..&`..
    6949:	0e 60 06 92 32 60 00 93 0e 60 05 91 58 48 00 92     .`..2`...`..XH..
    6959:	25 60 00 93 0c 66 06 92 31 60 00 93 0c 66 06 92     %`...f..1`...f..
    6969:	23 60 00 93 0c 66 05 92 2f 60 00 93 0c 66 06 91     #`...f../`...f..
    6979:	45 48 00 92 21 60 00 93 12 60 0b 90 51 60 00 91     EH..!`...`..Q`..
    6989:	4c 48 00 92 2d 60 06 91 4c 48 06 90 51 60 00 91     LH..-`..LH..Q`..
    6999:	45 48 00 92 21 60 00 93 0e 60 05 0e 40 06 90 4f     EH..!`...`..@..O
    69a9:	60 00 91 4c 48 00 92 2d 60 00 93 0e 20 06 0e 60     `..LH..-`... ..`
    69b9:	06 90 51 60 00 91 45 48 00 92 21 60 00 93 12 60     ..Q`..EH..!`...`
    69c9:	05 0e 60 06 90 51 60 00 91 4c 48 00 92 2d 60 00     ..`..Q`..LH..-`.
    69d9:	93 0e 40 06 90 4f 60 00 93 0e 40 05 90 54 60 00     ..@..O`...@..T`.
    69e9:	91 4d 48 00 92 2e 60 00 93 0e 60 06 0e 40 06 0e     .MH...`...`..@..
    69f9:	20 05 0e 60 06 91 45 48 00 92 21 60 00 93 12 60      ..`..EH..!`...`
    6a09:	0c 90 51 60 00 91 4c 48 00 92 2d 60 05 91 4c 48     ..Q`..LH..-`..LH
    6a19:	06 90 51 60 00 91 45 48 00 92 21 60 00 93 0e 60     ..Q`..EH..!`...`
    6a29:	06 0e 40 05 90 4f 60 00 91 4c 48 00 92 2d 60 00     ..@..O`..LH..-`.
    6a39:	93 0e 20 06 0e 60 06 90 51 60 00 91 4c 48 00 92     .. ..`..Q`..LH..
    6a49:	2d 60 00 93 12 60 05 0e 60 06 90 51 60 00 91 4b     -`...`..`..Q`..K
    6a59:	48 00 92 2c 60 00 93 0e 40 06 90 4f 60 00 93 0e     H..,`...@..O`...
    6a69:	40 06 90 48 60 00 91 4a 48 00 92 2b 60 00 93 0e     @..H`..JH..+`...
    6a79:	60 05 0e 40 06 91 49 48 00 92 2a 60 00 93 0e 20     `..@..IH..*`... 
    6a89:	06 0e 60 05 90 4c 60 00 91 4c 48 00 92 28 60 00     ..`..L`..LH..(`.
    6a99:	93 12 60 0c 90 4f 60 00 91 53 48 00 92 34 60 05     ..`..O`..SH..4`.
    6aa9:	91 53 48 00 92 34 60 06 90 4c 60 00 91 4c 48 00     .SH..4`..L`..LH.
    6ab9:	92 28 60 00 93 0e 60 06 0e 40 06 90 4a 60 00 91     .(`...`..@..J`..
    6ac9:	53 48 00 92 34 60 00 93 0e 20 05 0e 60 06 90 4c     SH..4`... ..`..L
    6ad9:	60 00 91 4c 48 00 92 28 60 00 93 12 60 06 0e 60     `..LH..(`...`..`
    6ae9:	05 91 53 48 00 92 34 60 00 93 0e 40 06 0e 40 06     ..SH..4`...@..@.
    6af9:	91 54 48 00 92 26 60 00 93 0e 60 05 0e 40 06 92     .TH..&`...`..@..
    6b09:	27 60 00 93 0e 20 06 0e 60 06 91 4c 48 00 92 28     '`... ..`..LH..(
    6b19:	60 00 93 12 60 0b 91 53 48 00 92 34 60 06 91 53     `...`..SH..4`..S
    6b29:	48 00 92 34 60 05 91 4c 48 00 92 28 60 00 93 0e     H..4`..LH..(`...
    6b39:	60 06 0e 40 06 91 53 48 00 92 34 60 00 93 0e 20     `..@..SH..4`... 
    6b49:	05 0e 60 06 91 4c 48 00 92 28 60 00 93 12 60 06     ..`..LH..(`...`.
    6b59:	92 34 60 00 93 0c 66 06 91 53 48 00 92 26 60 00     .4`...f..SH..&`.
    6b69:	93 0c 66 05 92 32 60 00 93 0c 66 06 91 58 48 00     ..f..2`...f..XH.
    6b79:	92 25 60 00 93 0e 60 06 92 31 60 00 93 0c 66 05     .%`...`..1`...f.
    6b89:	92 23 60 00 93 0e 20 06 92 2f 60 00 93 0e 60 06     .#`... ../`...`.
    6b99:	91 4a 48 00 92 26 60 00 93 12 60 0b 90 56 60 00     .JH..&`...`..V`.
    6ba9:	91 51 48 00 92 32 60 06 91 51 48 06 90 56 60 00     .QH..2`..QH..V`.
    6bb9:	91 4a 48 00 92 26 60 00 93 0e 60 05 0e 40 06 90     .JH..&`...`..@..
    6bc9:	54 60 00 91 51 48 00 92 32 60 00 93 0e 20 06 0e     T`..QH..2`... ..
    6bd9:	60 05 90 56 60 00 91 4a 48 00 92 26 60 00 93 12     `..V`..JH..&`...
    6be9:	60 06 0e 60 06 90 56 60 00 91 51 48 00 92 32 60     `..`..V`..QH..2`
    6bf9:	00 93 0e 40 05 90 54 60 00 93 0e 40 06 90 5a 60     ...@..T`...@..Z`
    6c09:	00 91 52 48 00 92 33 60 00 93 0e 60 06 0e 40 06     ..RH..3`...`..@.
    6c19:	0e 20 05 0e 60 06 91 4a 48 00 92 26 60 00 93 12     . ..`..JH..&`...
    6c29:	60 0b 90 56 60 00 91 51 48 00 92 32 60 06 91 51     `..V`..QH..2`..Q
    6c39:	48 06 90 56 60 00 91 4a 48 00 92 26 60 00 93 0e     H..V`..JH..&`...
    6c49:	60 05 0e 40 06 90 54 60 00 91 51 48 00 92 32 60     `..@..T`..QH..2`
    6c59:	00 93 0e 20 06 0e 60 06 90 56 60 00 91 51 48 00     ... ..`..V`..QH.
    6c69:	92 32 60 00 93 12 60 05 0e 60 06 90 56 60 00 91     .2`...`..`..V`..
    6c79:	50 48 00 92 31 60 00 93 0e 40 06 90 54 60 00 93     PH..1`...@..T`..
    6c89:	0e 40 05 90 4e 60 00 91 4f 48 00 92 30 60 00 93     .@..N`..OH..0`..
    6c99:	0e 60 06 0e 40 06 91 4e 48 00 92 2f 60 00 93 0e     .`..@..NH../`...
    6ca9:	20 05 0e 60 06 91 4a 48 00 92 26 60 00 93 12 60      ..`..JH..&`...`
    6cb9:	0c 90 56 60 00 91 51 48 00 92 32 60 05 91 51 48     ..V`..QH..2`..QH
    6cc9:	06 90 56 60 00 91 4a 48 00 92 26 60 00 93 0e 60     ..V`..JH..&`...`
    6cd9:	06 0e 40 05 90 54 60 00 91 51 48 00 92 32 60 00     ..@..T`..QH..2`.
    6ce9:	93 0e 20 06 0e 60 06 90 56 60 00 91 4a 48 00 92     .. ..`..V`..JH..
    6cf9:	26 60 00 93 12 60 05 0e 60 06 90 56 60 00 91 51     &`...`..`..V`..Q
    6d09:	48 00 92 32 60 00 93 0e 40 06 90 54 60 00 93 0e     H..2`...@..T`...
    6d19:	40 06 90 5a 60 00 91 52 48 00 92 33 60 00 93 0e     @..Z`..RH..3`...
    6d29:	60 05 0e 40 06 0e 20 06 0e 60 05 91 4a 48 00 92     `..@.. ..`..JH..
    6d39:	26 60 0c 90 56 60 00 91 51 48 00 92 32 60 05 91     &`..V`..QH..2`..
    6d49:	51 48 06 90 56 60 00 91 4a 48 00 92 26 60 00 93     QH..V`..JH..&`..
    6d59:	0e 60 06 0e 40 06 90 54 60 00 91 51 48 00 92 32     .`..@..T`..QH..2
    6d69:	60 00 93 0e 20 05 0e 60 06 90 56 60 00 91 51 48     `... ..`..V`..QH
    6d79:	00 92 32 60 00 93 0e 60 06 0e 60 05 90 56 60 00     ..2`...`..`..V`.
    6d89:	91 50 48 00 92 31 60 00 93 0e 60 06 90 54 60 00     .PH..1`...`..T`.
    6d99:	93 0e 60 06 90 4e 60 00 91 4f 48 00 92 30 60 00     ..`..N`..OH..0`.
    6da9:	93 0e 60 05 0e 60 06 91 4e 48 00 92 2f 60 00 93     ..`..`..NH../`..
    6db9:	0e 60 0b 90 51 60 00 91 45 48 00 92 2d 60 00 93     .`..Q`..EH..-`..
    6dc9:	0c 66 06 90 4f 60 00 91 45 48 00 93 0c 66 06 90     .f..O`..EH...f..
    6dd9:	4c 60 00 91 45 48 00 93 0c 66 06 90 4f 60 00 93     L`..EH...f..O`..
    6de9:	0c 66 05 90 51 60 00 91 45 48 00 92 28 60 00 93     .f..Q`..EH..(`..
    6df9:	0e 60 06 91 45 48 00 93 0e 40 06 0e 20 05 91 45     .`..EH...@.. ..E
    6e09:	48 00 93 0e 60 06 90 57 60 00 91 4b 48 00 92 33     H...`..W`..KH..3
    6e19:	60 00 93 0e 60 06 90 55 60 00 91 4b 48 00 93 0e     `...`..U`..KH...
    6e29:	60 05 90 52 60 00 93 0e 60 06 90 55 60 00 91 4b     `..R`...`..U`..K
    6e39:	48 00 93 0e 60 06 90 57 60 00 91 4b 48 00 92 2e     H...`..W`..KH...
    6e49:	60 00 93 0e 60 06 91 4b 48 00 93 0e 60 05 0e 60     `...`..KH...`..`
    6e59:	06 91 4b 48 06 90 51 60 00 91 4c 48 00 92 2d 60     ..KH..Q`..LH..-`
    6e69:	00 93 0c 66 05 90 4f 60 00 91 4c 48 00 93 0c 66     ...f..O`..LH...f
    6e79:	06 90 4c 60 00 93 0c 66 06 90 4f 60 00 91 4c 48     ..L`...f..O`..LH
    6e89:	00 93 0c 66 05 90 51 60 00 91 4c 48 00 92 28 60     ...f..Q`..LH..(`
    6e99:	00 93 0e 60 06 91 4c 48 00 93 0e 40 06 0e 20 06     ...`..LH...@.. .
    6ea9:	91 4c 48 00 93 0e 60 05 90 57 60 00 91 52 48 00     .LH...`..W`..RH.
    6eb9:	92 33 60 00 93 0e 60 06 90 55 60 00 91 52 48 00     .3`...`..U`..RH.
    6ec9:	93 0e 60 06 90 52 60 00 93 0e 60 05 90 55 60 00     ..`..R`...`..U`.
    6ed9:	91 52 48 00 93 0e 60 06 90 57 60 00 91 52 48 00     .RH...`..W`..RH.
    6ee9:	92 2e 60 00 93 0e 60 06 91 52 48 00 93 0e 60 05     ..`...`..RH...`.
    6ef9:	0e 60 06 91 52 48 06 90 51 60 00 91 45 48 00 92     .`..RH..Q`..EH..
    6f09:	2d 60 00 93 0c 66 06 90 4f 60 05 4c 60 00 92 28     -`...f..O`.L`..(
    6f19:	60 06 90 51 60 06 57 60 00 91 4b 48 00 92 33 60     `..Q`.W`..KH..3`
    6f29:	00 93 0e 66 05 90 55 60 06 52 60 00 92 2e 60 06     ...f..U`.R`...`.
    6f39:	90 57 60 05 51 60 00 91 52 48 00 92 2d 60 00 93     .W`.Q`..RH..-`..
    6f49:	0c 66 06 90 4f 60 06 4c 60 00 92 28 60 06 90 51     .f..O`.L`..(`..Q
    6f59:	60 05 57 60 00 91 57 48 00 92 33 60 00 93 0e 66     `.W`..WH..3`...f
    6f69:	06 90 55 60 06 52 60 00 92 2e 60 05 90 57 60 06     ..U`.R`...`..W`.
    6f79:	93 0c 66 06 0c 66 05 90 4c 60 00 91 47 48 00 92     ..f..f..L`..GH..
    6f89:	28 60 00 93 0c 66 06 90 4c 60 00 91 47 48 00 92     (`...f..L`..GH..
    6f99:	28 60 00 93 12 66 06 90 4c 60 00 91 47 48 00 92     (`...f..L`..GH..
    6fa9:	28 60 00 93 0c 66 06 12 66 05 90 52 60 00 91 4c     (`...f..f..R`..L
    6fb9:	48 00 92 2e 60 00 93 0c 66 06 12 66 06 90 4c 60     H...`...f..f..L`
    6fc9:	00 91 47 48 00 92 28 60 00 93 0c 66 05 0c 66 06     ..GH..(`...f..f.
    6fd9:	92 26 60 00 93 0c 66 06 12 66 05 92 25 60 00 93     .&`...f..f..%`..
    6fe9:	0e 66 06 0e 66 06 92 23 60 00 93 0e 66 06 0e 66     .f..f..#`...f..f
    6ff9:	05 90 45 60 00 92 29 60 00 93 0c 66 0c 90 45 30     ..E`..)`...f..E0
    7009:	00 92 35 60 00 93 12 66 05 0e 66 06 90 48 60 00     ..5`...f..f..H`.
    7019:	92 29 60 00 93 0c 66 06 12 66 05 90 48 30 00 92     .)`...f..f..H0..
    7029:	35 60 00 93 0c 66 06 0e 66 06 90 4a 60 00 92 29     5`...f..f..J`..)
    7039:	60 00 93 0c 66 06 0c 66 05 90 4a 30 00 92 35 60     `...f..f..J0..5`
    7049:	00 93 0c 66 06 0e 66 06 90 4c 60 00 92 29 60 00     ...f..f..L`..)`.
    7059:	93 0c 66 05 0e 66 06 90 4c 30 00 92 35 60 00 93     ..f..f..L0..5`..
    7069:	0c 66 06 0c 66 05 90 4f 60 00 92 28 60 00 93 0c     .f..f..O`..(`...
    7079:	66 0c 90 4f 30 00 92 34 60 0b 90 4c 60 00 92 28     f..O0..4`..L`..(
    7089:	60 00 93 0e 66 0c 90 4f 60 00 92 34 60 0b 90 54     `...f..O`..4`..T
    7099:	60 00 92 2d 60 00 93 0c 66 06 0c 66 05 90 53 60     `..-`...f..f..S`
    70a9:	00 92 39 60 00 93 0c 66 06 0c 66 06 90 51 60 00     ..9`...f..f..Q`.
    70b9:	92 2d 60 00 93 0c 66 06 0e 66 05 90 51 30 00 92     .-`...f..f..Q0..
    70c9:	39 60 06 93 0e 66 06 90 45 60 00 92 29 60 00 93     9`...f..E`..)`..
    70d9:	0c 66 05 0c 66 06 90 45 30 00 92 35 60 00 93 0c     .f..f..E0..5`...
    70e9:	66 06 12 66 05 90 48 60 00 92 29 60 00 93 0c 66     f..f..H`..)`...f
    70f9:	06 12 66 06 90 48 30 00 92 35 60 00 93 0c 66 06     ..f..H0..5`...f.
    7109:	12 66 05 90 4a 60 00 92 29 60 00 93 0c 66 06 0c     .f..J`..)`...f..
    7119:	66 06 90 4a 30 00 92 35 60 00 93 0c 66 05 12 66     f..J0..5`...f..f
    7129:	06 90 4c 60 00 92 29 60 00 93 0e 66 06 0e 66 05     ..L`..)`...f..f.
    7139:	90 4c 30 00 92 35 60 00 93 0e 66 06 0e 66 06 90     .L0..5`...f..f..
    7149:	4e 60 00 92 2f 60 00 93 0c 66 0b 90 4e 30 00 92     N`../`...f..N0..
    7159:	3b 60 00 93 12 66 06 0e 66 06 90 4b 60 00 92 2f     ;`...f..f..K`../
    7169:	60 00 93 0c 66 05 12 66 06 90 4e 60 00 92 3b 60     `...f..f..N`..;`
    7179:	00 93 0c 66 06 0e 66 05 90 44 60 00 92 28 60 00     ...f..f..D`..(`.
    7189:	93 0c 66 06 90 50 56 00 93 0c 66 06 90 44 4c 00     ..f..PV...f..DL.
    7199:	92 34 60 00 93 0c 66 05 90 50 42 00 93 0e 66 06     .4`...f..PB...f.
    71a9:	90 44 38 00 92 28 60 00 93 0c 66 06 90 50 2e 00     .D8..(`...f..P..
    71b9:	93 0e 66 06 90 44 24 00 92 34 60 00 93 0c 66 05     ..f..D$..4`...f.
    71c9:	90 50 1a 00 93 0c 66 06 91 48 38 00 93 0c 60 00     .P....f..H8...`.
    71d9:	0e 66 06 12 60 05 90 51 60 00 91 48 38 00 93 16     .f..`..Q`..H8...
    71e9:	60 06 0e 66 04 16 04 02 90 51 60 00 91 48 38 00     `..f.....Q`..H8.
    71f9:	93 0c 60 05 12 60 06 90 4f 60 00 91 48 38 00 93     ..`..`..O`..H8..
    7209:	16 60 00 0e 66 0a 16 04 02 90 51 60 00 91 48 38     .`..f.....Q`..H8
    7219:	00 93 0c 60 00 0e 66 05 12 60 00 0e 66 06 90 51     ...`..f..`..f..Q
    7229:	60 00 93 16 60 00 0e 66 06 90 4f 60 00 91 48 38     `...`..f..O`..H8
    7239:	04 93 16 04 01 90 51 60 00 91 48 38 00 93 0c 60     ......Q`..H8...`
    7249:	00 0e 66 06 12 60 06 90 4f 60 00 91 48 38 00 93     ..f..`..O`..H8..
    7259:	12 60 00 0e 66 05 12 60 06 90 51 60 00 91 48 38     .`..f..`..Q`..H8
    7269:	00 93 0c 60 06 12 60 06 90 4f 60 00 91 48 38 00     ...`..`..O`..H8.
    7279:	93 16 60 0a 16 04 01 90 51 60 00 91 48 38 00 93     ..`.....Q`..H8..
    7289:	0c 60 06 12 60 05 90 4f 60 00 91 48 38 00 93 16     .`..`..O`..H8...
    7299:	60 0a 16 04 02 90 51 60 00 91 48 38 00 93 0c 60     `.....Q`..H8...`
    72a9:	05 12 60 06 90 51 60 00 93 16 60 04 91 48 38 02     ..`..Q`...`..H8.
    72b9:	90 4f 60 04 93 16 04 02 90 51 60 00 93 0c 60 05     .O`......Q`...`.
    72c9:	90 54 60 00 93 12 60 02 91 48 38 04 90 51 60 00     .T`...`..H8..Q`.
    72d9:	93 12 60 06 90 4f 60 00 93 12 60 05 90 4c 60 00     ..`..O`...`..L`.
    72e9:	91 4e 38 00 93 0c 60 06 12 60 06 90 4f 60 00 91     .N8...`..`..O`..
    72f9:	4e 38 00 93 16 60 0a 16 04 01 90 4c 60 00 91 4e     N8...`.....L`..N
    7309:	38 00 93 0c 60 06 12 60 06 90 4a 60 00 91 4e 38     8...`..`..J`..N8
    7319:	00 93 16 60 0a 16 04 01 90 4c 60 00 91 4e 38 00     ...`.....L`..N8.
    7329:	93 0c 60 03 90 4c 5a 03 4c 54 00 93 12 60 03 90     ..`..LZ.LT...`..
    7339:	4c 4e 02 4c 48 00 93 16 60 03 90 4c 42 03 4c 3c     LN.LH...`..LB.L<
    7349:	03 4c 36 01 93 16 04 02 90 4c 30 00 93 0c 60 03     .L6......L0...`.
    7359:	90 4c 2a 02 4c 24 00 93 12 60 03 90 4c 1e 03 4c     .L*.L$...`..L..L
    7369:	18 00 93 12 60 03 90 4c 12 03 4c 0c 00 93 12 60     ....`..L..L....`
    7379:	03 90 4c 06 03 91 4e 38 00 93 0c 60 05 12 60 06     ..L...N8...`..`.
    7389:	91 51 38 00 93 16 60 0a 16 04 01 91 4e 38 00 93     .Q8...`.....N8..
    7399:	0c 60 06 12 60 06 91 4c 38 00 93 16 60 0a 16 04     .`..`..L8...`...
    73a9:	01 91 4e 38 00 93 0c 60 06 12 60 06 16 60 0a 16     ..N8...`..`..`..
    73b9:	04 01 0c 60 06 12 60 05 12 60 06 12 60 06 91 48     ...`..`..`..`..H
    73c9:	38 00 93 0c 60 05 12 60 06 90 51 60 00 91 48 38     8...`..`..Q`..H8
    73d9:	00 93 16 60 0a 16 04 02 90 51 60 00 91 48 38 00     ...`.....Q`..H8.
    73e9:	93 0c 60 05 12 60 06 90 4f 60 00 91 48 38 00 93     ..`..`..O`..H8..
    73f9:	16 60 0a 16 04 01 90 51 60 00 91 48 38 00 93 0c     .`.....Q`..H8...
    7409:	60 06 12 60 06 90 51 60 00 91 48 38 00 93 16 60     `..`..Q`..H8...`
    7419:	05 90 4f 60 05 93 16 04 01 90 51 60 00 91 48 38     ..O`......Q`..H8
    7429:	00 93 0c 60 06 12 60 06 90 4f 60 00 91 48 38 00     ...`..`..O`..H8.
    7439:	93 12 60 05 12 60 06 90 51 60 00 91 48 38 00 93     ..`..`..Q`..H8..
    7449:	0c 60 06 12 60 05 90 4f 60 00 91 48 38 00 93 16     .`..`..O`..H8...
    7459:	60 0a 16 04 02 90 51 60 00 91 48 38 00 93 0c 60     `.....Q`..H8...`
    7469:	05 12 60 06 90 4f 60 00 91 48 38 00 93 16 60 0a     ..`..O`..H8...`.
    7479:	16 04 02 90 51 60 00 91 48 38 00 93 0c 60 05 12     ....Q`..H8...`..
    7489:	60 06 90 51 60 00 91 48 38 00 93 16 60 06 90 4f     `..Q`..H8...`..O
    7499:	60 04 93 16 04 01 90 51 60 00 91 48 38 00 93 0c     `......Q`..H8...
    74a9:	60 06 90 54 60 00 93 12 60 06 90 51 60 00 91 48     `..T`...`..Q`..H
    74b9:	38 00 93 12 60 05 90 4f 60 00 93 12 60 06 90 4c     8...`..O`...`..L
    74c9:	60 00 91 48 38 00 93 0c 60 06 12 60 06 90 4f 60     `..H8...`..`..O`
    74d9:	00 91 48 38 00 93 16 60 09 16 04 02 90 4c 60 00     ..H8...`.....L`.
    74e9:	91 48 38 00 93 0c 60 06 12 60 05 90 4a 60 00 91     .H8...`..`..J`..
    74f9:	48 38 00 93 16 60 0a 16 04 02 90 4c 60 00 91 48     H8...`.....L`..H
    7509:	38 00 93 0c 60 03 90 4c 5a 02 4c 54 00 93 12 60     8...`..LZ.LT...`
    7519:	03 90 4c 4e 03 4c 48 00 93 16 60 03 90 4c 42 03     ..LN.LH...`..LB.
    7529:	4c 3c 03 4c 36 01 93 16 04 02 90 4c 30 00 91 48     L<.L6......L0..H
    7539:	38 00 93 0c 60 02 90 4c 2a 03 4c 24 00 93 12 60     8...`..L*.L$...`
    7549:	03 90 4c 1e 03 4c 18 00 93 12 60 03 90 4c 12 03     ..L..L....`..L..
    7559:	4c 0c 00 93 12 60 02 90 4c 06 03 91 4e 48 00 93     L....`..L...NH..
    7569:	0c 60 06 12 60 06 91 51 48 00 93 16 60 0a 16 04     .`..`..QH...`...
    7579:	01 91 4e 48 00 93 0c 60 06 12 60 05 91 4c 48 00     ..NH...`..`..LH.
    7589:	93 16 60 0a 16 04 02 91 4e 48 00 93 0c 60 06 12     ..`.....NH...`..
    7599:	60 05 16 60 0a 16 04 02 0c 60 05 12 60 06 12 60     `..`.....`..`..`
    75a9:	06 12 60 05 90 45 60 00 92 1d 60 00 93 0c 66 0c     ..`..E`...`...f.
    75b9:	90 45 30 00 91 51 48 00 92 29 60 06 91 51 48 05     .E0..QH..)`..QH.
    75c9:	90 48 60 00 92 1d 60 00 93 0e 66 0c 90 48 30 00     .H`...`...f..H0.
    75d9:	91 51 48 00 92 29 60 05 91 51 48 06 90 4a 60 00     .QH..)`..QH..J`.
    75e9:	92 1d 60 00 93 0c 66 0b 90 4a 30 00 91 51 48 00     ..`...f..J0..QH.
    75f9:	92 29 60 06 91 51 48 06 90 4c 60 00 92 1d 60 00     .)`..QH..L`...`.
    7609:	93 0e 66 0b 90 4c 30 00 91 51 48 00 92 29 60 06     ..f..L0..QH..)`.
    7619:	91 51 48 06 90 4f 60 00 92 1c 60 00 93 0c 66 0b     .QH..O`...`...f.
    7629:	90 4f 30 00 91 51 48 00 92 28 60 06 91 51 48 05     .O0..QH..(`..QH.
    7639:	90 4c 60 00 92 1c 60 00 93 0e 66 0c 90 4f 60 00     .L`...`...f..O`.
    7649:	91 51 48 00 92 28 60 06 91 51 48 05 90 54 60 00     .QH..(`..QH..T`.
    7659:	92 21 60 00 93 0c 66 0c 90 53 60 00 91 51 48 00     .!`...f..S`..QH.
    7669:	92 2d 60 00 93 0c 66 05 91 51 48 06 90 51 60 00     .-`...f..QH..Q`.
    7679:	92 21 60 00 93 0e 66 0b 90 51 30 00 91 51 48 00     .!`...f..Q0..QH.
    7689:	92 2d 60 06 91 51 48 06 90 45 60 00 92 1d 60 00     .-`..QH..E`...`.
    7699:	93 0c 66 0b 90 45 30 00 91 51 48 00 92 29 60 06     ..f..E0..QH..)`.
    76a9:	91 51 48 06 90 48 60 00 92 1d 60 00 93 0e 66 0b     .QH..H`...`...f.
    76b9:	90 48 30 00 91 51 48 00 92 29 60 06 91 51 48 05     .H0..QH..)`..QH.
    76c9:	90 4a 60 00 92 1d 60 00 93 0c 66 0c 90 4a 30 00     .J`...`...f..J0.
    76d9:	91 51 48 00 92 29 60 06 91 51 48 05 90 4c 60 00     .QH..)`..QH..L`.
    76e9:	92 1d 60 00 93 0e 66 0c 90 4c 30 00 91 51 48 00     ..`...f..L0..QH.
    76f9:	92 29 60 05 91 51 48 06 90 4e 60 00 92 23 60 00     .)`..QH..N`..#`.
    7709:	93 0c 66 0b 90 4e 30 00 91 4e 48 00 92 2f 60 06     ..f..N0..NH../`.
    7719:	91 4e 48 06 90 4b 60 00 92 23 60 00 93 0e 66 0b     .NH..K`..#`...f.
    7729:	90 4e 60 00 91 4e 48 00 92 2f 60 06 91 4e 48 06     .N`..NH../`..NH.
    7739:	90 44 60 00 92 1c 60 05 90 50 56 06 44 4c 00 91     .D`...`..PV.DL..
    7749:	50 48 00 92 28 60 00 93 0c 66 06 90 50 42 00 91     PH..(`...f..PB..
    7759:	50 48 05 90 44 38 00 92 1c 60 00 93 0e 66 06 90     PH..D8...`...f..
    7769:	50 2e 06 44 24 00 91 50 48 00 92 28 60 06 90 50     P..D$..PH..(`..P
    7779:	1a 00 91 50 48 05 90 45 60 00 92 1d 60 00 93 0c     ...PH..E`...`...
    7789:	66 0c 90 45 30 00 91 51 48 00 92 29 60 05 91 51     f..E0..QH..)`..Q
    7799:	48 06 90 48 60 00 92 1d 60 00 93 0e 66 0b 90 48     H..H`...`...f..H
    77a9:	30 00 91 51 48 00 92 29 60 06 91 51 48 06 90 4a     0..QH..)`..QH..J
    77b9:	60 00 92 1d 60 00 93 0c 66 0b 90 4a 30 00 91 51     `...`...f..J0..Q
    77c9:	48 00 92 29 60 06 91 51 48 06 90 4c 60 00 92 1d     H..)`..QH..L`...
    77d9:	60 00 93 0e 66 0b 90 4c 30 00 91 51 48 00 92 29     `...f..L0..QH..)
    77e9:	60 06 91 51 48 05 90 4f 60 00 92 1c 60 00 93 0c     `..QH..O`...`...
    77f9:	66 0c 90 4f 30 00 91 51 48 00 92 28 60 06 91 51     f..O0..QH..(`..Q
    7809:	48 05 90 4c 60 00 92 1c 60 00 93 0e 66 0c 90 4f     H..L`...`...f..O
    7819:	60 00 91 51 48 00 92 28 60 05 91 51 48 06 90 54     `..QH..(`..QH..T
    7829:	60 00 92 21 60 00 93 0c 66 0b 90 53 60 00 91 51     `..!`...f..S`..Q
    7839:	48 00 92 2d 60 00 93 0c 66 06 91 51 48 06 90 51     H..-`...f..QH..Q
    7849:	60 00 92 21 60 00 93 0e 66 0b 90 51 30 00 91 51     `..!`...f..Q0..Q
    7859:	48 00 92 2d 60 06 91 51 48 06 90 45 60 00 92 1d     H..-`..QH..E`...
    7869:	60 00 93 0c 66 0b 90 45 30 00 91 51 48 00 92 29     `...f..E0..QH..)
    7879:	60 06 91 51 48 05 90 48 60 00 92 1d 60 00 93 0e     `..QH..H`...`...
    7889:	66 0c 90 48 30 00 91 51 48 00 92 29 60 06 91 51     f..H0..QH..)`..Q
    7899:	48 05 90 4a 60 00 92 1d 60 00 93 0c 66 0c 90 4a     H..J`...`...f..J
    78a9:	30 00 91 51 48 00 92 29 60 05 91 51 48 06 90 4c     0..QH..)`..QH..L
    78b9:	60 00 92 1d 60 00 93 0e 66 0b 90 4c 30 00 91 51     `...`...f..L0..Q
    78c9:	48 00 92 29 60 06 91 51 48 06 90 4e 60 00 92 23     H..)`..QH..N`..#
    78d9:	60 00 93 0c 66 0b 90 4e 30 00 91 4e 48 00 92 2f     `...f..N0..NH../
    78e9:	60 06 91 4e 48 06 90 4b 60 00 92 23 60 00 93 0e     `..NH..K`..#`...
    78f9:	66 0b 90 4e 60 00 91 4e 48 00 92 2f 60 06 91 4e     f..N`..NH../`..N
    7909:	48 05 90 44 60 00 92 1c 60 00 93 0c 66 06 90 50     H..D`...`...f..P
    7919:	56 00 93 0c 66 06 90 44 4c 00 91 50 48 00 92 28     V...f..DL..PH..(
    7929:	60 00 93 0c 66 05 90 50 42 00 91 50 48 00 93 0c     `...f..PB..PH...
    7939:	66 06 90 44 38 00 92 1c 60 00 93 0e 66 06 90 50     f..D8...`...f..P
    7949:	2e 06 44 24 00 91 50 48 00 92 28 60 00 93 0c 66     ..D$..PH..(`...f
    7959:	03 ff 06 01 45 02 90 50 1a 00 91 50 48 61 b3 64     ....E..P...PHa.d
    7969:	00 00 ff 2f 00                                      .../.

0000796e <colormap>:
    796e:	0f 30 f0 c0 37                                      .0..7

00007973 <bombframelist>:
    7973:	02 01 00 01                                         ....

00007977 <fireframelist>:
    7977:	00 01 02 01 00                                      .....

0000797c <blockframelist>:
    797c:	00 00 01 02 03 04                                   ......

00007982 <__c.4494>:
    7982:	57 49 4e 4e 45 52 00                                WINNER.

00007989 <__c.4369>:
    7989:	20 20 20 20 20 20 20 20 00                                  .

00007992 <__ctors_end>:
    7992:	11 24       	eor	r1, r1
    7994:	1f be       	out	0x3f, r1	; 63
    7996:	cf ef       	ldi	r28, 0xFF	; 255
    7998:	d0 e1       	ldi	r29, 0x10	; 16
    799a:	de bf       	out	0x3e, r29	; 62
    799c:	cd bf       	out	0x3d, r28	; 61

0000799e <wdt_init>:
void Initialize(void) __attribute__((naked)) __attribute__((section(".init8")));


void wdt_init(void)
{
    MCUSR = 0;
    799e:	14 be       	out	0x34, r1	; 52
    wdt_disable();
    79a0:	88 e1       	ldi	r24, 0x18	; 24
    79a2:	0f b6       	in	r0, 0x3f	; 63
    79a4:	f8 94       	cli
    79a6:	80 93 60 00 	sts	0x0060, r24
    79aa:	10 92 60 00 	sts	0x0060, r1
    79ae:	0f be       	out	0x3f, r0	; 63

000079b0 <__do_copy_data>:
    79b0:	11 e0       	ldi	r17, 0x01	; 1
    79b2:	a0 e0       	ldi	r26, 0x00	; 0
    79b4:	b1 e0       	ldi	r27, 0x01	; 1
    79b6:	e4 ec       	ldi	r30, 0xC4	; 196
    79b8:	f1 ee       	ldi	r31, 0xE1	; 225
    79ba:	02 c0       	rjmp	.+4      	; 0x79c0 <.do_copy_data_start>

000079bc <.do_copy_data_loop>:
    79bc:	05 90       	lpm	r0, Z+
    79be:	0d 92       	st	X+, r0

000079c0 <.do_copy_data_start>:
    79c0:	aa 30       	cpi	r26, 0x0A	; 10
    79c2:	b1 07       	cpc	r27, r17
    79c4:	d9 f7       	brne	.-10     	; 0x79bc <.do_copy_data_loop>

000079c6 <__do_clear_bss>:
    79c6:	10 e1       	ldi	r17, 0x10	; 16
    79c8:	a0 e2       	ldi	r26, 0x20	; 32
    79ca:	b1 e0       	ldi	r27, 0x01	; 1
    79cc:	01 c0       	rjmp	.+2      	; 0x79d0 <.do_clear_bss_start>

000079ce <.do_clear_bss_loop>:
    79ce:	1d 92       	st	X+, r1

000079d0 <.do_clear_bss_start>:
    79d0:	ae 33       	cpi	r26, 0x3E	; 62
    79d2:	b1 07       	cpc	r27, r17
    79d4:	e1 f7       	brne	.-8      	; 0x79ce <.do_clear_bss_loop>

000079d6 <Initialize>:

/**
 * Called by the assembler initialization routines, should not be called directly.
 */

void Initialize(void){
    79d6:	f8 94       	cli
    79d8:	e1 ec       	ldi	r30, 0xC1	; 193
    79da:	fc e0       	ldi	r31, 0x0C	; 12

	cli();
	
	//Initialize the mixer buffer
	for(i=0;i<MIX_BANK_SIZE*2;i++){
		mix_buf[i]=0x80;
    79dc:	80 e8       	ldi	r24, 0x80	; 128
    79de:	81 93       	st	Z+, r24
	int i;

	cli();
	
	//Initialize the mixer buffer
	for(i=0;i<MIX_BANK_SIZE*2;i++){
    79e0:	9e e0       	ldi	r25, 0x0E	; 14
    79e2:	ed 3c       	cpi	r30, 0xCD	; 205
    79e4:	f9 07       	cpc	r31, r25
    79e6:	d9 f7       	brne	.-10     	; 0x79de <Initialize+0x8>
		mix_buf[i]=0x80;
	}	
	
	mix_pos=mix_buf;
    79e8:	81 ec       	ldi	r24, 0xC1	; 193
    79ea:	9c e0       	ldi	r25, 0x0C	; 12
    79ec:	90 93 ce 0e 	sts	0x0ECE, r25
    79f0:	80 93 cd 0e 	sts	0x0ECD, r24
	mix_bank=0;
    79f4:	10 92 cf 0e 	sts	0x0ECF, r1

	for(i=0;i<CHANNELS;i++){
		mixer.channels.all[i].volume=0;
    79f8:	10 92 d2 0e 	sts	0x0ED2, r1
    79fc:	10 92 dc 0e 	sts	0x0EDC, r1
    7a00:	10 92 e6 0e 	sts	0x0EE6, r1
    7a04:	10 92 f0 0e 	sts	0x0EF0, r1
	}

	
	#if MIXER_CHAN4_TYPE == 0
		//initialize LFSR		
		tr4_barrel_lo=1;
    7a08:	91 e0       	ldi	r25, 0x01	; 1
    7a0a:	90 93 f2 0e 	sts	0x0EF2, r25
		tr4_barrel_hi=1;		
    7a0e:	90 93 f3 0e 	sts	0x0EF3, r25
		tr4_params=0b00000001; //15 bits no divider (1)
    7a12:	90 93 f1 0e 	sts	0x0EF1, r25



	
	//stop timers
	TCCR1B=0;
    7a16:	10 92 81 00 	sts	0x0081, r1
	TCCR0B=0;
    7a1a:	15 bc       	out	0x25, r1	; 37
	
	//set ports
	DDRC=0xff; //video dac
    7a1c:	8f ef       	ldi	r24, 0xFF	; 255
    7a1e:	87 b9       	out	0x07, r24	; 7
	DDRB=0xff; //h-sync for ad725
    7a20:	84 b9       	out	0x04, r24	; 4
	DDRD=(1<<PD7)+(1<<PD4)+(1<<PD3); //audio-out, midi-in +led + switch
    7a22:	88 e9       	ldi	r24, 0x98	; 152
    7a24:	8a b9       	out	0x0a, r24	; 10
	PORTD|=(1<<PD4); //turn on led
    7a26:	5c 9a       	sbi	0x0b, 4	; 11


	//setup port A for joypads
	DDRA =0b00001100; //set only control lines as outputs
    7a28:	8c e0       	ldi	r24, 0x0C	; 12
    7a2a:	81 b9       	out	0x01, r24	; 1
	PORTA=0b11111011; //activate pullups on the data lines
    7a2c:	8b ef       	ldi	r24, 0xFB	; 251
    7a2e:	82 b9       	out	0x02, r24	; 2
	
	//PORTD=0;
	
	//set sync parameters. starts at odd field, in pre-eq pulses, line 1
	sync_phase=SYNC_PHASE_PRE_EQ;
    7a30:	10 92 aa 0c 	sts	0x0CAA, r1
	sync_pulse=SYNC_PRE_EQ_PULSES;
    7a34:	86 e0       	ldi	r24, 0x06	; 6
    7a36:	80 93 ab 0c 	sts	0x0CAB, r24

	//clear timers
	TCNT1H=0;
    7a3a:	10 92 85 00 	sts	0x0085, r1
	TCNT1L=0;
    7a3e:	10 92 84 00 	sts	0x0084, r1

	//set sync generator counter on TIMER1
	OCR1AH=HDRIVE_CL_TWICE>>8;
    7a42:	83 e0       	ldi	r24, 0x03	; 3
    7a44:	80 93 89 00 	sts	0x0089, r24
	OCR1AL=HDRIVE_CL_TWICE&0xff;
    7a48:	8d e8       	ldi	r24, 0x8D	; 141
    7a4a:	80 93 88 00 	sts	0x0088, r24

	TCCR1B=(1<<WGM12)+(1<<CS10);//CTC mode, use OCR1A for match
    7a4e:	89 e0       	ldi	r24, 0x09	; 9
    7a50:	80 93 81 00 	sts	0x0081, r24
	TIMSK1=(1<<OCIE1A);			//generate interrupt on match
    7a54:	82 e0       	ldi	r24, 0x02	; 2
    7a56:	80 93 6f 00 	sts	0x006F, r24

	//set clock divider counter for AD725 on TIMER0
	//outputs 14.31818Mhz (4FSC)
	TCCR0A=(1<<COM0A0)+(1<<WGM01); //toggle on compare match + CTC
    7a5a:	82 e4       	ldi	r24, 0x42	; 66
    7a5c:	84 bd       	out	0x24, r24	; 36
	OCR0A=0; //divide main clock by 2
    7a5e:	17 bc       	out	0x27, r1	; 39
	TCCR0B=(1<<CS00); //enable timer, no pre-scaler
    7a60:	95 bd       	out	0x25, r25	; 37

	//set sound PWM on TIMER2
	TCCR2A=(1<<COM2A1)+(1<<WGM21)+(1<<WGM20); //Fast PWM	
    7a62:	83 e8       	ldi	r24, 0x83	; 131
    7a64:	80 93 b0 00 	sts	0x00B0, r24
	OCR2A=0; //duty cycle (amplitude)
    7a68:	10 92 b3 00 	sts	0x00B3, r1
	TCCR2B=(1<<CS20);  //enable timer, no pre-scaler
    7a6c:	90 93 b1 00 	sts	0x00B1, r25

	SYNC_PORT=(1<<SYNC_PIN)|(1<<VIDEOCE_PIN); //set sync & chip enable line to hi
    7a70:	81 e1       	ldi	r24, 0x11	; 17
    7a72:	85 b9       	out	0x05, r24	; 5

	burstOffset=0;
    7a74:	10 92 bf 0c 	sts	0x0CBF, r1
	curr_frame=0;
    7a78:	10 92 ae 0c 	sts	0x0CAE, r1
	vsync_phase=0;
    7a7c:	10 92 af 0c 	sts	0x0CAF, r1
	joypad1_status_hi=0;
    7a80:	10 92 ba 0c 	sts	0x0CBA, r1
    7a84:	10 92 b9 0c 	sts	0x0CB9, r1
	joypad2_status_hi=0;
    7a88:	10 92 be 0c 	sts	0x0CBE, r1
    7a8c:	10 92 bd 0c 	sts	0x0CBD, r1

	//enable color correction
	ReadButtons();
    7a90:	0e 94 ae 44 	call	0x895c	; 0x895c <ReadButtons>
	if(ReadJoypad(0)&BTN_B){
    7a94:	80 e0       	ldi	r24, 0x00	; 0
    7a96:	0e 94 a2 44 	call	0x8944	; 0x8944 <ReadJoypad>
    7a9a:	80 ff       	sbrs	r24, 0
    7a9c:	03 c0       	rjmp	.+6      	; 0x7aa4 <Initialize+0xce>
		SetColorBurstOffset(4);
    7a9e:	84 e0       	ldi	r24, 0x04	; 4
    7aa0:	0e 94 9f 44 	call	0x893e	; 0x893e <SetColorBurstOffset>
	}
	
	InitializeVideoMode();
    7aa4:	0e 94 44 4a 	call	0x9488	; 0x9488 <InitializeVideoMode>

	sei();
    7aa8:	78 94       	sei
    7aaa:	0e 94 23 70 	call	0xe046	; 0xe046 <main>
    7aae:	0c 94 e0 70 	jmp	0xe1c0	; 0xe1c0 <_exit>

00007ab2 <__bad_interrupt>:
    7ab2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00007ab6 <sub_video_mode3>:
    7ab6:	0d e0       	ldi	r16, 0x0D	; 13
    7ab8:	0a 95       	dec	r16
    7aba:	f1 f7       	brne	.-4      	; 0x7ab8 <sub_video_mode3+0x2>
    7abc:	00 00       	nop
    7abe:	ed e2       	ldi	r30, 0x2D	; 45
    7ac0:	fc e0       	ldi	r31, 0x0C	; 12
    7ac2:	c0 e2       	ldi	r28, 0x20	; 32
    7ac4:	d1 e0       	ldi	r29, 0x01	; 1
    7ac6:	20 91 72 0f 	lds	r18, 0x0F72
    7aca:	00 27       	eor	r16, r16

00007acc <upd_loop>:
    7acc:	a0 81       	ld	r26, Z
    7ace:	b1 81       	ldd	r27, Z+1	; 0x01
    7ad0:	ac 0f       	add	r26, r28
    7ad2:	bd 1f       	adc	r27, r29
    7ad4:	1c 91       	ld	r17, X
    7ad6:	12 83       	std	Z+2, r17	; 0x02
    7ad8:	02 17       	cp	r16, r18
    7ada:	08 f4       	brcc	.+2      	; 0x7ade <noov>
    7adc:	10 2f       	mov	r17, r16

00007ade <noov>:
    7ade:	1c 93       	st	X, r17
    7ae0:	33 96       	adiw	r30, 0x03	; 3
    7ae2:	03 95       	inc	r16
    7ae4:	0f 31       	cpi	r16, 0x1F	; 31
    7ae6:	90 f3       	brcs	.-28     	; 0x7acc <upd_loop>
    7ae8:	04 e2       	ldi	r16, 0x24	; 36

00007aea <wait_loop>:
    7aea:	16 e0       	ldi	r17, 0x06	; 6
    7aec:	1a 95       	dec	r17
    7aee:	f1 f7       	brne	.-4      	; 0x7aec <wait_loop+0x2>
    7af0:	0a 95       	dec	r16
    7af2:	d9 f7       	brne	.-10     	; 0x7aea <wait_loop>
    7af4:	c0 e2       	ldi	r28, 0x20	; 32
    7af6:	d1 e0       	ldi	r29, 0x01	; 1
    7af8:	08 eb       	ldi	r16, 0xB8	; 184
    7afa:	a0 2e       	mov	r10, r16
    7afc:	66 27       	eor	r22, r22
    7afe:	78 e0       	ldi	r23, 0x08	; 8

00007b00 <next_text_line>:
    7b00:	1b d2       	rcall	.+1078   	; 0x7f38 <hsync_pulse>
    7b02:	3b e2       	ldi	r19, 0x2B	; 43
    7b04:	3a 95       	dec	r19
    7b06:	f1 f7       	brne	.-4      	; 0x7b04 <next_text_line+0x4>
    7b08:	0e 94 ba 3d 	call	0x7b74	; 0x7b74 <render_tile_line>
    7b0c:	37 e0       	ldi	r19, 0x07	; 7
    7b0e:	3a 95       	dec	r19
    7b10:	f1 f7       	brne	.-4      	; 0x7b0e <next_text_line+0xe>
    7b12:	00 c0       	rjmp	.+0      	; 0x7b14 <next_text_line+0x14>
    7b14:	aa 94       	dec	r10
    7b16:	89 f0       	breq	.+34     	; 0x7b3a <text_frame_end>
    7b18:	63 95       	inc	r22
    7b1a:	c8 95       	lpm
    7b1c:	68 30       	cpi	r22, 0x08	; 8
    7b1e:	29 f0       	breq	.+10     	; 0x7b2a <next_text_row>
    7b20:	c8 95       	lpm
    7b22:	c8 95       	lpm
    7b24:	c8 95       	lpm
    7b26:	00 00       	nop
    7b28:	eb cf       	rjmp	.-42     	; 0x7b00 <next_text_line>

00007b2a <next_text_row>:
    7b2a:	66 27       	eor	r22, r22
    7b2c:	00 24       	eor	r0, r0
    7b2e:	3e e1       	ldi	r19, 0x1E	; 30
    7b30:	c3 0f       	add	r28, r19
    7b32:	d0 1d       	adc	r29, r0
    7b34:	c8 95       	lpm
    7b36:	00 00       	nop
    7b38:	e3 cf       	rjmp	.-58     	; 0x7b00 <next_text_line>

00007b3a <text_frame_end>:
    7b3a:	35 e0       	ldi	r19, 0x05	; 5
    7b3c:	3a 95       	dec	r19
    7b3e:	f1 f7       	brne	.-4      	; 0x7b3c <text_frame_end+0x2>
    7b40:	00 c0       	rjmp	.+0      	; 0x7b42 <text_frame_end+0x8>
    7b42:	fa d1       	rcall	.+1012   	; 0x7f38 <hsync_pulse>
    7b44:	11 24       	eor	r1, r1
    7b46:	0e 94 95 49 	call	0x932a	; 0x932a <RestoreBackground>
    7b4a:	11 e0       	ldi	r17, 0x01	; 1
    7b4c:	00 91 ad 0c 	lds	r16, 0x0CAD
    7b50:	01 27       	eor	r16, r17
    7b52:	00 93 ad 0c 	sts	0x0CAD, r16
    7b56:	20 91 ae 0c 	lds	r18, 0x0CAE
    7b5a:	00 23       	and	r16, r16
    7b5c:	09 f0       	breq	.+2      	; 0x7b60 <text_frame_end+0x26>
    7b5e:	21 27       	eor	r18, r17
    7b60:	20 93 ae 0c 	sts	0x0CAE, r18
    7b64:	e1 e0       	ldi	r30, 0x01	; 1
    7b66:	e0 93 ac 0c 	sts	0x0CAC, r30
    7b6a:	e2 e0       	ldi	r30, 0x02	; 2
    7b6c:	e0 93 36 00 	sts	0x0036, r30
    7b70:	11 24       	eor	r1, r1
    7b72:	08 95       	ret

00007b74 <render_tile_line>:
    7b74:	de 01       	movw	r26, r28
    7b76:	67 9f       	mul	r22, r23
    7b78:	00 00       	nop
    7b7a:	00 91 b4 0c 	lds	r16, 0x0CB4
    7b7e:	10 91 b5 0c 	lds	r17, 0x0CB5
    7b82:	00 5c       	subi	r16, 0xC0	; 192
    7b84:	17 40       	sbci	r17, 0x07	; 7
    7b86:	00 0d       	add	r16, r0
    7b88:	11 1d       	adc	r17, r1
    7b8a:	18 01       	movw	r2, r16
    7b8c:	0d e6       	ldi	r16, 0x6D	; 109
    7b8e:	14 e0       	ldi	r17, 0x04	; 4
    7b90:	00 0d       	add	r16, r0
    7b92:	11 1d       	adc	r17, r1
    7b94:	28 01       	movw	r4, r16
    7b96:	30 e4       	ldi	r19, 0x40	; 64
    7b98:	1e e1       	ldi	r17, 0x1E	; 30
    7b9a:	2d 91       	ld	r18, X+
    7b9c:	2f 31       	cpi	r18, 0x1F	; 31
    7b9e:	6f b6       	in	r6, 0x3f	; 63
    7ba0:	60 fa       	bst	r6, 0
    7ba2:	23 9f       	mul	r18, r19
    7ba4:	a1 01       	movw	r20, r2
    7ba6:	0e f4       	brtc	.+2      	; 0x7baa <render_tile_line+0x36>
    7ba8:	a2 01       	movw	r20, r4
    7baa:	04 0e       	add	r0, r20
    7bac:	15 1e       	adc	r1, r21
    7bae:	f0 01       	movw	r30, r0
    7bb0:	f6 f0       	brts	.+60     	; 0x7bee <ramloop>

00007bb2 <romloop>:
    7bb2:	05 91       	lpm	r16, Z+
    7bb4:	08 b9       	out	0x08, r16	; 8
    7bb6:	2d 91       	ld	r18, X+
    7bb8:	05 91       	lpm	r16, Z+
    7bba:	08 b9       	out	0x08, r16	; 8
    7bbc:	23 9f       	mul	r18, r19
    7bbe:	05 91       	lpm	r16, Z+
    7bc0:	08 b9       	out	0x08, r16	; 8
    7bc2:	2f 31       	cpi	r18, 0x1F	; 31
    7bc4:	6f b6       	in	r6, 0x3f	; 63
    7bc6:	05 91       	lpm	r16, Z+
    7bc8:	08 b9       	out	0x08, r16	; 8
    7bca:	08 f4       	brcc	.+2      	; 0x7bce <romloop+0x1c>
    7bcc:	a2 01       	movw	r20, r4
    7bce:	05 91       	lpm	r16, Z+
    7bd0:	08 b9       	out	0x08, r16	; 8
    7bd2:	60 fa       	bst	r6, 0
    7bd4:	04 0e       	add	r0, r20
    7bd6:	05 91       	lpm	r16, Z+
    7bd8:	08 b9       	out	0x08, r16	; 8
    7bda:	15 1e       	adc	r1, r21
    7bdc:	1a 95       	dec	r17
    7bde:	05 91       	lpm	r16, Z+
    7be0:	08 b9       	out	0x08, r16	; 8
    7be2:	05 91       	lpm	r16, Z+
    7be4:	39 f1       	breq	.+78     	; 0x7c34 <end>
    7be6:	f0 01       	movw	r30, r0
    7be8:	08 b9       	out	0x08, r16	; 8
    7bea:	1e f7       	brtc	.-58     	; 0x7bb2 <romloop>
    7bec:	00 c0       	rjmp	.+0      	; 0x7bee <ramloop>

00007bee <ramloop>:
    7bee:	01 91       	ld	r16, Z+
    7bf0:	08 b9       	out	0x08, r16	; 8
    7bf2:	2d 91       	ld	r18, X+
    7bf4:	01 91       	ld	r16, Z+
    7bf6:	00 00       	nop
    7bf8:	08 b9       	out	0x08, r16	; 8
    7bfa:	23 9f       	mul	r18, r19
    7bfc:	01 91       	ld	r16, Z+
    7bfe:	00 00       	nop
    7c00:	08 b9       	out	0x08, r16	; 8
    7c02:	2f 31       	cpi	r18, 0x1F	; 31
    7c04:	6f b6       	in	r6, 0x3f	; 63
    7c06:	60 fa       	bst	r6, 0
    7c08:	01 91       	ld	r16, Z+
    7c0a:	08 b9       	out	0x08, r16	; 8
    7c0c:	0e f0       	brts	.+2      	; 0x7c10 <ramloop+0x22>
    7c0e:	a1 01       	movw	r20, r2
    7c10:	01 91       	ld	r16, Z+
    7c12:	04 0e       	add	r0, r20
    7c14:	08 b9       	out	0x08, r16	; 8
    7c16:	15 1e       	adc	r1, r21
    7c18:	00 c0       	rjmp	.+0      	; 0x7c1a <ramloop+0x2c>
    7c1a:	01 91       	ld	r16, Z+
    7c1c:	08 b9       	out	0x08, r16	; 8
    7c1e:	00 00       	nop
    7c20:	00 c0       	rjmp	.+0      	; 0x7c22 <ramloop+0x34>
    7c22:	01 91       	ld	r16, Z+
    7c24:	08 b9       	out	0x08, r16	; 8
    7c26:	01 91       	ld	r16, Z+
    7c28:	1a 95       	dec	r17
    7c2a:	21 f0       	breq	.+8      	; 0x7c34 <end>
    7c2c:	f0 01       	movw	r30, r0
    7c2e:	08 b9       	out	0x08, r16	; 8
    7c30:	06 f6       	brtc	.-128    	; 0x7bb2 <romloop>
    7c32:	dd cf       	rjmp	.-70     	; 0x7bee <ramloop>

00007c34 <end>:
    7c34:	08 b9       	out	0x08, r16	; 8
    7c36:	00 27       	eor	r16, r16
    7c38:	c8 95       	lpm
    7c3a:	00 00       	nop
    7c3c:	08 b9       	out	0x08, r16	; 8
    7c3e:	05 e0       	ldi	r16, 0x05	; 5
    7c40:	0a 95       	dec	r16
    7c42:	f1 f7       	brne	.-4      	; 0x7c40 <end+0xc>
    7c44:	08 95       	ret

00007c46 <CopyTileToRam>:
    7c46:	20 e4       	ldi	r18, 0x40	; 64
    7c48:	e0 91 b4 0c 	lds	r30, 0x0CB4
    7c4c:	f0 91 b5 0c 	lds	r31, 0x0CB5
    7c50:	8f 51       	subi	r24, 0x1F	; 31
    7c52:	82 9f       	mul	r24, r18
    7c54:	e0 0d       	add	r30, r0
    7c56:	f1 1d       	adc	r31, r1
    7c58:	ad e6       	ldi	r26, 0x6D	; 109
    7c5a:	b4 e0       	ldi	r27, 0x04	; 4
    7c5c:	62 9f       	mul	r22, r18
    7c5e:	a0 0d       	add	r26, r0
    7c60:	b1 1d       	adc	r27, r1
    7c62:	00 24       	eor	r0, r0
    7c64:	05 90       	lpm	r0, Z+
    7c66:	0d 92       	st	X+, r0
    7c68:	05 90       	lpm	r0, Z+
    7c6a:	0d 92       	st	X+, r0
    7c6c:	05 90       	lpm	r0, Z+
    7c6e:	0d 92       	st	X+, r0
    7c70:	05 90       	lpm	r0, Z+
    7c72:	0d 92       	st	X+, r0
    7c74:	05 90       	lpm	r0, Z+
    7c76:	0d 92       	st	X+, r0
    7c78:	05 90       	lpm	r0, Z+
    7c7a:	0d 92       	st	X+, r0
    7c7c:	05 90       	lpm	r0, Z+
    7c7e:	0d 92       	st	X+, r0
    7c80:	05 90       	lpm	r0, Z+
    7c82:	0d 92       	st	X+, r0
    7c84:	05 90       	lpm	r0, Z+
    7c86:	0d 92       	st	X+, r0
    7c88:	05 90       	lpm	r0, Z+
    7c8a:	0d 92       	st	X+, r0
    7c8c:	05 90       	lpm	r0, Z+
    7c8e:	0d 92       	st	X+, r0
    7c90:	05 90       	lpm	r0, Z+
    7c92:	0d 92       	st	X+, r0
    7c94:	05 90       	lpm	r0, Z+
    7c96:	0d 92       	st	X+, r0
    7c98:	05 90       	lpm	r0, Z+
    7c9a:	0d 92       	st	X+, r0
    7c9c:	05 90       	lpm	r0, Z+
    7c9e:	0d 92       	st	X+, r0
    7ca0:	05 90       	lpm	r0, Z+
    7ca2:	0d 92       	st	X+, r0
    7ca4:	05 90       	lpm	r0, Z+
    7ca6:	0d 92       	st	X+, r0
    7ca8:	05 90       	lpm	r0, Z+
    7caa:	0d 92       	st	X+, r0
    7cac:	05 90       	lpm	r0, Z+
    7cae:	0d 92       	st	X+, r0
    7cb0:	05 90       	lpm	r0, Z+
    7cb2:	0d 92       	st	X+, r0
    7cb4:	05 90       	lpm	r0, Z+
    7cb6:	0d 92       	st	X+, r0
    7cb8:	05 90       	lpm	r0, Z+
    7cba:	0d 92       	st	X+, r0
    7cbc:	05 90       	lpm	r0, Z+
    7cbe:	0d 92       	st	X+, r0
    7cc0:	05 90       	lpm	r0, Z+
    7cc2:	0d 92       	st	X+, r0
    7cc4:	05 90       	lpm	r0, Z+
    7cc6:	0d 92       	st	X+, r0
    7cc8:	05 90       	lpm	r0, Z+
    7cca:	0d 92       	st	X+, r0
    7ccc:	05 90       	lpm	r0, Z+
    7cce:	0d 92       	st	X+, r0
    7cd0:	05 90       	lpm	r0, Z+
    7cd2:	0d 92       	st	X+, r0
    7cd4:	05 90       	lpm	r0, Z+
    7cd6:	0d 92       	st	X+, r0
    7cd8:	05 90       	lpm	r0, Z+
    7cda:	0d 92       	st	X+, r0
    7cdc:	05 90       	lpm	r0, Z+
    7cde:	0d 92       	st	X+, r0
    7ce0:	05 90       	lpm	r0, Z+
    7ce2:	0d 92       	st	X+, r0
    7ce4:	05 90       	lpm	r0, Z+
    7ce6:	0d 92       	st	X+, r0
    7ce8:	05 90       	lpm	r0, Z+
    7cea:	0d 92       	st	X+, r0
    7cec:	05 90       	lpm	r0, Z+
    7cee:	0d 92       	st	X+, r0
    7cf0:	05 90       	lpm	r0, Z+
    7cf2:	0d 92       	st	X+, r0
    7cf4:	05 90       	lpm	r0, Z+
    7cf6:	0d 92       	st	X+, r0
    7cf8:	05 90       	lpm	r0, Z+
    7cfa:	0d 92       	st	X+, r0
    7cfc:	05 90       	lpm	r0, Z+
    7cfe:	0d 92       	st	X+, r0
    7d00:	05 90       	lpm	r0, Z+
    7d02:	0d 92       	st	X+, r0
    7d04:	05 90       	lpm	r0, Z+
    7d06:	0d 92       	st	X+, r0
    7d08:	05 90       	lpm	r0, Z+
    7d0a:	0d 92       	st	X+, r0
    7d0c:	05 90       	lpm	r0, Z+
    7d0e:	0d 92       	st	X+, r0
    7d10:	05 90       	lpm	r0, Z+
    7d12:	0d 92       	st	X+, r0
    7d14:	05 90       	lpm	r0, Z+
    7d16:	0d 92       	st	X+, r0
    7d18:	05 90       	lpm	r0, Z+
    7d1a:	0d 92       	st	X+, r0
    7d1c:	05 90       	lpm	r0, Z+
    7d1e:	0d 92       	st	X+, r0
    7d20:	05 90       	lpm	r0, Z+
    7d22:	0d 92       	st	X+, r0
    7d24:	05 90       	lpm	r0, Z+
    7d26:	0d 92       	st	X+, r0
    7d28:	05 90       	lpm	r0, Z+
    7d2a:	0d 92       	st	X+, r0
    7d2c:	05 90       	lpm	r0, Z+
    7d2e:	0d 92       	st	X+, r0
    7d30:	05 90       	lpm	r0, Z+
    7d32:	0d 92       	st	X+, r0
    7d34:	05 90       	lpm	r0, Z+
    7d36:	0d 92       	st	X+, r0
    7d38:	05 90       	lpm	r0, Z+
    7d3a:	0d 92       	st	X+, r0
    7d3c:	05 90       	lpm	r0, Z+
    7d3e:	0d 92       	st	X+, r0
    7d40:	05 90       	lpm	r0, Z+
    7d42:	0d 92       	st	X+, r0
    7d44:	05 90       	lpm	r0, Z+
    7d46:	0d 92       	st	X+, r0
    7d48:	05 90       	lpm	r0, Z+
    7d4a:	0d 92       	st	X+, r0
    7d4c:	05 90       	lpm	r0, Z+
    7d4e:	0d 92       	st	X+, r0
    7d50:	05 90       	lpm	r0, Z+
    7d52:	0d 92       	st	X+, r0
    7d54:	05 90       	lpm	r0, Z+
    7d56:	0d 92       	st	X+, r0
    7d58:	05 90       	lpm	r0, Z+
    7d5a:	0d 92       	st	X+, r0
    7d5c:	05 90       	lpm	r0, Z+
    7d5e:	0d 92       	st	X+, r0
    7d60:	05 90       	lpm	r0, Z+
    7d62:	0d 92       	st	X+, r0
    7d64:	11 24       	eor	r1, r1
    7d66:	08 95       	ret

00007d68 <BlitSprite>:
    7d68:	0f 93       	push	r16
    7d6a:	1f 93       	push	r17
    7d6c:	95 e0       	ldi	r25, 0x05	; 5
    7d6e:	89 9f       	mul	r24, r25
    7d70:	e2 ed       	ldi	r30, 0xD2	; 210
    7d72:	f3 e0       	ldi	r31, 0x03	; 3
    7d74:	e0 0d       	add	r30, r0
    7d76:	f1 1d       	adc	r31, r1
    7d78:	04 81       	ldd	r16, Z+4	; 0x04
    7d7a:	82 81       	ldd	r24, Z+2	; 0x02
    7d7c:	93 81       	ldd	r25, Z+3	; 0x03
    7d7e:	e0 e4       	ldi	r30, 0x40	; 64
    7d80:	8e 9f       	mul	r24, r30
    7d82:	d0 01       	movw	r26, r0
    7d84:	9e 9f       	mul	r25, r30
    7d86:	b0 0d       	add	r27, r0
    7d88:	e0 91 8a 0c 	lds	r30, 0x0C8A
    7d8c:	f0 91 8b 0c 	lds	r31, 0x0C8B
    7d90:	ea 0f       	add	r30, r26
    7d92:	fb 1f       	adc	r31, r27
    7d94:	ad e6       	ldi	r26, 0x6D	; 109
    7d96:	b4 e0       	ldi	r27, 0x04	; 4
    7d98:	90 e4       	ldi	r25, 0x40	; 64
    7d9a:	69 9f       	mul	r22, r25
    7d9c:	a0 0d       	add	r26, r0
    7d9e:	b1 1d       	adc	r27, r1
    7da0:	11 24       	eor	r1, r1
    7da2:	40 30       	cpi	r20, 0x00	; 0
    7da4:	51 f4       	brne	.+20     	; 0x7dba <x_2nd_tile>
    7da6:	a2 0f       	add	r26, r18
    7da8:	b1 1d       	adc	r27, r1
    7daa:	82 2f       	mov	r24, r18
    7dac:	12 2f       	mov	r17, r18
    7dae:	00 ff       	sbrs	r16, 0
    7db0:	11 c0       	rjmp	.+34     	; 0x7dd4 <x_check_end>
    7db2:	37 96       	adiw	r30, 0x07	; 7
    7db4:	10 e1       	ldi	r17, 0x10	; 16
    7db6:	12 1b       	sub	r17, r18
    7db8:	0d c0       	rjmp	.+26     	; 0x7dd4 <x_check_end>

00007dba <x_2nd_tile>:
    7dba:	88 e0       	ldi	r24, 0x08	; 8
    7dbc:	82 1b       	sub	r24, r18
    7dbe:	00 fd       	sbrc	r16, 0
    7dc0:	04 c0       	rjmp	.+8      	; 0x7dca <x2_flip_x>
    7dc2:	18 2f       	mov	r17, r24
    7dc4:	e8 0f       	add	r30, r24
    7dc6:	f1 1d       	adc	r31, r1
    7dc8:	05 c0       	rjmp	.+10     	; 0x7dd4 <x_check_end>

00007dca <x2_flip_x>:
    7dca:	18 e0       	ldi	r17, 0x08	; 8
    7dcc:	12 0f       	add	r17, r18
    7dce:	e2 0f       	add	r30, r18
    7dd0:	f1 1d       	adc	r31, r1
    7dd2:	31 97       	sbiw	r30, 0x01	; 1

00007dd4 <x_check_end>:
    7dd4:	50 30       	cpi	r21, 0x00	; 0
    7dd6:	31 f4       	brne	.+12     	; 0x7de4 <y_2nd_tile>
    7dd8:	98 e0       	ldi	r25, 0x08	; 8
    7dda:	93 9f       	mul	r25, r19
    7ddc:	a0 0d       	add	r26, r0
    7dde:	b1 1d       	adc	r27, r1
    7de0:	93 2f       	mov	r25, r19
    7de2:	06 c0       	rjmp	.+12     	; 0x7df0 <y_check_end>

00007de4 <y_2nd_tile>:
    7de4:	98 e0       	ldi	r25, 0x08	; 8
    7de6:	93 1b       	sub	r25, r19
    7de8:	58 e0       	ldi	r21, 0x08	; 8
    7dea:	59 9f       	mul	r21, r25
    7dec:	e0 0d       	add	r30, r0
    7dee:	f1 1d       	adc	r31, r1

00007df0 <y_check_end>:
    7df0:	11 24       	eor	r1, r1
    7df2:	3e ef       	ldi	r19, 0xFE	; 254
    7df4:	e8 94       	clt
    7df6:	00 fd       	sbrc	r16, 0
    7df8:	68 94       	set
    7dfa:	58 e0       	ldi	r21, 0x08	; 8
    7dfc:	59 1b       	sub	r21, r25

00007dfe <y2_loop>:
    7dfe:	48 e0       	ldi	r20, 0x08	; 8
    7e00:	48 1b       	sub	r20, r24
    7e02:	3e f0       	brts	.+14     	; 0x7e12 <x2_loop_flip>

00007e04 <x2_loop>:
    7e04:	25 91       	lpm	r18, Z+
    7e06:	23 13       	cpse	r18, r19
    7e08:	2c 93       	st	X, r18
    7e0a:	11 96       	adiw	r26, 0x01	; 1
    7e0c:	4a 95       	dec	r20
    7e0e:	d1 f7       	brne	.-12     	; 0x7e04 <x2_loop>
    7e10:	07 c0       	rjmp	.+14     	; 0x7e20 <x2_loop_end>

00007e12 <x2_loop_flip>:
    7e12:	24 91       	lpm	r18, Z+
    7e14:	31 97       	sbiw	r30, 0x01	; 1
    7e16:	23 13       	cpse	r18, r19
    7e18:	2c 93       	st	X, r18
    7e1a:	11 96       	adiw	r26, 0x01	; 1
    7e1c:	4a 95       	dec	r20
    7e1e:	c9 f7       	brne	.-14     	; 0x7e12 <x2_loop_flip>

00007e20 <x2_loop_end>:
    7e20:	e1 0f       	add	r30, r17
    7e22:	f1 1d       	adc	r31, r1
    7e24:	a8 0f       	add	r26, r24
    7e26:	b1 1d       	adc	r27, r1
    7e28:	5a 95       	dec	r21
    7e2a:	49 f7       	brne	.-46     	; 0x7dfe <y2_loop>
    7e2c:	11 24       	eor	r1, r1
    7e2e:	1f 91       	pop	r17
    7e30:	0f 91       	pop	r16
    7e32:	08 95       	ret

00007e34 <sync_func_vectors>:
    7e34:	aa 3f       	cpi	r26, 0xFA	; 250
    7e36:	b9 3f       	cpi	r27, 0xF9	; 249
    7e38:	c7 3f       	cpi	r28, 0xF7	; 247
    7e3a:	1e 3f       	cpi	r17, 0xFE	; 254

00007e3c <do_hsync>:
    7e3c:	28 98       	cbi	0x05, 0	; 5
    7e3e:	0e 94 1a 41 	call	0x8234	; 0x8234 <update_sound_buffer>
    7e42:	eb e0       	ldi	r30, 0x0B	; 11

00007e44 <do_hsync_delay>:
    7e44:	ea 95       	dec	r30
    7e46:	f1 f7       	brne	.-4      	; 0x7e44 <do_hsync_delay>
    7e48:	00 c0       	rjmp	.+0      	; 0x7e4a <do_hsync_delay+0x6>
    7e4a:	e7 e0       	ldi	r30, 0x07	; 7
    7e4c:	e0 93 89 00 	sts	0x0089, r30
    7e50:	eb e1       	ldi	r30, 0x1B	; 27
    7e52:	e0 93 88 00 	sts	0x0088, r30
    7e56:	e0 e0       	ldi	r30, 0x00	; 0
    7e58:	f6 e0       	ldi	r31, 0x06	; 6
    7e5a:	be d0       	rcall	.+380    	; 0x7fd8 <update_sync_phase>
    7e5c:	28 9a       	sbi	0x05, 0	; 5
    7e5e:	e0 ff       	sbrs	r30, 0
    7e60:	30 d0       	rcall	.+96     	; 0x7ec2 <render>
    7e62:	e0 ff       	sbrs	r30, 0
    7e64:	2d c0       	rjmp	.+90     	; 0x7ec0 <not_vsync>
    7e66:	2f 93       	push	r18
    7e68:	3f 93       	push	r19
    7e6a:	4f 93       	push	r20
    7e6c:	5f 93       	push	r21
    7e6e:	6f 93       	push	r22
    7e70:	7f 93       	push	r23
    7e72:	8f 93       	push	r24
    7e74:	9f 93       	push	r25
    7e76:	af 93       	push	r26
    7e78:	bf 93       	push	r27
    7e7a:	78 94       	sei
    7e7c:	11 24       	eor	r1, r1
    7e7e:	e0 91 b0 0c 	lds	r30, 0x0CB0
    7e82:	f0 91 b1 0c 	lds	r31, 0x0CB1
    7e86:	e1 15       	cp	r30, r1
    7e88:	f1 05       	cpc	r31, r1
    7e8a:	09 f0       	breq	.+2      	; 0x7e8e <do_hsync_delay+0x4a>
    7e8c:	09 95       	icall
    7e8e:	0e 94 79 4b 	call	0x96f2	; 0x96f2 <VideoModeVsync>
    7e92:	0e 94 e9 44 	call	0x89d2	; 0x89d2 <ReadControllers>
    7e96:	0e 94 47 40 	call	0x808e	; 0x808e <MixSound>
    7e9a:	11 24       	eor	r1, r1
    7e9c:	e0 91 b2 0c 	lds	r30, 0x0CB2
    7ea0:	f0 91 b3 0c 	lds	r31, 0x0CB3
    7ea4:	e1 15       	cp	r30, r1
    7ea6:	f1 05       	cpc	r31, r1
    7ea8:	09 f0       	breq	.+2      	; 0x7eac <do_hsync_delay+0x68>
    7eaa:	09 95       	icall
    7eac:	bf 91       	pop	r27
    7eae:	af 91       	pop	r26
    7eb0:	9f 91       	pop	r25
    7eb2:	8f 91       	pop	r24
    7eb4:	7f 91       	pop	r23
    7eb6:	6f 91       	pop	r22
    7eb8:	5f 91       	pop	r21
    7eba:	4f 91       	pop	r20
    7ebc:	3f 91       	pop	r19
    7ebe:	2f 91       	pop	r18

00007ec0 <not_vsync>:
    7ec0:	08 95       	ret

00007ec2 <render>:
    7ec2:	ef 93       	push	r30
    7ec4:	e0 91 ab 0c 	lds	r30, 0x0CAB
    7ec8:	e1 3c       	cpi	r30, 0xC1	; 193
    7eca:	80 f4       	brcc	.+32     	; 0x7eec <render_end>
    7ecc:	e9 30       	cpi	r30, 0x09	; 9
    7ece:	70 f0       	brcs	.+28     	; 0x7eec <render_end>
    7ed0:	ed e1       	ldi	r30, 0x1D	; 29
    7ed2:	ff 27       	eor	r31, r31

00007ed4 <push_loop>:
    7ed4:	00 80       	ld	r0, Z
    7ed6:	0f 92       	push	r0
    7ed8:	ea 95       	dec	r30
    7eda:	e1 f7       	brne	.-8      	; 0x7ed4 <push_loop>
    7edc:	0e 94 5b 3d 	call	0x7ab6	; 0x7ab6 <sub_video_mode3>
    7ee0:	e1 e0       	ldi	r30, 0x01	; 1
    7ee2:	ff 27       	eor	r31, r31

00007ee4 <pop_loop>:
    7ee4:	0f 90       	pop	r0
    7ee6:	01 92       	st	Z+, r0
    7ee8:	ee 31       	cpi	r30, 0x1E	; 30
    7eea:	e0 f3       	brcs	.-8      	; 0x7ee4 <pop_loop>

00007eec <render_end>:
    7eec:	ef 91       	pop	r30
    7eee:	08 95       	ret

00007ef0 <__vector_13>:
    7ef0:	ff 93       	push	r31
    7ef2:	ef 93       	push	r30
    7ef4:	ef b7       	in	r30, 0x3f	; 63
    7ef6:	ef 93       	push	r30
    7ef8:	e0 91 84 00 	lds	r30, 0x0084
    7efc:	ee 50       	subi	r30, 0x0E	; 14
    7efe:	f1 e0       	ldi	r31, 0x01	; 1

00007f00 <latency_loop>:
    7f00:	ef 17       	cp	r30, r31
    7f02:	00 f0       	brcs	.+0      	; 0x7f04 <latency_loop+0x4>
    7f04:	f3 95       	inc	r31
    7f06:	fa 30       	cpi	r31, 0x0A	; 10
    7f08:	d8 f3       	brcs	.-10     	; 0x7f00 <latency_loop>
    7f0a:	05 d0       	rcall	.+10     	; 0x7f16 <sync>
    7f0c:	ef 91       	pop	r30
    7f0e:	ef bf       	out	0x3f, r30	; 63
    7f10:	ef 91       	pop	r30
    7f12:	ff 91       	pop	r31
    7f14:	18 95       	reti

00007f16 <sync>:
    7f16:	0f 92       	push	r0
    7f18:	1f 92       	push	r1
    7f1a:	e4 e3       	ldi	r30, 0x34	; 52
    7f1c:	fe e7       	ldi	r31, 0x7E	; 126
    7f1e:	00 90 aa 0c 	lds	r0, 0x0CAA
    7f22:	00 0c       	add	r0, r0
    7f24:	11 24       	eor	r1, r1
    7f26:	e0 0d       	add	r30, r0
    7f28:	f1 1d       	adc	r31, r1
    7f2a:	05 90       	lpm	r0, Z+
    7f2c:	14 90       	lpm	r1, Z+
    7f2e:	f0 01       	movw	r30, r0
    7f30:	09 95       	icall
    7f32:	1f 90       	pop	r1
    7f34:	0f 90       	pop	r0
    7f36:	08 95       	ret

00007f38 <hsync_pulse>:
    7f38:	28 98       	cbi	0x05, 0	; 5
    7f3a:	0e 94 1a 41 	call	0x8234	; 0x8234 <update_sound_buffer>
    7f3e:	e5 e1       	ldi	r30, 0x15	; 21
    7f40:	ea 95       	dec	r30
    7f42:	f1 f7       	brne	.-4      	; 0x7f40 <hsync_pulse+0x8>
    7f44:	e0 91 ab 0c 	lds	r30, 0x0CAB
    7f48:	ea 95       	dec	r30
    7f4a:	e0 93 ab 0c 	sts	0x0CAB, r30
    7f4e:	28 9a       	sbi	0x05, 0	; 5
    7f50:	00 c0       	rjmp	.+0      	; 0x7f52 <hsync_pulse+0x1a>
    7f52:	08 95       	ret

00007f54 <do_pre_eq>:
    7f54:	28 98       	cbi	0x05, 0	; 5
    7f56:	0e 94 3c 41 	call	0x8278	; 0x8278 <update_sound_buffer_2>
    7f5a:	28 9a       	sbi	0x05, 0	; 5
    7f5c:	00 00       	nop
    7f5e:	e1 e0       	ldi	r30, 0x01	; 1
    7f60:	f6 e0       	ldi	r31, 0x06	; 6
    7f62:	3a d0       	rcall	.+116    	; 0x7fd8 <update_sync_phase>
    7f64:	e3 e0       	ldi	r30, 0x03	; 3
    7f66:	e0 93 89 00 	sts	0x0089, r30
    7f6a:	ed e8       	ldi	r30, 0x8D	; 141
    7f6c:	e0 93 88 00 	sts	0x0088, r30
    7f70:	08 95       	ret

00007f72 <do_eq>:
    7f72:	28 98       	cbi	0x05, 0	; 5
    7f74:	0e 94 3c 41 	call	0x8278	; 0x8278 <update_sound_buffer_2>
    7f78:	e9 ea       	ldi	r30, 0xA9	; 169

00007f7a <do_eq_delay>:
    7f7a:	00 00       	nop
    7f7c:	ea 95       	dec	r30
    7f7e:	e9 f7       	brne	.-6      	; 0x7f7a <do_eq_delay>
    7f80:	00 c0       	rjmp	.+0      	; 0x7f82 <do_eq_delay+0x8>
    7f82:	00 00       	nop
    7f84:	f6 e0       	ldi	r31, 0x06	; 6
    7f86:	e2 e0       	ldi	r30, 0x02	; 2
    7f88:	27 d0       	rcall	.+78     	; 0x7fd8 <update_sync_phase>
    7f8a:	28 9a       	sbi	0x05, 0	; 5
    7f8c:	08 95       	ret

00007f8e <do_post_eq>:
    7f8e:	28 98       	cbi	0x05, 0	; 5
    7f90:	0e 94 3c 41 	call	0x8278	; 0x8278 <update_sound_buffer_2>
    7f94:	28 9a       	sbi	0x05, 0	; 5
    7f96:	00 00       	nop
    7f98:	e3 e0       	ldi	r30, 0x03	; 3
    7f9a:	fd ef       	ldi	r31, 0xFD	; 253
    7f9c:	1d d0       	rcall	.+58     	; 0x7fd8 <update_sync_phase>
    7f9e:	e0 91 ab 0c 	lds	r30, 0x0CAB
    7fa2:	e5 30       	cpi	r30, 0x05	; 5
    7fa4:	91 f4       	brne	.+36     	; 0x7fca <noshift>
    7fa6:	e0 91 ad 0c 	lds	r30, 0x0CAD
    7faa:	e1 30       	cpi	r30, 0x01	; 1
    7fac:	00 00       	nop
    7fae:	f0 91 bf 0c 	lds	r31, 0x0CBF
    7fb2:	19 f4       	brne	.+6      	; 0x7fba <peq_odd>
    7fb4:	f0 91 bf 0c 	lds	r31, 0x0CBF
    7fb8:	f1 95       	neg	r31

00007fba <peq_odd>:
    7fba:	e3 e0       	ldi	r30, 0x03	; 3
    7fbc:	e0 93 89 00 	sts	0x0089, r30
    7fc0:	ed e8       	ldi	r30, 0x8D	; 141
    7fc2:	ef 0f       	add	r30, r31
    7fc4:	e0 93 88 00 	sts	0x0088, r30
    7fc8:	08 95       	ret

00007fca <noshift>:
    7fca:	e3 e0       	ldi	r30, 0x03	; 3
    7fcc:	e0 93 89 00 	sts	0x0089, r30
    7fd0:	ed e8       	ldi	r30, 0x8D	; 141
    7fd2:	e0 93 88 00 	sts	0x0088, r30
    7fd6:	08 95       	ret

00007fd8 <update_sync_phase>:
    7fd8:	00 90 ab 0c 	lds	r0, 0x0CAB
    7fdc:	0a 94       	dec	r0
    7fde:	10 90 5f 00 	lds	r1, 0x005F
    7fe2:	11 fc       	sbrc	r1, 1
    7fe4:	0f 2e       	mov	r0, r31
    7fe6:	00 92 ab 0c 	sts	0x0CAB, r0
    7fea:	00 90 aa 0c 	lds	r0, 0x0CAA
    7fee:	11 fc       	sbrc	r1, 1
    7ff0:	0e 2e       	mov	r0, r30
    7ff2:	00 92 aa 0c 	sts	0x0CAA, r0
    7ff6:	e0 e0       	ldi	r30, 0x00	; 0
    7ff8:	11 fc       	sbrc	r1, 1
    7ffa:	e1 e0       	ldi	r30, 0x01	; 1
    7ffc:	08 95       	ret
	...

00008000 <SetMixerNote>:
    8000:	99 27       	eor	r25, r25
    8002:	77 27       	eor	r23, r23
    8004:	83 30       	cpi	r24, 0x03	; 3
    8006:	08 f0       	brcs	.+2      	; 0x800a <set_note_waves>
    8008:	08 95       	ret

0000800a <set_note_waves>:
    800a:	ec e8       	ldi	r30, 0x8C	; 140
    800c:	f2 e8       	ldi	r31, 0x82	; 130
    800e:	66 0f       	add	r22, r22
    8010:	77 1f       	adc	r23, r23
    8012:	e6 0f       	add	r30, r22
    8014:	f7 1f       	adc	r31, r23
    8016:	a5 91       	lpm	r26, Z+
    8018:	b4 91       	lpm	r27, Z+
    801a:	e2 ed       	ldi	r30, 0xD2	; 210
    801c:	fe e0       	ldi	r31, 0x0E	; 14
    801e:	2a e0       	ldi	r18, 0x0A	; 10
    8020:	28 9f       	mul	r18, r24
    8022:	e0 0d       	add	r30, r0
    8024:	f1 1d       	adc	r31, r1
    8026:	a1 83       	std	Z+1, r26	; 0x01
    8028:	b2 83       	std	Z+2, r27	; 0x02
    802a:	11 24       	eor	r1, r1
    802c:	08 95       	ret

0000802e <SetMixerNoiseParams>:
    802e:	90 91 f1 0e 	lds	r25, 0x0EF1
    8032:	91 70       	andi	r25, 0x01	; 1
    8034:	88 0f       	add	r24, r24
    8036:	89 2b       	or	r24, r25
    8038:	80 93 f1 0e 	sts	0x0EF1, r24
    803c:	08 95       	ret

0000803e <SetMixerWave>:
    803e:	99 27       	eor	r25, r25
    8040:	77 27       	eor	r23, r23
    8042:	e2 ed       	ldi	r30, 0xD2	; 210
    8044:	fe e0       	ldi	r31, 0x0E	; 14
    8046:	2a e0       	ldi	r18, 0x0A	; 10
    8048:	28 9f       	mul	r18, r24
    804a:	e0 0d       	add	r30, r0
    804c:	f1 1d       	adc	r31, r1
    804e:	6e 3f       	cpi	r22, 0xFE	; 254
    8050:	31 f4       	brne	.+12     	; 0x805e <smw1>
    8052:	60 91 f1 0e 	lds	r22, 0x0EF1
    8056:	6e 7f       	andi	r22, 0xFE	; 254
    8058:	60 93 f1 0e 	sts	0x0EF1, r22
    805c:	0b c0       	rjmp	.+22     	; 0x8074 <esmw>

0000805e <smw1>:
    805e:	6f 3f       	cpi	r22, 0xFF	; 255
    8060:	31 f4       	brne	.+12     	; 0x806e <smw2>
    8062:	60 91 f1 0e 	lds	r22, 0x0EF1
    8066:	6e 6f       	ori	r22, 0xFE	; 254
    8068:	60 93 f1 0e 	sts	0x0EF1, r22
    806c:	03 c0       	rjmp	.+6      	; 0x8074 <esmw>

0000806e <smw2>:
    806e:	74 e8       	ldi	r23, 0x84	; 132
    8070:	76 0f       	add	r23, r22
    8072:	75 83       	std	Z+5, r23	; 0x05

00008074 <esmw>:
    8074:	11 24       	eor	r1, r1
    8076:	08 95       	ret

00008078 <SetMixerVolume>:
    8078:	99 27       	eor	r25, r25
    807a:	77 27       	eor	r23, r23
    807c:	e2 ed       	ldi	r30, 0xD2	; 210
    807e:	fe e0       	ldi	r31, 0x0E	; 14
    8080:	2a e0       	ldi	r18, 0x0A	; 10
    8082:	28 9f       	mul	r18, r24
    8084:	e0 0d       	add	r30, r0
    8086:	f1 1d       	adc	r31, r1
    8088:	60 83       	st	Z, r22
    808a:	11 24       	eor	r1, r1
    808c:	08 95       	ret

0000808e <MixSound>:
    808e:	0e 94 86 46 	call	0x8d0c	; 0x8d0c <ProcessMusic>
    8092:	00 90 cf 0e 	lds	r0, 0x0ECF
    8096:	00 20       	and	r0, r0
    8098:	19 f4       	brne	.+6      	; 0x80a0 <set_hi_bank>
    809a:	a1 ec       	ldi	r26, 0xC1	; 193
    809c:	bc e0       	ldi	r27, 0x0C	; 12
    809e:	02 c0       	rjmp	.+4      	; 0x80a4 <end_set_bank>

000080a0 <set_hi_bank>:
    80a0:	a7 ec       	ldi	r26, 0xC7	; 199
    80a2:	bd e0       	ldi	r27, 0x0D	; 13

000080a4 <end_set_bank>:
    80a4:	21 e0       	ldi	r18, 0x01	; 1
    80a6:	02 26       	eor	r0, r18
    80a8:	00 92 cf 0e 	sts	0x0ECF, r0
    80ac:	22 e0       	ldi	r18, 0x02	; 2
    80ae:	20 93 d0 0e 	sts	0x0ED0, r18
    80b2:	2f 92       	push	r2
    80b4:	3f 92       	push	r3
    80b6:	4f 92       	push	r4
    80b8:	5f 92       	push	r5
    80ba:	6f 92       	push	r6
    80bc:	7f 92       	push	r7
    80be:	8f 92       	push	r8
    80c0:	9f 92       	push	r9
    80c2:	af 92       	push	r10
    80c4:	bf 92       	push	r11
    80c6:	cf 92       	push	r12
    80c8:	df 92       	push	r13
    80ca:	ef 92       	push	r14
    80cc:	ff 92       	push	r15
    80ce:	0f 93       	push	r16
    80d0:	1f 93       	push	r17
    80d2:	cf 93       	push	r28
    80d4:	df 93       	push	r29
    80d6:	50 91 f0 0e 	lds	r21, 0x0EF0
    80da:	60 91 f2 0e 	lds	r22, 0x0EF2
    80de:	70 91 f3 0e 	lds	r23, 0x0EF3
    80e2:	80 91 f4 0e 	lds	r24, 0x0EF4
    80e6:	20 90 d3 0e 	lds	r2, 0x0ED3
    80ea:	30 90 d4 0e 	lds	r3, 0x0ED4
    80ee:	40 90 d6 0e 	lds	r4, 0x0ED6
    80f2:	50 90 d7 0e 	lds	r5, 0x0ED7
    80f6:	60 90 d5 0e 	lds	r6, 0x0ED5
    80fa:	10 91 d2 0e 	lds	r17, 0x0ED2
    80fe:	70 90 dd 0e 	lds	r7, 0x0EDD
    8102:	80 90 de 0e 	lds	r8, 0x0EDE
    8106:	90 90 df 0e 	lds	r9, 0x0EDF
    810a:	a0 90 e0 0e 	lds	r10, 0x0EE0
    810e:	b0 90 e1 0e 	lds	r11, 0x0EE1
    8112:	20 91 dc 0e 	lds	r18, 0x0EDC
    8116:	c0 90 e7 0e 	lds	r12, 0x0EE7
    811a:	d0 90 e8 0e 	lds	r13, 0x0EE8
    811e:	e0 90 ea 0e 	lds	r14, 0x0EEA
    8122:	f0 90 eb 0e 	lds	r15, 0x0EEB
    8126:	00 91 e9 0e 	lds	r16, 0x0EE9
    812a:	30 91 e6 0e 	lds	r19, 0x0EE6
    812e:	9f ef       	ldi	r25, 0xFF	; 255

00008130 <mix_loop>:
    8130:	62 0c       	add	r6, r2
    8132:	43 1c       	adc	r4, r3
    8134:	f2 01       	movw	r30, r4
    8136:	44 91       	lpm	r20, Z+
    8138:	41 03       	mulsu	r20, r17
    813a:	00 24       	eor	r0, r0
    813c:	00 08       	sbc	r0, r0
    813e:	c1 2d       	mov	r28, r1
    8140:	d0 2d       	mov	r29, r0
    8142:	97 0c       	add	r9, r7
    8144:	a8 1c       	adc	r10, r8
    8146:	f5 01       	movw	r30, r10
    8148:	44 91       	lpm	r20, Z+
    814a:	42 03       	mulsu	r20, r18
    814c:	00 24       	eor	r0, r0
    814e:	00 08       	sbc	r0, r0
    8150:	c1 0d       	add	r28, r1
    8152:	d0 1d       	adc	r29, r0
    8154:	0c 0d       	add	r16, r12
    8156:	ed 1c       	adc	r14, r13
    8158:	f7 01       	movw	r30, r14
    815a:	44 91       	lpm	r20, Z+
    815c:	43 03       	mulsu	r20, r19
    815e:	00 24       	eor	r0, r0
    8160:	00 08       	sbc	r0, r0
    8162:	c1 0d       	add	r28, r1
    8164:	d0 1d       	adc	r29, r0
    8166:	8a 95       	dec	r24
    8168:	6a f4       	brpl	.+26     	; 0x8184 <no_shift>
    816a:	40 91 f1 0e 	lds	r20, 0x0EF1
    816e:	84 2f       	mov	r24, r20
    8170:	86 95       	lsr	r24
    8172:	06 2e       	mov	r0, r22
    8174:	06 94       	lsr	r0
    8176:	06 26       	eor	r0, r22
    8178:	00 fa       	bst	r0, 0
    817a:	76 95       	lsr	r23
    817c:	67 95       	ror	r22
    817e:	76 f9       	bld	r23, 6
    8180:	40 ff       	sbrs	r20, 0
    8182:	66 f9       	bld	r22, 6

00008184 <no_shift>:
    8184:	40 e8       	ldi	r20, 0x80	; 128
    8186:	60 fd       	sbrc	r22, 0
    8188:	4f e7       	ldi	r20, 0x7F	; 127
    818a:	45 03       	mulsu	r20, r21
    818c:	00 24       	eor	r0, r0
    818e:	00 08       	sbc	r0, r0
    8190:	c1 0d       	add	r28, r1
    8192:	d0 1d       	adc	r29, r0
    8194:	00 24       	eor	r0, r0
    8196:	c0 38       	cpi	r28, 0x80	; 128
    8198:	d0 05       	cpc	r29, r0
    819a:	0c f0       	brlt	.+2      	; 0x819e <no_shift+0x1a>
    819c:	cf e7       	ldi	r28, 0x7F	; 127
    819e:	0a 94       	dec	r0
    81a0:	c0 38       	cpi	r28, 0x80	; 128
    81a2:	d0 05       	cpc	r29, r0
    81a4:	0c f4       	brge	.+2      	; 0x81a8 <no_shift+0x24>
    81a6:	c0 e8       	ldi	r28, 0x80	; 128
    81a8:	c0 58       	subi	r28, 0x80	; 128
    81aa:	cd 93       	st	X+, r28
    81ac:	9a 95       	dec	r25
    81ae:	09 f0       	breq	.+2      	; 0x81b2 <no_shift+0x2e>
    81b0:	bf cf       	rjmp	.-130    	; 0x8130 <mix_loop>
    81b2:	40 91 d0 0e 	lds	r20, 0x0ED0
    81b6:	4a 95       	dec	r20
    81b8:	40 93 d0 0e 	sts	0x0ED0, r20
    81bc:	97 e0       	ldi	r25, 0x07	; 7
    81be:	09 f0       	breq	.+2      	; 0x81c2 <no_shift+0x3e>
    81c0:	b7 cf       	rjmp	.-146    	; 0x8130 <mix_loop>
    81c2:	60 92 d5 0e 	sts	0x0ED5, r6
    81c6:	40 92 d6 0e 	sts	0x0ED6, r4
    81ca:	90 92 df 0e 	sts	0x0EDF, r9
    81ce:	a0 92 e0 0e 	sts	0x0EE0, r10
    81d2:	00 93 e9 0e 	sts	0x0EE9, r16
    81d6:	e0 92 ea 0e 	sts	0x0EEA, r14
    81da:	60 93 f2 0e 	sts	0x0EF2, r22
    81de:	70 93 f3 0e 	sts	0x0EF3, r23
    81e2:	80 93 f4 0e 	sts	0x0EF4, r24
    81e6:	df 91       	pop	r29
    81e8:	cf 91       	pop	r28
    81ea:	1f 91       	pop	r17
    81ec:	0f 91       	pop	r16
    81ee:	ff 90       	pop	r15
    81f0:	ef 90       	pop	r14
    81f2:	df 90       	pop	r13
    81f4:	cf 90       	pop	r12
    81f6:	bf 90       	pop	r11
    81f8:	af 90       	pop	r10
    81fa:	9f 90       	pop	r9
    81fc:	8f 90       	pop	r8
    81fe:	7f 90       	pop	r7
    8200:	6f 90       	pop	r6
    8202:	5f 90       	pop	r5
    8204:	4f 90       	pop	r4
    8206:	3f 90       	pop	r3
    8208:	2f 90       	pop	r2
    820a:	08 95       	ret

0000820c <update_sound_buffer_fast>:
    820c:	e0 91 cd 0e 	lds	r30, 0x0ECD
    8210:	f0 91 ce 0e 	lds	r31, 0x0ECE
    8214:	01 91       	ld	r16, Z+
    8216:	00 00       	nop
    8218:	00 93 b3 00 	sts	0x00B3, r16
    821c:	0e e0       	ldi	r16, 0x0E	; 14
    821e:	ed 3c       	cpi	r30, 0xCD	; 205
    8220:	f0 07       	cpc	r31, r16
    8222:	01 ec       	ldi	r16, 0xC1	; 193
    8224:	1c e0       	ldi	r17, 0x0C	; 12
    8226:	08 f0       	brcs	.+2      	; 0x822a <update_sound_buffer_fast+0x1e>
    8228:	f8 01       	movw	r30, r16
    822a:	e0 93 cd 0e 	sts	0x0ECD, r30
    822e:	f0 93 ce 0e 	sts	0x0ECE, r31
    8232:	08 95       	ret

00008234 <update_sound_buffer>:
    8234:	0c 94 1c 41 	jmp	0x8238	; 0x8238 <update_sound_buffer+0x4>
    8238:	0c 94 1e 41 	jmp	0x823c	; 0x823c <update_sound_buffer_2b>

0000823c <update_sound_buffer_2b>:
    823c:	0f 93       	push	r16
    823e:	1f 93       	push	r17
    8240:	2f 93       	push	r18
    8242:	e0 91 cd 0e 	lds	r30, 0x0ECD
    8246:	f0 91 ce 0e 	lds	r31, 0x0ECE
    824a:	01 91       	ld	r16, Z+
    824c:	00 93 b3 00 	sts	0x00B3, r16
    8250:	0e e0       	ldi	r16, 0x0E	; 14
    8252:	ed 3c       	cpi	r30, 0xCD	; 205
    8254:	f0 07       	cpc	r31, r16
    8256:	08 f4       	brcc	.+2      	; 0x825a <s1>
    8258:	00 c0       	rjmp	.+0      	; 0x825a <s1>

0000825a <s1>:
    825a:	10 f0       	brcs	.+4      	; 0x8260 <s2>
    825c:	e1 ec       	ldi	r30, 0xC1	; 193
    825e:	fc e0       	ldi	r31, 0x0C	; 12

00008260 <s2>:
    8260:	e0 93 cd 0e 	sts	0x0ECD, r30
    8264:	f0 93 ce 0e 	sts	0x0ECE, r31
    8268:	26 e0       	ldi	r18, 0x06	; 6
    826a:	2a 95       	dec	r18
    826c:	f1 f7       	brne	.-4      	; 0x826a <s2+0xa>
    826e:	00 c0       	rjmp	.+0      	; 0x8270 <s2+0x10>
    8270:	2f 91       	pop	r18
    8272:	1f 91       	pop	r17
    8274:	0f 91       	pop	r16
    8276:	08 95       	ret

00008278 <update_sound_buffer_2>:
    8278:	00 00       	nop
    827a:	e0 91 ab 0c 	lds	r30, 0x0CAB
    827e:	e0 ff       	sbrs	r30, 0
    8280:	dd cf       	rjmp	.-70     	; 0x823c <update_sound_buffer_2b>
    8282:	e1 e1       	ldi	r30, 0x11	; 17

00008284 <usb2>:
    8284:	ea 95       	dec	r30
    8286:	f1 f7       	brne	.-4      	; 0x8284 <usb2>
    8288:	00 c0       	rjmp	.+0      	; 0x828a <usb2+0x6>
    828a:	08 95       	ret

0000828c <steptable>:
    828c:	22 00       	.word	0x0022	; ????
    828e:	24 00       	.word	0x0024	; ????
    8290:	26 00       	.word	0x0026	; ????
    8292:	28 00       	.word	0x0028	; ????
    8294:	2b 00       	.word	0x002b	; ????
    8296:	2d 00       	.word	0x002d	; ????
    8298:	30 00       	.word	0x0030	; ????
    829a:	33 00       	.word	0x0033	; ????
    829c:	36 00       	.word	0x0036	; ????
    829e:	39 00       	.word	0x0039	; ????
    82a0:	3d 00       	.word	0x003d	; ????
    82a2:	40 00       	.word	0x0040	; ????
    82a4:	44 00       	.word	0x0044	; ????
    82a6:	48 00       	.word	0x0048	; ????
    82a8:	4c 00       	.word	0x004c	; ????
    82aa:	51 00       	.word	0x0051	; ????
    82ac:	56 00       	.word	0x0056	; ????
    82ae:	5b 00       	.word	0x005b	; ????
    82b0:	60 00       	.word	0x0060	; ????
    82b2:	66 00       	.word	0x0066	; ????
    82b4:	6c 00       	.word	0x006c	; ????
    82b6:	73 00       	.word	0x0073	; ????
    82b8:	79 00       	.word	0x0079	; ????
    82ba:	81 00       	.word	0x0081	; ????
    82bc:	88 00       	.word	0x0088	; ????
    82be:	90 00       	.word	0x0090	; ????
    82c0:	99 00       	.word	0x0099	; ????
    82c2:	a2 00       	.word	0x00a2	; ????
    82c4:	ac 00       	.word	0x00ac	; ????
    82c6:	b6 00       	.word	0x00b6	; ????
    82c8:	c1 00       	.word	0x00c1	; ????
    82ca:	cc 00       	.word	0x00cc	; ????
    82cc:	d8 00       	.word	0x00d8	; ????
    82ce:	e5 00       	.word	0x00e5	; ????
    82d0:	f3 00       	.word	0x00f3	; ????
    82d2:	01 01       	movw	r0, r2
    82d4:	10 01       	movw	r2, r0
    82d6:	21 01       	movw	r4, r2
    82d8:	32 01       	movw	r6, r4
    82da:	44 01       	movw	r8, r8
    82dc:	57 01       	movw	r10, r14
    82de:	6c 01       	movw	r12, r24
    82e0:	81 01       	movw	r16, r2
    82e2:	98 01       	movw	r18, r16
    82e4:	b0 01       	movw	r22, r0
    82e6:	ca 01       	movw	r24, r20
    82e8:	e5 01       	movw	r28, r10
    82ea:	02 02       	muls	r16, r18
    82ec:	21 02       	muls	r18, r17
    82ee:	41 02       	muls	r20, r17
    82f0:	64 02       	muls	r22, r20
    82f2:	88 02       	muls	r24, r24
    82f4:	ae 02       	muls	r26, r30
    82f6:	d7 02       	muls	r29, r23
    82f8:	03 03       	mulsu	r16, r19
    82fa:	30 03       	mulsu	r19, r16
    82fc:	61 03       	mulsu	r22, r17
    82fe:	94 03       	fmuls	r17, r20
    8300:	cb 03       	fmulsu	r20, r19
    8302:	05 04       	cpc	r0, r5
    8304:	42 04       	cpc	r4, r2
    8306:	83 04       	cpc	r8, r3
    8308:	c7 04       	cpc	r12, r7
    830a:	10 05       	cpc	r17, r0
    830c:	5d 05       	cpc	r21, r13
    830e:	af 05       	cpc	r26, r15
    8310:	05 06       	cpc	r0, r21
    8312:	61 06       	cpc	r6, r17
    8314:	c2 06       	cpc	r12, r18
    8316:	29 07       	cpc	r18, r25
    8318:	96 07       	cpc	r25, r22
    831a:	09 08       	sbc	r0, r9
    831c:	83 08       	sbc	r8, r3
    831e:	05 09       	sbc	r16, r5
    8320:	8e 09       	sbc	r24, r14
    8322:	20 0a       	sbc	r2, r16
    8324:	ba 0a       	sbc	r11, r26
    8326:	5d 0b       	sbc	r21, r29
    8328:	0a 0c       	add	r0, r10
    832a:	c1 0c       	add	r12, r1
    832c:	84 0d       	add	r24, r4
    832e:	51 0e       	add	r5, r17
    8330:	2b 0f       	add	r18, r27
    8332:	12 10       	cpse	r1, r2
    8334:	07 11       	cpse	r16, r7
    8336:	0a 12       	cpse	r0, r26
    8338:	1d 13       	cpse	r17, r29
    833a:	40 14       	cp	r4, r0
    833c:	74 15       	cp	r23, r4
    833e:	ba 16       	cp	r11, r26
    8340:	14 18       	sub	r1, r4
    8342:	83 19       	sub	r24, r3
    8344:	07 1b       	sub	r16, r23
    8346:	a3 1c       	adc	r10, r3
    8348:	57 1e       	adc	r5, r23
    834a:	24 20       	and	r2, r4
    834c:	0e 22       	and	r0, r30
    834e:	14 24       	eor	r1, r4
    8350:	39 26       	eor	r3, r25
    8352:	7f 28       	or	r7, r15
    8354:	e8 2a       	or	r14, r24
    8356:	75 2d       	mov	r23, r5
    8358:	29 30       	cpi	r18, 0x09	; 9
    835a:	06 33       	cpi	r16, 0x36	; 54
    835c:	0f 36       	cpi	r16, 0x6F	; 111
    835e:	45 39       	cpi	r20, 0x95	; 149
    8360:	ad 3c       	cpi	r26, 0xCD	; 205
    8362:	49 40       	sbci	r20, 0x09	; 9
    8364:	1b 44       	sbci	r17, 0x4B	; 75
    8366:	28 48       	sbci	r18, 0x88	; 136
    8368:	73 4c       	sbci	r23, 0xC3	; 195
    836a:	fe 50       	subi	r31, 0x0E	; 14
    836c:	cf 55       	subi	r28, 0x5F	; 95
    836e:	ea 5a       	subi	r30, 0xAA	; 170
    8370:	51 60       	ori	r21, 0x01	; 1
    8372:	0c 66       	ori	r16, 0x6C	; 108
    8374:	1d 6c       	ori	r17, 0xCD	; 205
    8376:	8b 72       	andi	r24, 0x2B	; 43
    8378:	5a 79       	andi	r21, 0x9A	; 154
    837a:	92 80       	ldd	r9, Z+2	; 0x02
    837c:	37 88       	ldd	r3, Z+23	; 0x17
    837e:	50 90 e5 98 	lds	r5, 0x98E5
    8382:	fd a1       	ldd	r31, Y+37	; 0x25
    8384:	9f ab       	std	Y+55, r25	; 0x37
    8386:	d3 b5       	in	r29, 0x23	; 35
    8388:	a3 c0       	rjmp	.+326    	; 0x84d0 <waves+0xd0>
	...

00008400 <waves>:
    8400:	7f 7f       	andi	r23, 0xFF	; 255
    8402:	7f 7f       	andi	r23, 0xFF	; 255
    8404:	7f 7f       	andi	r23, 0xFF	; 255
    8406:	7f 7f       	andi	r23, 0xFF	; 255
    8408:	7f 7f       	andi	r23, 0xFF	; 255
    840a:	7f 7f       	andi	r23, 0xFF	; 255
    840c:	7f 7f       	andi	r23, 0xFF	; 255
    840e:	7f 7f       	andi	r23, 0xFF	; 255
    8410:	7f 7f       	andi	r23, 0xFF	; 255
    8412:	7f 7f       	andi	r23, 0xFF	; 255
    8414:	7f 7f       	andi	r23, 0xFF	; 255
    8416:	7f 7f       	andi	r23, 0xFF	; 255
    8418:	7f 7f       	andi	r23, 0xFF	; 255
    841a:	7f 7f       	andi	r23, 0xFF	; 255
    841c:	7f 7f       	andi	r23, 0xFF	; 255
    841e:	7f 7f       	andi	r23, 0xFF	; 255
    8420:	7f 7f       	andi	r23, 0xFF	; 255
    8422:	7f 7f       	andi	r23, 0xFF	; 255
    8424:	7f 7f       	andi	r23, 0xFF	; 255
    8426:	7f 7f       	andi	r23, 0xFF	; 255
    8428:	7f 7f       	andi	r23, 0xFF	; 255
    842a:	7f 7f       	andi	r23, 0xFF	; 255
    842c:	7f 7f       	andi	r23, 0xFF	; 255
    842e:	7f 7f       	andi	r23, 0xFF	; 255
    8430:	7f 7f       	andi	r23, 0xFF	; 255
    8432:	7f 7f       	andi	r23, 0xFF	; 255
    8434:	7f 7f       	andi	r23, 0xFF	; 255
    8436:	7f 7f       	andi	r23, 0xFF	; 255
    8438:	7f 7f       	andi	r23, 0xFF	; 255
    843a:	7f 7f       	andi	r23, 0xFF	; 255
    843c:	7f 7f       	andi	r23, 0xFF	; 255
    843e:	7f 7f       	andi	r23, 0xFF	; 255
    8440:	7f 7f       	andi	r23, 0xFF	; 255
    8442:	7f 7f       	andi	r23, 0xFF	; 255
    8444:	7f 7f       	andi	r23, 0xFF	; 255
    8446:	7f 7f       	andi	r23, 0xFF	; 255
    8448:	7f 7f       	andi	r23, 0xFF	; 255
    844a:	7f 7f       	andi	r23, 0xFF	; 255
    844c:	7f 7f       	andi	r23, 0xFF	; 255
    844e:	7f 7f       	andi	r23, 0xFF	; 255
    8450:	7f 7f       	andi	r23, 0xFF	; 255
    8452:	7f 7f       	andi	r23, 0xFF	; 255
    8454:	7f 7f       	andi	r23, 0xFF	; 255
    8456:	7f 7f       	andi	r23, 0xFF	; 255
    8458:	7f 7f       	andi	r23, 0xFF	; 255
    845a:	7f 7f       	andi	r23, 0xFF	; 255
    845c:	7f 7f       	andi	r23, 0xFF	; 255
    845e:	7f 7f       	andi	r23, 0xFF	; 255
    8460:	7f 7f       	andi	r23, 0xFF	; 255
    8462:	7f 7f       	andi	r23, 0xFF	; 255
    8464:	7f 7f       	andi	r23, 0xFF	; 255
    8466:	7f 7f       	andi	r23, 0xFF	; 255
    8468:	7f 7f       	andi	r23, 0xFF	; 255
    846a:	7f 7f       	andi	r23, 0xFF	; 255
    846c:	7f 7f       	andi	r23, 0xFF	; 255
    846e:	7f 7f       	andi	r23, 0xFF	; 255
    8470:	7f 7f       	andi	r23, 0xFF	; 255
    8472:	7f 7f       	andi	r23, 0xFF	; 255
    8474:	7f 7f       	andi	r23, 0xFF	; 255
    8476:	7f 7f       	andi	r23, 0xFF	; 255
    8478:	7f 7f       	andi	r23, 0xFF	; 255
    847a:	7f 7f       	andi	r23, 0xFF	; 255
    847c:	7f 7f       	andi	r23, 0xFF	; 255
    847e:	7f 7f       	andi	r23, 0xFF	; 255
    8480:	80 80       	ld	r8, Z
    8482:	80 80       	ld	r8, Z
    8484:	80 80       	ld	r8, Z
    8486:	80 80       	ld	r8, Z
    8488:	80 80       	ld	r8, Z
    848a:	80 80       	ld	r8, Z
    848c:	80 80       	ld	r8, Z
    848e:	80 80       	ld	r8, Z
    8490:	80 80       	ld	r8, Z
    8492:	80 80       	ld	r8, Z
    8494:	80 80       	ld	r8, Z
    8496:	80 80       	ld	r8, Z
    8498:	80 80       	ld	r8, Z
    849a:	80 80       	ld	r8, Z
    849c:	80 80       	ld	r8, Z
    849e:	80 80       	ld	r8, Z
    84a0:	80 80       	ld	r8, Z
    84a2:	80 80       	ld	r8, Z
    84a4:	80 80       	ld	r8, Z
    84a6:	80 80       	ld	r8, Z
    84a8:	80 80       	ld	r8, Z
    84aa:	80 80       	ld	r8, Z
    84ac:	80 80       	ld	r8, Z
    84ae:	80 80       	ld	r8, Z
    84b0:	80 80       	ld	r8, Z
    84b2:	80 80       	ld	r8, Z
    84b4:	80 80       	ld	r8, Z
    84b6:	80 80       	ld	r8, Z
    84b8:	80 80       	ld	r8, Z
    84ba:	80 80       	ld	r8, Z
    84bc:	80 80       	ld	r8, Z
    84be:	80 80       	ld	r8, Z
    84c0:	80 80       	ld	r8, Z
    84c2:	80 80       	ld	r8, Z
    84c4:	80 80       	ld	r8, Z
    84c6:	80 80       	ld	r8, Z
    84c8:	80 80       	ld	r8, Z
    84ca:	80 80       	ld	r8, Z
    84cc:	80 80       	ld	r8, Z
    84ce:	80 80       	ld	r8, Z
    84d0:	80 80       	ld	r8, Z
    84d2:	80 80       	ld	r8, Z
    84d4:	80 80       	ld	r8, Z
    84d6:	80 80       	ld	r8, Z
    84d8:	80 80       	ld	r8, Z
    84da:	80 80       	ld	r8, Z
    84dc:	80 80       	ld	r8, Z
    84de:	80 80       	ld	r8, Z
    84e0:	80 80       	ld	r8, Z
    84e2:	80 80       	ld	r8, Z
    84e4:	80 80       	ld	r8, Z
    84e6:	80 80       	ld	r8, Z
    84e8:	80 80       	ld	r8, Z
    84ea:	80 80       	ld	r8, Z
    84ec:	80 80       	ld	r8, Z
    84ee:	80 80       	ld	r8, Z
    84f0:	80 80       	ld	r8, Z
    84f2:	80 80       	ld	r8, Z
    84f4:	80 80       	ld	r8, Z
    84f6:	80 80       	ld	r8, Z
    84f8:	80 80       	ld	r8, Z
    84fa:	80 80       	ld	r8, Z
    84fc:	80 80       	ld	r8, Z
    84fe:	80 80       	ld	r8, Z
    8500:	7f 7f       	andi	r23, 0xFF	; 255
    8502:	7f 7f       	andi	r23, 0xFF	; 255
    8504:	7f 7f       	andi	r23, 0xFF	; 255
    8506:	7f 7f       	andi	r23, 0xFF	; 255
    8508:	7f 7f       	andi	r23, 0xFF	; 255
    850a:	7f 7f       	andi	r23, 0xFF	; 255
    850c:	7f 7f       	andi	r23, 0xFF	; 255
    850e:	7f 7f       	andi	r23, 0xFF	; 255
    8510:	7f 7f       	andi	r23, 0xFF	; 255
    8512:	7f 7f       	andi	r23, 0xFF	; 255
    8514:	7f 7f       	andi	r23, 0xFF	; 255
    8516:	7f 7f       	andi	r23, 0xFF	; 255
    8518:	7f 7f       	andi	r23, 0xFF	; 255
    851a:	7f 7f       	andi	r23, 0xFF	; 255
    851c:	7f 7f       	andi	r23, 0xFF	; 255
    851e:	7f 7f       	andi	r23, 0xFF	; 255
    8520:	7f 7f       	andi	r23, 0xFF	; 255
    8522:	7f 7f       	andi	r23, 0xFF	; 255
    8524:	7f 7f       	andi	r23, 0xFF	; 255
    8526:	7f 7f       	andi	r23, 0xFF	; 255
    8528:	7f 7f       	andi	r23, 0xFF	; 255
    852a:	7f 7f       	andi	r23, 0xFF	; 255
    852c:	7f 7f       	andi	r23, 0xFF	; 255
    852e:	7f 7f       	andi	r23, 0xFF	; 255
    8530:	7f 7f       	andi	r23, 0xFF	; 255
    8532:	7f 7f       	andi	r23, 0xFF	; 255
    8534:	7f 7f       	andi	r23, 0xFF	; 255
    8536:	7f 7f       	andi	r23, 0xFF	; 255
    8538:	7f 7f       	andi	r23, 0xFF	; 255
    853a:	7f 7f       	andi	r23, 0xFF	; 255
    853c:	7f 7f       	andi	r23, 0xFF	; 255
    853e:	7f 7f       	andi	r23, 0xFF	; 255
    8540:	80 80       	ld	r8, Z
    8542:	80 80       	ld	r8, Z
    8544:	80 80       	ld	r8, Z
    8546:	80 80       	ld	r8, Z
    8548:	80 80       	ld	r8, Z
    854a:	80 80       	ld	r8, Z
    854c:	80 80       	ld	r8, Z
    854e:	80 80       	ld	r8, Z
    8550:	80 80       	ld	r8, Z
    8552:	80 80       	ld	r8, Z
    8554:	80 80       	ld	r8, Z
    8556:	80 80       	ld	r8, Z
    8558:	80 80       	ld	r8, Z
    855a:	80 80       	ld	r8, Z
    855c:	80 80       	ld	r8, Z
    855e:	80 80       	ld	r8, Z
    8560:	80 80       	ld	r8, Z
    8562:	80 80       	ld	r8, Z
    8564:	80 80       	ld	r8, Z
    8566:	80 80       	ld	r8, Z
    8568:	80 80       	ld	r8, Z
    856a:	80 80       	ld	r8, Z
    856c:	80 80       	ld	r8, Z
    856e:	80 80       	ld	r8, Z
    8570:	80 80       	ld	r8, Z
    8572:	80 80       	ld	r8, Z
    8574:	80 80       	ld	r8, Z
    8576:	80 80       	ld	r8, Z
    8578:	80 80       	ld	r8, Z
    857a:	80 80       	ld	r8, Z
    857c:	80 80       	ld	r8, Z
    857e:	80 80       	ld	r8, Z
    8580:	80 80       	ld	r8, Z
    8582:	80 80       	ld	r8, Z
    8584:	80 80       	ld	r8, Z
    8586:	80 80       	ld	r8, Z
    8588:	80 80       	ld	r8, Z
    858a:	80 80       	ld	r8, Z
    858c:	80 80       	ld	r8, Z
    858e:	80 80       	ld	r8, Z
    8590:	80 80       	ld	r8, Z
    8592:	80 80       	ld	r8, Z
    8594:	80 80       	ld	r8, Z
    8596:	80 80       	ld	r8, Z
    8598:	80 80       	ld	r8, Z
    859a:	80 80       	ld	r8, Z
    859c:	80 80       	ld	r8, Z
    859e:	80 80       	ld	r8, Z
    85a0:	80 80       	ld	r8, Z
    85a2:	80 80       	ld	r8, Z
    85a4:	80 80       	ld	r8, Z
    85a6:	80 80       	ld	r8, Z
    85a8:	80 80       	ld	r8, Z
    85aa:	80 80       	ld	r8, Z
    85ac:	80 80       	ld	r8, Z
    85ae:	80 80       	ld	r8, Z
    85b0:	80 80       	ld	r8, Z
    85b2:	80 80       	ld	r8, Z
    85b4:	80 80       	ld	r8, Z
    85b6:	80 80       	ld	r8, Z
    85b8:	80 80       	ld	r8, Z
    85ba:	80 80       	ld	r8, Z
    85bc:	80 80       	ld	r8, Z
    85be:	80 80       	ld	r8, Z
    85c0:	80 80       	ld	r8, Z
    85c2:	80 80       	ld	r8, Z
    85c4:	80 80       	ld	r8, Z
    85c6:	80 80       	ld	r8, Z
    85c8:	80 80       	ld	r8, Z
    85ca:	80 80       	ld	r8, Z
    85cc:	80 80       	ld	r8, Z
    85ce:	80 80       	ld	r8, Z
    85d0:	80 80       	ld	r8, Z
    85d2:	80 80       	ld	r8, Z
    85d4:	80 80       	ld	r8, Z
    85d6:	80 80       	ld	r8, Z
    85d8:	80 80       	ld	r8, Z
    85da:	80 80       	ld	r8, Z
    85dc:	80 80       	ld	r8, Z
    85de:	80 80       	ld	r8, Z
    85e0:	80 80       	ld	r8, Z
    85e2:	80 80       	ld	r8, Z
    85e4:	80 80       	ld	r8, Z
    85e6:	80 80       	ld	r8, Z
    85e8:	80 80       	ld	r8, Z
    85ea:	80 80       	ld	r8, Z
    85ec:	80 80       	ld	r8, Z
    85ee:	80 80       	ld	r8, Z
    85f0:	80 80       	ld	r8, Z
    85f2:	80 80       	ld	r8, Z
    85f4:	80 80       	ld	r8, Z
    85f6:	80 80       	ld	r8, Z
    85f8:	80 80       	ld	r8, Z
    85fa:	80 80       	ld	r8, Z
    85fc:	80 80       	ld	r8, Z
    85fe:	80 80       	ld	r8, Z
    8600:	00 02       	muls	r16, r16
    8602:	04 06       	cpc	r0, r20
    8604:	08 0a       	sbc	r0, r24
    8606:	0c 0e       	add	r0, r28
    8608:	10 12       	cpse	r1, r16
    860a:	14 16       	cp	r1, r20
    860c:	18 1a       	sub	r1, r24
    860e:	1c 1e       	adc	r1, r28
    8610:	20 22       	and	r2, r16
    8612:	24 26       	eor	r2, r20
    8614:	28 2a       	or	r2, r24
    8616:	2c 2e       	mov	r2, r28
    8618:	30 32       	cpi	r19, 0x20	; 32
    861a:	34 36       	cpi	r19, 0x64	; 100
    861c:	38 3a       	cpi	r19, 0xA8	; 168
    861e:	3c 3e       	cpi	r19, 0xEC	; 236
    8620:	40 42       	sbci	r20, 0x20	; 32
    8622:	44 46       	sbci	r20, 0x64	; 100
    8624:	48 4a       	sbci	r20, 0xA8	; 168
    8626:	4c 4e       	sbci	r20, 0xEC	; 236
    8628:	50 52       	subi	r21, 0x20	; 32
    862a:	54 56       	subi	r21, 0x64	; 100
    862c:	58 5a       	subi	r21, 0xA8	; 168
    862e:	5c 5e       	subi	r21, 0xEC	; 236
    8630:	60 62       	ori	r22, 0x20	; 32
    8632:	64 66       	ori	r22, 0x64	; 100
    8634:	68 6a       	ori	r22, 0xA8	; 168
    8636:	6c 6e       	ori	r22, 0xEC	; 236
    8638:	70 72       	andi	r23, 0x20	; 32
    863a:	74 76       	andi	r23, 0x64	; 100
    863c:	78 7a       	andi	r23, 0xA8	; 168
    863e:	7c 7e       	andi	r23, 0xEC	; 236
    8640:	7f 7d       	andi	r23, 0xDF	; 223
    8642:	7b 79       	andi	r23, 0x9B	; 155
    8644:	77 75       	andi	r23, 0x57	; 87
    8646:	73 71       	andi	r23, 0x13	; 19
    8648:	6f 6d       	ori	r22, 0xDF	; 223
    864a:	6b 69       	ori	r22, 0x9B	; 155
    864c:	67 65       	ori	r22, 0x57	; 87
    864e:	63 61       	ori	r22, 0x13	; 19
    8650:	5f 5d       	subi	r21, 0xDF	; 223
    8652:	5b 59       	subi	r21, 0x9B	; 155
    8654:	57 55       	subi	r21, 0x57	; 87
    8656:	53 51       	subi	r21, 0x13	; 19
    8658:	4f 4d       	sbci	r20, 0xDF	; 223
    865a:	4b 49       	sbci	r20, 0x9B	; 155
    865c:	47 45       	sbci	r20, 0x57	; 87
    865e:	43 41       	sbci	r20, 0x13	; 19
    8660:	3f 3d       	cpi	r19, 0xDF	; 223
    8662:	3b 39       	cpi	r19, 0x9B	; 155
    8664:	37 35       	cpi	r19, 0x57	; 87
    8666:	33 31       	cpi	r19, 0x13	; 19
    8668:	2f 2d       	mov	r18, r15
    866a:	2b 29       	or	r18, r11
    866c:	27 25       	eor	r18, r7
    866e:	23 21       	and	r18, r3
    8670:	1f 1d       	adc	r17, r15
    8672:	1b 19       	sub	r17, r11
    8674:	17 15       	cp	r17, r7
    8676:	13 11       	cpse	r17, r3
    8678:	0f 0d       	add	r16, r15
    867a:	0b 09       	sbc	r16, r11
    867c:	07 05       	cpc	r16, r7
    867e:	03 01       	movw	r0, r6
    8680:	ff fd       	.word	0xfdff	; ????
    8682:	fb f9       	.word	0xf9fb	; ????
    8684:	f7 f5       	brid	.+124    	; 0x8702 <waves+0x302>
    8686:	f3 f1       	brvs	.+124    	; 0x8704 <waves+0x304>
    8688:	ef ed       	ldi	r30, 0xDF	; 223
    868a:	eb e9       	ldi	r30, 0x9B	; 155
    868c:	e7 e5       	ldi	r30, 0x57	; 87
    868e:	e3 e1       	ldi	r30, 0x13	; 19
    8690:	df dd       	rcall	.-1090   	; 0x8250 <update_sound_buffer_2b+0x14>
    8692:	db d9       	rcall	.-3146   	; 0x7a4a <Initialize+0x74>
    8694:	d7 d5       	rcall	.+2990   	; 0x9244 <TriggerFx+0x86>
    8696:	d3 d1       	rcall	.+934    	; 0x8a3e <PatchCommand06+0xa>
    8698:	cf cd       	rjmp	.-1122   	; 0x8238 <update_sound_buffer+0x4>
    869a:	cb c9       	rjmp	.-3178   	; 0x7a32 <Initialize+0x5c>
    869c:	c7 c5       	rjmp	.+2958   	; 0x922c <TriggerFx+0x6e>
    869e:	c3 c1       	rjmp	.+902    	; 0x8a26 <PatchCommand05+0x10>
    86a0:	bf bd       	out	0x2f, r27	; 47
    86a2:	bb b9       	out	0x0b, r27	; 11
    86a4:	b7 b5       	in	r27, 0x27	; 39
    86a6:	b3 b1       	in	r27, 0x03	; 3
    86a8:	af ad       	ldd	r26, Y+63	; 0x3f
    86aa:	ab a9       	ldd	r26, Y+51	; 0x33
    86ac:	a7 a5       	ldd	r26, Z+47	; 0x2f
    86ae:	a3 a1       	ldd	r26, Z+35	; 0x23
    86b0:	9f 9d       	mul	r25, r15
    86b2:	9b 99       	sbic	0x13, 3	; 19
    86b4:	97 95       	ror	r25
    86b6:	93 91       	.word	0x9193	; ????
    86b8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    86ba:	8b 89       	ldd	r24, Y+19	; 0x13
    86bc:	87 85       	ldd	r24, Z+15	; 0x0f
    86be:	83 81       	ldd	r24, Z+3	; 0x03
    86c0:	80 82       	st	Z, r8
    86c2:	84 86       	std	Z+12, r8	; 0x0c
    86c4:	88 8a       	std	Y+16, r8	; 0x10
    86c6:	8c 8e       	std	Y+28, r8	; 0x1c
    86c8:	90 92 94 96 	sts	0x9694, r9
    86cc:	98 9a       	sbi	0x13, 0	; 19
    86ce:	9c 9e       	mul	r9, r28
    86d0:	a0 a2       	std	Z+32, r10	; 0x20
    86d2:	a4 a6       	std	Z+44, r10	; 0x2c
    86d4:	a8 aa       	std	Y+48, r10	; 0x30
    86d6:	ac ae       	std	Y+60, r10	; 0x3c
    86d8:	b0 b2       	in	r11, 0x10	; 16
    86da:	b4 b6       	in	r11, 0x34	; 52
    86dc:	b8 ba       	out	0x18, r11	; 24
    86de:	bc be       	out	0x3c, r11	; 60
    86e0:	c0 c2       	rjmp	.+1408   	; 0x8c62 <TriggerNote+0xb8>
    86e2:	c4 c6       	rjmp	.+3464   	; 0x946c <PalletBlitSprite+0x114>
    86e4:	c8 ca       	rjmp	.-2672   	; 0x7c76 <CopyTileToRam+0x30>
    86e6:	cc ce       	rjmp	.-616    	; 0x8480 <waves+0x80>
    86e8:	d0 d2       	rcall	.+1440   	; 0x8c8a <TriggerNote+0xe0>
    86ea:	d4 d6       	rcall	.+3496   	; 0x9494 <InitializeVideoMode+0xc>
    86ec:	d8 da       	rcall	.-2640   	; 0x7c9e <CopyTileToRam+0x58>
    86ee:	dc de       	rcall	.-584    	; 0x84a8 <waves+0xa8>
    86f0:	e0 e2       	ldi	r30, 0x20	; 32
    86f2:	e4 e6       	ldi	r30, 0x64	; 100
    86f4:	e8 ea       	ldi	r30, 0xA8	; 168
    86f6:	ec ee       	ldi	r30, 0xEC	; 236
    86f8:	f0 f2       	brcs	.-68     	; 0x86b6 <waves+0x2b6>
    86fa:	f4 f6       	brge	.-68     	; 0x86b8 <waves+0x2b8>
    86fc:	f8 fa       	.word	0xfaf8	; ????
    86fe:	fc fe       	.word	0xfefc	; ????
    8700:	7f 7f       	andi	r23, 0xFF	; 255
    8702:	7f 7f       	andi	r23, 0xFF	; 255
    8704:	7f 7f       	andi	r23, 0xFF	; 255
    8706:	7f 7f       	andi	r23, 0xFF	; 255
    8708:	7f 7f       	andi	r23, 0xFF	; 255
    870a:	7f 7f       	andi	r23, 0xFF	; 255
    870c:	7f 7f       	andi	r23, 0xFF	; 255
    870e:	7f 7f       	andi	r23, 0xFF	; 255
    8710:	7f 7f       	andi	r23, 0xFF	; 255
    8712:	7f 7f       	andi	r23, 0xFF	; 255
    8714:	7f 7f       	andi	r23, 0xFF	; 255
    8716:	7f 7f       	andi	r23, 0xFF	; 255
    8718:	7f 7f       	andi	r23, 0xFF	; 255
    871a:	7f 7f       	andi	r23, 0xFF	; 255
    871c:	7f 7f       	andi	r23, 0xFF	; 255
    871e:	7f 7f       	andi	r23, 0xFF	; 255
    8720:	7f 7f       	andi	r23, 0xFF	; 255
    8722:	7f 7f       	andi	r23, 0xFF	; 255
    8724:	7f 7f       	andi	r23, 0xFF	; 255
    8726:	7f 7f       	andi	r23, 0xFF	; 255
    8728:	7f 7f       	andi	r23, 0xFF	; 255
    872a:	7f 7f       	andi	r23, 0xFF	; 255
    872c:	7f 7f       	andi	r23, 0xFF	; 255
    872e:	7f 7f       	andi	r23, 0xFF	; 255
    8730:	7f 7f       	andi	r23, 0xFF	; 255
    8732:	7f 7f       	andi	r23, 0xFF	; 255
    8734:	7f 7f       	andi	r23, 0xFF	; 255
    8736:	7f 7f       	andi	r23, 0xFF	; 255
    8738:	7f 7f       	andi	r23, 0xFF	; 255
    873a:	7f 7f       	andi	r23, 0xFF	; 255
    873c:	7f 7f       	andi	r23, 0xFF	; 255
    873e:	7f 7f       	andi	r23, 0xFF	; 255
    8740:	7f 7f       	andi	r23, 0xFF	; 255
    8742:	7f 7f       	andi	r23, 0xFF	; 255
    8744:	7f 7f       	andi	r23, 0xFF	; 255
    8746:	7f 7f       	andi	r23, 0xFF	; 255
    8748:	7f 7f       	andi	r23, 0xFF	; 255
    874a:	7f 7f       	andi	r23, 0xFF	; 255
    874c:	7f 7f       	andi	r23, 0xFF	; 255
    874e:	7f 7f       	andi	r23, 0xFF	; 255
    8750:	7f 7f       	andi	r23, 0xFF	; 255
    8752:	7f 7f       	andi	r23, 0xFF	; 255
    8754:	7f 7f       	andi	r23, 0xFF	; 255
    8756:	7f 7f       	andi	r23, 0xFF	; 255
    8758:	7f 7f       	andi	r23, 0xFF	; 255
    875a:	7f 7f       	andi	r23, 0xFF	; 255
    875c:	7f 7f       	andi	r23, 0xFF	; 255
    875e:	7f 7f       	andi	r23, 0xFF	; 255
    8760:	7f 7f       	andi	r23, 0xFF	; 255
    8762:	7f 7f       	andi	r23, 0xFF	; 255
    8764:	7f 7f       	andi	r23, 0xFF	; 255
    8766:	7f 7f       	andi	r23, 0xFF	; 255
    8768:	7f 7f       	andi	r23, 0xFF	; 255
    876a:	7f 7f       	andi	r23, 0xFF	; 255
    876c:	7f 7f       	andi	r23, 0xFF	; 255
    876e:	7f 7f       	andi	r23, 0xFF	; 255
    8770:	7f 7f       	andi	r23, 0xFF	; 255
    8772:	7f 7f       	andi	r23, 0xFF	; 255
    8774:	7f 7f       	andi	r23, 0xFF	; 255
    8776:	7f 7f       	andi	r23, 0xFF	; 255
    8778:	7f 7f       	andi	r23, 0xFF	; 255
    877a:	7f 7f       	andi	r23, 0xFF	; 255
    877c:	7f 7f       	andi	r23, 0xFF	; 255
    877e:	7f 7f       	andi	r23, 0xFF	; 255
    8780:	80 80       	ld	r8, Z
    8782:	80 80       	ld	r8, Z
    8784:	80 80       	ld	r8, Z
    8786:	80 80       	ld	r8, Z
    8788:	80 80       	ld	r8, Z
    878a:	80 80       	ld	r8, Z
    878c:	80 80       	ld	r8, Z
    878e:	80 80       	ld	r8, Z
    8790:	80 80       	ld	r8, Z
    8792:	80 80       	ld	r8, Z
    8794:	80 80       	ld	r8, Z
    8796:	80 80       	ld	r8, Z
    8798:	80 80       	ld	r8, Z
    879a:	80 80       	ld	r8, Z
    879c:	80 80       	ld	r8, Z
    879e:	80 80       	ld	r8, Z
    87a0:	80 80       	ld	r8, Z
    87a2:	80 80       	ld	r8, Z
    87a4:	80 80       	ld	r8, Z
    87a6:	80 80       	ld	r8, Z
    87a8:	80 80       	ld	r8, Z
    87aa:	80 80       	ld	r8, Z
    87ac:	80 80       	ld	r8, Z
    87ae:	80 80       	ld	r8, Z
    87b0:	80 80       	ld	r8, Z
    87b2:	80 80       	ld	r8, Z
    87b4:	80 80       	ld	r8, Z
    87b6:	80 80       	ld	r8, Z
    87b8:	80 80       	ld	r8, Z
    87ba:	80 80       	ld	r8, Z
    87bc:	80 80       	ld	r8, Z
    87be:	80 80       	ld	r8, Z
    87c0:	80 80       	ld	r8, Z
    87c2:	80 80       	ld	r8, Z
    87c4:	80 80       	ld	r8, Z
    87c6:	80 80       	ld	r8, Z
    87c8:	80 80       	ld	r8, Z
    87ca:	80 80       	ld	r8, Z
    87cc:	80 80       	ld	r8, Z
    87ce:	80 80       	ld	r8, Z
    87d0:	80 80       	ld	r8, Z
    87d2:	80 80       	ld	r8, Z
    87d4:	80 80       	ld	r8, Z
    87d6:	80 80       	ld	r8, Z
    87d8:	80 80       	ld	r8, Z
    87da:	80 80       	ld	r8, Z
    87dc:	80 80       	ld	r8, Z
    87de:	80 80       	ld	r8, Z
    87e0:	80 80       	ld	r8, Z
    87e2:	80 80       	ld	r8, Z
    87e4:	80 80       	ld	r8, Z
    87e6:	80 80       	ld	r8, Z
    87e8:	80 80       	ld	r8, Z
    87ea:	80 80       	ld	r8, Z
    87ec:	80 80       	ld	r8, Z
    87ee:	80 80       	ld	r8, Z
    87f0:	80 80       	ld	r8, Z
    87f2:	80 80       	ld	r8, Z
    87f4:	80 80       	ld	r8, Z
    87f6:	80 80       	ld	r8, Z
    87f8:	80 80       	ld	r8, Z
    87fa:	80 80       	ld	r8, Z
    87fc:	80 80       	ld	r8, Z
    87fe:	80 80       	ld	r8, Z
    8800:	7f 7f       	andi	r23, 0xFF	; 255
    8802:	7f 7f       	andi	r23, 0xFF	; 255
    8804:	7f 7f       	andi	r23, 0xFF	; 255
    8806:	7f 7f       	andi	r23, 0xFF	; 255
    8808:	7f 7f       	andi	r23, 0xFF	; 255
    880a:	7f 7f       	andi	r23, 0xFF	; 255
    880c:	7f 7f       	andi	r23, 0xFF	; 255
    880e:	7f 7f       	andi	r23, 0xFF	; 255
    8810:	7f 7f       	andi	r23, 0xFF	; 255
    8812:	7f 7f       	andi	r23, 0xFF	; 255
    8814:	7f 7f       	andi	r23, 0xFF	; 255
    8816:	7f 7f       	andi	r23, 0xFF	; 255
    8818:	7f 7f       	andi	r23, 0xFF	; 255
    881a:	7f 7f       	andi	r23, 0xFF	; 255
    881c:	7f 7f       	andi	r23, 0xFF	; 255
    881e:	7f 7f       	andi	r23, 0xFF	; 255
    8820:	7f 7f       	andi	r23, 0xFF	; 255
    8822:	7f 7f       	andi	r23, 0xFF	; 255
    8824:	7f 7f       	andi	r23, 0xFF	; 255
    8826:	7f 7f       	andi	r23, 0xFF	; 255
    8828:	7f 7f       	andi	r23, 0xFF	; 255
    882a:	7f 7f       	andi	r23, 0xFF	; 255
    882c:	7f 7f       	andi	r23, 0xFF	; 255
    882e:	7f 7f       	andi	r23, 0xFF	; 255
    8830:	7f 7f       	andi	r23, 0xFF	; 255
    8832:	7f 7f       	andi	r23, 0xFF	; 255
    8834:	7f 7f       	andi	r23, 0xFF	; 255
    8836:	7f 7f       	andi	r23, 0xFF	; 255
    8838:	7f 7f       	andi	r23, 0xFF	; 255
    883a:	7f 7f       	andi	r23, 0xFF	; 255
    883c:	7f 7f       	andi	r23, 0xFF	; 255
    883e:	7f 7f       	andi	r23, 0xFF	; 255
    8840:	80 80       	ld	r8, Z
    8842:	80 80       	ld	r8, Z
    8844:	80 80       	ld	r8, Z
    8846:	80 80       	ld	r8, Z
    8848:	80 80       	ld	r8, Z
    884a:	80 80       	ld	r8, Z
    884c:	80 80       	ld	r8, Z
    884e:	80 80       	ld	r8, Z
    8850:	80 80       	ld	r8, Z
    8852:	80 80       	ld	r8, Z
    8854:	80 80       	ld	r8, Z
    8856:	80 80       	ld	r8, Z
    8858:	80 80       	ld	r8, Z
    885a:	80 80       	ld	r8, Z
    885c:	80 80       	ld	r8, Z
    885e:	80 80       	ld	r8, Z
    8860:	80 80       	ld	r8, Z
    8862:	80 80       	ld	r8, Z
    8864:	80 80       	ld	r8, Z
    8866:	80 80       	ld	r8, Z
    8868:	80 80       	ld	r8, Z
    886a:	80 80       	ld	r8, Z
    886c:	80 80       	ld	r8, Z
    886e:	80 80       	ld	r8, Z
    8870:	80 80       	ld	r8, Z
    8872:	80 80       	ld	r8, Z
    8874:	80 80       	ld	r8, Z
    8876:	80 80       	ld	r8, Z
    8878:	80 80       	ld	r8, Z
    887a:	80 80       	ld	r8, Z
    887c:	80 80       	ld	r8, Z
    887e:	80 80       	ld	r8, Z
    8880:	80 80       	ld	r8, Z
    8882:	80 80       	ld	r8, Z
    8884:	80 80       	ld	r8, Z
    8886:	80 80       	ld	r8, Z
    8888:	80 80       	ld	r8, Z
    888a:	80 80       	ld	r8, Z
    888c:	80 80       	ld	r8, Z
    888e:	80 80       	ld	r8, Z
    8890:	80 80       	ld	r8, Z
    8892:	80 80       	ld	r8, Z
    8894:	80 80       	ld	r8, Z
    8896:	80 80       	ld	r8, Z
    8898:	80 80       	ld	r8, Z
    889a:	80 80       	ld	r8, Z
    889c:	80 80       	ld	r8, Z
    889e:	80 80       	ld	r8, Z
    88a0:	80 80       	ld	r8, Z
    88a2:	80 80       	ld	r8, Z
    88a4:	80 80       	ld	r8, Z
    88a6:	80 80       	ld	r8, Z
    88a8:	80 80       	ld	r8, Z
    88aa:	80 80       	ld	r8, Z
    88ac:	80 80       	ld	r8, Z
    88ae:	80 80       	ld	r8, Z
    88b0:	80 80       	ld	r8, Z
    88b2:	80 80       	ld	r8, Z
    88b4:	80 80       	ld	r8, Z
    88b6:	80 80       	ld	r8, Z
    88b8:	80 80       	ld	r8, Z
    88ba:	80 80       	ld	r8, Z
    88bc:	80 80       	ld	r8, Z
    88be:	80 80       	ld	r8, Z
    88c0:	80 80       	ld	r8, Z
    88c2:	80 80       	ld	r8, Z
    88c4:	80 80       	ld	r8, Z
    88c6:	80 80       	ld	r8, Z
    88c8:	80 80       	ld	r8, Z
    88ca:	80 80       	ld	r8, Z
    88cc:	80 80       	ld	r8, Z
    88ce:	80 80       	ld	r8, Z
    88d0:	80 80       	ld	r8, Z
    88d2:	80 80       	ld	r8, Z
    88d4:	80 80       	ld	r8, Z
    88d6:	80 80       	ld	r8, Z
    88d8:	80 80       	ld	r8, Z
    88da:	80 80       	ld	r8, Z
    88dc:	80 80       	ld	r8, Z
    88de:	80 80       	ld	r8, Z
    88e0:	80 80       	ld	r8, Z
    88e2:	80 80       	ld	r8, Z
    88e4:	80 80       	ld	r8, Z
    88e6:	80 80       	ld	r8, Z
    88e8:	80 80       	ld	r8, Z
    88ea:	80 80       	ld	r8, Z
    88ec:	80 80       	ld	r8, Z
    88ee:	80 80       	ld	r8, Z
    88f0:	80 80       	ld	r8, Z
    88f2:	80 80       	ld	r8, Z
    88f4:	80 80       	ld	r8, Z
    88f6:	80 80       	ld	r8, Z
    88f8:	80 80       	ld	r8, Z
    88fa:	80 80       	ld	r8, Z
    88fc:	80 80       	ld	r8, Z
    88fe:	80 80       	ld	r8, Z

00008900 <SetSpritesTileTable>:
    8900:	80 93 8a 0c 	sts	0x0C8A, r24
    8904:	90 93 8b 0c 	sts	0x0C8B, r25
    8908:	08 95       	ret

0000890a <SetTile>:
    890a:	99 27       	eor	r25, r25
    890c:	77 27       	eor	r23, r23
    890e:	2e e1       	ldi	r18, 0x1E	; 30
    8910:	62 9f       	mul	r22, r18
    8912:	08 0e       	add	r0, r24
    8914:	19 1e       	adc	r1, r25
    8916:	a0 e2       	ldi	r26, 0x20	; 32
    8918:	b1 e0       	ldi	r27, 0x01	; 1
    891a:	a0 0d       	add	r26, r0
    891c:	b1 1d       	adc	r27, r1
    891e:	41 5e       	subi	r20, 0xE1	; 225
    8920:	4c 93       	st	X, r20
    8922:	11 24       	eor	r1, r1
    8924:	08 95       	ret

00008926 <SetTileTable>:
    8926:	80 93 b4 0c 	sts	0x0CB4, r24
    892a:	90 93 b5 0c 	sts	0x0CB5, r25
    892e:	08 95       	ret

00008930 <GetVsyncFlag>:
    8930:	80 91 ac 0c 	lds	r24, 0x0CAC
    8934:	08 95       	ret

00008936 <ClearVsyncFlag>:
    8936:	11 24       	eor	r1, r1
    8938:	10 92 ac 0c 	sts	0x0CAC, r1
    893c:	08 95       	ret

0000893e <SetColorBurstOffset>:
    893e:	80 93 bf 0c 	sts	0x0CBF, r24
    8942:	08 95       	ret

00008944 <ReadJoypad>:
    8944:	88 23       	and	r24, r24
    8946:	29 f4       	brne	.+10     	; 0x8952 <rj_p2>
    8948:	80 91 b7 0c 	lds	r24, 0x0CB7
    894c:	90 91 b8 0c 	lds	r25, 0x0CB8
    8950:	08 95       	ret

00008952 <rj_p2>:
    8952:	80 91 bb 0c 	lds	r24, 0x0CBB
    8956:	90 91 bc 0c 	lds	r25, 0x0CBC
    895a:	08 95       	ret

0000895c <ReadButtons>:
void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
	unsigned char i;

	//latch controllers
	JOYPAD_OUT_PORT|=_BV(JOYPAD_LATCH_PIN);
    895c:	12 9a       	sbi	0x02, 2	; 2
    Wait200ns();
    895e:	c8 95       	lpm
    8960:	c8 95       	lpm
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));
    8962:	12 98       	cbi	0x02, 2	; 2
    8964:	20 e0       	ldi	r18, 0x00	; 0
    8966:	30 e0       	ldi	r19, 0x00	; 0
    8968:	80 e0       	ldi	r24, 0x00	; 0
    896a:	90 e0       	ldi	r25, 0x00	; 0
    896c:	40 e0       	ldi	r20, 0x00	; 0


	//read button states
	for(i=0;i<16;i++){

		p1ButtonsLo>>=1;
    896e:	36 95       	lsr	r19
    8970:	27 95       	ror	r18
		p2ButtonsLo>>=1;
    8972:	96 95       	lsr	r25
    8974:	87 95       	ror	r24
	
		//pulse clock pin		
		JOYPAD_OUT_PORT&=~(_BV(JOYPAD_CLOCK_PIN));
    8976:	13 98       	cbi	0x02, 3	; 2
	    Wait200ns();
    8978:	c8 95       	lpm
    897a:	c8 95       	lpm
		
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) p1ButtonsLo|=(1<<15);
    897c:	00 9b       	sbis	0x00, 0	; 0
    897e:	30 68       	ori	r19, 0x80	; 128
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) p2ButtonsLo|=(1<<15);
    8980:	01 9b       	sbis	0x00, 1	; 0
    8982:	90 68       	ori	r25, 0x80	; 128
		
		JOYPAD_OUT_PORT|=_BV(JOYPAD_CLOCK_PIN);
    8984:	13 9a       	sbi	0x02, 3	; 2
		Wait200ns();
    8986:	c8 95       	lpm
    8988:	c8 95       	lpm
    Wait200ns();
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));


	//read button states
	for(i=0;i<16;i++){
    898a:	4f 5f       	subi	r20, 0xFF	; 255
    898c:	40 31       	cpi	r20, 0x10	; 16
    898e:	79 f7       	brne	.-34     	; 0x896e <ReadButtons+0x12>
		JOYPAD_OUT_PORT|=_BV(JOYPAD_CLOCK_PIN);
		Wait200ns();

	}

		joypad1_status_lo=p1ButtonsLo;
    8990:	30 93 b8 0c 	sts	0x0CB8, r19
    8994:	20 93 b7 0c 	sts	0x0CB7, r18
		joypad2_status_lo=p2ButtonsLo;
    8998:	90 93 bc 0c 	sts	0x0CBC, r25
    899c:	80 93 bb 0c 	sts	0x0CBB, r24


	if(joypad1_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B) || joypad2_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B)){
    89a0:	80 91 b7 0c 	lds	r24, 0x0CB7
    89a4:	90 91 b8 0c 	lds	r25, 0x0CB8
    89a8:	0f 97       	sbiw	r24, 0x0f	; 15
    89aa:	31 f0       	breq	.+12     	; 0x89b8 <ReadButtons+0x5c>
    89ac:	80 91 bb 0c 	lds	r24, 0x0CBB
    89b0:	90 91 bc 0c 	lds	r25, 0x0CBC
    89b4:	0f 97       	sbiw	r24, 0x0f	; 15
    89b6:	61 f4       	brne	.+24     	; 0x89d0 <ReadButtons+0x74>

/**
 * Performs a software reset
 */
void SoftReset(void){        
	wdt_enable(WDTO_15MS);  
    89b8:	28 e0       	ldi	r18, 0x08	; 8
    89ba:	88 e1       	ldi	r24, 0x18	; 24
    89bc:	90 e0       	ldi	r25, 0x00	; 0
    89be:	0f b6       	in	r0, 0x3f	; 63
    89c0:	f8 94       	cli
    89c2:	a8 95       	wdr
    89c4:	80 93 60 00 	sts	0x0060, r24
    89c8:	0f be       	out	0x3f, r0	; 63
    89ca:	20 93 60 00 	sts	0x0060, r18
    89ce:	ff cf       	rjmp	.-2      	; 0x89ce <ReadButtons+0x72>
    89d0:	08 95       	ret

000089d2 <ReadControllers>:
void ReadControllers(){

	//detect if joypads are connected
	//when no connector are plugged, the internal AVR pullup will drive the line high
	//otherwise the controller's shift register will drive the line low.
	joypadsConnectionStatus=0;
    89d2:	10 92 05 0f 	sts	0x0F05, r1
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) joypadsConnectionStatus|=1;
    89d6:	00 99       	sbic	0x00, 0	; 0
    89d8:	03 c0       	rjmp	.+6      	; 0x89e0 <ReadControllers+0xe>
    89da:	81 e0       	ldi	r24, 0x01	; 1
    89dc:	80 93 05 0f 	sts	0x0F05, r24
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) joypadsConnectionStatus|=2;
    89e0:	01 99       	sbic	0x00, 1	; 0
    89e2:	05 c0       	rjmp	.+10     	; 0x89ee <ReadControllers+0x1c>
    89e4:	80 91 05 0f 	lds	r24, 0x0F05
    89e8:	82 60       	ori	r24, 0x02	; 2
    89ea:	80 93 05 0f 	sts	0x0F05, r24
			
	//read the standard buttons
	ReadButtons();
    89ee:	0e 94 ae 44 	call	0x895c	; 0x895c <ReadButtons>
}
    89f2:	08 95       	ret

000089f4 <PatchCommand00>:

/*
* Command 00: Set envelope speed per frame +127/-128, 0=no enveloppe
*/
void PatchCommand00(unsigned char track, char param){
	tracks[track].envelopeStep=param;
    89f4:	90 e0       	ldi	r25, 0x00	; 0
    89f6:	26 e1       	ldi	r18, 0x16	; 22
    89f8:	30 e0       	ldi	r19, 0x00	; 0
    89fa:	82 9f       	mul	r24, r18
    89fc:	f0 01       	movw	r30, r0
    89fe:	83 9f       	mul	r24, r19
    8a00:	f0 0d       	add	r31, r0
    8a02:	92 9f       	mul	r25, r18
    8a04:	f0 0d       	add	r31, r0
    8a06:	11 24       	eor	r1, r1
    8a08:	e8 5f       	subi	r30, 0xF8	; 248
    8a0a:	f0 4f       	sbci	r31, 0xF0	; 240
    8a0c:	62 87       	std	Z+10, r22	; 0x0a
}
    8a0e:	08 95       	ret

00008a10 <PatchCommand01>:
/*
* Command 01: Set noise channel params
*/
void PatchCommand01(unsigned char track, char param){

	mixer.channels.type.noise.params=param;
    8a10:	60 93 f1 0e 	sts	0x0EF1, r22
}
    8a14:	08 95       	ret

00008a16 <PatchCommand05>:
}
/*
* Command 05: End of note/fx
*/
void PatchCommand05(unsigned char track, char param){
	tracks[track].patchPlaying=false;
    8a16:	90 e0       	ldi	r25, 0x00	; 0
    8a18:	26 e1       	ldi	r18, 0x16	; 22
    8a1a:	30 e0       	ldi	r19, 0x00	; 0
    8a1c:	82 9f       	mul	r24, r18
    8a1e:	f0 01       	movw	r30, r0
    8a20:	83 9f       	mul	r24, r19
    8a22:	f0 0d       	add	r31, r0
    8a24:	92 9f       	mul	r25, r18
    8a26:	f0 0d       	add	r31, r0
    8a28:	11 24       	eor	r1, r1
    8a2a:	e8 5f       	subi	r30, 0xF8	; 248
    8a2c:	f0 4f       	sbci	r31, 0xF0	; 240
    8a2e:	13 86       	std	Z+11, r1	; 0x0b
	tracks[track].priority=0;
    8a30:	11 82       	std	Z+1, r1	; 0x01
}
    8a32:	08 95       	ret

00008a34 <PatchCommand06>:

/*
* Command 06: Note hold
*/
void PatchCommand06(unsigned char track, char param){
	tracks[track].patchEnvelopeHold=true;
    8a34:	90 e0       	ldi	r25, 0x00	; 0
    8a36:	26 e1       	ldi	r18, 0x16	; 22
    8a38:	30 e0       	ldi	r19, 0x00	; 0
    8a3a:	82 9f       	mul	r24, r18
    8a3c:	f0 01       	movw	r30, r0
    8a3e:	83 9f       	mul	r24, r19
    8a40:	f0 0d       	add	r31, r0
    8a42:	92 9f       	mul	r25, r18
    8a44:	f0 0d       	add	r31, r0
    8a46:	11 24       	eor	r1, r1
    8a48:	e8 5f       	subi	r30, 0xF8	; 248
    8a4a:	f0 4f       	sbci	r31, 0xF0	; 240
    8a4c:	81 e0       	ldi	r24, 0x01	; 1
    8a4e:	83 8b       	std	Z+19, r24	; 0x13
}
    8a50:	08 95       	ret

00008a52 <PatchCommand07>:
/*
* Command 07: Set envelope volume
*/

void PatchCommand07(unsigned char track, char param){
	tracks[track].envelopeVol=param;
    8a52:	90 e0       	ldi	r25, 0x00	; 0
    8a54:	26 e1       	ldi	r18, 0x16	; 22
    8a56:	30 e0       	ldi	r19, 0x00	; 0
    8a58:	82 9f       	mul	r24, r18
    8a5a:	f0 01       	movw	r30, r0
    8a5c:	83 9f       	mul	r24, r19
    8a5e:	f0 0d       	add	r31, r0
    8a60:	92 9f       	mul	r25, r18
    8a62:	f0 0d       	add	r31, r0
    8a64:	11 24       	eor	r1, r1
    8a66:	e8 5f       	subi	r30, 0xF8	; 248
    8a68:	f0 4f       	sbci	r31, 0xF0	; 240
    8a6a:	61 87       	std	Z+9, r22	; 0x09
}
    8a6c:	08 95       	ret

00008a6e <PatchCommand09>:
/*
* Command 09: Set tremolo level
*/

void PatchCommand09(unsigned char track, char param){
	tracks[track].tremoloLevel=param;
    8a6e:	90 e0       	ldi	r25, 0x00	; 0
    8a70:	26 e1       	ldi	r18, 0x16	; 22
    8a72:	30 e0       	ldi	r19, 0x00	; 0
    8a74:	82 9f       	mul	r24, r18
    8a76:	f0 01       	movw	r30, r0
    8a78:	83 9f       	mul	r24, r19
    8a7a:	f0 0d       	add	r31, r0
    8a7c:	92 9f       	mul	r25, r18
    8a7e:	f0 0d       	add	r31, r0
    8a80:	11 24       	eor	r1, r1
    8a82:	e8 5f       	subi	r30, 0xF8	; 248
    8a84:	f0 4f       	sbci	r31, 0xF0	; 240
    8a86:	64 83       	std	Z+4, r22	; 0x04
}
    8a88:	08 95       	ret

00008a8a <PatchCommand10>:

/*
* Command 10: Set tremolo rate
*/
void PatchCommand10(unsigned char track, char param){
	tracks[track].tremoloRate=param;
    8a8a:	90 e0       	ldi	r25, 0x00	; 0
    8a8c:	26 e1       	ldi	r18, 0x16	; 22
    8a8e:	30 e0       	ldi	r19, 0x00	; 0
    8a90:	82 9f       	mul	r24, r18
    8a92:	f0 01       	movw	r30, r0
    8a94:	83 9f       	mul	r24, r19
    8a96:	f0 0d       	add	r31, r0
    8a98:	92 9f       	mul	r25, r18
    8a9a:	f0 0d       	add	r31, r0
    8a9c:	11 24       	eor	r1, r1
    8a9e:	e8 5f       	subi	r30, 0xF8	; 248
    8aa0:	f0 4f       	sbci	r31, 0xF0	; 240
    8aa2:	65 83       	std	Z+5, r22	; 0x05
}
    8aa4:	08 95       	ret

00008aa6 <InitMusicPlayer>:
//void InitMusicPlayer(const char *patchPointersParam[]){
void InitMusicPlayer(const struct PatchStruct *patchPointersParam){


	//patchPointers=(const char **)patchPointersParam;
	patchPointers=patchPointersParam;
    8aa6:	90 93 63 0f 	sts	0x0F63, r25
    8aaa:	80 93 62 0f 	sts	0x0F62, r24

	masterVolume=DEFAULT_MASTER_VOL;
    8aae:	8f e6       	ldi	r24, 0x6F	; 111
    8ab0:	80 93 68 0f 	sts	0x0F68, r24
	//midi_rx_buf_end=0;
	UartInitRxBuffer();
	lastMidiInStatus=0;
#endif

	playSong=false;
    8ab4:	10 92 c0 0c 	sts	0x0CC0, r1
    8ab8:	e8 e0       	ldi	r30, 0x08	; 8
    8aba:	ff e0       	ldi	r31, 0x0F	; 15

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){
		tracks[t].allocated=true;
    8abc:	21 e0       	ldi	r18, 0x01	; 1
		tracks[t].noteVol=0;
		tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    8abe:	8f ef       	ldi	r24, 0xFF	; 255
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].priority=0;
		tracks[t].tremoloRate=24; //~6hz
    8ac0:	98 e1       	ldi	r25, 0x18	; 24

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){
		tracks[t].allocated=true;
    8ac2:	20 83       	st	Z, r18
		tracks[t].noteVol=0;
    8ac4:	10 86       	std	Z+8, r1	; 0x08
		tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    8ac6:	86 83       	std	Z+6, r24	; 0x06
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    8ac8:	87 83       	std	Z+7, r24	; 0x07
		tracks[t].patchNo=DEFAULT_PATCH;
    8aca:	14 86       	std	Z+12, r1	; 0x0c
		tracks[t].priority=0;
    8acc:	11 82       	std	Z+1, r1	; 0x01
		tracks[t].tremoloRate=24; //~6hz
    8ace:	95 83       	std	Z+5, r25	; 0x05
    8ad0:	76 96       	adiw	r30, 0x16	; 22
#endif

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){
    8ad2:	3f e0       	ldi	r19, 0x0F	; 15
    8ad4:	e0 36       	cpi	r30, 0x60	; 96
    8ad6:	f3 07       	cpc	r31, r19
    8ad8:	a1 f7       	brne	.-24     	; 0x8ac2 <InitMusicPlayer+0x1c>
		tracks[t].tremoloRate=24; //~6hz
	}

	//tracks[0].tremoloRate=24;
	//tracks[0].tremoloLevel=80;
}
    8ada:	08 95       	ret

00008adc <StartSong>:

void StartSong(const char *midiSong){
	for(unsigned char t=0;t<CHANNELS;t++){
		tracks[t].priority=0;	
    8adc:	10 92 09 0f 	sts	0x0F09, r1
    8ae0:	10 92 1f 0f 	sts	0x0F1F, r1
    8ae4:	10 92 35 0f 	sts	0x0F35, r1
    8ae8:	10 92 4b 0f 	sts	0x0F4B, r1
	}

	songPos=midiSong+1; //skip first delta-time
    8aec:	01 96       	adiw	r24, 0x01	; 1
    8aee:	90 93 6c 0f 	sts	0x0F6C, r25
    8af2:	80 93 6b 0f 	sts	0x0F6B, r24
	songStart=midiSong+1;//skip first delta-time
    8af6:	90 93 07 0f 	sts	0x0F07, r25
    8afa:	80 93 06 0f 	sts	0x0F06, r24
	loopStart=midiSong+1;
    8afe:	90 93 6f 0f 	sts	0x0F6F, r25
    8b02:	80 93 6e 0f 	sts	0x0F6E, r24
	nextDeltaTime=0;
    8b06:	10 92 6a 0f 	sts	0x0F6A, r1
    8b0a:	10 92 69 0f 	sts	0x0F69, r1
	currDeltaTime=0;
    8b0e:	10 92 61 0f 	sts	0x0F61, r1
    8b12:	10 92 60 0f 	sts	0x0F60, r1
	lastStatus=0;
    8b16:	10 92 64 0f 	sts	0x0F64, r1
	playSong=true;
    8b1a:	81 e0       	ldi	r24, 0x01	; 1
    8b1c:	80 93 c0 0c 	sts	0x0CC0, r24
	absoluteTime=0;
    8b20:	10 92 67 0f 	sts	0x0F67, r1
    8b24:	10 92 66 0f 	sts	0x0F66, r1

	
}
    8b28:	08 95       	ret

00008b2a <StopSong>:
}


void StopSong(){
	//fade out all channels
	for(u8 i=0;i<channelCount;i++){
    8b2a:	90 91 00 01 	lds	r25, 0x0100
    8b2e:	e2 e1       	ldi	r30, 0x12	; 18
    8b30:	ff e0       	ldi	r31, 0x0F	; 15
    8b32:	86 e1       	ldi	r24, 0x16	; 22
    8b34:	98 9f       	mul	r25, r24
    8b36:	90 01       	movw	r18, r0
    8b38:	11 24       	eor	r1, r1
    8b3a:	2e 0f       	add	r18, r30
    8b3c:	3f 1f       	adc	r19, r31
		if(tracks[i].envelopeStep>=0) tracks[i].envelopeStep=-6;
    8b3e:	9a ef       	ldi	r25, 0xFA	; 250
    8b40:	04 c0       	rjmp	.+8      	; 0x8b4a <StopSong+0x20>
    8b42:	80 81       	ld	r24, Z
    8b44:	87 ff       	sbrs	r24, 7
    8b46:	90 83       	st	Z, r25
    8b48:	76 96       	adiw	r30, 0x16	; 22
}


void StopSong(){
	//fade out all channels
	for(u8 i=0;i<channelCount;i++){
    8b4a:	e2 17       	cp	r30, r18
    8b4c:	f3 07       	cpc	r31, r19
    8b4e:	c9 f7       	brne	.-14     	; 0x8b42 <StopSong+0x18>
		if(tracks[i].envelopeStep>=0) tracks[i].envelopeStep=-6;
	}

	playSong=false;
    8b50:	10 92 c0 0c 	sts	0x0CC0, r1
}
    8b54:	08 95       	ret

00008b56 <ReadVarLen>:


}

unsigned int ReadVarLen(const char **songPos)
{
    8b56:	dc 01       	movw	r26, r24
    unsigned int value;
    unsigned char c;


    if ( (value = pgm_read_byte((*songPos)++)) & 0x80 )
    8b58:	ed 91       	ld	r30, X+
    8b5a:	fc 91       	ld	r31, X
    8b5c:	11 97       	sbiw	r26, 0x01	; 1
    8b5e:	af 01       	movw	r20, r30
    8b60:	4f 5f       	subi	r20, 0xFF	; 255
    8b62:	5f 4f       	sbci	r21, 0xFF	; 255
    8b64:	11 96       	adiw	r26, 0x01	; 1
    8b66:	5c 93       	st	X, r21
    8b68:	4e 93       	st	-X, r20
    8b6a:	e4 91       	lpm	r30, Z+
    8b6c:	2e 2f       	mov	r18, r30
    8b6e:	30 e0       	ldi	r19, 0x00	; 0
    8b70:	e7 ff       	sbrs	r30, 7
    8b72:	13 c0       	rjmp	.+38     	; 0x8b9a <ReadVarLen+0x44>
    {
       value &= 0x7F;
    8b74:	2f 77       	andi	r18, 0x7F	; 127
    8b76:	30 70       	andi	r19, 0x00	; 0
       do
       {
         value = (value << 7) + ((c = pgm_read_byte((*songPos)++)) & 0x7F);
    8b78:	36 95       	lsr	r19
    8b7a:	32 2f       	mov	r19, r18
    8b7c:	22 27       	eor	r18, r18
    8b7e:	37 95       	ror	r19
    8b80:	27 95       	ror	r18
    8b82:	fa 01       	movw	r30, r20
    8b84:	4f 5f       	subi	r20, 0xFF	; 255
    8b86:	5f 4f       	sbci	r21, 0xFF	; 255
    8b88:	e4 91       	lpm	r30, Z+
    8b8a:	8e 2f       	mov	r24, r30
    8b8c:	8f 77       	andi	r24, 0x7F	; 127
    8b8e:	28 0f       	add	r18, r24
    8b90:	31 1d       	adc	r19, r1
       } while (c & 0x80);
    8b92:	e7 fd       	sbrc	r30, 7
    8b94:	f1 cf       	rjmp	.-30     	; 0x8b78 <ReadVarLen+0x22>
    8b96:	4d 93       	st	X+, r20
    8b98:	5c 93       	st	X, r21
    }


    return value;
}
    8b9a:	c9 01       	movw	r24, r18
    8b9c:	08 95       	ret

00008b9e <SetMasterVolume>:
}



void SetMasterVolume(unsigned char vol){
	masterVolume=vol;
    8b9e:	80 93 68 0f 	sts	0x0F68, r24
}
    8ba2:	08 95       	ret

00008ba4 <PatchCommand02>:
}
/*
* Command 02: Set wave
*/
void PatchCommand02(unsigned char track, char param){
	SetMixerWave(track,param);
    8ba4:	0e 94 1f 40 	call	0x803e	; 0x803e <SetMixerWave>
}
    8ba8:	08 95       	ret

00008baa <TriggerNote>:
	#endif

}


void TriggerNote(unsigned char channel,unsigned char patch,unsigned char note,unsigned char volume){
    8baa:	ef 92       	push	r14
    8bac:	ff 92       	push	r15
    8bae:	0f 93       	push	r16
    8bb0:	1f 93       	push	r17
    8bb2:	cf 93       	push	r28
    8bb4:	df 93       	push	r29
    8bb6:	18 2f       	mov	r17, r24
    8bb8:	06 2f       	mov	r16, r22
    8bba:	f4 2e       	mov	r15, r20
    8bbc:	e2 2e       	mov	r14, r18

	//allow only other music notes 
	if(!tracks[channel].patchPlaying || tracks[channel].priority==0){
    8bbe:	c8 2f       	mov	r28, r24
    8bc0:	d0 e0       	ldi	r29, 0x00	; 0
    8bc2:	86 e1       	ldi	r24, 0x16	; 22
    8bc4:	90 e0       	ldi	r25, 0x00	; 0
    8bc6:	c8 9f       	mul	r28, r24
    8bc8:	f0 01       	movw	r30, r0
    8bca:	c9 9f       	mul	r28, r25
    8bcc:	f0 0d       	add	r31, r0
    8bce:	d8 9f       	mul	r29, r24
    8bd0:	f0 0d       	add	r31, r0
    8bd2:	11 24       	eor	r1, r1
    8bd4:	e8 5f       	subi	r30, 0xF8	; 248
    8bd6:	f0 4f       	sbci	r31, 0xF0	; 240
    8bd8:	83 85       	ldd	r24, Z+11	; 0x0b
    8bda:	88 23       	and	r24, r24
    8bdc:	21 f0       	breq	.+8      	; 0x8be6 <TriggerNote+0x3c>
    8bde:	81 81       	ldd	r24, Z+1	; 0x01
    8be0:	88 23       	and	r24, r24
    8be2:	09 f0       	breq	.+2      	; 0x8be6 <TriggerNote+0x3c>
    8be4:	8e c0       	rjmp	.+284    	; 0x8d02 <TriggerNote+0x158>
			
		if(volume==0){ //note-off received
    8be6:	ee 20       	and	r14, r14
    8be8:	91 f4       	brne	.+36     	; 0x8c0e <TriggerNote+0x64>
			tracks[channel].patchEnvelopeHold=false;
    8bea:	86 e1       	ldi	r24, 0x16	; 22
    8bec:	90 e0       	ldi	r25, 0x00	; 0
    8bee:	c8 9f       	mul	r28, r24
    8bf0:	f0 01       	movw	r30, r0
    8bf2:	c9 9f       	mul	r28, r25
    8bf4:	f0 0d       	add	r31, r0
    8bf6:	d8 9f       	mul	r29, r24
    8bf8:	f0 0d       	add	r31, r0
    8bfa:	11 24       	eor	r1, r1
    8bfc:	e8 5f       	subi	r30, 0xF8	; 248
    8bfe:	f0 4f       	sbci	r31, 0xF0	; 240
    8c00:	13 8a       	std	Z+19, r1	; 0x13
			
			//cut note if theres not envelope
			if(tracks[channel].envelopeStep==0){
    8c02:	82 85       	ldd	r24, Z+10	; 0x0a
    8c04:	88 23       	and	r24, r24
    8c06:	09 f0       	breq	.+2      	; 0x8c0a <TriggerNote+0x60>
    8c08:	7c c0       	rjmp	.+248    	; 0x8d02 <TriggerNote+0x158>
				tracks[channel].noteVol=0;	
    8c0a:	10 86       	std	Z+8, r1	; 0x08
    8c0c:	7a c0       	rjmp	.+244    	; 0x8d02 <TriggerNote+0x158>
			}
		}else{

			#if MIXER_CHAN4_TYPE == 0		
				if(channel==3){
    8c0e:	13 30       	cpi	r17, 0x03	; 3
    8c10:	59 f4       	brne	.+22     	; 0x8c28 <TriggerNote+0x7e>
					patch=note;
					mixer.channels.type.noise.barrel=0x0101;				
    8c12:	81 e0       	ldi	r24, 0x01	; 1
    8c14:	91 e0       	ldi	r25, 0x01	; 1
    8c16:	90 93 f3 0e 	sts	0x0EF3, r25
    8c1a:	80 93 f2 0e 	sts	0x0EF2, r24
					mixer.channels.type.noise.params=1; //default (15bits,no divider)
    8c1e:	81 e0       	ldi	r24, 0x01	; 1
    8c20:	80 93 f1 0e 	sts	0x0EF1, r24
    8c24:	0f 2d       	mov	r16, r15
    8c26:	08 c0       	rjmp	.+16     	; 0x8c38 <TriggerNote+0x8e>

				}else{
					SetMixerWave(channel,0); //default wave
    8c28:	81 2f       	mov	r24, r17
    8c2a:	60 e0       	ldi	r22, 0x00	; 0
    8c2c:	0e 94 1f 40 	call	0x803e	; 0x803e <SetMixerWave>
					SetMixerNote(channel,note);
    8c30:	81 2f       	mov	r24, r17
    8c32:	6f 2d       	mov	r22, r15
    8c34:	0e 94 00 40 	call	0x8000	; 0x8000 <SetMixerNote>
				
				SetMixerNote(channel,note);
			#endif


			if(patch==127){
    8c38:	0f 37       	cpi	r16, 0x7F	; 127
    8c3a:	99 f4       	brne	.+38     	; 0x8c62 <TriggerNote+0xb8>
 				unsigned char *pos = ramPatch;
				tracks[channel].patchNextDeltaTime=*(pos++);
    8c3c:	86 e1       	ldi	r24, 0x16	; 22
    8c3e:	90 e0       	ldi	r25, 0x00	; 0
    8c40:	c8 9f       	mul	r28, r24
    8c42:	f0 01       	movw	r30, r0
    8c44:	c9 9f       	mul	r28, r25
    8c46:	f0 0d       	add	r31, r0
    8c48:	d8 9f       	mul	r29, r24
    8c4a:	f0 0d       	add	r31, r0
    8c4c:	11 24       	eor	r1, r1
    8c4e:	e8 5f       	subi	r30, 0xF8	; 248
    8c50:	f0 4f       	sbci	r31, 0xF0	; 240
    8c52:	80 91 65 0f 	lds	r24, 0x0F65
    8c56:	87 87       	std	Z+15, r24	; 0x0f
				tracks[channel].patchCommandStreamPos=(char *)pos;
    8c58:	86 e6       	ldi	r24, 0x66	; 102
    8c5a:	9f e0       	ldi	r25, 0x0F	; 15
    8c5c:	95 8b       	std	Z+21, r25	; 0x15
    8c5e:	84 8b       	std	Z+20, r24	; 0x14
    8c60:	30 c0       	rjmp	.+96     	; 0x8cc2 <TriggerNote+0x118>
			}else{
				const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
    8c62:	89 e0       	ldi	r24, 0x09	; 9
    8c64:	08 9f       	mul	r16, r24
    8c66:	c0 01       	movw	r24, r0
    8c68:	11 24       	eor	r1, r1
    8c6a:	e0 91 62 0f 	lds	r30, 0x0F62
    8c6e:	f0 91 63 0f 	lds	r31, 0x0F63
    8c72:	e8 0f       	add	r30, r24
    8c74:	f9 1f       	adc	r31, r25
    8c76:	33 96       	adiw	r30, 0x03	; 3
    8c78:	45 91       	lpm	r20, Z+
    8c7a:	54 91       	lpm	r21, Z+
				if(pos==NULL){
    8c7c:	41 15       	cp	r20, r1
    8c7e:	51 05       	cpc	r21, r1
    8c80:	71 f4       	brne	.+28     	; 0x8c9e <TriggerNote+0xf4>
					tracks[channel].patchCommandStreamPos=NULL;
    8c82:	86 e1       	ldi	r24, 0x16	; 22
    8c84:	90 e0       	ldi	r25, 0x00	; 0
    8c86:	c8 9f       	mul	r28, r24
    8c88:	f0 01       	movw	r30, r0
    8c8a:	c9 9f       	mul	r28, r25
    8c8c:	f0 0d       	add	r31, r0
    8c8e:	d8 9f       	mul	r29, r24
    8c90:	f0 0d       	add	r31, r0
    8c92:	11 24       	eor	r1, r1
    8c94:	e8 5f       	subi	r30, 0xF8	; 248
    8c96:	f0 4f       	sbci	r31, 0xF0	; 240
    8c98:	15 8a       	std	Z+21, r1	; 0x15
    8c9a:	14 8a       	std	Z+20, r1	; 0x14
    8c9c:	12 c0       	rjmp	.+36     	; 0x8cc2 <TriggerNote+0x118>
				}else{
					tracks[channel].patchNextDeltaTime=pgm_read_byte(pos++);
    8c9e:	fa 01       	movw	r30, r20
    8ca0:	24 91       	lpm	r18, Z+
    8ca2:	86 e1       	ldi	r24, 0x16	; 22
    8ca4:	90 e0       	ldi	r25, 0x00	; 0
    8ca6:	c8 9f       	mul	r28, r24
    8ca8:	f0 01       	movw	r30, r0
    8caa:	c9 9f       	mul	r28, r25
    8cac:	f0 0d       	add	r31, r0
    8cae:	d8 9f       	mul	r29, r24
    8cb0:	f0 0d       	add	r31, r0
    8cb2:	11 24       	eor	r1, r1
    8cb4:	e8 5f       	subi	r30, 0xF8	; 248
    8cb6:	f0 4f       	sbci	r31, 0xF0	; 240
    8cb8:	27 87       	std	Z+15, r18	; 0x0f
					tracks[channel].patchCommandStreamPos=pos;
    8cba:	4f 5f       	subi	r20, 0xFF	; 255
    8cbc:	5f 4f       	sbci	r21, 0xFF	; 255
    8cbe:	55 8b       	std	Z+21, r21	; 0x15
    8cc0:	44 8b       	std	Z+20, r20	; 0x14
			tracks[channel].tremoloLevel=0;
			tracks[channel].expressionVol=DEFAULT_EXPRESSION_VOL;
			tracks[channel].note=note;
		*/

			tracks[channel].patchNo=patch;	
    8cc2:	86 e1       	ldi	r24, 0x16	; 22
    8cc4:	90 e0       	ldi	r25, 0x00	; 0
    8cc6:	c8 9f       	mul	r28, r24
    8cc8:	f0 01       	movw	r30, r0
    8cca:	c9 9f       	mul	r28, r25
    8ccc:	f0 0d       	add	r31, r0
    8cce:	d8 9f       	mul	r29, r24
    8cd0:	f0 0d       	add	r31, r0
    8cd2:	11 24       	eor	r1, r1
    8cd4:	e8 5f       	subi	r30, 0xF8	; 248
    8cd6:	f0 4f       	sbci	r31, 0xF0	; 240
    8cd8:	04 87       	std	Z+12, r16	; 0x0c
			tracks[channel].priority=0;	
    8cda:	11 82       	std	Z+1, r1	; 0x01
			SetTriggerCommonValues(&tracks[channel],volume,note);
    8cdc:	e6 e1       	ldi	r30, 0x16	; 22
    8cde:	1e 9f       	mul	r17, r30
    8ce0:	f0 01       	movw	r30, r0
    8ce2:	11 24       	eor	r1, r1
    8ce4:	e8 5f       	subi	r30, 0xF8	; 248
    8ce6:	f0 4f       	sbci	r31, 0xF0	; 240



void SetTriggerCommonValues(struct TrackStruct* track, u8 volume, u8 note)  {

	track->patchCurrDeltaTime=0;
    8ce8:	10 8a       	std	Z+16, r1	; 0x10
	track->envelopeStep=0; 
    8cea:	12 86       	std	Z+10, r1	; 0x0a
	track->envelopeVol=0xff; 
    8cec:	9f ef       	ldi	r25, 0xFF	; 255
    8cee:	91 87       	std	Z+9, r25	; 0x09
	track->noteVol=volume;
    8cf0:	e0 86       	std	Z+8, r14	; 0x08
	track->patchEnvelopeHold=false;
    8cf2:	13 8a       	std	Z+19, r1	; 0x13
	track->patchPlayingTime=0;
    8cf4:	11 8a       	std	Z+17, r1	; 0x11
	track->patchPlaying=true;
    8cf6:	81 e0       	ldi	r24, 0x01	; 1
    8cf8:	83 87       	std	Z+11, r24	; 0x0b
	track->patchWave=0;
    8cfa:	12 8a       	std	Z+18, r1	; 0x12
	track->tremoloLevel=0;
    8cfc:	14 82       	std	Z+4, r1	; 0x04
	track->expressionVol=DEFAULT_EXPRESSION_VOL;
    8cfe:	96 83       	std	Z+6, r25	; 0x06
	track->note=note;
    8d00:	f2 82       	std	Z+2, r15	; 0x02


		}

	}
}
    8d02:	cd b7       	in	r28, 0x3d	; 61
    8d04:	de b7       	in	r29, 0x3e	; 62
    8d06:	e6 e0       	ldi	r30, 0x06	; 6
    8d08:	0c 94 d1 70 	jmp	0xe1a2	; 0xe1a2 <__epilogue_restores__+0x18>

00008d0c <ProcessMusic>:

#endif

//static char wait=0;

void ProcessMusic(void){
    8d0c:	cf 92       	push	r12
    8d0e:	df 92       	push	r13
    8d10:	ff 92       	push	r15
    8d12:	0f 93       	push	r16
    8d14:	1f 93       	push	r17
    8d16:	cf 93       	push	r28
    8d18:	df 93       	push	r29
    8d1a:	e1 e1       	ldi	r30, 0x11	; 17
    8d1c:	ff e0       	ldi	r31, 0x0F	; 15

	//process patches envelopes
	for(unsigned char track=0;track<CHANNELS;track++){

		//update envelope
		vol=tracks[track].envelopeVol+tracks[track].envelopeStep;		
    8d1e:	81 81       	ldd	r24, Z+1	; 0x01
    8d20:	28 2f       	mov	r18, r24
    8d22:	33 27       	eor	r19, r19
    8d24:	27 fd       	sbrc	r18, 7
    8d26:	30 95       	com	r19
    8d28:	80 81       	ld	r24, Z
    8d2a:	28 0f       	add	r18, r24
    8d2c:	31 1d       	adc	r19, r1
    8d2e:	2f 3f       	cpi	r18, 0xFF	; 255
    8d30:	31 05       	cpc	r19, r1
    8d32:	19 f0       	breq	.+6      	; 0x8d3a <ProcessMusic+0x2e>
    8d34:	14 f0       	brlt	.+4      	; 0x8d3a <ProcessMusic+0x2e>
    8d36:	2f ef       	ldi	r18, 0xFF	; 255
    8d38:	30 e0       	ldi	r19, 0x00	; 0
		if(vol<0){
			vol=0;			
		}else if(vol>0xff){
			vol=0xff;						
		}
		tracks[track].envelopeVol=vol;
    8d3a:	c9 01       	movw	r24, r18
    8d3c:	37 ff       	sbrs	r19, 7
    8d3e:	02 c0       	rjmp	.+4      	; 0x8d44 <ProcessMusic+0x38>
    8d40:	80 e0       	ldi	r24, 0x00	; 0
    8d42:	90 e0       	ldi	r25, 0x00	; 0
    8d44:	80 83       	st	Z, r24
    8d46:	76 96       	adiw	r30, 0x16	; 22
	unsigned int uVol,tVol;	

	

	//process patches envelopes
	for(unsigned char track=0;track<CHANNELS;track++){
    8d48:	4f e0       	ldi	r20, 0x0F	; 15
    8d4a:	e9 36       	cpi	r30, 0x69	; 105
    8d4c:	f4 07       	cpc	r31, r20
    8d4e:	39 f7       	brne	.-50     	; 0x8d1e <ProcessMusic+0x12>




	//Process song MIDI notes
	if(playSong){
    8d50:	80 91 c0 0c 	lds	r24, 0x0CC0
    8d54:	88 23       	and	r24, r24
    8d56:	09 f0       	breq	.+2      	; 0x8d5a <ProcessMusic+0x4e>
    8d58:	28 c1       	rjmp	.+592    	; 0x8faa <ProcessMusic+0x29e>
    8d5a:	44 c1       	rjmp	.+648    	; 0x8fe4 <ProcessMusic+0x2d8>
			//process all simultaneous events
			while(currDeltaTime==nextDeltaTime){

				c1=pgm_read_byte(songPos++);
    8d5c:	e0 91 6b 0f 	lds	r30, 0x0F6B
    8d60:	f0 91 6c 0f 	lds	r31, 0x0F6C
    8d64:	9f 01       	movw	r18, r30
    8d66:	2f 5f       	subi	r18, 0xFF	; 255
    8d68:	3f 4f       	sbci	r19, 0xFF	; 255
    8d6a:	30 93 6c 0f 	sts	0x0F6C, r19
    8d6e:	20 93 6b 0f 	sts	0x0F6B, r18
    8d72:	44 91       	lpm	r20, Z+
				
				if(c1==0xff){
    8d74:	4f 3f       	cpi	r20, 0xFF	; 255
    8d76:	69 f5       	brne	.+90     	; 0x8dd2 <ProcessMusic+0xc6>
					//META data type event
					c1=pgm_read_byte(songPos++);
    8d78:	a9 01       	movw	r20, r18
    8d7a:	4f 5f       	subi	r20, 0xFF	; 255
    8d7c:	5f 4f       	sbci	r21, 0xFF	; 255
    8d7e:	50 93 6c 0f 	sts	0x0F6C, r21
    8d82:	40 93 6b 0f 	sts	0x0F6B, r20
    8d86:	f9 01       	movw	r30, r18
    8d88:	84 91       	lpm	r24, Z+

					
					if(c1==0x2f){ //end of song
    8d8a:	8f 32       	cpi	r24, 0x2F	; 47
    8d8c:	19 f4       	brne	.+6      	; 0x8d94 <ProcessMusic+0x88>
						playSong=false;
    8d8e:	10 92 c0 0c 	sts	0x0CC0, r1
    8d92:	19 c1       	rjmp	.+562    	; 0x8fc6 <ProcessMusic+0x2ba>
						break;	
					}else if(c1==0x6){ //marker
    8d94:	86 30       	cpi	r24, 0x06	; 6
    8d96:	09 f0       	breq	.+2      	; 0x8d9a <ProcessMusic+0x8e>
    8d98:	fb c0       	rjmp	.+502    	; 0x8f90 <ProcessMusic+0x284>
						c1=pgm_read_byte(songPos++); //read len
    8d9a:	fa 01       	movw	r30, r20
    8d9c:	31 96       	adiw	r30, 0x01	; 1
						c2=pgm_read_byte(songPos++); //read data
    8d9e:	cf 01       	movw	r24, r30
    8da0:	01 96       	adiw	r24, 0x01	; 1
    8da2:	90 93 6c 0f 	sts	0x0F6C, r25
    8da6:	80 93 6b 0f 	sts	0x0F6B, r24
    8daa:	e4 91       	lpm	r30, Z+
						if(c2=='S'){ //loop start
    8dac:	e3 35       	cpi	r30, 0x53	; 83
    8dae:	29 f4       	brne	.+10     	; 0x8dba <ProcessMusic+0xae>
							loopStart=songPos;
    8db0:	90 93 6f 0f 	sts	0x0F6F, r25
    8db4:	80 93 6e 0f 	sts	0x0F6E, r24
    8db8:	eb c0       	rjmp	.+470    	; 0x8f90 <ProcessMusic+0x284>
						}else if(c2=='E'){//loop end
    8dba:	e5 34       	cpi	r30, 0x45	; 69
    8dbc:	09 f0       	breq	.+2      	; 0x8dc0 <ProcessMusic+0xb4>
    8dbe:	e8 c0       	rjmp	.+464    	; 0x8f90 <ProcessMusic+0x284>
							songPos=loopStart;
    8dc0:	80 91 6e 0f 	lds	r24, 0x0F6E
    8dc4:	90 91 6f 0f 	lds	r25, 0x0F6F
    8dc8:	90 93 6c 0f 	sts	0x0F6C, r25
    8dcc:	80 93 6b 0f 	sts	0x0F6B, r24
    8dd0:	df c0       	rjmp	.+446    	; 0x8f90 <ProcessMusic+0x284>
					}
					

				}else{

					if(c1&0x80) lastStatus=c1;					
    8dd2:	47 ff       	sbrs	r20, 7
    8dd4:	02 c0       	rjmp	.+4      	; 0x8dda <ProcessMusic+0xce>
    8dd6:	40 93 64 0f 	sts	0x0F64, r20
					channel=c1&0x0f;
    8dda:	54 2f       	mov	r21, r20
    8ddc:	5f 70       	andi	r21, 0x0F	; 15

					switch(c1&0xf0){
    8dde:	84 2f       	mov	r24, r20
    8de0:	90 e0       	ldi	r25, 0x00	; 0
    8de2:	80 7f       	andi	r24, 0xF0	; 240
    8de4:	90 70       	andi	r25, 0x00	; 0
    8de6:	80 3b       	cpi	r24, 0xB0	; 176
    8de8:	91 05       	cpc	r25, r1
    8dea:	31 f1       	breq	.+76     	; 0x8e38 <ProcessMusic+0x12c>
    8dec:	80 3c       	cpi	r24, 0xC0	; 192
    8dee:	91 05       	cpc	r25, r1
    8df0:	81 f1       	breq	.+96     	; 0x8e52 <ProcessMusic+0x146>
    8df2:	80 39       	cpi	r24, 0x90	; 144
    8df4:	91 05       	cpc	r25, r1
    8df6:	09 f0       	breq	.+2      	; 0x8dfa <ProcessMusic+0xee>
    8df8:	43 c0       	rjmp	.+134    	; 0x8e80 <ProcessMusic+0x174>
	
						//note-on
						case 0x90:
							c1=pgm_read_byte(songPos++); //get note
    8dfa:	c9 01       	movw	r24, r18
    8dfc:	01 96       	adiw	r24, 0x01	; 1
    8dfe:	f9 01       	movw	r30, r18
    8e00:	44 91       	lpm	r20, Z+
							c2=pgm_read_byte(songPos++)<<1; //get volume															
    8e02:	01 96       	adiw	r24, 0x01	; 1
    8e04:	90 93 6c 0f 	sts	0x0F6C, r25
    8e08:	80 93 6b 0f 	sts	0x0F6B, r24
    8e0c:	01 97       	sbiw	r24, 0x01	; 1
    8e0e:	fc 01       	movw	r30, r24
    8e10:	24 91       	lpm	r18, Z+
							if(tracks[channel].allocated==true){
    8e12:	85 2f       	mov	r24, r21
    8e14:	90 e0       	ldi	r25, 0x00	; 0
    8e16:	8c 9f       	mul	r24, r28
    8e18:	f0 01       	movw	r30, r0
    8e1a:	8d 9f       	mul	r24, r29
    8e1c:	f0 0d       	add	r31, r0
    8e1e:	9c 9f       	mul	r25, r28
    8e20:	f0 0d       	add	r31, r0
    8e22:	11 24       	eor	r1, r1
    8e24:	e8 5f       	subi	r30, 0xF8	; 248
    8e26:	f0 4f       	sbci	r31, 0xF0	; 240
    8e28:	80 81       	ld	r24, Z
    8e2a:	88 23       	and	r24, r24
    8e2c:	09 f4       	brne	.+2      	; 0x8e30 <ProcessMusic+0x124>
    8e2e:	b0 c0       	rjmp	.+352    	; 0x8f90 <ProcessMusic+0x284>
								TriggerNote(channel,tracks[channel].patchNo,c1,c2);
    8e30:	22 0f       	add	r18, r18
    8e32:	85 2f       	mov	r24, r21
    8e34:	64 85       	ldd	r22, Z+12	; 0x0c
    8e36:	53 c0       	rjmp	.+166    	; 0x8ede <ProcessMusic+0x1d2>
							}
							break;

						//controllers
						case 0xb0:
							c1=pgm_read_byte(songPos++); //get controller #
    8e38:	c9 01       	movw	r24, r18
    8e3a:	01 96       	adiw	r24, 0x01	; 1
    8e3c:	f9 01       	movw	r30, r18
    8e3e:	44 91       	lpm	r20, Z+
							c2=pgm_read_byte(songPos++); //get value
    8e40:	01 96       	adiw	r24, 0x01	; 1
    8e42:	90 93 6c 0f 	sts	0x0F6C, r25
    8e46:	80 93 6b 0f 	sts	0x0F6B, r24
    8e4a:	01 97       	sbiw	r24, 0x01	; 1
    8e4c:	fc 01       	movw	r30, r24
    8e4e:	24 91       	lpm	r18, Z+
    8e50:	53 c0       	rjmp	.+166    	; 0x8ef8 <ProcessMusic+0x1ec>
							
							break;

						//program change
						case 0xc0:
							c1=pgm_read_byte(songPos++); //get patch
    8e52:	2f 5f       	subi	r18, 0xFF	; 255
    8e54:	3f 4f       	sbci	r19, 0xFF	; 255
    8e56:	30 93 6c 0f 	sts	0x0F6C, r19
    8e5a:	20 93 6b 0f 	sts	0x0F6B, r18
    8e5e:	21 50       	subi	r18, 0x01	; 1
    8e60:	30 40       	sbci	r19, 0x00	; 0
    8e62:	f9 01       	movw	r30, r18
    8e64:	24 91       	lpm	r18, Z+
							tracks[channel].patchNo=c1;								
    8e66:	85 2f       	mov	r24, r21
    8e68:	90 e0       	ldi	r25, 0x00	; 0
    8e6a:	8c 9f       	mul	r24, r28
    8e6c:	f0 01       	movw	r30, r0
    8e6e:	8d 9f       	mul	r24, r29
    8e70:	f0 0d       	add	r31, r0
    8e72:	9c 9f       	mul	r25, r28
    8e74:	f0 0d       	add	r31, r0
    8e76:	11 24       	eor	r1, r1
    8e78:	e8 5f       	subi	r30, 0xF8	; 248
    8e7a:	f0 4f       	sbci	r31, 0xF0	; 240
    8e7c:	24 87       	std	Z+12, r18	; 0x0c
    8e7e:	88 c0       	rjmp	.+272    	; 0x8f90 <ProcessMusic+0x284>
							break;							

						//running status
						default:
							channel=lastStatus&0x0f;
    8e80:	80 91 64 0f 	lds	r24, 0x0F64
    8e84:	58 2f       	mov	r21, r24
    8e86:	5f 70       	andi	r21, 0x0F	; 15

							switch(lastStatus&0xf0){
    8e88:	90 e0       	ldi	r25, 0x00	; 0
    8e8a:	80 7f       	andi	r24, 0xF0	; 240
    8e8c:	90 70       	andi	r25, 0x00	; 0
    8e8e:	80 3b       	cpi	r24, 0xB0	; 176
    8e90:	91 05       	cpc	r25, r1
    8e92:	41 f1       	breq	.+80     	; 0x8ee4 <ProcessMusic+0x1d8>
    8e94:	80 3c       	cpi	r24, 0xC0	; 192
    8e96:	91 05       	cpc	r25, r1
    8e98:	09 f4       	brne	.+2      	; 0x8e9c <ProcessMusic+0x190>
    8e9a:	6e c0       	rjmp	.+220    	; 0x8f78 <ProcessMusic+0x26c>
    8e9c:	80 39       	cpi	r24, 0x90	; 144
    8e9e:	91 05       	cpc	r25, r1
    8ea0:	09 f0       	breq	.+2      	; 0x8ea4 <ProcessMusic+0x198>
    8ea2:	76 c0       	rjmp	.+236    	; 0x8f90 <ProcessMusic+0x284>
		
								//note-on
								case 0x90:
									c2=pgm_read_byte(songPos++)<<1; //get volume
    8ea4:	2f 5f       	subi	r18, 0xFF	; 255
    8ea6:	3f 4f       	sbci	r19, 0xFF	; 255
    8ea8:	30 93 6c 0f 	sts	0x0F6C, r19
    8eac:	20 93 6b 0f 	sts	0x0F6B, r18
    8eb0:	21 50       	subi	r18, 0x01	; 1
    8eb2:	30 40       	sbci	r19, 0x00	; 0
    8eb4:	f9 01       	movw	r30, r18
    8eb6:	24 91       	lpm	r18, Z+
									if(tracks[channel].allocated==true){
    8eb8:	85 2f       	mov	r24, r21
    8eba:	90 e0       	ldi	r25, 0x00	; 0
    8ebc:	8c 9f       	mul	r24, r28
    8ebe:	d0 01       	movw	r26, r0
    8ec0:	8d 9f       	mul	r24, r29
    8ec2:	b0 0d       	add	r27, r0
    8ec4:	9c 9f       	mul	r25, r28
    8ec6:	b0 0d       	add	r27, r0
    8ec8:	11 24       	eor	r1, r1
    8eca:	a8 5f       	subi	r26, 0xF8	; 248
    8ecc:	b0 4f       	sbci	r27, 0xF0	; 240
    8ece:	8c 91       	ld	r24, X
    8ed0:	88 23       	and	r24, r24
    8ed2:	09 f4       	brne	.+2      	; 0x8ed6 <ProcessMusic+0x1ca>
    8ed4:	5d c0       	rjmp	.+186    	; 0x8f90 <ProcessMusic+0x284>
										TriggerNote(channel,tracks[channel].patchNo,c1,c2);
    8ed6:	22 0f       	add	r18, r18
    8ed8:	85 2f       	mov	r24, r21
    8eda:	1c 96       	adiw	r26, 0x0c	; 12
    8edc:	6c 91       	ld	r22, X
    8ede:	0e 94 d5 45 	call	0x8baa	; 0x8baa <TriggerNote>
    8ee2:	56 c0       	rjmp	.+172    	; 0x8f90 <ProcessMusic+0x284>
									}
									break;

								//controllers
								case 0xb0:
									c2=pgm_read_byte(songPos++); //get value	
    8ee4:	2f 5f       	subi	r18, 0xFF	; 255
    8ee6:	3f 4f       	sbci	r19, 0xFF	; 255
    8ee8:	30 93 6c 0f 	sts	0x0F6C, r19
    8eec:	20 93 6b 0f 	sts	0x0F6B, r18
    8ef0:	21 50       	subi	r18, 0x01	; 1
    8ef2:	30 40       	sbci	r19, 0x00	; 0
    8ef4:	f9 01       	movw	r30, r18
    8ef6:	24 91       	lpm	r18, Z+
									
									if(c1==CONTROLER_VOL){
    8ef8:	47 30       	cpi	r20, 0x07	; 7
    8efa:	71 f4       	brne	.+28     	; 0x8f18 <ProcessMusic+0x20c>
										tracks[channel].trackVol=c2<<1;
    8efc:	85 2f       	mov	r24, r21
    8efe:	90 e0       	ldi	r25, 0x00	; 0
    8f00:	8c 9f       	mul	r24, r28
    8f02:	f0 01       	movw	r30, r0
    8f04:	8d 9f       	mul	r24, r29
    8f06:	f0 0d       	add	r31, r0
    8f08:	9c 9f       	mul	r25, r28
    8f0a:	f0 0d       	add	r31, r0
    8f0c:	11 24       	eor	r1, r1
    8f0e:	e8 5f       	subi	r30, 0xF8	; 248
    8f10:	f0 4f       	sbci	r31, 0xF0	; 240
    8f12:	22 0f       	add	r18, r18
    8f14:	27 83       	std	Z+7, r18	; 0x07
    8f16:	3c c0       	rjmp	.+120    	; 0x8f90 <ProcessMusic+0x284>
									}else if(c1==CONTROLER_EXPRESSION){
    8f18:	4b 30       	cpi	r20, 0x0B	; 11
    8f1a:	71 f4       	brne	.+28     	; 0x8f38 <ProcessMusic+0x22c>
										tracks[channel].expressionVol=c2<<1;
    8f1c:	85 2f       	mov	r24, r21
    8f1e:	90 e0       	ldi	r25, 0x00	; 0
    8f20:	8c 9f       	mul	r24, r28
    8f22:	f0 01       	movw	r30, r0
    8f24:	8d 9f       	mul	r24, r29
    8f26:	f0 0d       	add	r31, r0
    8f28:	9c 9f       	mul	r25, r28
    8f2a:	f0 0d       	add	r31, r0
    8f2c:	11 24       	eor	r1, r1
    8f2e:	e8 5f       	subi	r30, 0xF8	; 248
    8f30:	f0 4f       	sbci	r31, 0xF0	; 240
    8f32:	22 0f       	add	r18, r18
    8f34:	26 83       	std	Z+6, r18	; 0x06
    8f36:	2c c0       	rjmp	.+88     	; 0x8f90 <ProcessMusic+0x284>
									}else if(c1==CONTROLER_TREMOLO){
    8f38:	4c 35       	cpi	r20, 0x5C	; 92
    8f3a:	71 f4       	brne	.+28     	; 0x8f58 <ProcessMusic+0x24c>
										tracks[channel].tremoloLevel=c2<<1;
    8f3c:	85 2f       	mov	r24, r21
    8f3e:	90 e0       	ldi	r25, 0x00	; 0
    8f40:	8c 9f       	mul	r24, r28
    8f42:	f0 01       	movw	r30, r0
    8f44:	8d 9f       	mul	r24, r29
    8f46:	f0 0d       	add	r31, r0
    8f48:	9c 9f       	mul	r25, r28
    8f4a:	f0 0d       	add	r31, r0
    8f4c:	11 24       	eor	r1, r1
    8f4e:	e8 5f       	subi	r30, 0xF8	; 248
    8f50:	f0 4f       	sbci	r31, 0xF0	; 240
    8f52:	22 0f       	add	r18, r18
    8f54:	24 83       	std	Z+4, r18	; 0x04
    8f56:	1c c0       	rjmp	.+56     	; 0x8f90 <ProcessMusic+0x284>
									}else if(c1==CONTROLER_TREMOLO_RATE){
    8f58:	44 36       	cpi	r20, 0x64	; 100
    8f5a:	d1 f4       	brne	.+52     	; 0x8f90 <ProcessMusic+0x284>
										tracks[channel].tremoloRate=c2<<1;
    8f5c:	85 2f       	mov	r24, r21
    8f5e:	90 e0       	ldi	r25, 0x00	; 0
    8f60:	8c 9f       	mul	r24, r28
    8f62:	f0 01       	movw	r30, r0
    8f64:	8d 9f       	mul	r24, r29
    8f66:	f0 0d       	add	r31, r0
    8f68:	9c 9f       	mul	r25, r28
    8f6a:	f0 0d       	add	r31, r0
    8f6c:	11 24       	eor	r1, r1
    8f6e:	e8 5f       	subi	r30, 0xF8	; 248
    8f70:	f0 4f       	sbci	r31, 0xF0	; 240
    8f72:	22 0f       	add	r18, r18
    8f74:	25 83       	std	Z+5, r18	; 0x05
    8f76:	0c c0       	rjmp	.+24     	; 0x8f90 <ProcessMusic+0x284>
																
									break;
								
								//program change
								case 0xc0:
									tracks[channel].patchNo=c1;
    8f78:	85 2f       	mov	r24, r21
    8f7a:	90 e0       	ldi	r25, 0x00	; 0
    8f7c:	8c 9f       	mul	r24, r28
    8f7e:	f0 01       	movw	r30, r0
    8f80:	8d 9f       	mul	r24, r29
    8f82:	f0 0d       	add	r31, r0
    8f84:	9c 9f       	mul	r25, r28
    8f86:	f0 0d       	add	r31, r0
    8f88:	11 24       	eor	r1, r1
    8f8a:	e8 5f       	subi	r30, 0xF8	; 248
    8f8c:	f0 4f       	sbci	r31, 0xF0	; 240
    8f8e:	44 87       	std	Z+12, r20	; 0x0c

					}

				}
				//read next delta time
				nextDeltaTime=ReadVarLen(&songPos); //Bug fix: remove divide by two 			
    8f90:	8b e6       	ldi	r24, 0x6B	; 107
    8f92:	9f e0       	ldi	r25, 0x0F	; 15
    8f94:	0e 94 ab 45 	call	0x8b56	; 0x8b56 <ReadVarLen>
    8f98:	90 93 6a 0f 	sts	0x0F6A, r25
    8f9c:	80 93 69 0f 	sts	0x0F69, r24
				currDeltaTime=0;
    8fa0:	10 92 61 0f 	sts	0x0F61, r1
    8fa4:	10 92 60 0f 	sts	0x0F60, r1
    8fa8:	02 c0       	rjmp	.+4      	; 0x8fae <ProcessMusic+0x2a2>
							}else if(c1==CONTROLER_EXPRESSION){
								tracks[channel].expressionVol=c2<<1;
							}else if(c1==CONTROLER_TREMOLO){
								tracks[channel].tremoloLevel=c2<<1;
							}else if(c1==CONTROLER_TREMOLO_RATE){
								tracks[channel].tremoloRate=c2<<1;
    8faa:	c6 e1       	ldi	r28, 0x16	; 22
    8fac:	d0 e0       	ldi	r29, 0x00	; 0


	//Process song MIDI notes
	if(playSong){
			//process all simultaneous events
			while(currDeltaTime==nextDeltaTime){
    8fae:	60 91 60 0f 	lds	r22, 0x0F60
    8fb2:	70 91 61 0f 	lds	r23, 0x0F61
    8fb6:	80 91 69 0f 	lds	r24, 0x0F69
    8fba:	90 91 6a 0f 	lds	r25, 0x0F6A
    8fbe:	68 17       	cp	r22, r24
    8fc0:	79 07       	cpc	r23, r25
    8fc2:	09 f4       	brne	.+2      	; 0x8fc6 <ProcessMusic+0x2ba>
    8fc4:	cb ce       	rjmp	.-618    	; 0x8d5c <ProcessMusic+0x50>
				nextDeltaTime=ReadVarLen(&songPos); //Bug fix: remove divide by two 			
				currDeltaTime=0;
			
			}//end while

			currDeltaTime++;
    8fc6:	6f 5f       	subi	r22, 0xFF	; 255
    8fc8:	7f 4f       	sbci	r23, 0xFF	; 255
    8fca:	70 93 61 0f 	sts	0x0F61, r23
    8fce:	60 93 60 0f 	sts	0x0F60, r22
			absoluteTime++;
    8fd2:	80 91 66 0f 	lds	r24, 0x0F66
    8fd6:	90 91 67 0f 	lds	r25, 0x0F67
    8fda:	01 96       	adiw	r24, 0x01	; 1
    8fdc:	90 93 67 0f 	sts	0x0F67, r25
    8fe0:	80 93 66 0f 	sts	0x0F66, r24
    8fe4:	02 ed       	ldi	r16, 0xD2	; 210
    8fe6:	1e e0       	ldi	r17, 0x0E	; 14
    8fe8:	c9 e0       	ldi	r28, 0x09	; 9
    8fea:	df e0       	ldi	r29, 0x0F	; 15
    8fec:	ff 24       	eor	r15, r15
					tmp-=128; //convert to unsigned

					tVol=(tracks[track].tremoloLevel*tmp)+0x100;
					tVol>>=8;
					
					uVol=(uVol*(0xff-tVol))+0x100;
    8fee:	bf ef       	ldi	r27, 0xFF	; 255
    8ff0:	cb 2e       	mov	r12, r27
    8ff2:	d1 2c       	mov	r13, r1
	// Process patches command streams & final volume
	//
	
	for(unsigned char track=0;track<CHANNELS;track++){
		//process patch command stream
		if(tracks[track].patchEnvelopeHold==false){
    8ff4:	8a 89       	ldd	r24, Y+18	; 0x12
    8ff6:	88 23       	and	r24, r24
    8ff8:	09 f0       	breq	.+2      	; 0x8ffc <ProcessMusic+0x2f0>
    8ffa:	5e c0       	rjmp	.+188    	; 0x90b8 <ProcessMusic+0x3ac>

			if(tracks[track].patchCommandStreamPos!=NULL && 
    8ffc:	8b 89       	ldd	r24, Y+19	; 0x13
    8ffe:	9c 89       	ldd	r25, Y+20	; 0x14
    9000:	89 2b       	or	r24, r25
    9002:	09 f4       	brne	.+2      	; 0x9006 <ProcessMusic+0x2fa>
    9004:	56 c0       	rjmp	.+172    	; 0x90b2 <ProcessMusic+0x3a6>
    9006:	9f 85       	ldd	r25, Y+15	; 0x0f
    9008:	8e 85       	ldd	r24, Y+14	; 0x0e
    900a:	98 17       	cp	r25, r24
    900c:	08 f0       	brcs	.+2      	; 0x9010 <ProcessMusic+0x304>
    900e:	4c c0       	rjmp	.+152    	; 0x90a8 <ProcessMusic+0x39c>
    9010:	50 c0       	rjmp	.+160    	; 0x90b2 <ProcessMusic+0x3a6>

				//process all simultaneous events
				while(tracks[track].patchCurrDeltaTime==tracks[track].patchNextDeltaTime){	
					
					//RAM Patch
					if(tracks[track].patchNo==127){
    9012:	8b 85       	ldd	r24, Y+11	; 0x0b
    9014:	2b 89       	ldd	r18, Y+19	; 0x13
    9016:	3c 89       	ldd	r19, Y+20	; 0x14
    9018:	8f 37       	cpi	r24, 0x7F	; 127
    901a:	e9 f4       	brne	.+58     	; 0x9056 <ProcessMusic+0x34a>
						c1=*(tracks[track].patchCommandStreamPos++);
    901c:	d9 01       	movw	r26, r18
    901e:	8d 91       	ld	r24, X+
    9020:	bc 8b       	std	Y+20, r27	; 0x14
    9022:	ab 8b       	std	Y+19, r26	; 0x13
						if(c1==0xff){					
    9024:	8f 3f       	cpi	r24, 0xFF	; 255
    9026:	01 f1       	breq	.+64     	; 0x9068 <ProcessMusic+0x35c>
							//end of stream!
							tracks[track].priority=0;
							tracks[track].patchCommandStreamPos=NULL;
							break;
						}else{
							c2=*(tracks[track].patchCommandStreamPos++);
    9028:	f9 01       	movw	r30, r18
    902a:	61 81       	ldd	r22, Z+1	; 0x01
    902c:	11 96       	adiw	r26, 0x01	; 1
    902e:	bc 8b       	std	Y+20, r27	; 0x14
    9030:	ab 8b       	std	Y+19, r26	; 0x13
							//invoke patch command function
							(patchCommands[c1])(track,c2);				
    9032:	e8 2f       	mov	r30, r24
    9034:	f0 e0       	ldi	r31, 0x00	; 0
    9036:	ee 0f       	add	r30, r30
    9038:	ff 1f       	adc	r31, r31
    903a:	e0 59       	subi	r30, 0x90	; 144
    903c:	ff 4f       	sbci	r31, 0xFF	; 255
    903e:	01 90       	ld	r0, Z+
    9040:	f0 81       	ld	r31, Z
    9042:	e0 2d       	mov	r30, r0
    9044:	8f 2d       	mov	r24, r15
    9046:	09 95       	icall
						}			
				
						//read next delta time
						tracks[track].patchNextDeltaTime=*(tracks[track].patchCommandStreamPos++);
    9048:	eb 89       	ldd	r30, Y+19	; 0x13
    904a:	fc 89       	ldd	r31, Y+20	; 0x14
    904c:	81 91       	ld	r24, Z+
    904e:	8e 87       	std	Y+14, r24	; 0x0e
    9050:	fc 8b       	std	Y+20, r31	; 0x14
    9052:	eb 8b       	std	Y+19, r30	; 0x13
    9054:	28 c0       	rjmp	.+80     	; 0x90a6 <ProcessMusic+0x39a>
				
					}else{
						//ROM patches
						c1=pgm_read_byte(tracks[track].patchCommandStreamPos++);
    9056:	a9 01       	movw	r20, r18
    9058:	4f 5f       	subi	r20, 0xFF	; 255
    905a:	5f 4f       	sbci	r21, 0xFF	; 255
    905c:	5c 8b       	std	Y+20, r21	; 0x14
    905e:	4b 8b       	std	Y+19, r20	; 0x13
    9060:	f9 01       	movw	r30, r18
    9062:	84 91       	lpm	r24, Z+
						if(c1==0xff){					
    9064:	8f 3f       	cpi	r24, 0xFF	; 255
    9066:	21 f4       	brne	.+8      	; 0x9070 <ProcessMusic+0x364>
							//end of stream!
							tracks[track].priority=0;
    9068:	18 82       	st	Y, r1
							tracks[track].patchCommandStreamPos=NULL;
    906a:	1c 8a       	std	Y+20, r1	; 0x14
    906c:	1b 8a       	std	Y+19, r1	; 0x13
    906e:	21 c0       	rjmp	.+66     	; 0x90b2 <ProcessMusic+0x3a6>
							break;

						}else{
							c2=pgm_read_byte(tracks[track].patchCommandStreamPos++);
    9070:	4f 5f       	subi	r20, 0xFF	; 255
    9072:	5f 4f       	sbci	r21, 0xFF	; 255
    9074:	5c 8b       	std	Y+20, r21	; 0x14
    9076:	4b 8b       	std	Y+19, r20	; 0x13
    9078:	41 50       	subi	r20, 0x01	; 1
    907a:	50 40       	sbci	r21, 0x00	; 0
    907c:	fa 01       	movw	r30, r20
    907e:	64 91       	lpm	r22, Z+
							//invoke patch command function
							( (PatchCommand)pgm_read_word(&patchCommands[c1]) )(track,c2);				
    9080:	90 e0       	ldi	r25, 0x00	; 0
    9082:	88 0f       	add	r24, r24
    9084:	99 1f       	adc	r25, r25
    9086:	80 59       	subi	r24, 0x90	; 144
    9088:	9f 4f       	sbci	r25, 0xFF	; 255
    908a:	fc 01       	movw	r30, r24
    908c:	25 91       	lpm	r18, Z+
    908e:	34 91       	lpm	r19, Z+
    9090:	8f 2d       	mov	r24, r15
    9092:	f9 01       	movw	r30, r18
    9094:	09 95       	icall
						}			
				
						//read next delta time
						tracks[track].patchNextDeltaTime=pgm_read_byte(tracks[track].patchCommandStreamPos++);
    9096:	eb 89       	ldd	r30, Y+19	; 0x13
    9098:	fc 89       	ldd	r31, Y+20	; 0x14
    909a:	31 96       	adiw	r30, 0x01	; 1
    909c:	fc 8b       	std	Y+20, r31	; 0x14
    909e:	eb 8b       	std	Y+19, r30	; 0x13
    90a0:	31 97       	sbiw	r30, 0x01	; 1
    90a2:	e4 91       	lpm	r30, Z+
    90a4:	ee 87       	std	Y+14, r30	; 0x0e
						
					}				
					tracks[track].patchCurrDeltaTime=0;	
    90a6:	1f 86       	std	Y+15, r1	; 0x0f

			if(tracks[track].patchCommandStreamPos!=NULL && 
				tracks[track].patchCurrDeltaTime>=tracks[track].patchNextDeltaTime){			

				//process all simultaneous events
				while(tracks[track].patchCurrDeltaTime==tracks[track].patchNextDeltaTime){	
    90a8:	9f 85       	ldd	r25, Y+15	; 0x0f
    90aa:	8e 85       	ldd	r24, Y+14	; 0x0e
    90ac:	98 17       	cp	r25, r24
    90ae:	09 f4       	brne	.+2      	; 0x90b2 <ProcessMusic+0x3a6>
    90b0:	b0 cf       	rjmp	.-160    	; 0x9012 <ProcessMusic+0x306>
					tracks[track].patchCurrDeltaTime=0;	

				}		
			}				
			
			tracks[track].patchCurrDeltaTime++;
    90b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    90b4:	8f 5f       	subi	r24, 0xFF	; 255
    90b6:	8f 87       	std	Y+15, r24	; 0x0f
		}
	


		if(tracks[track].patchPlaying){
    90b8:	8a 85       	ldd	r24, Y+10	; 0x0a
    90ba:	88 23       	and	r24, r24
    90bc:	19 f4       	brne	.+6      	; 0x90c4 <ProcessMusic+0x3b8>
    90be:	20 e0       	ldi	r18, 0x00	; 0
    90c0:	30 e0       	ldi	r19, 0x00	; 0
    90c2:	6b c0       	rjmp	.+214    	; 0x919a <ProcessMusic+0x48e>
		
			if(tracks[track].patchPlayingTime<0xff){
    90c4:	88 89       	ldd	r24, Y+16	; 0x10
    90c6:	8f 3f       	cpi	r24, 0xFF	; 255
    90c8:	11 f0       	breq	.+4      	; 0x90ce <ProcessMusic+0x3c2>
				tracks[track].patchPlayingTime++;
    90ca:	8f 5f       	subi	r24, 0xFF	; 255
    90cc:	88 8b       	std	Y+16, r24	; 0x10
			}

			//process final frame volume
			if(tracks[track].noteVol!=0 && tracks[track].envelopeVol!=0 && tracks[track].trackVol!=0 && masterVolume!=0){
    90ce:	9f 81       	ldd	r25, Y+7	; 0x07
    90d0:	99 23       	and	r25, r25
    90d2:	09 f4       	brne	.+2      	; 0x90d6 <ProcessMusic+0x3ca>
    90d4:	5c c0       	rjmp	.+184    	; 0x918e <ProcessMusic+0x482>
    90d6:	28 85       	ldd	r18, Y+8	; 0x08
    90d8:	22 23       	and	r18, r18
    90da:	09 f4       	brne	.+2      	; 0x90de <ProcessMusic+0x3d2>
    90dc:	58 c0       	rjmp	.+176    	; 0x918e <ProcessMusic+0x482>
    90de:	8e 81       	ldd	r24, Y+6	; 0x06
    90e0:	88 23       	and	r24, r24
    90e2:	09 f4       	brne	.+2      	; 0x90e6 <ProcessMusic+0x3da>
    90e4:	54 c0       	rjmp	.+168    	; 0x918e <ProcessMusic+0x482>
    90e6:	40 91 68 0f 	lds	r20, 0x0F68
    90ea:	44 23       	and	r20, r20
    90ec:	09 f4       	brne	.+2      	; 0x90f0 <ProcessMusic+0x3e4>
    90ee:	4f c0       	rjmp	.+158    	; 0x918e <ProcessMusic+0x482>

				uVol=(tracks[track].noteVol*tracks[track].trackVol)+0x100;
    90f0:	89 9f       	mul	r24, r25
    90f2:	c0 01       	movw	r24, r0
    90f4:	11 24       	eor	r1, r1
    90f6:	80 50       	subi	r24, 0x00	; 0
    90f8:	9f 4f       	sbci	r25, 0xFF	; 255
				uVol>>=8;
				uVol=(uVol*tracks[track].envelopeVol)+0x100;
    90fa:	89 2f       	mov	r24, r25
    90fc:	99 27       	eor	r25, r25
    90fe:	30 e0       	ldi	r19, 0x00	; 0
    9100:	b9 01       	movw	r22, r18
    9102:	86 9f       	mul	r24, r22
    9104:	90 01       	movw	r18, r0
    9106:	87 9f       	mul	r24, r23
    9108:	30 0d       	add	r19, r0
    910a:	96 9f       	mul	r25, r22
    910c:	30 0d       	add	r19, r0
    910e:	11 24       	eor	r1, r1
    9110:	20 50       	subi	r18, 0x00	; 0
    9112:	3f 4f       	sbci	r19, 0xFF	; 255
				uVol>>=8;
				uVol=(uVol*tracks[track].expressionVol)+0x100;
    9114:	23 2f       	mov	r18, r19
    9116:	33 27       	eor	r19, r19
    9118:	8d 81       	ldd	r24, Y+5	; 0x05
    911a:	90 e0       	ldi	r25, 0x00	; 0
    911c:	fc 01       	movw	r30, r24
    911e:	2e 9f       	mul	r18, r30
    9120:	c0 01       	movw	r24, r0
    9122:	2f 9f       	mul	r18, r31
    9124:	90 0d       	add	r25, r0
    9126:	3e 9f       	mul	r19, r30
    9128:	90 0d       	add	r25, r0
    912a:	11 24       	eor	r1, r1
    912c:	80 50       	subi	r24, 0x00	; 0
    912e:	9f 4f       	sbci	r25, 0xFF	; 255
				uVol>>=8;
				uVol=(uVol*masterVolume)+0x100;
    9130:	89 2f       	mov	r24, r25
    9132:	99 27       	eor	r25, r25
    9134:	24 2f       	mov	r18, r20
    9136:	30 e0       	ldi	r19, 0x00	; 0
    9138:	ac 01       	movw	r20, r24
    913a:	42 9f       	mul	r20, r18
    913c:	c0 01       	movw	r24, r0
    913e:	43 9f       	mul	r20, r19
    9140:	90 0d       	add	r25, r0
    9142:	52 9f       	mul	r21, r18
    9144:	90 0d       	add	r25, r0
    9146:	11 24       	eor	r1, r1
    9148:	80 50       	subi	r24, 0x00	; 0
    914a:	9f 4f       	sbci	r25, 0xFF	; 255
				uVol>>=8;
    914c:	29 2f       	mov	r18, r25
    914e:	33 27       	eor	r19, r19

				if(tracks[track].tremoloLevel>0){					
    9150:	8b 81       	ldd	r24, Y+3	; 0x03
    9152:	88 23       	and	r24, r24
    9154:	f1 f0       	breq	.+60     	; 0x9192 <ProcessMusic+0x486>
					tmp=pgm_read_byte(&(waves[tracks[track].tremoloPos]));
    9156:	ea 81       	ldd	r30, Y+2	; 0x02
    9158:	f0 e0       	ldi	r31, 0x00	; 0
    915a:	e0 50       	subi	r30, 0x00	; 0
    915c:	fc 47       	sbci	r31, 0x7C	; 124
    915e:	e4 91       	lpm	r30, Z+
					tmp-=128; //convert to unsigned

					tVol=(tracks[track].tremoloLevel*tmp)+0x100;
    9160:	e0 58       	subi	r30, 0x80	; 128
    9162:	e8 9f       	mul	r30, r24
    9164:	c0 01       	movw	r24, r0
    9166:	11 24       	eor	r1, r1
    9168:	80 50       	subi	r24, 0x00	; 0
    916a:	9f 4f       	sbci	r25, 0xFF	; 255
					tVol>>=8;
					
					uVol=(uVol*(0xff-tVol))+0x100;
    916c:	89 2f       	mov	r24, r25
    916e:	99 27       	eor	r25, r25
    9170:	b6 01       	movw	r22, r12
    9172:	68 1b       	sub	r22, r24
    9174:	79 0b       	sbc	r23, r25
    9176:	62 9f       	mul	r22, r18
    9178:	c0 01       	movw	r24, r0
    917a:	63 9f       	mul	r22, r19
    917c:	90 0d       	add	r25, r0
    917e:	72 9f       	mul	r23, r18
    9180:	90 0d       	add	r25, r0
    9182:	11 24       	eor	r1, r1
    9184:	80 50       	subi	r24, 0x00	; 0
    9186:	9f 4f       	sbci	r25, 0xFF	; 255
					uVol>>=8;
    9188:	29 2f       	mov	r18, r25
    918a:	33 27       	eor	r19, r19
    918c:	02 c0       	rjmp	.+4      	; 0x9192 <ProcessMusic+0x486>
    918e:	20 e0       	ldi	r18, 0x00	; 0
    9190:	30 e0       	ldi	r19, 0x00	; 0
			
			}else{
				uVol=0;
			}	

			tracks[track].tremoloPos+=tracks[track].tremoloRate;	
    9192:	8a 81       	ldd	r24, Y+2	; 0x02
    9194:	9c 81       	ldd	r25, Y+4	; 0x04
    9196:	89 0f       	add	r24, r25
    9198:	8a 83       	std	Y+2, r24	; 0x02

		}else{
			uVol=0;
		}
		
		mixer.channels.all[track].volume=(uVol&0xff);
    919a:	f8 01       	movw	r30, r16
    919c:	20 83       	st	Z, r18

	//
	// Process patches command streams & final volume
	//
	
	for(unsigned char track=0;track<CHANNELS;track++){
    919e:	f3 94       	inc	r15
    91a0:	06 5f       	subi	r16, 0xF6	; 246
    91a2:	1f 4f       	sbci	r17, 0xFF	; 255
    91a4:	66 96       	adiw	r28, 0x16	; 22
    91a6:	f4 e0       	ldi	r31, 0x04	; 4
    91a8:	ff 16       	cp	r15, r31
    91aa:	09 f0       	breq	.+2      	; 0x91ae <ProcessMusic+0x4a2>
    91ac:	23 cf       	rjmp	.-442    	; 0x8ff4 <ProcessMusic+0x2e8>
		mixer.channels.all[track].volume=(uVol&0xff);
	}



}
    91ae:	df 91       	pop	r29
    91b0:	cf 91       	pop	r28
    91b2:	1f 91       	pop	r17
    91b4:	0f 91       	pop	r16
    91b6:	ff 90       	pop	r15
    91b8:	df 90       	pop	r13
    91ba:	cf 90       	pop	r12
    91bc:	08 95       	ret

000091be <TriggerFx>:

/* Trigger a sound effect.
 * Method allocates the channel based on priority.
 * Retrig: if this fx if already playing on a track, reuse same track.
 */
void TriggerFx(unsigned char patch,unsigned char volume,bool retrig){
    91be:	1f 93       	push	r17
    91c0:	cf 93       	push	r28
    91c2:	df 93       	push	r29
    91c4:	58 2f       	mov	r21, r24
	unsigned char channel;
	
	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
    91c6:	89 e0       	ldi	r24, 0x09	; 9
    91c8:	58 9f       	mul	r21, r24
    91ca:	c0 01       	movw	r24, r0
    91cc:	11 24       	eor	r1, r1
    91ce:	20 91 62 0f 	lds	r18, 0x0F62
    91d2:	30 91 63 0f 	lds	r19, 0x0F63
    91d6:	28 0f       	add	r18, r24
    91d8:	39 1f       	adc	r19, r25
    91da:	c9 01       	movw	r24, r18
    91dc:	03 96       	adiw	r24, 0x03	; 3
    91de:	fc 01       	movw	r30, r24
    91e0:	a5 91       	lpm	r26, Z+
    91e2:	b4 91       	lpm	r27, Z+
	unsigned char type=(unsigned char)pgm_read_byte(&(patchPointers[patch].type));
    91e4:	f9 01       	movw	r30, r18
    91e6:	84 91       	lpm	r24, Z+

	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || type==2){
    91e8:	81 50       	subi	r24, 0x01	; 1
    91ea:	82 30       	cpi	r24, 0x02	; 2
    91ec:	10 f4       	brcc	.+4      	; 0x91f2 <TriggerFx+0x34>
    91ee:	13 e0       	ldi	r17, 0x03	; 3
    91f0:	1d c0       	rjmp	.+58     	; 0x922c <TriggerFx+0x6e>
		//noise or PCM channel fx
		channel=3;
	}else if(tracks[1].priority==0 || (tracks[1].fxPatchNo==patch && tracks[1].priority>0 && retrig==true)){ //fx already playing
    91f2:	80 91 1f 0f 	lds	r24, 0x0F1F
    91f6:	88 23       	and	r24, r24
    91f8:	b1 f0       	breq	.+44     	; 0x9226 <TriggerFx+0x68>
    91fa:	80 91 2b 0f 	lds	r24, 0x0F2B
    91fe:	85 17       	cp	r24, r21
    9200:	11 f4       	brne	.+4      	; 0x9206 <TriggerFx+0x48>
    9202:	44 23       	and	r20, r20
    9204:	81 f4       	brne	.+32     	; 0x9226 <TriggerFx+0x68>
		channel=1;
	}else if(tracks[2].priority==0 || (tracks[2].fxPatchNo==patch && tracks[2].priority>0 && retrig==true)){ //fx already playing				
    9206:	80 91 35 0f 	lds	r24, 0x0F35
    920a:	88 23       	and	r24, r24
    920c:	71 f0       	breq	.+28     	; 0x922a <TriggerFx+0x6c>
    920e:	80 91 41 0f 	lds	r24, 0x0F41
    9212:	85 17       	cp	r24, r21
    9214:	11 f4       	brne	.+4      	; 0x921a <TriggerFx+0x5c>
    9216:	44 23       	and	r20, r20
    9218:	41 f4       	brne	.+16     	; 0x922a <TriggerFx+0x6c>
		channel=2;
	}else{
		//both channels have fx playing, use the oldest one
		if(tracks[1].patchPlayingTime>tracks[2].patchPlayingTime){
    921a:	90 91 2f 0f 	lds	r25, 0x0F2F
    921e:	80 91 45 0f 	lds	r24, 0x0F45
    9222:	89 17       	cp	r24, r25
    9224:	10 f4       	brcc	.+4      	; 0x922a <TriggerFx+0x6c>
    9226:	11 e0       	ldi	r17, 0x01	; 1
    9228:	01 c0       	rjmp	.+2      	; 0x922c <TriggerFx+0x6e>
    922a:	12 e0       	ldi	r17, 0x02	; 2
	tracks[channel].expressionVol=DEFAULT_EXPRESSION_VOL;
	tracks[channel].note=80; //default 
*/


	tracks[channel].patchNextDeltaTime=pgm_read_byte(pos++); //pgm_read_byte(tracks[channel].patchCommandStreamPos++);
    922c:	21 2f       	mov	r18, r17
    922e:	30 e0       	ldi	r19, 0x00	; 0
    9230:	fd 01       	movw	r30, r26
    9232:	44 91       	lpm	r20, Z+
    9234:	86 e1       	ldi	r24, 0x16	; 22
    9236:	90 e0       	ldi	r25, 0x00	; 0
    9238:	28 9f       	mul	r18, r24
    923a:	e0 01       	movw	r28, r0
    923c:	29 9f       	mul	r18, r25
    923e:	d0 0d       	add	r29, r0
    9240:	38 9f       	mul	r19, r24
    9242:	d0 0d       	add	r29, r0
    9244:	11 24       	eor	r1, r1
    9246:	c8 5f       	subi	r28, 0xF8	; 248
    9248:	d0 4f       	sbci	r29, 0xF0	; 240
    924a:	4f 87       	std	Y+15, r20	; 0x0f
	tracks[channel].patchCommandStreamPos=pos;
    924c:	11 96       	adiw	r26, 0x01	; 1
    924e:	bd 8b       	std	Y+21, r27	; 0x15
    9250:	ac 8b       	std	Y+20, r26	; 0x14
	tracks[channel].fxPatchNo=patch;
    9252:	5d 87       	std	Y+13, r21	; 0x0d
	tracks[channel].priority=1;	
    9254:	21 e0       	ldi	r18, 0x01	; 1
    9256:	29 83       	std	Y+1, r18	; 0x01
	SetTriggerCommonValues(&tracks[channel],volume,80);
    9258:	e6 e1       	ldi	r30, 0x16	; 22
    925a:	1e 9f       	mul	r17, r30
    925c:	f0 01       	movw	r30, r0
    925e:	11 24       	eor	r1, r1
    9260:	e8 5f       	subi	r30, 0xF8	; 248
    9262:	f0 4f       	sbci	r31, 0xF0	; 240



void SetTriggerCommonValues(struct TrackStruct* track, u8 volume, u8 note)  {

	track->patchCurrDeltaTime=0;
    9264:	10 8a       	std	Z+16, r1	; 0x10
	track->envelopeStep=0; 
    9266:	12 86       	std	Z+10, r1	; 0x0a
	track->envelopeVol=0xff; 
    9268:	8f ef       	ldi	r24, 0xFF	; 255
    926a:	81 87       	std	Z+9, r24	; 0x09
	track->noteVol=volume;
    926c:	60 87       	std	Z+8, r22	; 0x08
	track->patchEnvelopeHold=false;
    926e:	13 8a       	std	Z+19, r1	; 0x13
	track->patchPlayingTime=0;
    9270:	11 8a       	std	Z+17, r1	; 0x11
	track->patchPlaying=true;
    9272:	23 87       	std	Z+11, r18	; 0x0b
	track->patchWave=0;
    9274:	12 8a       	std	Z+18, r1	; 0x12
	track->tremoloLevel=0;
    9276:	14 82       	std	Z+4, r1	; 0x04
	track->expressionVol=DEFAULT_EXPRESSION_VOL;
    9278:	86 83       	std	Z+6, r24	; 0x06
	track->note=note;
    927a:	80 e5       	ldi	r24, 0x50	; 80
    927c:	82 83       	std	Z+2, r24	; 0x02
	tracks[channel].priority=1;	
	SetTriggerCommonValues(&tracks[channel],volume,80);


	#if MIXER_CHAN4_TYPE == 0
		if(channel==3){
    927e:	13 30       	cpi	r17, 0x03	; 3
    9280:	49 f4       	brne	.+18     	; 0x9294 <TriggerFx+0xd6>
			mixer.channels.type.noise.barrel=0x0101;				
    9282:	81 e0       	ldi	r24, 0x01	; 1
    9284:	91 e0       	ldi	r25, 0x01	; 1
    9286:	90 93 f3 0e 	sts	0x0EF3, r25
    928a:	80 93 f2 0e 	sts	0x0EF2, r24
			mixer.channels.type.noise.params=1; //default 
    928e:	20 93 f1 0e 	sts	0x0EF1, r18
    9292:	08 c0       	rjmp	.+16     	; 0x92a4 <TriggerFx+0xe6>
		}else{
			SetMixerNote(channel,tracks[channel].note);
    9294:	81 2f       	mov	r24, r17
    9296:	6a 81       	ldd	r22, Y+2	; 0x02
    9298:	0e 94 00 40 	call	0x8000	; 0x8000 <SetMixerNote>
			SetMixerWave(channel,tracks[channel].patchWave);
    929c:	81 2f       	mov	r24, r17
    929e:	6a 89       	ldd	r22, Y+18	; 0x12
    92a0:	0e 94 1f 40 	call	0x803e	; 0x803e <SetMixerWave>

		SetMixerNote(channel,tracks[channel].note);
		
	#endif

}
    92a4:	df 91       	pop	r29
    92a6:	cf 91       	pop	r28
    92a8:	1f 91       	pop	r17
    92aa:	08 95       	ret

000092ac <PatchCommand08>:

/*
* Command 08: Set Note/Pitch
*/

void PatchCommand08(unsigned char track, char param){
    92ac:	ff 92       	push	r15
    92ae:	0f 93       	push	r16
    92b0:	1f 93       	push	r17
    92b2:	08 2f       	mov	r16, r24
    92b4:	f6 2e       	mov	r15, r22
	SetMixerNote(track,param);
    92b6:	0e 94 00 40 	call	0x8000	; 0x8000 <SetMixerNote>
	tracks[track].note=param;
    92ba:	10 e0       	ldi	r17, 0x00	; 0
    92bc:	86 e1       	ldi	r24, 0x16	; 22
    92be:	90 e0       	ldi	r25, 0x00	; 0
    92c0:	08 9f       	mul	r16, r24
    92c2:	f0 01       	movw	r30, r0
    92c4:	09 9f       	mul	r16, r25
    92c6:	f0 0d       	add	r31, r0
    92c8:	18 9f       	mul	r17, r24
    92ca:	f0 0d       	add	r31, r0
    92cc:	11 24       	eor	r1, r1
    92ce:	e8 5f       	subi	r30, 0xF8	; 248
    92d0:	f0 4f       	sbci	r31, 0xF0	; 240
    92d2:	f2 82       	std	Z+2, r15	; 0x02
}
    92d4:	1f 91       	pop	r17
    92d6:	0f 91       	pop	r16
    92d8:	ff 90       	pop	r15
    92da:	08 95       	ret

000092dc <PatchCommand04>:
	tracks[track].note+=param;
	SetMixerNote(track,tracks[track].note);
}/*
* Command 04: Note down * param
*/
void PatchCommand04(unsigned char track, char param){
    92dc:	96 2f       	mov	r25, r22
	tracks[track].note-=param;
    92de:	48 2f       	mov	r20, r24
    92e0:	50 e0       	ldi	r21, 0x00	; 0
    92e2:	26 e1       	ldi	r18, 0x16	; 22
    92e4:	30 e0       	ldi	r19, 0x00	; 0
    92e6:	42 9f       	mul	r20, r18
    92e8:	f0 01       	movw	r30, r0
    92ea:	43 9f       	mul	r20, r19
    92ec:	f0 0d       	add	r31, r0
    92ee:	52 9f       	mul	r21, r18
    92f0:	f0 0d       	add	r31, r0
    92f2:	11 24       	eor	r1, r1
    92f4:	e8 5f       	subi	r30, 0xF8	; 248
    92f6:	f0 4f       	sbci	r31, 0xF0	; 240
    92f8:	62 81       	ldd	r22, Z+2	; 0x02
    92fa:	69 1b       	sub	r22, r25
    92fc:	62 83       	std	Z+2, r22	; 0x02
	SetMixerNote(track,tracks[track].note);
    92fe:	0e 94 00 40 	call	0x8000	; 0x8000 <SetMixerNote>
}
    9302:	08 95       	ret

00009304 <PatchCommand03>:
}
/*
* Command 03: Note up * param
*/
void PatchCommand03(unsigned char track, char param){
	tracks[track].note+=param;
    9304:	48 2f       	mov	r20, r24
    9306:	50 e0       	ldi	r21, 0x00	; 0
    9308:	26 e1       	ldi	r18, 0x16	; 22
    930a:	30 e0       	ldi	r19, 0x00	; 0
    930c:	42 9f       	mul	r20, r18
    930e:	f0 01       	movw	r30, r0
    9310:	43 9f       	mul	r20, r19
    9312:	f0 0d       	add	r31, r0
    9314:	52 9f       	mul	r21, r18
    9316:	f0 0d       	add	r31, r0
    9318:	11 24       	eor	r1, r1
    931a:	e8 5f       	subi	r30, 0xF8	; 248
    931c:	f0 4f       	sbci	r31, 0xF0	; 240
    931e:	92 81       	ldd	r25, Z+2	; 0x02
    9320:	69 0f       	add	r22, r25
    9322:	62 83       	std	Z+2, r22	; 0x02
	SetMixerNote(track,tracks[track].note);
    9324:	0e 94 00 40 	call	0x8000	; 0x8000 <SetMixerNote>
}/*
    9328:	08 95       	ret

0000932a <RestoreBackground>:
	unsigned char free_tile_index;

	void RestoreBackground(){
		unsigned char i,j;
		unsigned int a;
		for(i=0;i<free_tile_index;i++){			
    932a:	30 91 72 0f 	lds	r19, 0x0F72
    932e:	20 e0       	ldi	r18, 0x00	; 0
    9330:	10 c0       	rjmp	.+32     	; 0x9352 <RestoreBackground+0x28>
			a=ram_tiles_restore[i].addr;
    9332:	82 2f       	mov	r24, r18
    9334:	90 e0       	ldi	r25, 0x00	; 0
			j=ram_tiles_restore[i].tileIndex;
			vram[a]=j;
    9336:	fc 01       	movw	r30, r24
    9338:	ee 0f       	add	r30, r30
    933a:	ff 1f       	adc	r31, r31
    933c:	e8 0f       	add	r30, r24
    933e:	f9 1f       	adc	r31, r25
    9340:	e3 5d       	subi	r30, 0xD3	; 211
    9342:	f3 4f       	sbci	r31, 0xF3	; 243
    9344:	a0 81       	ld	r26, Z
    9346:	b1 81       	ldd	r27, Z+1	; 0x01
    9348:	a0 5e       	subi	r26, 0xE0	; 224
    934a:	be 4f       	sbci	r27, 0xFE	; 254
    934c:	82 81       	ldd	r24, Z+2	; 0x02
    934e:	8c 93       	st	X, r24
	unsigned char free_tile_index;

	void RestoreBackground(){
		unsigned char i,j;
		unsigned int a;
		for(i=0;i<free_tile_index;i++){			
    9350:	2f 5f       	subi	r18, 0xFF	; 255
    9352:	23 17       	cp	r18, r19
    9354:	70 f3       	brcs	.-36     	; 0x9332 <RestoreBackground+0x8>
			a=ram_tiles_restore[i].addr;
			j=ram_tiles_restore[i].tileIndex;
			vram[a]=j;
			//vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
		}	
	}
    9356:	08 95       	ret

00009358 <PalletBlitSprite>:

extern unsigned char GameSprites;

void PalletBlitSprite(unsigned char spriteNo,unsigned char ramTileNo,unsigned int xy,unsigned int dxdy){
    9358:	a0 e0       	ldi	r26, 0x00	; 0
    935a:	b0 e0       	ldi	r27, 0x00	; 0
    935c:	e2 eb       	ldi	r30, 0xB2	; 178
    935e:	f9 e4       	ldi	r31, 0x49	; 73
    9360:	0c 94 b3 70 	jmp	0xe166	; 0xe166 <__prologue_saves__+0x14>
    9364:	05 2f       	mov	r16, r21
    9366:	13 2f       	mov	r17, r19

          u8 *src=&GameSprites+(sprites[spriteNo].tileIndex*(8*TILE_WIDTH));
    9368:	90 e0       	ldi	r25, 0x00	; 0
    936a:	fc 01       	movw	r30, r24
    936c:	ee 0f       	add	r30, r30
    936e:	ff 1f       	adc	r31, r31
    9370:	ee 0f       	add	r30, r30
    9372:	ff 1f       	adc	r31, r31
    9374:	e8 0f       	add	r30, r24
    9376:	f9 1f       	adc	r31, r25
    9378:	ee 52       	subi	r30, 0x2E	; 46
    937a:	fc 4f       	sbci	r31, 0xFC	; 252
    937c:	a2 81       	ldd	r26, Z+2	; 0x02
    937e:	b3 81       	ldd	r27, Z+3	; 0x03
    9380:	96 e0       	ldi	r25, 0x06	; 6
    9382:	aa 0f       	add	r26, r26
    9384:	bb 1f       	adc	r27, r27
    9386:	9a 95       	dec	r25
    9388:	e1 f7       	brne	.-8      	; 0x9382 <PalletBlitSprite+0x2a>
    938a:	ab 51       	subi	r26, 0x1B	; 27
    938c:	b0 4c       	sbci	r27, 0xC0	; 192
          u8 *dest=ram_tiles+(ramTileNo*TILE_HEIGHT*TILE_WIDTH);
    938e:	70 e0       	ldi	r23, 0x00	; 0
    9390:	86 e0       	ldi	r24, 0x06	; 6
    9392:	66 0f       	add	r22, r22
    9394:	77 1f       	adc	r23, r23
    9396:	8a 95       	dec	r24
    9398:	e1 f7       	brne	.-8      	; 0x9392 <PalletBlitSprite+0x3a>
    939a:	63 59       	subi	r22, 0x93	; 147
    939c:	7b 4f       	sbci	r23, 0xFB	; 251

          u8 flags=sprites[spriteNo].flags;
    939e:	34 81       	ldd	r19, Z+4	; 0x04
          u8 y=xy>>8,x=xy&0xff,dy=dxdy>>8,dx=dxdy&0xff;
          u8 xdiffSrc,xdiffDest,ydiff,x2,y2,px;
		  u8 palletoff = (flags & 0b11111100)>>2;
    93a0:	f3 2e       	mov	r15, r19
    93a2:	f6 94       	lsr	r15
    93a4:	f6 94       	lsr	r15

          if(x==0){
    93a6:	44 23       	and	r20, r20
    93a8:	61 f4       	brne	.+24     	; 0x93c2 <PalletBlitSprite+0x6a>
             dest+=dx;
    93aa:	62 0f       	add	r22, r18
    93ac:	71 1d       	adc	r23, r1
             xdiffDest=dx;
             xdiffSrc=dx;
             if(flags&SPRITE_FLIP_X){
    93ae:	30 fd       	sbrc	r19, 0
    93b0:	03 c0       	rjmp	.+6      	; 0x93b8 <PalletBlitSprite+0x60>
    93b2:	42 2f       	mov	r20, r18
    93b4:	52 2f       	mov	r21, r18
    93b6:	12 c0       	rjmp	.+36     	; 0x93dc <PalletBlitSprite+0x84>
                src+=(TILE_WIDTH-1);
    93b8:	17 96       	adiw	r26, 0x07	; 7
                xdiffSrc=16-dx;
    93ba:	40 e1       	ldi	r20, 0x10	; 16
    93bc:	42 1b       	sub	r20, r18
    93be:	52 2f       	mov	r21, r18
    93c0:	0d c0       	rjmp	.+26     	; 0x93dc <PalletBlitSprite+0x84>
             }
          }else{
             xdiffDest=(TILE_WIDTH-dx);
    93c2:	58 e0       	ldi	r21, 0x08	; 8
    93c4:	52 1b       	sub	r21, r18

             if((flags&SPRITE_FLIP_X)==0){
    93c6:	30 fd       	sbrc	r19, 0
    93c8:	04 c0       	rjmp	.+8      	; 0x93d2 <PalletBlitSprite+0x7a>
                xdiffSrc=xdiffDest;
                src+=xdiffDest;
    93ca:	a5 0f       	add	r26, r21
    93cc:	b1 1d       	adc	r27, r1
    93ce:	45 2f       	mov	r20, r21
    93d0:	05 c0       	rjmp	.+10     	; 0x93dc <PalletBlitSprite+0x84>
             }else{
                xdiffSrc=TILE_WIDTH+dx;
    93d2:	42 2f       	mov	r20, r18
    93d4:	48 5f       	subi	r20, 0xF8	; 248
                src+=dx;
    93d6:	a2 0f       	add	r26, r18
    93d8:	b1 1d       	adc	r27, r1
                src-=1;
    93da:	11 97       	sbiw	r26, 0x01	; 1
    93dc:	e1 2f       	mov	r30, r17
    93de:	f0 e0       	ldi	r31, 0x00	; 0
             }
          }

          if(y==0){
    93e0:	00 23       	and	r16, r16
    93e2:	49 f4       	brne	.+18     	; 0x93f6 <PalletBlitSprite+0x9e>
             dest+=(dy*TILE_WIDTH);
    93e4:	03 e0       	ldi	r16, 0x03	; 3
    93e6:	ee 0f       	add	r30, r30
    93e8:	ff 1f       	adc	r31, r31
    93ea:	0a 95       	dec	r16
    93ec:	e1 f7       	brne	.-8      	; 0x93e6 <PalletBlitSprite+0x8e>
    93ee:	6e 0f       	add	r22, r30
    93f0:	7f 1f       	adc	r23, r31
    93f2:	91 2f       	mov	r25, r17
    93f4:	35 c0       	rjmp	.+106    	; 0x9460 <PalletBlitSprite+0x108>
             ydiff=dy;
          }else{
             src+=((8-dy)*TILE_WIDTH);
    93f6:	88 e0       	ldi	r24, 0x08	; 8
    93f8:	90 e0       	ldi	r25, 0x00	; 0
    93fa:	8e 1b       	sub	r24, r30
    93fc:	9f 0b       	sbc	r25, r31
    93fe:	e3 e0       	ldi	r30, 0x03	; 3
    9400:	88 0f       	add	r24, r24
    9402:	99 1f       	adc	r25, r25
    9404:	ea 95       	dec	r30
    9406:	e1 f7       	brne	.-8      	; 0x9400 <PalletBlitSprite+0xa8>
    9408:	a8 0f       	add	r26, r24
    940a:	b9 1f       	adc	r27, r25
             ydiff=(8-dy);
    940c:	98 e0       	ldi	r25, 0x08	; 8
    940e:	91 1b       	sub	r25, r17
    9410:	27 c0       	rjmp	.+78     	; 0x9460 <PalletBlitSprite+0x108>
          }

          for(y2=ydiff;y2<TILE_HEIGHT;y2++){
             for(x2=xdiffDest;x2<TILE_WIDTH;x2++){

                if(flags&SPRITE_FLIP_X){
    9412:	21 15       	cp	r18, r1
    9414:	31 05       	cpc	r19, r1
    9416:	69 f0       	breq	.+26     	; 0x9432 <PalletBlitSprite+0xda>

                   px=pgm_read_byte(src--);
    9418:	fd 01       	movw	r30, r26
    941a:	84 91       	lpm	r24, Z+
                   if(px){//px!=TRANSLUCENT_COLOR){
    941c:	88 23       	and	r24, r24
    941e:	39 f0       	breq	.+14     	; 0x942e <PalletBlitSprite+0xd6>
                      *dest=pgm_read_byte(&pallet[px+palletoff]);
    9420:	f8 01       	movw	r30, r16
    9422:	e8 0f       	add	r30, r24
    9424:	f1 1d       	adc	r31, r1
    9426:	ee 56       	subi	r30, 0x6E	; 110
    9428:	ff 4f       	sbci	r31, 0xFF	; 255
    942a:	e4 91       	lpm	r30, Z+
    942c:	e8 83       	st	Y, r30
          for(y2=ydiff;y2<TILE_HEIGHT;y2++){
             for(x2=xdiffDest;x2<TILE_WIDTH;x2++){

                if(flags&SPRITE_FLIP_X){

                   px=pgm_read_byte(src--);
    942e:	11 97       	sbiw	r26, 0x01	; 1
    9430:	0c c0       	rjmp	.+24     	; 0x944a <PalletBlitSprite+0xf2>
                      *dest=pgm_read_byte(&pallet[px+palletoff]);
                   }
                   dest++;

                }else{
                   px=pgm_read_byte(src++);
    9432:	fd 01       	movw	r30, r26
    9434:	84 91       	lpm	r24, Z+
                   if(px){//(px!=TRANSLUCENT_COLOR){
    9436:	88 23       	and	r24, r24
    9438:	39 f0       	breq	.+14     	; 0x9448 <PalletBlitSprite+0xf0>
                      *dest=pgm_read_byte(&pallet[px+palletoff]);//*dest=px;
    943a:	f8 01       	movw	r30, r16
    943c:	e8 0f       	add	r30, r24
    943e:	f1 1d       	adc	r31, r1
    9440:	ee 56       	subi	r30, 0x6E	; 110
    9442:	ff 4f       	sbci	r31, 0xFF	; 255
    9444:	e4 91       	lpm	r30, Z+
    9446:	e8 83       	st	Y, r30
                      *dest=pgm_read_byte(&pallet[px+palletoff]);
                   }
                   dest++;

                }else{
                   px=pgm_read_byte(src++);
    9448:	11 96       	adiw	r26, 0x01	; 1
             src+=((8-dy)*TILE_WIDTH);
             ydiff=(8-dy);
          }

          for(y2=ydiff;y2<TILE_HEIGHT;y2++){
             for(x2=xdiffDest;x2<TILE_WIDTH;x2++){
    944a:	4f 5f       	subi	r20, 0xFF	; 255
    944c:	21 96       	adiw	r28, 0x01	; 1
    944e:	48 30       	cpi	r20, 0x08	; 8
    9450:	00 f3       	brcs	.-64     	; 0x9412 <PalletBlitSprite+0xba>
                      *dest=pgm_read_byte(&pallet[px+palletoff]);//*dest=px;
                   }
                   dest++;
                }
             }
             src+=xdiffSrc;
    9452:	ac 0d       	add	r26, r12
    9454:	bd 1d       	adc	r27, r13
             dest+=xdiffDest;
    9456:	be 01       	movw	r22, r28
    9458:	6e 0d       	add	r22, r14
    945a:	7f 1d       	adc	r23, r15
          }else{
             src+=((8-dy)*TILE_WIDTH);
             ydiff=(8-dy);
          }

          for(y2=ydiff;y2<TILE_HEIGHT;y2++){
    945c:	9f 5f       	subi	r25, 0xFF	; 255
    945e:	0a c0       	rjmp	.+20     	; 0x9474 <PalletBlitSprite+0x11c>
             for(x2=xdiffDest;x2<TILE_WIDTH;x2++){

                if(flags&SPRITE_FLIP_X){
    9460:	23 2f       	mov	r18, r19
    9462:	30 e0       	ldi	r19, 0x00	; 0
    9464:	21 70       	andi	r18, 0x01	; 1
    9466:	30 70       	andi	r19, 0x00	; 0
                   dest++;

                }else{
                   px=pgm_read_byte(src++);
                   if(px){//(px!=TRANSLUCENT_COLOR){
                      *dest=pgm_read_byte(&pallet[px+palletoff]);//*dest=px;
    9468:	0f 2d       	mov	r16, r15
    946a:	10 e0       	ldi	r17, 0x00	; 0
                   }
                   dest++;
                }
             }
             src+=xdiffSrc;
    946c:	c4 2e       	mov	r12, r20
    946e:	dd 24       	eor	r13, r13
             dest+=xdiffDest;
    9470:	e5 2e       	mov	r14, r21
    9472:	ff 24       	eor	r15, r15
          }else{
             src+=((8-dy)*TILE_WIDTH);
             ydiff=(8-dy);
          }

          for(y2=ydiff;y2<TILE_HEIGHT;y2++){
    9474:	98 30       	cpi	r25, 0x08	; 8
    9476:	18 f4       	brcc	.+6      	; 0x947e <PalletBlitSprite+0x126>
    9478:	eb 01       	movw	r28, r22
    947a:	45 2f       	mov	r20, r21
    947c:	e8 cf       	rjmp	.-48     	; 0x944e <PalletBlitSprite+0xf6>
                }
             }
             src+=xdiffSrc;
             dest+=xdiffDest;
          }
       }
    947e:	cd b7       	in	r28, 0x3d	; 61
    9480:	de b7       	in	r29, 0x3e	; 62
    9482:	e8 e0       	ldi	r30, 0x08	; 8
    9484:	0c 94 cf 70 	jmp	0xe19e	; 0xe19e <__epilogue_restores__+0x14>

00009488 <InitializeVideoMode>:

	}


	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){
    9488:	e2 ed       	ldi	r30, 0xD2	; 210
    948a:	f3 e0       	ldi	r31, 0x03	; 3

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
			sprites[i].x=(SCREEN_TILES_H*TILE_WIDTH);		
    948c:	80 ef       	ldi	r24, 0xF0	; 240
    948e:	80 83       	st	Z, r24
    9490:	35 96       	adiw	r30, 0x05	; 5

	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
    9492:	94 e0       	ldi	r25, 0x04	; 4
    9494:	ed 36       	cpi	r30, 0x6D	; 109
    9496:	f9 07       	cpc	r31, r25
    9498:	d1 f7       	brne	.-12     	; 0x948e <InitializeVideoMode+0x6>
			sprites[i].x=(SCREEN_TILES_H*TILE_WIDTH);		
		}

	}
    949a:	08 95       	ret

0000949c <FadeIn>:
	}
	
	
}

void FadeIn(unsigned char speed,bool blocking){
    949c:	98 2f       	mov	r25, r24
	if(speed==0){
    949e:	88 23       	and	r24, r24
    94a0:	19 f4       	brne	.+6      	; 0x94a8 <FadeIn+0xc>
		DDRC=0xff;
    94a2:	8f ef       	ldi	r24, 0xFF	; 255
    94a4:	87 b9       	out	0x07, r24	; 7
    94a6:	08 95       	ret
		return;
	}
	fadeStep=1;
    94a8:	81 e0       	ldi	r24, 0x01	; 1
    94aa:	80 93 75 0f 	sts	0x0F75, r24
	fadeDir=1;
    94ae:	80 93 71 0f 	sts	0x0F71, r24
char fadeDir;
bool volatile fadeActive;


void doFade(unsigned char speed,bool blocking){
	fadeSpeed=speed;
    94b2:	90 93 70 0f 	sts	0x0F70, r25
	currFadeFrame=0;
    94b6:	10 92 74 0f 	sts	0x0F74, r1
	fadeActive=true;
    94ba:	80 93 73 0f 	sts	0x0F73, r24
		
	if(blocking){
    94be:	66 23       	and	r22, r22
    94c0:	21 f0       	breq	.+8      	; 0x94ca <FadeIn+0x2e>
		while(fadeActive==true);
    94c2:	80 91 73 0f 	lds	r24, 0x0F73
    94c6:	88 23       	and	r24, r24
    94c8:	e1 f7       	brne	.-8      	; 0x94c2 <FadeIn+0x26>
    94ca:	08 95       	ret

000094cc <FadeOut>:
	fadeStep=1;
	fadeDir=1;
	doFade(speed,blocking);
}

void FadeOut(unsigned char speed,bool blocking){
    94cc:	98 2f       	mov	r25, r24
	if(speed==0){
    94ce:	88 23       	and	r24, r24
    94d0:	11 f4       	brne	.+4      	; 0x94d6 <FadeOut+0xa>
		DDRC=0;
    94d2:	17 b8       	out	0x07, r1	; 7
    94d4:	08 95       	ret
		return;
	}
	
	fadeStep=FADER_STEPS;
    94d6:	8c e0       	ldi	r24, 0x0C	; 12
    94d8:	80 93 75 0f 	sts	0x0F75, r24
	fadeDir=-1;
    94dc:	8f ef       	ldi	r24, 0xFF	; 255
    94de:	80 93 71 0f 	sts	0x0F71, r24
char fadeDir;
bool volatile fadeActive;


void doFade(unsigned char speed,bool blocking){
	fadeSpeed=speed;
    94e2:	90 93 70 0f 	sts	0x0F70, r25
	currFadeFrame=0;
    94e6:	10 92 74 0f 	sts	0x0F74, r1
	fadeActive=true;
    94ea:	81 e0       	ldi	r24, 0x01	; 1
    94ec:	80 93 73 0f 	sts	0x0F73, r24
		
	if(blocking){
    94f0:	66 23       	and	r22, r22
    94f2:	21 f0       	breq	.+8      	; 0x94fc <FadeOut+0x30>
		while(fadeActive==true);
    94f4:	80 91 73 0f 	lds	r24, 0x0F73
    94f8:	88 23       	and	r24, r24
    94fa:	e1 f7       	brne	.-8      	; 0x94f4 <FadeOut+0x28>
    94fc:	08 95       	ret

000094fe <ProcessFading>:
}


//called by the kernel at each field end
void ProcessFading(){
	if(fadeActive==true){
    94fe:	80 91 73 0f 	lds	r24, 0x0F73
    9502:	88 23       	and	r24, r24
    9504:	f9 f0       	breq	.+62     	; 0x9544 <ProcessFading+0x46>
		if(currFadeFrame==0){
    9506:	80 91 74 0f 	lds	r24, 0x0F74
    950a:	88 23       	and	r24, r24
    950c:	c1 f4       	brne	.+48     	; 0x953e <ProcessFading+0x40>
			currFadeFrame=fadeSpeed;
    950e:	80 91 70 0f 	lds	r24, 0x0F70
    9512:	80 93 74 0f 	sts	0x0F74, r24
			DDRC = pgm_read_byte(&fader[fadeStep-1]);
    9516:	80 91 75 0f 	lds	r24, 0x0F75
    951a:	e8 2f       	mov	r30, r24
    951c:	f0 e0       	ldi	r31, 0x00	; 0
    951e:	eb 57       	subi	r30, 0x7B	; 123
    9520:	ff 4f       	sbci	r31, 0xFF	; 255
    9522:	e4 91       	lpm	r30, Z+
    9524:	e7 b9       	out	0x07, r30	; 7
			fadeStep+=fadeDir;
    9526:	90 91 71 0f 	lds	r25, 0x0F71
    952a:	98 0f       	add	r25, r24
    952c:	90 93 75 0f 	sts	0x0F75, r25
			if(fadeStep==0 || fadeStep==(FADER_STEPS+1)){
    9530:	99 23       	and	r25, r25
    9532:	11 f0       	breq	.+4      	; 0x9538 <ProcessFading+0x3a>
    9534:	9d 30       	cpi	r25, 0x0D	; 13
    9536:	31 f4       	brne	.+12     	; 0x9544 <ProcessFading+0x46>
				fadeActive=false;
    9538:	10 92 73 0f 	sts	0x0F73, r1
    953c:	08 95       	ret
			}
		}else{
			currFadeFrame--;
    953e:	81 50       	subi	r24, 0x01	; 1
    9540:	80 93 74 0f 	sts	0x0F74, r24
    9544:	08 95       	ret

00009546 <WaitVsync>:

}


//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
    9546:	0f 93       	push	r16
    9548:	1f 93       	push	r17
    954a:	cf 93       	push	r28
    954c:	df 93       	push	r29
    954e:	8c 01       	movw	r16, r24
    9550:	c0 e0       	ldi	r28, 0x00	; 0
    9552:	d0 e0       	ldi	r29, 0x00	; 0
    9554:	07 c0       	rjmp	.+14     	; 0x9564 <WaitVsync+0x1e>
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
		while(!GetVsyncFlag());
    9556:	0e 94 98 44 	call	0x8930	; 0x8930 <GetVsyncFlag>
    955a:	88 23       	and	r24, r24
    955c:	e1 f3       	breq	.-8      	; 0x9556 <WaitVsync+0x10>
		ClearVsyncFlag();		
    955e:	0e 94 9b 44 	call	0x8936	; 0x8936 <ClearVsyncFlag>

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    9562:	21 96       	adiw	r28, 0x01	; 1
    9564:	c0 17       	cp	r28, r16
    9566:	d1 07       	cpc	r29, r17
    9568:	b4 f3       	brlt	.-20     	; 0x9556 <WaitVsync+0x10>
		while(!GetVsyncFlag());
		ClearVsyncFlag();		
	}
}
    956a:	df 91       	pop	r29
    956c:	cf 91       	pop	r28
    956e:	1f 91       	pop	r17
    9570:	0f 91       	pop	r16
    9572:	08 95       	ret

00009574 <ProcessSprites>:
       }




	void ProcessSprites(){
    9574:	a7 e0       	ldi	r26, 0x07	; 7
    9576:	b0 e0       	ldi	r27, 0x00	; 0
    9578:	e0 ec       	ldi	r30, 0xC0	; 192
    957a:	fa e4       	ldi	r31, 0x4A	; 74
    957c:	0c 94 a9 70 	jmp	0xe152	; 0xe152 <__prologue_saves__>
	
		unsigned char i,bx,by,dx,dy,bt,x,y,tx=1,ty=1,wx,wy;
		unsigned int ramPtr,ssx,ssy;
		unsigned char tile=0;

		free_tile_index=ram_tiles_reserved;	
    9580:	80 91 fb 0e 	lds	r24, 0x0EFB
    9584:	80 93 72 0f 	sts	0x0F72, r24
    9588:	02 ed       	ldi	r16, 0xD2	; 210
    958a:	80 2e       	mov	r8, r16
    958c:	03 e0       	ldi	r16, 0x03	; 3
    958e:	90 2e       	mov	r9, r16
    9590:	00 e0       	ldi	r16, 0x00	; 0
    9592:	77 24       	eor	r7, r7
	
		for(i=0;i<MAX_SPRITES;i++){
			bx=sprites[i].x;
    9594:	f4 01       	movw	r30, r8
    9596:	80 81       	ld	r24, Z

			if(bx<(SCREEN_TILES_H*TILE_WIDTH) && sprites[i].y < SCREEN_TILES_V*TILE_HEIGHT){
    9598:	80 3f       	cpi	r24, 0xF0	; 240
    959a:	08 f0       	brcs	.+2      	; 0x959e <ProcessSprites+0x2a>
    959c:	88 c0       	rjmp	.+272    	; 0x96ae <ProcessSprites+0x13a>
    959e:	91 81       	ldd	r25, Z+1	; 0x01
    95a0:	98 3b       	cpi	r25, 0xB8	; 184
    95a2:	08 f0       	brcs	.+2      	; 0x95a6 <ProcessSprites+0x32>
    95a4:	84 c0       	rjmp	.+264    	; 0x96ae <ProcessSprites+0x13a>

				tx=1;
				ty=1;

				//get the BG tiles that are overlapped by the sprite
				bx=ssx>>3;
    95a6:	f8 2f       	mov	r31, r24
    95a8:	f6 95       	lsr	r31
    95aa:	f6 95       	lsr	r31
    95ac:	f6 95       	lsr	r31
    95ae:	f9 83       	std	Y+1, r31	; 0x01
				dx=ssx&0x7;
    95b0:	28 2f       	mov	r18, r24
    95b2:	27 70       	andi	r18, 0x07	; 7
				if(dx>0) tx++;
    95b4:	19 f0       	breq	.+6      	; 0x95bc <ProcessSprites+0x48>
    95b6:	82 e0       	ldi	r24, 0x02	; 2
    95b8:	8a 83       	std	Y+2, r24	; 0x02
    95ba:	02 c0       	rjmp	.+4      	; 0x95c0 <ProcessSprites+0x4c>
    95bc:	e1 e0       	ldi	r30, 0x01	; 1
    95be:	ea 83       	std	Y+2, r30	; 0x02
		
				by=ssy/TILE_HEIGHT;
    95c0:	f9 2f       	mov	r31, r25
    95c2:	f6 95       	lsr	r31
    95c4:	f6 95       	lsr	r31
    95c6:	f6 95       	lsr	r31
    95c8:	fb 83       	std	Y+3, r31	; 0x03
				dy=ssy%TILE_HEIGHT;
    95ca:	89 2f       	mov	r24, r25
    95cc:	87 70       	andi	r24, 0x07	; 7
				if(dy>0) ty++;			
    95ce:	19 f0       	breq	.+6      	; 0x95d6 <ProcessSprites+0x62>
    95d0:	12 e0       	ldi	r17, 0x02	; 2
    95d2:	61 2e       	mov	r6, r17
    95d4:	02 c0       	rjmp	.+4      	; 0x95da <ProcessSprites+0x66>
    95d6:	66 24       	eor	r6, r6
    95d8:	63 94       	inc	r6
							bt=free_tile_index++;
						}
				
						if(bt<RAM_TILES_COUNT){
	
	PalletBlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);
    95da:	b8 2e       	mov	r11, r24
    95dc:	aa 24       	eor	r10, r10
    95de:	c5 01       	movw	r24, r10
    95e0:	82 0f       	add	r24, r18
    95e2:	91 1d       	adc	r25, r1
    95e4:	9d 83       	std	Y+5, r25	; 0x05
    95e6:	8c 83       	std	Y+4, r24	; 0x04
    95e8:	ee 24       	eor	r14, r14
    95ea:	ff 24       	eor	r15, r15
    95ec:	55 c0       	rjmp	.+170    	; 0x9698 <ProcessSprites+0x124>

					for(x=0;x<tx;x++){
						wy=by+y;
						wx=bx+x;

						ramPtr=(wy*VRAM_TILES_H)+wx;
    95ee:	89 81       	ldd	r24, Y+1	; 0x01
    95f0:	9e 81       	ldd	r25, Y+6	; 0x06
    95f2:	89 0f       	add	r24, r25
    95f4:	91 01       	movw	r18, r2
    95f6:	28 0f       	add	r18, r24
    95f8:	31 1d       	adc	r19, r1
						bt=vram[ramPtr];
    95fa:	b0 e2       	ldi	r27, 0x20	; 32
    95fc:	cb 2e       	mov	r12, r27
    95fe:	b1 e0       	ldi	r27, 0x01	; 1
    9600:	db 2e       	mov	r13, r27
    9602:	c2 0e       	add	r12, r18
    9604:	d3 1e       	adc	r13, r19
    9606:	f6 01       	movw	r30, r12
    9608:	10 81       	ld	r17, Z
#if SPECIAL_FOREGROUND_START != 255	
						if(bt >= SPECIAL_OCCLUSION_START+RAM_TILES_COUNT && bt <= SPECIAL_OCCLUSION_END+RAM_TILES_COUNT)
    960a:	81 2f       	mov	r24, r17
    960c:	82 5e       	subi	r24, 0xE2	; 226
    960e:	88 30       	cpi	r24, 0x08	; 8
    9610:	a8 f1       	brcs	.+106    	; 0x967c <ProcessSprites+0x108>
						   continue; 					
#endif
						if( (bt>=RAM_TILES_COUNT)  && (free_tile_index < RAM_TILES_COUNT)) 
    9612:	1f 31       	cpi	r17, 0x1F	; 31
    9614:	08 f1       	brcs	.+66     	; 0x9658 <ProcessSprites+0xe4>
    9616:	60 91 72 0f 	lds	r22, 0x0F72
    961a:	6f 31       	cpi	r22, 0x1F	; 31
    961c:	78 f5       	brcc	.+94     	; 0x967c <ProcessSprites+0x108>
							  // SetSpritesTileTable(GameSprites);
                            //else
						//	   SetSpritesTileTable(GameSprites);
							//tile is mapped to flash. Copy it to next free RAM tile.
							//if no ram free ignore tile
							ram_tiles_restore[free_tile_index].addr=ramPtr;
    961e:	86 2f       	mov	r24, r22
    9620:	90 e0       	ldi	r25, 0x00	; 0
    9622:	fc 01       	movw	r30, r24
    9624:	ee 0f       	add	r30, r30
    9626:	ff 1f       	adc	r31, r31
    9628:	e8 0f       	add	r30, r24
    962a:	f9 1f       	adc	r31, r25
    962c:	e3 5d       	subi	r30, 0xD3	; 211
    962e:	f3 4f       	sbci	r31, 0xF3	; 243
    9630:	31 83       	std	Z+1, r19	; 0x01
    9632:	20 83       	st	Z, r18
							ram_tiles_restore[free_tile_index].tileIndex=bt;
    9634:	12 83       	std	Z+2, r17	; 0x02
													
							CopyTileToRam(bt,free_tile_index);
    9636:	81 2f       	mov	r24, r17
    9638:	0e 94 23 3e 	call	0x7c46	; 0x7c46 <CopyTileToRam>

							vram[ramPtr]=free_tile_index;
    963c:	80 91 72 0f 	lds	r24, 0x0F72
    9640:	f6 01       	movw	r30, r12
    9642:	80 83       	st	Z, r24
							tile = bt-RAM_TILES_COUNT;//added
    9644:	e1 ee       	ldi	r30, 0xE1	; 225
    9646:	7e 2e       	mov	r7, r30
    9648:	71 0e       	add	r7, r17
							bt=free_tile_index++;
    964a:	8f 5f       	subi	r24, 0xFF	; 255
    964c:	80 93 72 0f 	sts	0x0F72, r24
    9650:	81 50       	subi	r24, 0x01	; 1
						}
				
						if(bt<RAM_TILES_COUNT){
    9652:	8f 31       	cpi	r24, 0x1F	; 31
    9654:	98 f4       	brcc	.+38     	; 0x967c <ProcessSprites+0x108>
    9656:	18 2f       	mov	r17, r24
	
	PalletBlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);
    9658:	4e 81       	ldd	r20, Y+6	; 0x06
    965a:	5f 81       	ldd	r21, Y+7	; 0x07
    965c:	44 0d       	add	r20, r4
    965e:	55 1d       	adc	r21, r5
    9660:	80 2f       	mov	r24, r16
    9662:	61 2f       	mov	r22, r17
    9664:	2c 81       	ldd	r18, Y+4	; 0x04
    9666:	3d 81       	ldd	r19, Y+5	; 0x05
    9668:	0e 94 ac 49 	call	0x9358	; 0x9358 <PalletBlitSprite>
	if(tile >= SPECIAL_FOREGROUND_START && tile <= SPECIAL_FOREGROUND_END)
    966c:	87 2d       	mov	r24, r7
    966e:	89 5b       	subi	r24, 0xB9	; 185
    9670:	8a 30       	cpi	r24, 0x0A	; 10
    9672:	20 f4       	brcc	.+8      	; 0x967c <ProcessSprites+0x108>
       MaskRamTile(bt,tile);
    9674:	81 2f       	mov	r24, r17
    9676:	67 2d       	mov	r22, r7
    9678:	0e 94 2d 50 	call	0xa05a	; 0xa05a <MaskRamTile>
    967c:	8e 81       	ldd	r24, Y+6	; 0x06
    967e:	9f 81       	ldd	r25, Y+7	; 0x07
    9680:	01 96       	adiw	r24, 0x01	; 1
    9682:	9f 83       	std	Y+7, r25	; 0x07
    9684:	8e 83       	std	Y+6, r24	; 0x06
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){

					for(x=0;x<tx;x++){
    9686:	9a 81       	ldd	r25, Y+2	; 0x02
    9688:	89 17       	cp	r24, r25
    968a:	08 f4       	brcc	.+2      	; 0x968e <ProcessSprites+0x11a>
    968c:	b0 cf       	rjmp	.-160    	; 0x95ee <ProcessSprites+0x7a>
    968e:	08 94       	sec
    9690:	e1 1c       	adc	r14, r1
    9692:	f1 1c       	adc	r15, r1
		
				by=ssy/TILE_HEIGHT;
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){
    9694:	e6 14       	cp	r14, r6
    9696:	58 f4       	brcc	.+22     	; 0x96ae <ProcessSprites+0x13a>

					for(x=0;x<tx;x++){
						wy=by+y;
						wx=bx+x;

						ramPtr=(wy*VRAM_TILES_H)+wx;
    9698:	8b 81       	ldd	r24, Y+3	; 0x03
    969a:	8e 0d       	add	r24, r14
    969c:	ee e1       	ldi	r30, 0x1E	; 30
    969e:	8e 9f       	mul	r24, r30
    96a0:	10 01       	movw	r2, r0
    96a2:	11 24       	eor	r1, r1
							bt=free_tile_index++;
						}
				
						if(bt<RAM_TILES_COUNT){
	
	PalletBlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);
    96a4:	5e 2c       	mov	r5, r14
    96a6:	44 24       	eor	r4, r4
    96a8:	1f 82       	std	Y+7, r1	; 0x07
    96aa:	1e 82       	std	Y+6, r1	; 0x06
    96ac:	a0 cf       	rjmp	.-192    	; 0x95ee <ProcessSprites+0x7a>
		unsigned int ramPtr,ssx,ssy;
		unsigned char tile=0;

		free_tile_index=ram_tiles_reserved;	
	
		for(i=0;i<MAX_SPRITES;i++){
    96ae:	0f 5f       	subi	r16, 0xFF	; 255
    96b0:	85 e0       	ldi	r24, 0x05	; 5
    96b2:	90 e0       	ldi	r25, 0x00	; 0
    96b4:	88 0e       	add	r8, r24
    96b6:	99 1e       	adc	r9, r25
    96b8:	0f 31       	cpi	r16, 0x1F	; 31
    96ba:	09 f0       	breq	.+2      	; 0x96be <ProcessSprites+0x14a>
    96bc:	6b cf       	rjmp	.-298    	; 0x9594 <ProcessSprites+0x20>
	unsigned char free_tile_index;

	void RestoreBackground(){
		unsigned char i,j;
		unsigned int a;
		for(i=0;i<free_tile_index;i++){			
    96be:	30 91 72 0f 	lds	r19, 0x0F72
    96c2:	20 e0       	ldi	r18, 0x00	; 0
    96c4:	10 c0       	rjmp	.+32     	; 0x96e6 <ProcessSprites+0x172>
			a=ram_tiles_restore[i].addr;
    96c6:	82 2f       	mov	r24, r18
    96c8:	90 e0       	ldi	r25, 0x00	; 0
			j=ram_tiles_restore[i].tileIndex;
			vram[a]=j;
    96ca:	fc 01       	movw	r30, r24
    96cc:	ee 0f       	add	r30, r30
    96ce:	ff 1f       	adc	r31, r31
    96d0:	e8 0f       	add	r30, r24
    96d2:	f9 1f       	adc	r31, r25
    96d4:	e3 5d       	subi	r30, 0xD3	; 211
    96d6:	f3 4f       	sbci	r31, 0xF3	; 243
    96d8:	a0 81       	ld	r26, Z
    96da:	b1 81       	ldd	r27, Z+1	; 0x01
    96dc:	a0 5e       	subi	r26, 0xE0	; 224
    96de:	be 4f       	sbci	r27, 0xFE	; 254
    96e0:	82 81       	ldd	r24, Z+2	; 0x02
    96e2:	8c 93       	st	X, r24
	unsigned char free_tile_index;

	void RestoreBackground(){
		unsigned char i,j;
		unsigned int a;
		for(i=0;i<free_tile_index;i++){			
    96e4:	2f 5f       	subi	r18, 0xFF	; 255
    96e6:	23 17       	cp	r18, r19
    96e8:	70 f3       	brcs	.-36     	; 0x96c6 <ProcessSprites+0x152>
		}

		//restore BG tiles
		RestoreBackground();

	}
    96ea:	27 96       	adiw	r28, 0x07	; 7
    96ec:	e2 e1       	ldi	r30, 0x12	; 18
    96ee:	0c 94 c5 70 	jmp	0xe18a	; 0xe18a <__epilogue_restores__>

000096f2 <VideoModeVsync>:

	}

	//Callback invoked during hsync
	void VideoModeVsync(){
		if(!(tick_tracker & 1))//TICK_ENDED))
    96f2:	80 91 02 01 	lds	r24, 0x0102
    96f6:	80 fd       	sbrc	r24, 0
    96f8:	03 c0       	rjmp	.+6      	; 0x9700 <VideoModeVsync+0xe>
		   tick_tracker |= 2;//TICK_MISSED;
    96fa:	82 60       	ori	r24, 0x02	; 2
    96fc:	80 93 02 01 	sts	0x0102, r24
		ProcessFading();
    9700:	0e 94 7f 4a 	call	0x94fe	; 0x94fe <ProcessFading>
		ProcessSprites();
    9704:	0e 94 ba 4a 	call	0x9574	; 0x9574 <ProcessSprites>
	}
    9708:	08 95       	ret

0000970a <FindBomb>:

u8 FindBomb(u8 x, u8 y, u8 t){//find a bomb, given a tile fragment of it. used in MovePlayer()
    970a:	98 2f       	mov	r25, r24
   t -= BOMB_START;
   t %= 4;
    970c:	43 70       	andi	r20, 0x03	; 3

   if(t == 3){//bottom right corner
    970e:	43 30       	cpi	r20, 0x03	; 3
    9710:	11 f4       	brne	.+4      	; 0x9716 <FindBomb+0xc>
      x--;
    9712:	91 50       	subi	r25, 0x01	; 1
    9714:	02 c0       	rjmp	.+4      	; 0x971a <FindBomb+0x10>
	  y--;
   }
   else if(t == 2)//bottom left corner
    9716:	42 30       	cpi	r20, 0x02	; 2
    9718:	11 f4       	brne	.+4      	; 0x971e <FindBomb+0x14>
      y--;
    971a:	61 50       	subi	r22, 0x01	; 1
    971c:	03 c0       	rjmp	.+6      	; 0x9724 <FindBomb+0x1a>
   else if(t == 1)//top right corner
    971e:	41 30       	cpi	r20, 0x01	; 1
    9720:	09 f4       	brne	.+2      	; 0x9724 <FindBomb+0x1a>
      x--;
    9722:	91 50       	subi	r25, 0x01	; 1
    9724:	20 e0       	ldi	r18, 0x00	; 0
    9726:	30 e0       	ldi	r19, 0x00	; 0
    9728:	42 2f       	mov	r20, r18

   for(u8 i=0;i<MAX_BOMBS;i++){
      if(bomb_owner[i] == 255)
    972a:	f9 01       	movw	r30, r18
    972c:	e2 51       	subi	r30, 0x12	; 18
    972e:	f0 4f       	sbci	r31, 0xF0	; 240
    9730:	80 81       	ld	r24, Z
    9732:	8f 3f       	cpi	r24, 0xFF	; 255
    9734:	61 f0       	breq	.+24     	; 0x974e <FindBomb+0x44>
	     continue;
      
	  if(bomb_x[i] == x && bomb_y[i] == y)
    9736:	f9 01       	movw	r30, r18
    9738:	e5 5e       	subi	r30, 0xE5	; 229
    973a:	ff 4e       	sbci	r31, 0xEF	; 239
    973c:	80 81       	ld	r24, Z
    973e:	89 17       	cp	r24, r25
    9740:	31 f4       	brne	.+12     	; 0x974e <FindBomb+0x44>
    9742:	f9 01       	movw	r30, r18
    9744:	ef 56       	subi	r30, 0x6F	; 111
    9746:	f0 4f       	sbci	r31, 0xF0	; 240
    9748:	80 81       	ld	r24, Z
    974a:	86 17       	cp	r24, r22
    974c:	31 f0       	breq	.+12     	; 0x975a <FindBomb+0x50>
    974e:	2f 5f       	subi	r18, 0xFF	; 255
    9750:	3f 4f       	sbci	r19, 0xFF	; 255
   else if(t == 2)//bottom left corner
      y--;
   else if(t == 1)//top right corner
      x--;

   for(u8 i=0;i<MAX_BOMBS;i++){
    9752:	20 31       	cpi	r18, 0x10	; 16
    9754:	31 05       	cpc	r19, r1
    9756:	41 f7       	brne	.-48     	; 0x9728 <FindBomb+0x1e>
    9758:	4f ef       	ldi	r20, 0xFF	; 255
	  if(bomb_x[i] == x && bomb_y[i] == y)
	     return i;//found it
   }

   return 255;
}
    975a:	84 2f       	mov	r24, r20
    975c:	08 95       	ret

0000975e <ZeroState>:
   t -= BOMB_START;
   t %= 3;
   return t;
}

void ZeroState(){
    975e:	80 e0       	ldi	r24, 0x00	; 0
    9760:	90 e0       	ldi	r25, 0x00	; 0
	  player_attrb2[i] =
	  player_frame[i] =
	  player_ftime[i] =
	  0;

   player_attrb2[i] = 0b00000001;//1 speed
    9762:	21 e0       	ldi	r18, 0x01	; 1
   return t;
}

void ZeroState(){
   for(u8 i=0;i<MAX_PLAYERS;i++){
      player_x[i] = 
    9764:	fc 01       	movw	r30, r24
    9766:	e6 53       	subi	r30, 0x36	; 54
    9768:	f0 4f       	sbci	r31, 0xF0	; 240
    976a:	10 82       	st	Z, r1
    976c:	fc 01       	movw	r30, r24
    976e:	e7 54       	subi	r30, 0x47	; 71
    9770:	f0 4f       	sbci	r31, 0xF0	; 240
    9772:	10 82       	st	Z, r1
    9774:	fc 01       	movw	r30, r24
    9776:	ed 5e       	subi	r30, 0xED	; 237
    9778:	ff 4e       	sbci	r31, 0xEF	; 239
    977a:	10 82       	st	Z, r1
    977c:	fc 01       	movw	r30, r24
    977e:	ea 53       	subi	r30, 0x3A	; 58
    9780:	f0 4f       	sbci	r31, 0xF0	; 240
    9782:	10 82       	st	Z, r1
    9784:	fc 01       	movw	r30, r24
    9786:	e2 50       	subi	r30, 0x02	; 2
    9788:	f0 4f       	sbci	r31, 0xF0	; 240
    978a:	10 82       	st	Z, r1
    978c:	fc 01       	movw	r30, r24
    978e:	e1 5f       	subi	r30, 0xF1	; 241
    9790:	ff 4e       	sbci	r31, 0xEF	; 239
    9792:	10 82       	st	Z, r1
    9794:	fc 01       	movw	r30, r24
    9796:	e5 58       	subi	r30, 0x85	; 133
    9798:	f0 4f       	sbci	r31, 0xF0	; 240
    979a:	10 82       	st	Z, r1
    979c:	fc 01       	movw	r30, r24
    979e:	e9 5e       	subi	r30, 0xE9	; 233
    97a0:	ff 4e       	sbci	r31, 0xEF	; 239
    97a2:	10 82       	st	Z, r1
	  player_attrb2[i] =
	  player_frame[i] =
	  player_ftime[i] =
	  0;

   player_attrb2[i] = 0b00000001;//1 speed
    97a4:	fc 01       	movw	r30, r24
    97a6:	ea 58       	subi	r30, 0x8A	; 138
    97a8:	f0 4f       	sbci	r31, 0xF0	; 240
    97aa:	20 83       	st	Z, r18
    97ac:	01 96       	adiw	r24, 0x01	; 1
   t %= 3;
   return t;
}

void ZeroState(){
   for(u8 i=0;i<MAX_PLAYERS;i++){
    97ae:	84 30       	cpi	r24, 0x04	; 4
    97b0:	91 05       	cpc	r25, r1
    97b2:	c1 f6       	brne	.-80     	; 0x9764 <ZeroState+0x6>
    97b4:	80 e0       	ldi	r24, 0x00	; 0
    97b6:	90 e0       	ldi	r25, 0x00	; 0
	  bomb_state[i] =
	  bomb_timer[i] =
	  bomb_xtra[i] =
	  0;

	  bomb_owner[i] = 255;
    97b8:	2f ef       	ldi	r18, 0xFF	; 255

   player_attrb2[i] = 0b00000001;//1 speed
   }

   for(u8 i=0;i<MAX_BOMBS;i++){
      bomb_x[i] =
    97ba:	fc 01       	movw	r30, r24
    97bc:	e2 52       	subi	r30, 0x22	; 34
    97be:	f0 4f       	sbci	r31, 0xF0	; 240
    97c0:	10 82       	st	Z, r1
    97c2:	fc 01       	movw	r30, r24
    97c4:	e7 55       	subi	r30, 0x57	; 87
    97c6:	f0 4f       	sbci	r31, 0xF0	; 240
    97c8:	10 82       	st	Z, r1
    97ca:	fc 01       	movw	r30, r24
    97cc:	e2 53       	subi	r30, 0x32	; 50
    97ce:	f0 4f       	sbci	r31, 0xF0	; 240
    97d0:	10 82       	st	Z, r1
    97d2:	fc 01       	movw	r30, r24
    97d4:	e4 5d       	subi	r30, 0xD4	; 212
    97d6:	ff 4e       	sbci	r31, 0xEF	; 239
    97d8:	10 82       	st	Z, r1
    97da:	fc 01       	movw	r30, r24
    97dc:	ef 56       	subi	r30, 0x6F	; 111
    97de:	f0 4f       	sbci	r31, 0xF0	; 240
    97e0:	10 82       	st	Z, r1
    97e2:	fc 01       	movw	r30, r24
    97e4:	e5 5e       	subi	r30, 0xE5	; 229
    97e6:	ff 4e       	sbci	r31, 0xEF	; 239
    97e8:	10 82       	st	Z, r1
	  bomb_state[i] =
	  bomb_timer[i] =
	  bomb_xtra[i] =
	  0;

	  bomb_owner[i] = 255;
    97ea:	fc 01       	movw	r30, r24
    97ec:	e2 51       	subi	r30, 0x12	; 18
    97ee:	f0 4f       	sbci	r31, 0xF0	; 240
    97f0:	20 83       	st	Z, r18
    97f2:	01 96       	adiw	r24, 0x01	; 1
	  0;

   player_attrb2[i] = 0b00000001;//1 speed
   }

   for(u8 i=0;i<MAX_BOMBS;i++){
    97f4:	80 31       	cpi	r24, 0x10	; 16
    97f6:	91 05       	cpc	r25, r1
    97f8:	01 f7       	brne	.-64     	; 0x97ba <ZeroState+0x5c>
	  bomb_xtra[i] =
	  0;

	  bomb_owner[i] = 255;
   }
}
    97fa:	08 95       	ret

000097fc <IsHorizontalFire>:
      return true;
   return false;
}

bool IsHorizontalFire(u8 t){
   if(t < FIRE_START || t > FIRE_END)
    97fc:	8c 52       	subi	r24, 0x2C	; 44
    97fe:	84 35       	cpi	r24, 0x54	; 84
    9800:	10 f0       	brcs	.+4      	; 0x9806 <IsHorizontalFire+0xa>
    9802:	80 e0       	ldi	r24, 0x00	; 0
    9804:	08 95       	ret
      return false;
   t -= FIRE_START;
   t %= 28;
    9806:	6c e1       	ldi	r22, 0x1C	; 28
    9808:	0e 94 76 70 	call	0xe0ec	; 0xe0ec <__udivmodqi4>
   if(t > 3 && t < 8)
    980c:	89 2f       	mov	r24, r25
    980e:	84 50       	subi	r24, 0x04	; 4
    9810:	84 30       	cpi	r24, 0x04	; 4
    9812:	10 f4       	brcc	.+4      	; 0x9818 <IsHorizontalFire+0x1c>
    9814:	81 e0       	ldi	r24, 0x01	; 1
    9816:	08 95       	ret
      return true;
   if(t > 19 && t < 28)
    9818:	80 e0       	ldi	r24, 0x00	; 0
    981a:	94 51       	subi	r25, 0x14	; 20
    981c:	98 30       	cpi	r25, 0x08	; 8
    981e:	08 f4       	brcc	.+2      	; 0x9822 <IsHorizontalFire+0x26>
    9820:	81 e0       	ldi	r24, 0x01	; 1
      return true;
   return false;
}
    9822:	08 95       	ret

00009824 <IsVerticalFire>:

bool IsVerticalFire(u8 t){
   if(t < FIRE_START || t > FIRE_END)
    9824:	8c 52       	subi	r24, 0x2C	; 44
    9826:	84 35       	cpi	r24, 0x54	; 84
    9828:	10 f0       	brcs	.+4      	; 0x982e <IsVerticalFire+0xa>
    982a:	80 e0       	ldi	r24, 0x00	; 0
    982c:	08 95       	ret
      return false;
   t -= FIRE_START;
   t %= 28;
    982e:	6c e1       	ldi	r22, 0x1C	; 28
    9830:	0e 94 76 70 	call	0xe0ec	; 0xe0ec <__udivmodqi4>
   if(t < 4)
    9834:	94 30       	cpi	r25, 0x04	; 4
    9836:	10 f4       	brcc	.+4      	; 0x983c <IsVerticalFire+0x18>
    9838:	81 e0       	ldi	r24, 0x01	; 1
    983a:	08 95       	ret
      return true;
   if(t > 11 && t < 20)
    983c:	80 e0       	ldi	r24, 0x00	; 0
    983e:	9c 50       	subi	r25, 0x0C	; 12
    9840:	98 30       	cpi	r25, 0x08	; 8
    9842:	08 f4       	brcc	.+2      	; 0x9846 <IsVerticalFire+0x22>
    9844:	81 e0       	ldi	r24, 0x01	; 1
      return true;
   return false;
}
    9846:	08 95       	ret

00009848 <IsCenterFire>:

bool IsCenterFire(u8 t){
   if(t < FIRE_START || t > FIRE_END)
    9848:	8c 52       	subi	r24, 0x2C	; 44
    984a:	84 35       	cpi	r24, 0x54	; 84
    984c:	10 f0       	brcs	.+4      	; 0x9852 <IsCenterFire+0xa>
    984e:	20 e0       	ldi	r18, 0x00	; 0
    9850:	08 c0       	rjmp	.+16     	; 0x9862 <IsCenterFire+0x1a>
      return false;
   t -= FIRE_START;
   t %= 28;
   if(t > 7 && t < 12)
    9852:	20 e0       	ldi	r18, 0x00	; 0
    9854:	6c e1       	ldi	r22, 0x1C	; 28
    9856:	0e 94 76 70 	call	0xe0ec	; 0xe0ec <__udivmodqi4>
    985a:	98 50       	subi	r25, 0x08	; 8
    985c:	94 30       	cpi	r25, 0x04	; 4
    985e:	08 f4       	brcc	.+2      	; 0x9862 <IsCenterFire+0x1a>
    9860:	21 e0       	ldi	r18, 0x01	; 1
      return true;
   
   return false;
}
    9862:	82 2f       	mov	r24, r18
    9864:	08 95       	ret

00009866 <IsTipFire>:

bool IsTipFire(u8 t){
   if(t < FIRE_START || t > FIRE_END)
    9866:	8c 52       	subi	r24, 0x2C	; 44
    9868:	84 35       	cpi	r24, 0x54	; 84
    986a:	10 f0       	brcs	.+4      	; 0x9870 <IsTipFire+0xa>
    986c:	20 e0       	ldi	r18, 0x00	; 0
    986e:	07 c0       	rjmp	.+14     	; 0x987e <IsTipFire+0x18>
      return false;
   t -= FIRE_START;
   t %= 28;
   if(t > 11)// && t < 28
    9870:	20 e0       	ldi	r18, 0x00	; 0
    9872:	6c e1       	ldi	r22, 0x1C	; 28
    9874:	0e 94 76 70 	call	0xe0ec	; 0xe0ec <__udivmodqi4>
    9878:	9c 30       	cpi	r25, 0x0C	; 12
    987a:	08 f0       	brcs	.+2      	; 0x987e <IsTipFire+0x18>
    987c:	21 e0       	ldi	r18, 0x01	; 1
      return true;
   return false;
}
    987e:	82 2f       	mov	r24, r18
    9880:	08 95       	ret

00009882 <DestroyBlock>:
      return true;
   return false;
}


void DestroyBlock(u8 x, u8 y){
    9882:	38 2f       	mov	r19, r24
	   sprites[i].x = SCREEN_TILES_H*TILE_WIDTH;
}

 
u8 prand(){
  (prng = ((u8)((prng>>1) | ((prng^(prng>>2)^(prng>>3)^(prng>>4))<<7))));
    9884:	80 91 04 01 	lds	r24, 0x0104
    9888:	28 2f       	mov	r18, r24
    988a:	26 95       	lsr	r18
    988c:	26 95       	lsr	r18
    988e:	98 2f       	mov	r25, r24
    9890:	96 95       	lsr	r25
    9892:	96 95       	lsr	r25
    9894:	96 95       	lsr	r25
    9896:	29 27       	eor	r18, r25
    9898:	28 27       	eor	r18, r24
    989a:	98 2f       	mov	r25, r24
    989c:	92 95       	swap	r25
    989e:	9f 70       	andi	r25, 0x0F	; 15
    98a0:	29 27       	eor	r18, r25
    98a2:	27 95       	ror	r18
    98a4:	22 27       	eor	r18, r18
    98a6:	27 95       	ror	r18
    98a8:	86 95       	lsr	r24
    98aa:	28 2b       	or	r18, r24
    98ac:	20 93 04 01 	sts	0x0104, r18
   u8 t = prand();
   if(t < POWERUPCHANCE)
    98b0:	23 3b       	cpi	r18, 0xB3	; 179
    98b2:	80 f4       	brcc	.+32     	; 0x98d4 <DestroyBlock+0x52>
   SetTile(15,0,ZERO_OFFSET+ten);
   SetTile(16,0,ZERO_OFFSET+sec);
}

void SetMapTile(u8 x, u8 y, u8 t){
   int off = (y*30)+x;//((y<<1)*30)+(x<<1);
    98b4:	ee e1       	ldi	r30, 0x1E	; 30
    98b6:	6e 9f       	mul	r22, r30
    98b8:	f0 01       	movw	r30, r0
    98ba:	11 24       	eor	r1, r1
    98bc:	e3 0f       	add	r30, r19
    98be:	f1 1d       	adc	r31, r1
   t+=RAM_TILES_COUNT;//t = (t<<2)+RAM_TILES_COUNT;//t = (tileset*(NUMTILES*4)) + (t*4) + RAM_TILES_COUNT;
   
   vram[off+ 0] = t++;
    98c0:	e0 5e       	subi	r30, 0xE0	; 224
    98c2:	fe 4f       	sbci	r31, 0xFE	; 254
    98c4:	8f e1       	ldi	r24, 0x1F	; 31
    98c6:	80 83       	st	Z, r24
   vram[off+ 1] = t++;
    98c8:	80 e2       	ldi	r24, 0x20	; 32
    98ca:	81 83       	std	Z+1, r24	; 0x01
   vram[off+30] = t++;
    98cc:	81 e2       	ldi	r24, 0x21	; 33
    98ce:	86 8f       	std	Z+30, r24	; 0x1e
   vram[off+31] = t;
    98d0:	82 e2       	ldi	r24, 0x22	; 34
    98d2:	47 c0       	rjmp	.+142    	; 0x9962 <DestroyBlock+0xe0>
      SetMapTile(x,y,0);
   else if(t < FIRECHANCE)
    98d4:	2d 3c       	cpi	r18, 0xCD	; 205
    98d6:	80 f4       	brcc	.+32     	; 0x98f8 <DestroyBlock+0x76>
   SetTile(15,0,ZERO_OFFSET+ten);
   SetTile(16,0,ZERO_OFFSET+sec);
}

void SetMapTile(u8 x, u8 y, u8 t){
   int off = (y*30)+x;//((y<<1)*30)+(x<<1);
    98d8:	ee e1       	ldi	r30, 0x1E	; 30
    98da:	6e 9f       	mul	r22, r30
    98dc:	f0 01       	movw	r30, r0
    98de:	11 24       	eor	r1, r1
    98e0:	e3 0f       	add	r30, r19
    98e2:	f1 1d       	adc	r31, r1
   t+=RAM_TILES_COUNT;//t = (t<<2)+RAM_TILES_COUNT;//t = (tileset*(NUMTILES*4)) + (t*4) + RAM_TILES_COUNT;
   
   vram[off+ 0] = t++;
    98e4:	e0 5e       	subi	r30, 0xE0	; 224
    98e6:	fe 4f       	sbci	r31, 0xFE	; 254
    98e8:	8a eb       	ldi	r24, 0xBA	; 186
    98ea:	80 83       	st	Z, r24
   vram[off+ 1] = t++;
    98ec:	8b eb       	ldi	r24, 0xBB	; 187
    98ee:	81 83       	std	Z+1, r24	; 0x01
   vram[off+30] = t++;
    98f0:	8c eb       	ldi	r24, 0xBC	; 188
    98f2:	86 8f       	std	Z+30, r24	; 0x1e
   vram[off+31] = t;
    98f4:	8d eb       	ldi	r24, 0xBD	; 189
    98f6:	35 c0       	rjmp	.+106    	; 0x9962 <DestroyBlock+0xe0>
      SetMapTile(x,y,POWERUP_START+4);
   else if(t < SPEEDCHANCE)
    98f8:	2e 3d       	cpi	r18, 0xDE	; 222
    98fa:	80 f4       	brcc	.+32     	; 0x991c <DestroyBlock+0x9a>
   SetTile(15,0,ZERO_OFFSET+ten);
   SetTile(16,0,ZERO_OFFSET+sec);
}

void SetMapTile(u8 x, u8 y, u8 t){
   int off = (y*30)+x;//((y<<1)*30)+(x<<1);
    98fc:	ee e1       	ldi	r30, 0x1E	; 30
    98fe:	6e 9f       	mul	r22, r30
    9900:	f0 01       	movw	r30, r0
    9902:	11 24       	eor	r1, r1
    9904:	e3 0f       	add	r30, r19
    9906:	f1 1d       	adc	r31, r1
   t+=RAM_TILES_COUNT;//t = (t<<2)+RAM_TILES_COUNT;//t = (tileset*(NUMTILES*4)) + (t*4) + RAM_TILES_COUNT;
   
   vram[off+ 0] = t++;
    9908:	e0 5e       	subi	r30, 0xE0	; 224
    990a:	fe 4f       	sbci	r31, 0xFE	; 254
    990c:	86 eb       	ldi	r24, 0xB6	; 182
    990e:	80 83       	st	Z, r24
   vram[off+ 1] = t++;
    9910:	87 eb       	ldi	r24, 0xB7	; 183
    9912:	81 83       	std	Z+1, r24	; 0x01
   vram[off+30] = t++;
    9914:	88 eb       	ldi	r24, 0xB8	; 184
    9916:	86 8f       	std	Z+30, r24	; 0x1e
   vram[off+31] = t;
    9918:	89 eb       	ldi	r24, 0xB9	; 185
    991a:	23 c0       	rjmp	.+70     	; 0x9962 <DestroyBlock+0xe0>
      SetMapTile(x,y,POWERUP_START+0);
   else if(t < BOMBCHANCE)
    991c:	2b 3e       	cpi	r18, 0xEB	; 235
    991e:	80 f4       	brcc	.+32     	; 0x9940 <DestroyBlock+0xbe>
   SetTile(15,0,ZERO_OFFSET+ten);
   SetTile(16,0,ZERO_OFFSET+sec);
}

void SetMapTile(u8 x, u8 y, u8 t){
   int off = (y*30)+x;//((y<<1)*30)+(x<<1);
    9920:	ee e1       	ldi	r30, 0x1E	; 30
    9922:	6e 9f       	mul	r22, r30
    9924:	f0 01       	movw	r30, r0
    9926:	11 24       	eor	r1, r1
    9928:	e3 0f       	add	r30, r19
    992a:	f1 1d       	adc	r31, r1
   t+=RAM_TILES_COUNT;//t = (t<<2)+RAM_TILES_COUNT;//t = (tileset*(NUMTILES*4)) + (t*4) + RAM_TILES_COUNT;
   
   vram[off+ 0] = t++;
    992c:	e0 5e       	subi	r30, 0xE0	; 224
    992e:	fe 4f       	sbci	r31, 0xFE	; 254
    9930:	8e eb       	ldi	r24, 0xBE	; 190
    9932:	80 83       	st	Z, r24
   vram[off+ 1] = t++;
    9934:	8f eb       	ldi	r24, 0xBF	; 191
    9936:	81 83       	std	Z+1, r24	; 0x01
   vram[off+30] = t++;
    9938:	80 ec       	ldi	r24, 0xC0	; 192
    993a:	86 8f       	std	Z+30, r24	; 0x1e
   vram[off+31] = t;
    993c:	81 ec       	ldi	r24, 0xC1	; 193
    993e:	11 c0       	rjmp	.+34     	; 0x9962 <DestroyBlock+0xe0>
    9940:	83 2f       	mov	r24, r19
    9942:	90 e0       	ldi	r25, 0x00	; 0
   SetTile(15,0,ZERO_OFFSET+ten);
   SetTile(16,0,ZERO_OFFSET+sec);
}

void SetMapTile(u8 x, u8 y, u8 t){
   int off = (y*30)+x;//((y<<1)*30)+(x<<1);
    9944:	ee e1       	ldi	r30, 0x1E	; 30
    9946:	6e 9f       	mul	r22, r30
    9948:	f0 01       	movw	r30, r0
    994a:	11 24       	eor	r1, r1
    994c:	e8 0f       	add	r30, r24
    994e:	f9 1f       	adc	r31, r25
   t+=RAM_TILES_COUNT;//t = (t<<2)+RAM_TILES_COUNT;//t = (tileset*(NUMTILES*4)) + (t*4) + RAM_TILES_COUNT;
   
   vram[off+ 0] = t++;
    9950:	e0 5e       	subi	r30, 0xE0	; 224
    9952:	fe 4f       	sbci	r31, 0xFE	; 254
    9954:	82 ec       	ldi	r24, 0xC2	; 194
    9956:	80 83       	st	Z, r24
   vram[off+ 1] = t++;
    9958:	83 ec       	ldi	r24, 0xC3	; 195
    995a:	81 83       	std	Z+1, r24	; 0x01
   vram[off+30] = t++;
    995c:	84 ec       	ldi	r24, 0xC4	; 196
    995e:	86 8f       	std	Z+30, r24	; 0x1e
   vram[off+31] = t;
    9960:	85 ec       	ldi	r24, 0xC5	; 197
    9962:	87 8f       	std	Z+31, r24	; 0x1f
    9964:	08 95       	ret

00009966 <PlacePowerUp>:




inline u8 GetMapTile(u8 x, u8 y){
      return (vram[(y*30)+x]-RAM_TILES_COUNT);//return (vram[122+(y*30)+x]-RAM_TILES_COUNT);
    9966:	9e e1       	ldi	r25, 0x1E	; 30
    9968:	69 9f       	mul	r22, r25
    996a:	f0 01       	movw	r30, r0
    996c:	11 24       	eor	r1, r1
    996e:	e8 0f       	add	r30, r24
    9970:	f1 1d       	adc	r31, r1
   SetMapTile(x,y,GetMapTileRam(x,y));
}
*/

bool PlacePowerUp(u8 x, u8 y, u8 p){//returns false if position was blocked
   if(GetMapTile(x,y) > 3)// || IsSolid(GetMapTile(x+1,y+1)))
    9972:	e0 5e       	subi	r30, 0xE0	; 224
    9974:	fe 4f       	sbci	r31, 0xFE	; 254
    9976:	80 81       	ld	r24, Z
    9978:	8f 51       	subi	r24, 0x1F	; 31
    997a:	84 30       	cpi	r24, 0x04	; 4
    997c:	10 f0       	brcs	.+4      	; 0x9982 <PlacePowerUp+0x1c>
    997e:	80 e0       	ldi	r24, 0x00	; 0
    9980:	08 95       	ret
   SetTile(16,0,ZERO_OFFSET+sec);
}

void SetMapTile(u8 x, u8 y, u8 t){
   int off = (y*30)+x;//((y<<1)*30)+(x<<1);
   t+=RAM_TILES_COUNT;//t = (t<<2)+RAM_TILES_COUNT;//t = (tileset*(NUMTILES*4)) + (t*4) + RAM_TILES_COUNT;
    9982:	41 5e       	subi	r20, 0xE1	; 225
   
   vram[off+ 0] = t++;
    9984:	40 83       	st	Z, r20
    9986:	4f 5f       	subi	r20, 0xFF	; 255
   vram[off+ 1] = t++;
    9988:	41 83       	std	Z+1, r20	; 0x01
    998a:	4f 5f       	subi	r20, 0xFF	; 255
   vram[off+30] = t++;
    998c:	46 8f       	std	Z+30, r20	; 0x1e
   vram[off+31] = t;
    998e:	4f 5f       	subi	r20, 0xFF	; 255
    9990:	47 8f       	std	Z+31, r20	; 0x1f
    9992:	81 e0       	ldi	r24, 0x01	; 1
      return false;
   
   SetMapTile(x,y,p);
   return true;
}
    9994:	08 95       	ret

00009996 <DispersePowerups>:

void DispersePowerups(u8 p){//take all of a killed players items and disperse them randomly around the map
    9996:	0f 93       	push	r16
    9998:	1f 93       	push	r17
    999a:	cf 93       	push	r28
    999c:	df 93       	push	r29
u8 GetSlot(u8 p){
   return playerslots & (3>>(p*2));
}

inline u8 player_speed(u8 p){
   if(player_attrb[p] & POISON){
    999e:	c8 2f       	mov	r28, r24
    99a0:	d0 e0       	ldi	r29, 0x00	; 0
    99a2:	fe 01       	movw	r30, r28
    99a4:	ed 5e       	subi	r30, 0xED	; 237
    99a6:	ff 4e       	sbci	r31, 0xEF	; 239
    99a8:	80 81       	ld	r24, Z
    99aa:	83 ff       	sbrs	r24, 3
    99ac:	0a c0       	rjmp	.+20     	; 0x99c2 <DispersePowerups+0x2c>
      if(poison_type == POISON_FAST)
    99ae:	80 91 bd 0f 	lds	r24, 0x0FBD
    99b2:	82 30       	cpi	r24, 0x02	; 2
    99b4:	11 f4       	brne	.+4      	; 0x99ba <DispersePowerups+0x24>
    99b6:	17 e0       	ldi	r17, 0x07	; 7
    99b8:	0a c0       	rjmp	.+20     	; 0x99ce <DispersePowerups+0x38>
	     return 7;
      else if(poison_type == POISON_SLOW)
    99ba:	81 30       	cpi	r24, 0x01	; 1
    99bc:	11 f4       	brne	.+4      	; 0x99c2 <DispersePowerups+0x2c>
    99be:	10 e0       	ldi	r17, 0x00	; 0
    99c0:	07 c0       	rjmp	.+14     	; 0x99d0 <DispersePowerups+0x3a>
	     return 0;
   }
   
   return player_attrb2[p] & 0b00000111;
    99c2:	fe 01       	movw	r30, r28
    99c4:	ea 58       	subi	r30, 0x8A	; 138
    99c6:	f0 4f       	sbci	r31, 0xF0	; 240
    99c8:	10 81       	ld	r17, Z
    99ca:	17 70       	andi	r17, 0x07	; 7
}

void DispersePowerups(u8 p){//take all of a killed players items and disperse them randomly around the map
   u8 i,t;
   //placing the powerups would be potentially slow or infinite. give up after 2 blocked attempts
   if((t = player_speed(p)))
    99cc:	09 f0       	breq	.+2      	; 0x99d0 <DispersePowerups+0x3a>
      t--;
    99ce:	11 50       	subi	r17, 0x01	; 1
    99d0:	00 e0       	ldi	r16, 0x00	; 0
    99d2:	75 c0       	rjmp	.+234    	; 0x9abe <DispersePowerups+0x128>
    99d4:	90 91 04 01 	lds	r25, 0x0104
    99d8:	89 2f       	mov	r24, r25
    99da:	86 95       	lsr	r24
    99dc:	86 95       	lsr	r24
    99de:	29 2f       	mov	r18, r25
    99e0:	26 95       	lsr	r18
    99e2:	26 95       	lsr	r18
    99e4:	26 95       	lsr	r18
    99e6:	82 27       	eor	r24, r18
    99e8:	89 27       	eor	r24, r25
    99ea:	29 2f       	mov	r18, r25
    99ec:	22 95       	swap	r18
    99ee:	2f 70       	andi	r18, 0x0F	; 15
    99f0:	82 27       	eor	r24, r18
    99f2:	87 95       	ror	r24
    99f4:	88 27       	eor	r24, r24
    99f6:	87 95       	ror	r24
    99f8:	96 95       	lsr	r25
    99fa:	89 2b       	or	r24, r25
   for(i=0;i<t;i++){
      if(!PlacePowerUp(((prand()%11)<<1)+ARENA_START_X,((prand()%11)<<1)+ARENA_START_Y,POWERUP_START+0))   
    99fc:	28 2f       	mov	r18, r24
    99fe:	26 95       	lsr	r18
    9a00:	26 95       	lsr	r18
    9a02:	98 2f       	mov	r25, r24
    9a04:	96 95       	lsr	r25
    9a06:	96 95       	lsr	r25
    9a08:	96 95       	lsr	r25
    9a0a:	29 27       	eor	r18, r25
    9a0c:	28 27       	eor	r18, r24
    9a0e:	98 2f       	mov	r25, r24
    9a10:	92 95       	swap	r25
    9a12:	9f 70       	andi	r25, 0x0F	; 15
    9a14:	29 27       	eor	r18, r25
    9a16:	27 95       	ror	r18
    9a18:	22 27       	eor	r18, r18
    9a1a:	27 95       	ror	r18
    9a1c:	98 2f       	mov	r25, r24
    9a1e:	96 95       	lsr	r25
    9a20:	29 2b       	or	r18, r25
    9a22:	20 93 04 01 	sts	0x0104, r18
    9a26:	6b e0       	ldi	r22, 0x0B	; 11
    9a28:	0e 94 76 70 	call	0xe0ec	; 0xe0ec <__udivmodqi4>
    9a2c:	39 2f       	mov	r19, r25
    9a2e:	33 0f       	add	r19, r19
    9a30:	82 2f       	mov	r24, r18
    9a32:	0e 94 76 70 	call	0xe0ec	; 0xe0ec <__udivmodqi4>
    9a36:	99 0f       	add	r25, r25
    9a38:	9f 5f       	subi	r25, 0xFF	; 255
    9a3a:	83 2f       	mov	r24, r19
    9a3c:	8e 5f       	subi	r24, 0xFE	; 254
    9a3e:	69 2f       	mov	r22, r25
    9a40:	47 e9       	ldi	r20, 0x97	; 151
    9a42:	0e 94 b3 4c 	call	0x9966	; 0x9966 <PlacePowerUp>
    9a46:	88 23       	and	r24, r24
    9a48:	c9 f5       	brne	.+114    	; 0x9abc <DispersePowerups+0x126>
    9a4a:	90 91 04 01 	lds	r25, 0x0104
    9a4e:	89 2f       	mov	r24, r25
    9a50:	86 95       	lsr	r24
    9a52:	86 95       	lsr	r24
    9a54:	29 2f       	mov	r18, r25
    9a56:	26 95       	lsr	r18
    9a58:	26 95       	lsr	r18
    9a5a:	26 95       	lsr	r18
    9a5c:	82 27       	eor	r24, r18
    9a5e:	89 27       	eor	r24, r25
    9a60:	29 2f       	mov	r18, r25
    9a62:	22 95       	swap	r18
    9a64:	2f 70       	andi	r18, 0x0F	; 15
    9a66:	82 27       	eor	r24, r18
    9a68:	87 95       	ror	r24
    9a6a:	88 27       	eor	r24, r24
    9a6c:	87 95       	ror	r24
    9a6e:	96 95       	lsr	r25
    9a70:	89 2b       	or	r24, r25
         PlacePowerUp(((prand()%11)<<1)+ARENA_START_X,((prand()%11)<<1)+ARENA_START_Y,POWERUP_START+0);  
    9a72:	28 2f       	mov	r18, r24
    9a74:	26 95       	lsr	r18
    9a76:	26 95       	lsr	r18
    9a78:	98 2f       	mov	r25, r24
    9a7a:	96 95       	lsr	r25
    9a7c:	96 95       	lsr	r25
    9a7e:	96 95       	lsr	r25
    9a80:	29 27       	eor	r18, r25
    9a82:	28 27       	eor	r18, r24
    9a84:	98 2f       	mov	r25, r24
    9a86:	92 95       	swap	r25
    9a88:	9f 70       	andi	r25, 0x0F	; 15
    9a8a:	29 27       	eor	r18, r25
    9a8c:	27 95       	ror	r18
    9a8e:	22 27       	eor	r18, r18
    9a90:	27 95       	ror	r18
    9a92:	98 2f       	mov	r25, r24
    9a94:	96 95       	lsr	r25
    9a96:	29 2b       	or	r18, r25
    9a98:	20 93 04 01 	sts	0x0104, r18
    9a9c:	6b e0       	ldi	r22, 0x0B	; 11
    9a9e:	0e 94 76 70 	call	0xe0ec	; 0xe0ec <__udivmodqi4>
    9aa2:	39 2f       	mov	r19, r25
    9aa4:	33 0f       	add	r19, r19
    9aa6:	82 2f       	mov	r24, r18
    9aa8:	0e 94 76 70 	call	0xe0ec	; 0xe0ec <__udivmodqi4>
    9aac:	99 0f       	add	r25, r25
    9aae:	9f 5f       	subi	r25, 0xFF	; 255
    9ab0:	83 2f       	mov	r24, r19
    9ab2:	8e 5f       	subi	r24, 0xFE	; 254
    9ab4:	69 2f       	mov	r22, r25
    9ab6:	47 e9       	ldi	r20, 0x97	; 151
    9ab8:	0e 94 b3 4c 	call	0x9966	; 0x9966 <PlacePowerUp>
void DispersePowerups(u8 p){//take all of a killed players items and disperse them randomly around the map
   u8 i,t;
   //placing the powerups would be potentially slow or infinite. give up after 2 blocked attempts
   if((t = player_speed(p)))
      t--;
   for(i=0;i<t;i++){
    9abc:	0f 5f       	subi	r16, 0xFF	; 255
    9abe:	01 17       	cp	r16, r17
    9ac0:	08 f4       	brcc	.+2      	; 0x9ac4 <DispersePowerups+0x12e>
    9ac2:	88 cf       	rjmp	.-240    	; 0x99d4 <DispersePowerups+0x3e>
void SetPlayerRange(u8 p, u8 t){
   player_attrb[p] |= (t-3);
}

u8 GetPlayerRange(u8 p){
   if(poison_type == POISON_RANGE && player_attrb[p] & POISON)
    9ac4:	80 91 bd 0f 	lds	r24, 0x0FBD
    9ac8:	83 30       	cpi	r24, 0x03	; 3
    9aca:	41 f4       	brne	.+16     	; 0x9adc <DispersePowerups+0x146>
    9acc:	fe 01       	movw	r30, r28
    9ace:	ed 5e       	subi	r30, 0xED	; 237
    9ad0:	ff 4e       	sbci	r31, 0xEF	; 239
    9ad2:	80 81       	ld	r24, Z
    9ad4:	83 ff       	sbrs	r24, 3
    9ad6:	02 c0       	rjmp	.+4      	; 0x9adc <DispersePowerups+0x146>
    9ad8:	81 e0       	ldi	r24, 0x01	; 1
    9ada:	0b c0       	rjmp	.+22     	; 0x9af2 <DispersePowerups+0x15c>
      return 1;
   if(gamestate & MAXFIRE)//level has max fire
    9adc:	80 91 fc 0e 	lds	r24, 0x0EFC
    9ae0:	82 ff       	sbrs	r24, 2
    9ae2:	02 c0       	rjmp	.+4      	; 0x9ae8 <DispersePowerups+0x152>
    9ae4:	8d e0       	ldi	r24, 0x0D	; 13
    9ae6:	05 c0       	rjmp	.+10     	; 0x9af2 <DispersePowerups+0x15c>
      return 13;
   return (player_attrb[p] & 0b00000111)+3;
    9ae8:	cd 5e       	subi	r28, 0xED	; 237
    9aea:	df 4e       	sbci	r29, 0xEF	; 239
    9aec:	88 81       	ld	r24, Y
    9aee:	87 70       	andi	r24, 0x07	; 7
    9af0:	8d 5f       	subi	r24, 0xFD	; 253
   for(i=0;i<t;i++){
      if(!PlacePowerUp(((prand()%11)<<1)+ARENA_START_X,((prand()%11)<<1)+ARENA_START_Y,POWERUP_START+0))   
         PlacePowerUp(((prand()%11)<<1)+ARENA_START_X,((prand()%11)<<1)+ARENA_START_Y,POWERUP_START+0);  
   }

   t = GetPlayerRange(p)-3;
    9af2:	08 2f       	mov	r16, r24
    9af4:	03 50       	subi	r16, 0x03	; 3
    9af6:	10 e0       	ldi	r17, 0x00	; 0
    9af8:	77 c0       	rjmp	.+238    	; 0x9be8 <DispersePowerups+0x252>
    9afa:	90 91 04 01 	lds	r25, 0x0104
    9afe:	89 2f       	mov	r24, r25
    9b00:	86 95       	lsr	r24
    9b02:	86 95       	lsr	r24
    9b04:	29 2f       	mov	r18, r25
    9b06:	26 95       	lsr	r18
    9b08:	26 95       	lsr	r18
    9b0a:	26 95       	lsr	r18
    9b0c:	82 27       	eor	r24, r18
    9b0e:	89 27       	eor	r24, r25
    9b10:	29 2f       	mov	r18, r25
    9b12:	22 95       	swap	r18
    9b14:	2f 70       	andi	r18, 0x0F	; 15
    9b16:	82 27       	eor	r24, r18
    9b18:	87 95       	ror	r24
    9b1a:	88 27       	eor	r24, r24
    9b1c:	87 95       	ror	r24
    9b1e:	96 95       	lsr	r25
    9b20:	89 2b       	or	r24, r25
   for(i=0;i<t;i++){
      if(!PlacePowerUp(((prand()%13)<<1)+ARENA_START_X,((prand()%11)<<1)+ARENA_START_Y,POWERUP_START+4))
    9b22:	28 2f       	mov	r18, r24
    9b24:	26 95       	lsr	r18
    9b26:	26 95       	lsr	r18
    9b28:	98 2f       	mov	r25, r24
    9b2a:	96 95       	lsr	r25
    9b2c:	96 95       	lsr	r25
    9b2e:	96 95       	lsr	r25
    9b30:	29 27       	eor	r18, r25
    9b32:	28 27       	eor	r18, r24
    9b34:	98 2f       	mov	r25, r24
    9b36:	92 95       	swap	r25
    9b38:	9f 70       	andi	r25, 0x0F	; 15
    9b3a:	29 27       	eor	r18, r25
    9b3c:	27 95       	ror	r18
    9b3e:	22 27       	eor	r18, r18
    9b40:	27 95       	ror	r18
    9b42:	98 2f       	mov	r25, r24
    9b44:	96 95       	lsr	r25
    9b46:	29 2b       	or	r18, r25
    9b48:	20 93 04 01 	sts	0x0104, r18
    9b4c:	6d e0       	ldi	r22, 0x0D	; 13
    9b4e:	0e 94 76 70 	call	0xe0ec	; 0xe0ec <__udivmodqi4>
    9b52:	39 2f       	mov	r19, r25
    9b54:	33 0f       	add	r19, r19
    9b56:	82 2f       	mov	r24, r18
    9b58:	6b e0       	ldi	r22, 0x0B	; 11
    9b5a:	0e 94 76 70 	call	0xe0ec	; 0xe0ec <__udivmodqi4>
    9b5e:	99 0f       	add	r25, r25
    9b60:	9f 5f       	subi	r25, 0xFF	; 255
    9b62:	83 2f       	mov	r24, r19
    9b64:	8e 5f       	subi	r24, 0xFE	; 254
    9b66:	69 2f       	mov	r22, r25
    9b68:	4b e9       	ldi	r20, 0x9B	; 155
    9b6a:	0e 94 b3 4c 	call	0x9966	; 0x9966 <PlacePowerUp>
    9b6e:	88 23       	and	r24, r24
    9b70:	d1 f5       	brne	.+116    	; 0x9be6 <DispersePowerups+0x250>
    9b72:	90 91 04 01 	lds	r25, 0x0104
    9b76:	89 2f       	mov	r24, r25
    9b78:	86 95       	lsr	r24
    9b7a:	86 95       	lsr	r24
    9b7c:	29 2f       	mov	r18, r25
    9b7e:	26 95       	lsr	r18
    9b80:	26 95       	lsr	r18
    9b82:	26 95       	lsr	r18
    9b84:	82 27       	eor	r24, r18
    9b86:	89 27       	eor	r24, r25
    9b88:	29 2f       	mov	r18, r25
    9b8a:	22 95       	swap	r18
    9b8c:	2f 70       	andi	r18, 0x0F	; 15
    9b8e:	82 27       	eor	r24, r18
    9b90:	87 95       	ror	r24
    9b92:	88 27       	eor	r24, r24
    9b94:	87 95       	ror	r24
    9b96:	96 95       	lsr	r25
    9b98:	89 2b       	or	r24, r25
         PlacePowerUp(((prand()%13)<<1)+ARENA_START_X,((prand()%11)<<1)+ARENA_START_Y,POWERUP_START+4);
    9b9a:	28 2f       	mov	r18, r24
    9b9c:	26 95       	lsr	r18
    9b9e:	26 95       	lsr	r18
    9ba0:	98 2f       	mov	r25, r24
    9ba2:	96 95       	lsr	r25
    9ba4:	96 95       	lsr	r25
    9ba6:	96 95       	lsr	r25
    9ba8:	29 27       	eor	r18, r25
    9baa:	28 27       	eor	r18, r24
    9bac:	98 2f       	mov	r25, r24
    9bae:	92 95       	swap	r25
    9bb0:	9f 70       	andi	r25, 0x0F	; 15
    9bb2:	29 27       	eor	r18, r25
    9bb4:	27 95       	ror	r18
    9bb6:	22 27       	eor	r18, r18
    9bb8:	27 95       	ror	r18
    9bba:	98 2f       	mov	r25, r24
    9bbc:	96 95       	lsr	r25
    9bbe:	29 2b       	or	r18, r25
    9bc0:	20 93 04 01 	sts	0x0104, r18
    9bc4:	6d e0       	ldi	r22, 0x0D	; 13
    9bc6:	0e 94 76 70 	call	0xe0ec	; 0xe0ec <__udivmodqi4>
    9bca:	39 2f       	mov	r19, r25
    9bcc:	33 0f       	add	r19, r19
    9bce:	82 2f       	mov	r24, r18
    9bd0:	6b e0       	ldi	r22, 0x0B	; 11
    9bd2:	0e 94 76 70 	call	0xe0ec	; 0xe0ec <__udivmodqi4>
    9bd6:	99 0f       	add	r25, r25
    9bd8:	9f 5f       	subi	r25, 0xFF	; 255
    9bda:	83 2f       	mov	r24, r19
    9bdc:	8e 5f       	subi	r24, 0xFE	; 254
    9bde:	69 2f       	mov	r22, r25
    9be0:	4b e9       	ldi	r20, 0x9B	; 155
    9be2:	0e 94 b3 4c 	call	0x9966	; 0x9966 <PlacePowerUp>
      if(!PlacePowerUp(((prand()%11)<<1)+ARENA_START_X,((prand()%11)<<1)+ARENA_START_Y,POWERUP_START+0))   
         PlacePowerUp(((prand()%11)<<1)+ARENA_START_X,((prand()%11)<<1)+ARENA_START_Y,POWERUP_START+0);  
   }

   t = GetPlayerRange(p)-3;
   for(i=0;i<t;i++){
    9be6:	1f 5f       	subi	r17, 0xFF	; 255
    9be8:	10 17       	cp	r17, r16
    9bea:	08 f4       	brcc	.+2      	; 0x9bee <DispersePowerups+0x258>
    9bec:	86 cf       	rjmp	.-244    	; 0x9afa <DispersePowerups+0x164>
    9bee:	10 e0       	ldi	r17, 0x00	; 0
    9bf0:	90 91 04 01 	lds	r25, 0x0104
    9bf4:	89 2f       	mov	r24, r25
    9bf6:	86 95       	lsr	r24
    9bf8:	86 95       	lsr	r24
    9bfa:	29 2f       	mov	r18, r25
    9bfc:	26 95       	lsr	r18
    9bfe:	26 95       	lsr	r18
    9c00:	26 95       	lsr	r18
    9c02:	82 27       	eor	r24, r18
    9c04:	89 27       	eor	r24, r25
    9c06:	29 2f       	mov	r18, r25
    9c08:	22 95       	swap	r18
    9c0a:	2f 70       	andi	r18, 0x0F	; 15
    9c0c:	82 27       	eor	r24, r18
    9c0e:	87 95       	ror	r24
    9c10:	88 27       	eor	r24, r24
    9c12:	87 95       	ror	r24
    9c14:	96 95       	lsr	r25
    9c16:	89 2b       	or	r24, r25
         PlacePowerUp(((prand()%13)<<1)+ARENA_START_X,((prand()%11)<<1)+ARENA_START_Y,POWERUP_START+4);
   }

   t = player_max_bombs(p)-1;
   for(i=0;i<t;i++){
      if(!PlacePowerUp(((prand()%11)<<1)+ARENA_START_X,((prand()%11)<<1)+ARENA_START_Y,POWERUP_START+8))   
    9c18:	28 2f       	mov	r18, r24
    9c1a:	26 95       	lsr	r18
    9c1c:	26 95       	lsr	r18
    9c1e:	98 2f       	mov	r25, r24
    9c20:	96 95       	lsr	r25
    9c22:	96 95       	lsr	r25
    9c24:	96 95       	lsr	r25
    9c26:	29 27       	eor	r18, r25
    9c28:	28 27       	eor	r18, r24
    9c2a:	98 2f       	mov	r25, r24
    9c2c:	92 95       	swap	r25
    9c2e:	9f 70       	andi	r25, 0x0F	; 15
    9c30:	29 27       	eor	r18, r25
    9c32:	27 95       	ror	r18
    9c34:	22 27       	eor	r18, r18
    9c36:	27 95       	ror	r18
    9c38:	98 2f       	mov	r25, r24
    9c3a:	96 95       	lsr	r25
    9c3c:	29 2b       	or	r18, r25
    9c3e:	20 93 04 01 	sts	0x0104, r18
    9c42:	6b e0       	ldi	r22, 0x0B	; 11
    9c44:	0e 94 76 70 	call	0xe0ec	; 0xe0ec <__udivmodqi4>
    9c48:	39 2f       	mov	r19, r25
    9c4a:	33 0f       	add	r19, r19
    9c4c:	82 2f       	mov	r24, r18
    9c4e:	0e 94 76 70 	call	0xe0ec	; 0xe0ec <__udivmodqi4>
    9c52:	99 0f       	add	r25, r25
    9c54:	9f 5f       	subi	r25, 0xFF	; 255
    9c56:	83 2f       	mov	r24, r19
    9c58:	8e 5f       	subi	r24, 0xFE	; 254
    9c5a:	69 2f       	mov	r22, r25
    9c5c:	4f e9       	ldi	r20, 0x9F	; 159
    9c5e:	0e 94 b3 4c 	call	0x9966	; 0x9966 <PlacePowerUp>
    9c62:	88 23       	and	r24, r24
    9c64:	c9 f5       	brne	.+114    	; 0x9cd8 <DispersePowerups+0x342>
    9c66:	90 91 04 01 	lds	r25, 0x0104
    9c6a:	89 2f       	mov	r24, r25
    9c6c:	86 95       	lsr	r24
    9c6e:	86 95       	lsr	r24
    9c70:	29 2f       	mov	r18, r25
    9c72:	26 95       	lsr	r18
    9c74:	26 95       	lsr	r18
    9c76:	26 95       	lsr	r18
    9c78:	82 27       	eor	r24, r18
    9c7a:	89 27       	eor	r24, r25
    9c7c:	29 2f       	mov	r18, r25
    9c7e:	22 95       	swap	r18
    9c80:	2f 70       	andi	r18, 0x0F	; 15
    9c82:	82 27       	eor	r24, r18
    9c84:	87 95       	ror	r24
    9c86:	88 27       	eor	r24, r24
    9c88:	87 95       	ror	r24
    9c8a:	96 95       	lsr	r25
    9c8c:	89 2b       	or	r24, r25
         PlacePowerUp(((prand()%11)<<1)+ARENA_START_X,((prand()%11)<<1)+ARENA_START_Y,POWERUP_START+8);  
    9c8e:	28 2f       	mov	r18, r24
    9c90:	26 95       	lsr	r18
    9c92:	26 95       	lsr	r18
    9c94:	98 2f       	mov	r25, r24
    9c96:	96 95       	lsr	r25
    9c98:	96 95       	lsr	r25
    9c9a:	96 95       	lsr	r25
    9c9c:	29 27       	eor	r18, r25
    9c9e:	28 27       	eor	r18, r24
    9ca0:	98 2f       	mov	r25, r24
    9ca2:	92 95       	swap	r25
    9ca4:	9f 70       	andi	r25, 0x0F	; 15
    9ca6:	29 27       	eor	r18, r25
    9ca8:	27 95       	ror	r18
    9caa:	22 27       	eor	r18, r18
    9cac:	27 95       	ror	r18
    9cae:	98 2f       	mov	r25, r24
    9cb0:	96 95       	lsr	r25
    9cb2:	29 2b       	or	r18, r25
    9cb4:	20 93 04 01 	sts	0x0104, r18
    9cb8:	6b e0       	ldi	r22, 0x0B	; 11
    9cba:	0e 94 76 70 	call	0xe0ec	; 0xe0ec <__udivmodqi4>
    9cbe:	39 2f       	mov	r19, r25
    9cc0:	33 0f       	add	r19, r19
    9cc2:	82 2f       	mov	r24, r18
    9cc4:	0e 94 76 70 	call	0xe0ec	; 0xe0ec <__udivmodqi4>
    9cc8:	99 0f       	add	r25, r25
    9cca:	9f 5f       	subi	r25, 0xFF	; 255
    9ccc:	83 2f       	mov	r24, r19
    9cce:	8e 5f       	subi	r24, 0xFE	; 254
    9cd0:	69 2f       	mov	r22, r25
    9cd2:	4f e9       	ldi	r20, 0x9F	; 159
    9cd4:	0e 94 b3 4c 	call	0x9966	; 0x9966 <PlacePowerUp>
      if(!PlacePowerUp(((prand()%13)<<1)+ARENA_START_X,((prand()%11)<<1)+ARENA_START_Y,POWERUP_START+4))
         PlacePowerUp(((prand()%13)<<1)+ARENA_START_X,((prand()%11)<<1)+ARENA_START_Y,POWERUP_START+4);
   }

   t = player_max_bombs(p)-1;
   for(i=0;i<t;i++){
    9cd8:	1f 5f       	subi	r17, 0xFF	; 255
    9cda:	13 30       	cpi	r17, 0x03	; 3
    9cdc:	09 f0       	breq	.+2      	; 0x9ce0 <DispersePowerups+0x34a>
    9cde:	88 cf       	rjmp	.-240    	; 0x9bf0 <DispersePowerups+0x25a>
      if(!PlacePowerUp(((prand()%11)<<1)+ARENA_START_X,((prand()%11)<<1)+ARENA_START_Y,POWERUP_START+8))   
         PlacePowerUp(((prand()%11)<<1)+ARENA_START_X,((prand()%11)<<1)+ARENA_START_Y,POWERUP_START+8);  
   }
}
    9ce0:	df 91       	pop	r29
    9ce2:	cf 91       	pop	r28
    9ce4:	1f 91       	pop	r17
    9ce6:	0f 91       	pop	r16
    9ce8:	08 95       	ret

00009cea <ThrowBomb>:
   u8 b = FindBomb(x,y,255);
   //if(b == 255)
   bomb_state[b] = MOVE | dir;
}

void ThrowBomb(u8 sx, u8 sy, u8 dir, u8 mag, u8 b){
    9cea:	ff 92       	push	r15
    9cec:	0f 93       	push	r16
    9cee:	1f 93       	push	r17
    9cf0:	cf 93       	push	r28
    9cf2:	df 93       	push	r29
    9cf4:	92 2f       	mov	r25, r18
   bomb_x[b]      = sx*8;//convert to sprite coords
    9cf6:	c0 2f       	mov	r28, r16
    9cf8:	d0 e0       	ldi	r29, 0x00	; 0
    9cfa:	a8 2f       	mov	r26, r24
    9cfc:	b0 e0       	ldi	r27, 0x00	; 0
    9cfe:	8d 01       	movw	r16, r26
    9d00:	73 e0       	ldi	r23, 0x03	; 3
    9d02:	00 0f       	add	r16, r16
    9d04:	11 1f       	adc	r17, r17
    9d06:	7a 95       	dec	r23
    9d08:	e1 f7       	brne	.-8      	; 0x9d02 <ThrowBomb+0x18>
    9d0a:	f0 2e       	mov	r15, r16
    9d0c:	fe 01       	movw	r30, r28
    9d0e:	e5 5e       	subi	r30, 0xE5	; 229
    9d10:	ff 4e       	sbci	r31, 0xEF	; 239
    9d12:	00 83       	st	Z, r16
   bomb_y[b]      = sy*8;
    9d14:	70 e0       	ldi	r23, 0x00	; 0
    9d16:	9b 01       	movw	r18, r22
    9d18:	53 e0       	ldi	r21, 0x03	; 3
    9d1a:	22 0f       	add	r18, r18
    9d1c:	33 1f       	adc	r19, r19
    9d1e:	5a 95       	dec	r21
    9d20:	e1 f7       	brne	.-8      	; 0x9d1a <ThrowBomb+0x30>
    9d22:	52 2f       	mov	r21, r18
    9d24:	fe 01       	movw	r30, r28
    9d26:	ef 56       	subi	r30, 0x6F	; 111
    9d28:	f0 4f       	sbci	r31, 0xF0	; 240
    9d2a:	20 83       	st	Z, r18
   bomb_state[b] = THROWN|dir;
    9d2c:	fe 01       	movw	r30, r28
    9d2e:	e2 53       	subi	r30, 0x32	; 50
    9d30:	f0 4f       	sbci	r31, 0xF0	; 240
    9d32:	84 2f       	mov	r24, r20
    9d34:	80 61       	ori	r24, 0x10	; 16
    9d36:	80 83       	st	Z, r24
   
   if(dir & RIGHT){
    9d38:	43 ff       	sbrs	r20, 3
    9d3a:	06 c0       	rjmp	.+12     	; 0x9d48 <ThrowBomb+0x5e>
      bomb_offset[b] = (sx+mag)*8;//target x
    9d3c:	fe 01       	movw	r30, r28
    9d3e:	e4 5d       	subi	r30, 0xD4	; 212
    9d40:	ff 4e       	sbci	r31, 0xEF	; 239
    9d42:	a9 0f       	add	r26, r25
    9d44:	b1 1d       	adc	r27, r1
    9d46:	07 c0       	rjmp	.+14     	; 0x9d56 <ThrowBomb+0x6c>
      bomb_xtra[b]   = (sy+0)*8;//target y
   }
   else if(dir & LEFT){
    9d48:	42 ff       	sbrs	r20, 2
    9d4a:	10 c0       	rjmp	.+32     	; 0x9d6c <ThrowBomb+0x82>
      bomb_offset[b] = (sx-mag)*8;//target x
    9d4c:	fe 01       	movw	r30, r28
    9d4e:	e4 5d       	subi	r30, 0xD4	; 212
    9d50:	ff 4e       	sbci	r31, 0xEF	; 239
    9d52:	a9 1b       	sub	r26, r25
    9d54:	b1 09       	sbc	r27, r1
    9d56:	83 e0       	ldi	r24, 0x03	; 3
    9d58:	aa 0f       	add	r26, r26
    9d5a:	bb 1f       	adc	r27, r27
    9d5c:	8a 95       	dec	r24
    9d5e:	e1 f7       	brne	.-8      	; 0x9d58 <ThrowBomb+0x6e>
    9d60:	a0 83       	st	Z, r26
      bomb_xtra[b]   = (sy+0)*8;//target y
    9d62:	fe 01       	movw	r30, r28
    9d64:	e2 52       	subi	r30, 0x22	; 34
    9d66:	f0 4f       	sbci	r31, 0xF0	; 240
    9d68:	20 83       	st	Z, r18
    9d6a:	1d c0       	rjmp	.+58     	; 0x9da6 <ThrowBomb+0xbc>
    9d6c:	fe 01       	movw	r30, r28
    9d6e:	e4 5d       	subi	r30, 0xD4	; 212
    9d70:	ff 4e       	sbci	r31, 0xEF	; 239
    9d72:	29 2f       	mov	r18, r25
    9d74:	30 e0       	ldi	r19, 0x00	; 0
    9d76:	de 01       	movw	r26, r28
    9d78:	a2 52       	subi	r26, 0x22	; 34
    9d7a:	b0 4f       	sbci	r27, 0xF0	; 240
   }
   else if(dir & DOWN){
    9d7c:	41 ff       	sbrs	r20, 1
    9d7e:	0a c0       	rjmp	.+20     	; 0x9d94 <ThrowBomb+0xaa>
      bomb_offset[b] = (sx+0)*8;//target x
    9d80:	00 83       	st	Z, r16
      bomb_xtra[b]   = (sy+mag)*8;//target y
    9d82:	26 0f       	add	r18, r22
    9d84:	37 1f       	adc	r19, r23
    9d86:	f3 e0       	ldi	r31, 0x03	; 3
    9d88:	22 0f       	add	r18, r18
    9d8a:	33 1f       	adc	r19, r19
    9d8c:	fa 95       	dec	r31
    9d8e:	e1 f7       	brne	.-8      	; 0x9d88 <ThrowBomb+0x9e>
    9d90:	2c 93       	st	X, r18
    9d92:	09 c0       	rjmp	.+18     	; 0x9da6 <ThrowBomb+0xbc>
   }
   else{
      bomb_offset[b] = (sx+0)*8;//target x
    9d94:	00 83       	st	Z, r16
      bomb_xtra[b]   = (sy-mag)*8;//target y
    9d96:	62 1b       	sub	r22, r18
    9d98:	73 0b       	sbc	r23, r19
    9d9a:	e3 e0       	ldi	r30, 0x03	; 3
    9d9c:	66 0f       	add	r22, r22
    9d9e:	77 1f       	adc	r23, r23
    9da0:	ea 95       	dec	r30
    9da2:	e1 f7       	brne	.-8      	; 0x9d9c <ThrowBomb+0xb2>
    9da4:	6c 93       	st	X, r22
   }

   //Calculate midpoint of distance so DrawBombs knows how to draw the arc
   bomb_timer[b] = (abs(bomb_x[b]-bomb_offset[b])+abs(bomb_y[b]-bomb_xtra[b]))/2;
    9da6:	de 01       	movw	r26, r28
    9da8:	a7 55       	subi	r26, 0x57	; 87
    9daa:	b0 4f       	sbci	r27, 0xF0	; 240
    9dac:	25 2f       	mov	r18, r21
    9dae:	30 e0       	ldi	r19, 0x00	; 0
    9db0:	fe 01       	movw	r30, r28
    9db2:	e2 52       	subi	r30, 0x22	; 34
    9db4:	f0 4f       	sbci	r31, 0xF0	; 240
    9db6:	80 81       	ld	r24, Z
    9db8:	28 1b       	sub	r18, r24
    9dba:	31 09       	sbc	r19, r1
    9dbc:	37 ff       	sbrs	r19, 7
    9dbe:	03 c0       	rjmp	.+6      	; 0x9dc6 <ThrowBomb+0xdc>
    9dc0:	30 95       	com	r19
    9dc2:	21 95       	neg	r18
    9dc4:	3f 4f       	sbci	r19, 0xFF	; 255
    9dc6:	4f 2d       	mov	r20, r15
    9dc8:	50 e0       	ldi	r21, 0x00	; 0
    9dca:	c4 5d       	subi	r28, 0xD4	; 212
    9dcc:	df 4e       	sbci	r29, 0xEF	; 239
    9dce:	88 81       	ld	r24, Y
    9dd0:	48 1b       	sub	r20, r24
    9dd2:	51 09       	sbc	r21, r1
    9dd4:	57 ff       	sbrs	r21, 7
    9dd6:	03 c0       	rjmp	.+6      	; 0x9dde <ThrowBomb+0xf4>
    9dd8:	50 95       	com	r21
    9dda:	41 95       	neg	r20
    9ddc:	5f 4f       	sbci	r21, 0xFF	; 255
    9dde:	24 0f       	add	r18, r20
    9de0:	35 1f       	adc	r19, r21
    9de2:	35 95       	asr	r19
    9de4:	27 95       	ror	r18
    9de6:	2c 93       	st	X, r18
}
    9de8:	cd b7       	in	r28, 0x3d	; 61
    9dea:	de b7       	in	r29, 0x3e	; 62
    9dec:	e5 e0       	ldi	r30, 0x05	; 5
    9dee:	0c 94 d2 70 	jmp	0xe1a4	; 0xe1a4 <__epilogue_restores__+0x1a>

00009df2 <RamifyFont>:
inline u8 GetMapTile(u8 x, u8 y){
      return (vram[(y*30)+x]-RAM_TILES_COUNT);//return (vram[122+(y*30)+x]-RAM_TILES_COUNT);
}


void RamifyFont(int startoff, u8 numchars){
    9df2:	a0 e0       	ldi	r26, 0x00	; 0
    9df4:	b0 e0       	ldi	r27, 0x00	; 0
    9df6:	ef ef       	ldi	r30, 0xFF	; 255
    9df8:	fe e4       	ldi	r31, 0x4E	; 78
    9dfa:	0c 94 b2 70 	jmp	0xe164	; 0xe164 <__prologue_saves__+0x12>
   u8 t;
   int roff = 0;
   for(int i=startoff;i<(8*numchars)+startoff;i++){
    9dfe:	70 e0       	ldi	r23, 0x00	; 0
    9e00:	23 e0       	ldi	r18, 0x03	; 3
    9e02:	66 0f       	add	r22, r22
    9e04:	77 1f       	adc	r23, r23
    9e06:	2a 95       	dec	r18
    9e08:	e1 f7       	brne	.-8      	; 0x9e02 <RamifyFont+0x10>
    9e0a:	68 0f       	add	r22, r24
    9e0c:	79 1f       	adc	r23, r25
    9e0e:	8c 01       	movw	r16, r24
    9e10:	00 53       	subi	r16, 0x30	; 48
    9e12:	1e 4f       	sbci	r17, 0xFE	; 254
    9e14:	ec 01       	movw	r28, r24
    9e16:	a0 e0       	ldi	r26, 0x00	; 0
    9e18:	b0 e0       	ldi	r27, 0x00	; 0
	  t = pgm_read_byte(&FontTiles[i]);
      for(u8 j=0;j<8;j++){
         if(t & (128>>j))
    9e1a:	80 e8       	ldi	r24, 0x80	; 128
    9e1c:	c8 2e       	mov	r12, r24
    9e1e:	d1 2c       	mov	r13, r1
		    ram_tiles[roff++] = 255;
    9e20:	bb 24       	eor	r11, r11
    9e22:	ba 94       	dec	r11
    9e24:	26 c0       	rjmp	.+76     	; 0x9e72 <RamifyFont+0x80>

void RamifyFont(int startoff, u8 numchars){
   u8 t;
   int roff = 0;
   for(int i=startoff;i<(8*numchars)+startoff;i++){
	  t = pgm_read_byte(&FontTiles[i]);
    9e26:	f8 01       	movw	r30, r16
    9e28:	84 91       	lpm	r24, Z+
    9e2a:	ad 01       	movw	r20, r26
    9e2c:	4f 5f       	subi	r20, 0xFF	; 255
    9e2e:	5f 4f       	sbci	r21, 0xFF	; 255
    9e30:	fd 01       	movw	r30, r26
    9e32:	e3 59       	subi	r30, 0x93	; 147
    9e34:	fb 4f       	sbci	r31, 0xFB	; 251
    9e36:	20 e0       	ldi	r18, 0x00	; 0
    9e38:	30 e0       	ldi	r19, 0x00	; 0
      for(u8 j=0;j<8;j++){
         if(t & (128>>j))
    9e3a:	e8 2e       	mov	r14, r24
    9e3c:	ff 24       	eor	r15, r15
    9e3e:	c6 01       	movw	r24, r12
    9e40:	02 2e       	mov	r0, r18
    9e42:	02 c0       	rjmp	.+4      	; 0x9e48 <RamifyFont+0x56>
    9e44:	95 95       	asr	r25
    9e46:	87 95       	ror	r24
    9e48:	0a 94       	dec	r0
    9e4a:	e2 f7       	brpl	.-8      	; 0x9e44 <RamifyFont+0x52>
    9e4c:	8e 21       	and	r24, r14
    9e4e:	9f 21       	and	r25, r15
    9e50:	89 2b       	or	r24, r25
    9e52:	11 f0       	breq	.+4      	; 0x9e58 <RamifyFont+0x66>
		    ram_tiles[roff++] = 255;
    9e54:	b0 82       	st	Z, r11
    9e56:	01 c0       	rjmp	.+2      	; 0x9e5a <RamifyFont+0x68>
         else
		    ram_tiles[roff++] = 0;
    9e58:	10 82       	st	Z, r1
    9e5a:	da 01       	movw	r26, r20
    9e5c:	2f 5f       	subi	r18, 0xFF	; 255
    9e5e:	3f 4f       	sbci	r19, 0xFF	; 255
    9e60:	4f 5f       	subi	r20, 0xFF	; 255
    9e62:	5f 4f       	sbci	r21, 0xFF	; 255
    9e64:	31 96       	adiw	r30, 0x01	; 1
void RamifyFont(int startoff, u8 numchars){
   u8 t;
   int roff = 0;
   for(int i=startoff;i<(8*numchars)+startoff;i++){
	  t = pgm_read_byte(&FontTiles[i]);
      for(u8 j=0;j<8;j++){
    9e66:	28 30       	cpi	r18, 0x08	; 8
    9e68:	31 05       	cpc	r19, r1
    9e6a:	49 f7       	brne	.-46     	; 0x9e3e <RamifyFont+0x4c>


void RamifyFont(int startoff, u8 numchars){
   u8 t;
   int roff = 0;
   for(int i=startoff;i<(8*numchars)+startoff;i++){
    9e6c:	21 96       	adiw	r28, 0x01	; 1
    9e6e:	0f 5f       	subi	r16, 0xFF	; 255
    9e70:	1f 4f       	sbci	r17, 0xFF	; 255
    9e72:	c6 17       	cp	r28, r22
    9e74:	d7 07       	cpc	r29, r23
    9e76:	bc f2       	brlt	.-82     	; 0x9e26 <RamifyFont+0x34>
		    ram_tiles[roff++] = 255;
         else
		    ram_tiles[roff++] = 0;
	  }
   }
}
    9e78:	cd b7       	in	r28, 0x3d	; 61
    9e7a:	de b7       	in	r29, 0x3e	; 62
    9e7c:	e9 e0       	ldi	r30, 0x09	; 9
    9e7e:	0c 94 ce 70 	jmp	0xe19c	; 0xe19c <__epilogue_restores__+0x12>

00009e82 <DrawSpriteTile>:
	     ram_tiles[start] = replace;
      start++;
   }
}

void DrawSpriteTile(u8 x, u8 y, u8 f, u8 p, u8 offset, u8 overflow){
    9e82:	a0 e0       	ldi	r26, 0x00	; 0
    9e84:	b0 e0       	ldi	r27, 0x00	; 0
    9e86:	e7 e4       	ldi	r30, 0x47	; 71
    9e88:	ff e4       	ldi	r31, 0x4F	; 79
    9e8a:	0c 94 ad 70 	jmp	0xe15a	; 0xe15a <__prologue_saves__+0x8>
    9e8e:	98 2f       	mov	r25, r24
    9e90:	96 2e       	mov	r9, r22
    9e92:	a2 2e       	mov	r10, r18
   int t,m;
   int fo = f*7;
   int mo = (pgm_read_byte(&FrameTable[fo+6]))*6;
    9e94:	87 e0       	ldi	r24, 0x07	; 7
    9e96:	48 9f       	mul	r20, r24
    9e98:	a0 01       	movw	r20, r0
    9e9a:	11 24       	eor	r1, r1
    9e9c:	fa 01       	movw	r30, r20
    9e9e:	e5 59       	subi	r30, 0x95	; 149
    9ea0:	ff 49       	sbci	r31, 0x9F	; 159
    9ea2:	e4 91       	lpm	r30, Z+
   sprites[spritecount].y=y; 
   sprites[spritecount].tileIndex=t;

   if(flip){sprites[spritecount].flags = SPR_FLIP_X;}
   else    {sprites[spritecount].flags = 0;}
   sprites[spritecount].flags |= pallet<<2;
    9ea4:	aa 0c       	add	r10, r10
    9ea6:	aa 0c       	add	r10, r10
    9ea8:	d0 90 a2 0f 	lds	r13, 0x0FA2
    9eac:	86 e0       	ldi	r24, 0x06	; 6
    9eae:	e8 9f       	mul	r30, r24
    9eb0:	90 01       	movw	r18, r0
    9eb2:	11 24       	eor	r1, r1
    9eb4:	20 5f       	subi	r18, 0xF0	; 240
    9eb6:	3d 49       	sbci	r19, 0x9D	; 157
    9eb8:	65 e6       	ldi	r22, 0x65	; 101
    9eba:	e6 2e       	mov	r14, r22
    9ebc:	60 e6       	ldi	r22, 0x60	; 96
    9ebe:	f6 2e       	mov	r15, r22
    9ec0:	e4 0e       	add	r14, r20
    9ec2:	f5 1e       	adc	r15, r21
    9ec4:	c1 e0       	ldi	r28, 0x01	; 1
    9ec6:	d0 e0       	ldi	r29, 0x00	; 0
   int to = 0;

   for(u8 j=0;j<3;j++){
   
   for(u8 i=0;i<2;i++){
      t = pgm_read_byte( &FrameTable[fo+to])+offset;
    9ec8:	60 2e       	mov	r6, r16
    9eca:	77 24       	eor	r7, r7

   sprites[spritecount].x=x; 
   sprites[spritecount].y=y; 
   sprites[spritecount].tileIndex=t;

   if(flip){sprites[spritecount].flags = SPR_FLIP_X;}
    9ecc:	88 24       	eor	r8, r8
    9ece:	83 94       	inc	r8
    9ed0:	4a c0       	rjmp	.+148    	; 0x9f66 <DrawSpriteTile+0xe4>
   else    {sprites[spritecount].flags = 0;}
   sprites[spritecount].flags |= pallet<<2;
    9ed2:	18 2f       	mov	r17, r24
    9ed4:	88 ef       	ldi	r24, 0xF8	; 248
    9ed6:	c8 2e       	mov	r12, r24
    9ed8:	c1 0e       	add	r12, r17
    9eda:	fb 01       	movw	r30, r22
    9edc:	84 91       	lpm	r24, Z+
    9ede:	d3 01       	movw	r26, r6
    9ee0:	a8 0f       	add	r26, r24
    9ee2:	b1 1d       	adc	r27, r1
      m = pgm_read_byte(&MirrorTable[mo+to]);
    9ee4:	fa 01       	movw	r30, r20
    9ee6:	b4 90       	lpm	r11, Z+
      if(t == 255){
    9ee8:	af 3f       	cpi	r26, 0xFF	; 255
    9eea:	b1 05       	cpc	r27, r1
    9eec:	21 f1       	breq	.+72     	; 0x9f36 <DrawSpriteTile+0xb4>
inline void UpdateBorder();



bool PutSprite(u8 x, u8 y, u8 t, bool flip, u8 pallet){
   if(spritecount >= MAX_SPRITES){return false;}//covers roll over for decrementing count on blink
    9eee:	fe e1       	ldi	r31, 0x1E	; 30
    9ef0:	fd 15       	cp	r31, r13
    9ef2:	08 f1       	brcs	.+66     	; 0x9f36 <DrawSpriteTile+0xb4>

   sprites[spritecount].x=x; 
    9ef4:	8d 2d       	mov	r24, r13
    9ef6:	90 e0       	ldi	r25, 0x00	; 0
    9ef8:	fc 01       	movw	r30, r24
    9efa:	ee 0f       	add	r30, r30
    9efc:	ff 1f       	adc	r31, r31
    9efe:	ee 0f       	add	r30, r30
    9f00:	ff 1f       	adc	r31, r31
    9f02:	e8 0f       	add	r30, r24
    9f04:	f9 1f       	adc	r31, r25
    9f06:	ee 52       	subi	r30, 0x2E	; 46
    9f08:	fc 4f       	sbci	r31, 0xFC	; 252
    9f0a:	c0 82       	st	Z, r12
   sprites[spritecount].y=y; 
    9f0c:	91 82       	std	Z+1, r9	; 0x01
   sprites[spritecount].tileIndex=t;
    9f0e:	a2 83       	std	Z+2, r26	; 0x02
    9f10:	13 82       	std	Z+3, r1	; 0x03

   if(flip){sprites[spritecount].flags = SPR_FLIP_X;}
    9f12:	bb 20       	and	r11, r11
    9f14:	11 f0       	breq	.+4      	; 0x9f1a <DrawSpriteTile+0x98>
    9f16:	84 82       	std	Z+4, r8	; 0x04
    9f18:	01 c0       	rjmp	.+2      	; 0x9f1c <DrawSpriteTile+0x9a>
   else    {sprites[spritecount].flags = 0;}
    9f1a:	14 82       	std	Z+4, r1	; 0x04
   sprites[spritecount].flags |= pallet<<2;
    9f1c:	fc 01       	movw	r30, r24
    9f1e:	ee 0f       	add	r30, r30
    9f20:	ff 1f       	adc	r31, r31
    9f22:	ee 0f       	add	r30, r30
    9f24:	ff 1f       	adc	r31, r31
    9f26:	e8 0f       	add	r30, r24
    9f28:	f9 1f       	adc	r31, r25
    9f2a:	ee 52       	subi	r30, 0x2E	; 46
    9f2c:	fc 4f       	sbci	r31, 0xFC	; 252
    9f2e:	84 81       	ldd	r24, Z+4	; 0x04
    9f30:	8a 29       	or	r24, r10
    9f32:	84 83       	std	Z+4, r24	; 0x04
   //if(blink){spritecount++;}else{spritecount--;}
   spritecount++;
    9f34:	d3 94       	inc	r13
   int mo = (pgm_read_byte(&FrameTable[fo+6]))*6;
   int to = 0;

   for(u8 j=0;j<3;j++){
   
   for(u8 i=0;i<2;i++){
    9f36:	0f 5f       	subi	r16, 0xFF	; 255
    9f38:	6f 5f       	subi	r22, 0xFF	; 255
    9f3a:	7f 4f       	sbci	r23, 0xFF	; 255
    9f3c:	4f 5f       	subi	r20, 0xFF	; 255
    9f3e:	5f 4f       	sbci	r21, 0xFF	; 255
    9f40:	81 2f       	mov	r24, r17
    9f42:	88 5f       	subi	r24, 0xF8	; 248
    9f44:	02 30       	cpi	r16, 0x02	; 2
    9f46:	09 f0       	breq	.+2      	; 0x9f4a <DrawSpriteTile+0xc8>
    9f48:	c4 cf       	rjmp	.-120    	; 0x9ed2 <DrawSpriteTile+0x50>
    9f4a:	22 96       	adiw	r28, 0x02	; 2
    9f4c:	2e 5f       	subi	r18, 0xFE	; 254
    9f4e:	3f 4f       	sbci	r19, 0xFF	; 255
    9f50:	82 e0       	ldi	r24, 0x02	; 2
    9f52:	90 e0       	ldi	r25, 0x00	; 0
    9f54:	e8 0e       	add	r14, r24
    9f56:	f9 1e       	adc	r15, r25
   int t,m;
   int fo = f*7;
   int mo = (pgm_read_byte(&FrameTable[fo+6]))*6;
   int to = 0;

   for(u8 j=0;j<3;j++){
    9f58:	c7 30       	cpi	r28, 0x07	; 7
    9f5a:	d1 05       	cpc	r29, r1
    9f5c:	51 f0       	breq	.+20     	; 0x9f72 <DrawSpriteTile+0xf0>
	  
	  PutSprite(x,y,t,m,p);
      x += 8;
	  to++;
   }
      x -= 16;
    9f5e:	91 2f       	mov	r25, r17
    9f60:	90 51       	subi	r25, 0x10	; 16
      y += 8;
    9f62:	e8 e0       	ldi	r30, 0x08	; 8
    9f64:	9e 0e       	add	r9, r30
    9f66:	19 2f       	mov	r17, r25
    9f68:	18 5f       	subi	r17, 0xF8	; 248
    9f6a:	b7 01       	movw	r22, r14
    9f6c:	a9 01       	movw	r20, r18
    9f6e:	00 e0       	ldi	r16, 0x00	; 0
    9f70:	b1 cf       	rjmp	.-158    	; 0x9ed4 <DrawSpriteTile+0x52>
    9f72:	d0 92 a2 0f 	sts	0x0FA2, r13
   }
}
    9f76:	cd b7       	in	r28, 0x3d	; 61
    9f78:	de b7       	in	r29, 0x3e	; 62
    9f7a:	ee e0       	ldi	r30, 0x0E	; 14
    9f7c:	0c 94 c9 70 	jmp	0xe192	; 0xe192 <__epilogue_restores__+0x8>

00009f80 <DrawBombs>:
   for(u8 i=spritecount;i<MAX_SPRITES;i++){sprites[i].x=SCREEN_TILES_H*TILE_WIDTH;}
   //if(blink){for(u8 i=spritecount;i<MAX_SPRITES;i++){sprites[i].x =(SCREEN_TILES_H*TILE_WIDTH);}}//sprite count was incrementing
   //else     {for(u8 i=0;i<spritecount;i++)          {sprites[i].x =(SCREEN_TILES_H*TILE_WIDTH);}}//sprite count was decrementing
}

void DrawBombs(){
    9f80:	ef 92       	push	r14
    9f82:	0f 93       	push	r16
    9f84:	cf 93       	push	r28
    9f86:	df 93       	push	r29
    9f88:	c0 e0       	ldi	r28, 0x00	; 0
    9f8a:	d0 e0       	ldi	r29, 0x00	; 0
   char xoff,yoff;
   u8 state;
   xoff = yoff = 0;

   for(u8 i=0;i<MAX_BOMBS;i++){
      if(bomb_owner[i] == 255)
    9f8c:	fe 01       	movw	r30, r28
    9f8e:	e2 51       	subi	r30, 0x12	; 18
    9f90:	f0 4f       	sbci	r31, 0xF0	; 240
    9f92:	80 81       	ld	r24, Z
    9f94:	8f 3f       	cpi	r24, 0xFF	; 255
    9f96:	09 f4       	brne	.+2      	; 0x9f9a <DrawBombs+0x1a>
    9f98:	56 c0       	rjmp	.+172    	; 0xa046 <DrawBombs+0xc6>
	     continue;

      state = bomb_state[i];

	  if(state & THROWN){
    9f9a:	fe 01       	movw	r30, r28
    9f9c:	e2 53       	subi	r30, 0x32	; 50
    9f9e:	f0 4f       	sbci	r31, 0xF0	; 240
    9fa0:	80 81       	ld	r24, Z
    9fa2:	84 ff       	sbrs	r24, 4
    9fa4:	50 c0       	rjmp	.+160    	; 0xa046 <DrawBombs+0xc6>
	     u8 dist = abs(bomb_x[i]-bomb_offset[i])+abs(bomb_y[i]-bomb_xtra[i]);
    9fa6:	fe 01       	movw	r30, r28
    9fa8:	e5 5e       	subi	r30, 0xE5	; 229
    9faa:	ff 4e       	sbci	r31, 0xEF	; 239
    9fac:	70 81       	ld	r23, Z
    9fae:	fe 01       	movw	r30, r28
    9fb0:	ef 56       	subi	r30, 0x6F	; 111
    9fb2:	f0 4f       	sbci	r31, 0xF0	; 240
    9fb4:	60 81       	ld	r22, Z
    9fb6:	46 2f       	mov	r20, r22
    9fb8:	50 e0       	ldi	r21, 0x00	; 0
    9fba:	fe 01       	movw	r30, r28
    9fbc:	e2 52       	subi	r30, 0x22	; 34
    9fbe:	f0 4f       	sbci	r31, 0xF0	; 240
    9fc0:	80 81       	ld	r24, Z
    9fc2:	48 1b       	sub	r20, r24
    9fc4:	51 09       	sbc	r21, r1
    9fc6:	57 ff       	sbrs	r21, 7
    9fc8:	03 c0       	rjmp	.+6      	; 0x9fd0 <DrawBombs+0x50>
    9fca:	50 95       	com	r21
    9fcc:	41 95       	neg	r20
    9fce:	5f 4f       	sbci	r21, 0xFF	; 255
    9fd0:	27 2f       	mov	r18, r23
    9fd2:	30 e0       	ldi	r19, 0x00	; 0
    9fd4:	fe 01       	movw	r30, r28
    9fd6:	e4 5d       	subi	r30, 0xD4	; 212
    9fd8:	ff 4e       	sbci	r31, 0xEF	; 239
    9fda:	80 81       	ld	r24, Z
    9fdc:	28 1b       	sub	r18, r24
    9fde:	31 09       	sbc	r19, r1
    9fe0:	37 ff       	sbrs	r19, 7
    9fe2:	03 c0       	rjmp	.+6      	; 0x9fea <DrawBombs+0x6a>
    9fe4:	30 95       	com	r19
    9fe6:	21 95       	neg	r18
    9fe8:	3f 4f       	sbci	r19, 0xFF	; 255
    9fea:	42 0f       	add	r20, r18
	     u8 bomb_z;

		 //bomb_timer used as midpoint of initial distance from throwing source
		 if(dist > bomb_timer[i])//less than half way, upwards arc
    9fec:	fe 01       	movw	r30, r28
    9fee:	e7 55       	subi	r30, 0x57	; 87
    9ff0:	f0 4f       	sbci	r31, 0xF0	; 240
    9ff2:	80 81       	ld	r24, Z
    9ff4:	28 2f       	mov	r18, r24
    9ff6:	30 e0       	ldi	r19, 0x00	; 0
    9ff8:	e4 2f       	mov	r30, r20
    9ffa:	f0 e0       	ldi	r31, 0x00	; 0
    9ffc:	84 17       	cp	r24, r20
    9ffe:	58 f4       	brcc	.+22     	; 0xa016 <DrawBombs+0x96>
		    bomb_z = abs((bomb_timer[i]*2)-dist);
    a000:	c9 01       	movw	r24, r18
    a002:	88 0f       	add	r24, r24
    a004:	99 1f       	adc	r25, r25
    a006:	8e 1b       	sub	r24, r30
    a008:	9f 0b       	sbc	r25, r31
    a00a:	97 ff       	sbrs	r25, 7
    a00c:	14 c0       	rjmp	.+40     	; 0xa036 <DrawBombs+0xb6>
    a00e:	90 95       	com	r25
    a010:	81 95       	neg	r24
    a012:	9f 4f       	sbci	r25, 0xFF	; 255
    a014:	10 c0       	rjmp	.+32     	; 0xa036 <DrawBombs+0xb6>
		 else//greater than half way, downards arc
		    bomb_z = (abs(bomb_timer[i]*2)-dist)-abs(bomb_timer[i]-dist);
    a016:	c9 01       	movw	r24, r18
    a018:	88 0f       	add	r24, r24
    a01a:	99 1f       	adc	r25, r25
    a01c:	58 2f       	mov	r21, r24
    a01e:	54 1b       	sub	r21, r20
    a020:	45 2f       	mov	r20, r21
    a022:	c9 01       	movw	r24, r18
    a024:	8e 1b       	sub	r24, r30
    a026:	9f 0b       	sbc	r25, r31
    a028:	97 ff       	sbrs	r25, 7
    a02a:	03 c0       	rjmp	.+6      	; 0xa032 <DrawBombs+0xb2>
    a02c:	90 95       	com	r25
    a02e:	81 95       	neg	r24
    a030:	9f 4f       	sbci	r25, 0xFF	; 255
    a032:	48 1b       	sub	r20, r24
    a034:	84 2f       	mov	r24, r20
			 
         DrawSpriteTile(bomb_x[i], bomb_y[i]-bomb_z, BOMBSTARTFRAME,BOMB_PALLET, 0, 0);
    a036:	68 1b       	sub	r22, r24
    a038:	87 2f       	mov	r24, r23
    a03a:	45 e3       	ldi	r20, 0x35	; 53
    a03c:	2e e2       	ldi	r18, 0x2E	; 46
    a03e:	00 e0       	ldi	r16, 0x00	; 0
    a040:	ee 24       	eor	r14, r14
    a042:	0e 94 41 4f 	call	0x9e82	; 0x9e82 <DrawSpriteTile>
    a046:	21 96       	adiw	r28, 0x01	; 1
  //Draw the bombs with sprites if they have an offset(ie they are moving: kicked/thrown)
   char xoff,yoff;
   u8 state;
   xoff = yoff = 0;

   for(u8 i=0;i<MAX_BOMBS;i++){
    a048:	c0 31       	cpi	r28, 0x10	; 16
    a04a:	d1 05       	cpc	r29, r1
    a04c:	09 f0       	breq	.+2      	; 0xa050 <DrawBombs+0xd0>
    a04e:	9e cf       	rjmp	.-196    	; 0x9f8c <DrawBombs+0xc>
         

	  }
   }

}
    a050:	df 91       	pop	r29
    a052:	cf 91       	pop	r28
    a054:	0f 91       	pop	r16
    a056:	ef 90       	pop	r14
    a058:	08 95       	ret

0000a05a <MaskRamTile>:
   
      blip = 2;
}

void MaskRamTile(u8 r, u8 t){
   int roff = r*64;
    a05a:	28 2f       	mov	r18, r24
    a05c:	30 e0       	ldi	r19, 0x00	; 0
    a05e:	96 e0       	ldi	r25, 0x06	; 6
    a060:	22 0f       	add	r18, r18
    a062:	33 1f       	adc	r19, r19
    a064:	9a 95       	dec	r25
    a066:	e1 f7       	brne	.-8      	; 0xa060 <MaskRamTile+0x6>
    a068:	70 e0       	ldi	r23, 0x00	; 0
    a06a:	86 e0       	ldi	r24, 0x06	; 6
    a06c:	66 0f       	add	r22, r22
    a06e:	77 1f       	adc	r23, r23
    a070:	8a 95       	dec	r24
    a072:	e1 f7       	brne	.-8      	; 0xa06c <MaskRamTile+0x12>
    a074:	62 5a       	subi	r22, 0xA2	; 162
    a076:	7b 4f       	sbci	r23, 0xFB	; 251
    a078:	40 e0       	ldi	r20, 0x00	; 0
    a07a:	0d c0       	rjmp	.+26     	; 0xa096 <MaskRamTile+0x3c>

   for(u8 y=0;y<8;y++){
//      fg = pgm_read_byte(&ForegroundMask[moff++]);
   for(u8 x=0;x<8;x++){
//      if((fg & (127<<x)))
	     ram_tiles[roff] = pgm_read_byte(&MapTiles[toff]);
    a07c:	84 91       	lpm	r24, Z+
    a07e:	8d 93       	st	X+, r24
//   int moff = (t-SPECIAL_FOREGROUND_START)*8;
//   u8 fg;

   for(u8 y=0;y<8;y++){
//      fg = pgm_read_byte(&ForegroundMask[moff++]);
   for(u8 x=0;x<8;x++){
    a080:	9f 5f       	subi	r25, 0xFF	; 255
    a082:	31 96       	adiw	r30, 0x01	; 1
    a084:	98 30       	cpi	r25, 0x08	; 8
    a086:	d1 f7       	brne	.-12     	; 0xa07c <MaskRamTile+0x22>
    a088:	28 5f       	subi	r18, 0xF8	; 248
    a08a:	3f 4f       	sbci	r19, 0xFF	; 255
   int roff = r*64;
   int toff = t*64;
//   int moff = (t-SPECIAL_FOREGROUND_START)*8;
//   u8 fg;

   for(u8 y=0;y<8;y++){
    a08c:	4f 5f       	subi	r20, 0xFF	; 255
    a08e:	68 5f       	subi	r22, 0xF8	; 248
    a090:	7f 4f       	sbci	r23, 0xFF	; 255
    a092:	48 30       	cpi	r20, 0x08	; 8
    a094:	31 f0       	breq	.+12     	; 0xa0a2 <MaskRamTile+0x48>
    a096:	d9 01       	movw	r26, r18
    a098:	a3 59       	subi	r26, 0x93	; 147
    a09a:	bb 4f       	sbci	r27, 0xFB	; 251
    a09c:	fb 01       	movw	r30, r22
    a09e:	90 e0       	ldi	r25, 0x00	; 0
    a0a0:	ed cf       	rjmp	.-38     	; 0xa07c <MaskRamTile+0x22>
    a0a2:	08 95       	ret

0000a0a4 <UpdateBorder>:
   }
}

inline void UpdateBorder(){
   //don't repeatedly draw for 1 frame borders, does draw the first time called due to !border.ftime
   if(border.ftime == 255)//single frame border, draw once at level load
    a0a4:	80 91 bf 0f 	lds	r24, 0x0FBF
    a0a8:	8f 3f       	cpi	r24, 0xFF	; 255
    a0aa:	09 f4       	brne	.+2      	; 0xa0ae <UpdateBorder+0xa>
    a0ac:	54 c0       	rjmp	.+168    	; 0xa156 <UpdateBorder+0xb2>
      return;
   
   if(--border.ftime == 0){
    a0ae:	81 50       	subi	r24, 0x01	; 1
    a0b0:	80 93 bf 0f 	sts	0x0FBF, r24
    a0b4:	88 23       	and	r24, r24
    a0b6:	09 f0       	breq	.+2      	; 0xa0ba <UpdateBorder+0x16>
    a0b8:	4e c0       	rjmp	.+156    	; 0xa156 <UpdateBorder+0xb2>
      if(border.max == 1)
    a0ba:	90 91 c1 0f 	lds	r25, 0x0FC1
    a0be:	91 30       	cpi	r25, 0x01	; 1
    a0c0:	21 f4       	brne	.+8      	; 0xa0ca <UpdateBorder+0x26>
         border.ftime = 255;//make sure it doesn't redraw
    a0c2:	8f ef       	ldi	r24, 0xFF	; 255
    a0c4:	80 93 bf 0f 	sts	0x0FBF, r24
    a0c8:	08 c0       	rjmp	.+16     	; 0xa0da <UpdateBorder+0x36>
      else
         border.ftime = pgm_read_byte(&BorderFrameTimes[border.frame]);
    a0ca:	e0 91 be 0f 	lds	r30, 0x0FBE
    a0ce:	f0 e0       	ldi	r31, 0x00	; 0
    a0d0:	e9 52       	subi	r30, 0x29	; 41
    a0d2:	f4 4c       	sbci	r31, 0xC4	; 196
    a0d4:	e4 91       	lpm	r30, Z+
    a0d6:	e0 93 bf 0f 	sts	0x0FBF, r30
      
	  if(++border.frame >= border.max)
    a0da:	80 91 be 0f 	lds	r24, 0x0FBE
    a0de:	8f 5f       	subi	r24, 0xFF	; 255
    a0e0:	80 93 be 0f 	sts	0x0FBE, r24
    a0e4:	89 17       	cp	r24, r25
    a0e6:	20 f0       	brcs	.+8      	; 0xa0f0 <UpdateBorder+0x4c>
	     border.frame = border.base;
    a0e8:	80 91 c0 0f 	lds	r24, 0x0FC0
    a0ec:	80 93 be 0f 	sts	0x0FBE, r24
    a0f0:	80 e0       	ldi	r24, 0x00	; 0
    a0f2:	90 e0       	ldi	r25, 0x00	; 0
    a0f4:	fc 01       	movw	r30, r24
    a0f6:	e2 5a       	subi	r30, 0xA2	; 162
    a0f8:	f4 4c       	sbci	r31, 0xC4	; 196
      int off = 0;//int off = 0;//(border.frame*BORDER_FRAME_SIZE);      
      int voff;
	  voff = 0;
	  for(u8 x=0;x<ARENA_START_Y*30;x++){//TOP ROW
	  
         t = pgm_read_byte(&BorderFrames[off++]);
    a0fa:	01 96       	adiw	r24, 0x01	; 1
    a0fc:	e4 91       	lpm	r30, Z+
	//	 if(t == 255)//allow walk through borders
	//	    voff++;
      //   else
		    vram[voff++] = t+BORDER_START+RAM_TILES_COUNT;
    a0fe:	dc 01       	movw	r26, r24
    a100:	a1 5e       	subi	r26, 0xE1	; 225
    a102:	be 4f       	sbci	r27, 0xFE	; 254
    a104:	ea 51       	subi	r30, 0x1A	; 26
    a106:	ec 93       	st	X, r30
	  //Redraw the border
	  u8 t;
      int off = 0;//int off = 0;//(border.frame*BORDER_FRAME_SIZE);      
      int voff;
	  voff = 0;
	  for(u8 x=0;x<ARENA_START_Y*30;x++){//TOP ROW
    a108:	8e 31       	cpi	r24, 0x1E	; 30
    a10a:	91 05       	cpc	r25, r1
    a10c:	99 f7       	brne	.-26     	; 0xa0f4 <UpdateBorder+0x50>
    a10e:	ec e7       	ldi	r30, 0x7C	; 124
    a110:	fb e3       	ldi	r31, 0x3B	; 59
    a112:	ae e3       	ldi	r26, 0x3E	; 62
    a114:	b1 e0       	ldi	r27, 0x01	; 1
		    vram[voff++] = t+BORDER_START+RAM_TILES_COUNT;
	  }

	  voff = (30*ARENA_START_Y);
	  for(u8 y=0;y<22;y++){//LEFT COLUMNS
         t = pgm_read_byte(&BorderFrames[off++]);
    a116:	84 91       	lpm	r24, Z+
      //   if(t == 255)
	//	    voff++;
      //   else
		    vram[voff++] = t+BORDER_START+RAM_TILES_COUNT;
    a118:	8a 51       	subi	r24, 0x1A	; 26
    a11a:	8c 93       	st	X, r24

		 t = pgm_read_byte(&BorderFrames[off++]);
    a11c:	31 96       	adiw	r30, 0x01	; 1
    a11e:	84 91       	lpm	r24, Z+
		// if(t != 255)
		    vram[voff] = t+BORDER_START+RAM_TILES_COUNT;
    a120:	8a 51       	subi	r24, 0x1A	; 26
    a122:	11 96       	adiw	r26, 0x01	; 1
    a124:	8c 93       	st	X, r24
    a126:	11 97       	sbiw	r26, 0x01	; 1
    a128:	31 96       	adiw	r30, 0x01	; 1
    a12a:	5e 96       	adiw	r26, 0x1e	; 30
      //   else
		    vram[voff++] = t+BORDER_START+RAM_TILES_COUNT;
	  }

	  voff = (30*ARENA_START_Y);
	  for(u8 y=0;y<22;y++){//LEFT COLUMNS
    a12c:	8b e3       	ldi	r24, 0x3B	; 59
    a12e:	e8 3a       	cpi	r30, 0xA8	; 168
    a130:	f8 07       	cpc	r31, r24
    a132:	89 f7       	brne	.-30     	; 0xa116 <UpdateBorder+0x72>
    a134:	aa e5       	ldi	r26, 0x5A	; 90
    a136:	b1 e0       	ldi	r27, 0x01	; 1
		 voff += 29;
	  }
      
	  voff = (30*ARENA_START_Y)+28;
	  for(u8 y=0;y<22;y++){//RIGHT COLUMNS
         t = pgm_read_byte(&BorderFrames[off++]);
    a138:	84 91       	lpm	r24, Z+
        // if(t == 255)
		  //  voff++;
         //else
		    vram[voff++] = t+BORDER_START+RAM_TILES_COUNT;
    a13a:	8a 51       	subi	r24, 0x1A	; 26
    a13c:	8c 93       	st	X, r24

		 t = pgm_read_byte(&BorderFrames[off++]);
    a13e:	31 96       	adiw	r30, 0x01	; 1
    a140:	84 91       	lpm	r24, Z+
         //if(t != 255)
		    vram[voff] = t+BORDER_START+RAM_TILES_COUNT;
    a142:	8a 51       	subi	r24, 0x1A	; 26
    a144:	11 96       	adiw	r26, 0x01	; 1
    a146:	8c 93       	st	X, r24
    a148:	11 97       	sbiw	r26, 0x01	; 1
    a14a:	31 96       	adiw	r30, 0x01	; 1
    a14c:	5e 96       	adiw	r26, 0x1e	; 30

		 voff += 29;
	  }
      
	  voff = (30*ARENA_START_Y)+28;
	  for(u8 y=0;y<22;y++){//RIGHT COLUMNS
    a14e:	8b e3       	ldi	r24, 0x3B	; 59
    a150:	e4 3d       	cpi	r30, 0xD4	; 212
    a152:	f8 07       	cpc	r31, r24
    a154:	89 f7       	brne	.-30     	; 0xa138 <UpdateBorder+0x94>
    a156:	08 95       	ret

0000a158 <LoadLevel>:

	  bomb_owner[i] = 255;
   }
}

void LoadLevel(){
    a158:	a0 e0       	ldi	r26, 0x00	; 0
    a15a:	b0 e0       	ldi	r27, 0x00	; 0
    a15c:	e2 eb       	ldi	r30, 0xB2	; 178
    a15e:	f0 e5       	ldi	r31, 0x50	; 80
    a160:	0c 94 b3 70 	jmp	0xe166	; 0xe166 <__prologue_saves__+0x14>
   WaitVsync(1);
    a164:	81 e0       	ldi	r24, 0x01	; 1
    a166:	90 e0       	ldi	r25, 0x00	; 0
    a168:	0e 94 a3 4a 	call	0x9546	; 0x9546 <WaitVsync>
   ZeroState();
    a16c:	0e 94 af 4b 	call	0x975e	; 0x975e <ZeroState>
    a170:	80 e2       	ldi	r24, 0x20	; 32
    a172:	90 e0       	ldi	r25, 0x00	; 0

void SetMapTile(u8 x, u8 y, u8 t){
   int off = (y*30)+x;//((y<<1)*30)+(x<<1);
   t+=RAM_TILES_COUNT;//t = (t<<2)+RAM_TILES_COUNT;//t = (tileset*(NUMTILES*4)) + (t*4) + RAM_TILES_COUNT;
   
   vram[off+ 0] = t++;
    a174:	4f e1       	ldi	r20, 0x1F	; 31
   vram[off+ 1] = t++;
    a176:	30 e2       	ldi	r19, 0x20	; 32
   vram[off+30] = t++;
    a178:	61 e2       	ldi	r22, 0x21	; 33
   vram[off+31] = t;
    a17a:	52 e2       	ldi	r21, 0x22	; 34
    a17c:	0d c0       	rjmp	.+26     	; 0xa198 <LoadLevel+0x40>

void SetMapTile(u8 x, u8 y, u8 t){
   int off = (y*30)+x;//((y<<1)*30)+(x<<1);
   t+=RAM_TILES_COUNT;//t = (t<<2)+RAM_TILES_COUNT;//t = (tileset*(NUMTILES*4)) + (t*4) + RAM_TILES_COUNT;
   
   vram[off+ 0] = t++;
    a17e:	40 83       	st	Z, r20
   vram[off+ 1] = t++;
    a180:	31 83       	std	Z+1, r19	; 0x01
   vram[off+30] = t++;
    a182:	66 8f       	std	Z+30, r22	; 0x1e
   vram[off+31] = t;
    a184:	57 8f       	std	Z+31, r21	; 0x1f

   for(u8 y=1;y<VRAM_TILES_V-1;y+=2)//floor fill
   for(u8 x=2;x<VRAM_TILES_H;x+=2)
    a186:	2e 5f       	subi	r18, 0xFE	; 254
    a188:	32 96       	adiw	r30, 0x02	; 2
    a18a:	2e 31       	cpi	r18, 0x1E	; 30
    a18c:	c1 f7       	brne	.-16     	; 0xa17e <LoadLevel+0x26>
    a18e:	cc 96       	adiw	r24, 0x3c	; 60

void LoadLevel(){
   WaitVsync(1);
   ZeroState();

   for(u8 y=1;y<VRAM_TILES_V-1;y+=2)//floor fill
    a190:	22 e0       	ldi	r18, 0x02	; 2
    a192:	84 3b       	cpi	r24, 0xB4	; 180
    a194:	92 07       	cpc	r25, r18
    a196:	29 f0       	breq	.+10     	; 0xa1a2 <LoadLevel+0x4a>
    a198:	fc 01       	movw	r30, r24
    a19a:	e0 5e       	subi	r30, 0xE0	; 224
    a19c:	fe 4f       	sbci	r31, 0xFE	; 254
    a19e:	22 e0       	ldi	r18, 0x02	; 2
    a1a0:	ee cf       	rjmp	.-36     	; 0xa17e <LoadLevel+0x26>
      SetMapTile(x,y,FLOOR_START);

   //StartSong(StageSong);
   u8 t;
   u8 playercount=0;
   roundtime = (GetRoundTimeBits())*(60*SEC);
    a1a2:	80 91 01 01 	lds	r24, 0x0101
    a1a6:	87 70       	andi	r24, 0x07	; 7
    a1a8:	90 e0       	ldi	r25, 0x00	; 0
    a1aa:	20 e1       	ldi	r18, 0x10	; 16
    a1ac:	3e e0       	ldi	r19, 0x0E	; 14
    a1ae:	fc 01       	movw	r30, r24
    a1b0:	e2 9f       	mul	r30, r18
    a1b2:	c0 01       	movw	r24, r0
    a1b4:	e3 9f       	mul	r30, r19
    a1b6:	90 0d       	add	r25, r0
    a1b8:	f2 9f       	mul	r31, r18
    a1ba:	90 0d       	add	r25, r0
    a1bc:	11 24       	eor	r1, r1
    a1be:	90 93 c3 0f 	sts	0x0FC3, r25
    a1c2:	80 93 c2 0f 	sts	0x0FC2, r24
   
   numplayers = 3;
    a1c6:	83 e0       	ldi	r24, 0x03	; 3
    a1c8:	80 93 a7 0f 	sts	0x0FA7, r24
   botgoal[1] = botgoal[2] = botgoal[3] = 255;
    a1cc:	8f ef       	ldi	r24, 0xFF	; 255
    a1ce:	80 93 09 10 	sts	0x1009, r24
    a1d2:	80 93 08 10 	sts	0x1008, r24
    a1d6:	80 93 07 10 	sts	0x1007, r24
   
   block_z = 255;
    a1da:	80 93 a8 0f 	sts	0x0FA8, r24
   block_time = 0;
    a1de:	10 92 3d 10 	sts	0x103D, r1
    a1e2:	90 91 04 01 	lds	r25, 0x0104
    a1e6:	89 2f       	mov	r24, r25
    a1e8:	86 95       	lsr	r24
    a1ea:	86 95       	lsr	r24
    a1ec:	29 2f       	mov	r18, r25
    a1ee:	26 95       	lsr	r18
    a1f0:	26 95       	lsr	r18
    a1f2:	26 95       	lsr	r18
    a1f4:	82 27       	eor	r24, r18
    a1f6:	89 27       	eor	r24, r25
    a1f8:	29 2f       	mov	r18, r25
    a1fa:	22 95       	swap	r18
    a1fc:	2f 70       	andi	r18, 0x0F	; 15
    a1fe:	82 27       	eor	r24, r18
    a200:	87 95       	ror	r24
    a202:	88 27       	eor	r24, r24
    a204:	87 95       	ror	r24
    a206:	96 95       	lsr	r25
    a208:	89 2b       	or	r24, r25
    a20a:	80 93 04 01 	sts	0x0104, r24
   if(prand() > 128){//start in upper left
    a20e:	81 38       	cpi	r24, 0x81	; 129
    a210:	d0 f0       	brcs	.+52     	; 0xa246 <LoadLevel+0xee>
      block_dir = UP|MOVE;
    a212:	60 93 8f 0f 	sts	0x0F8F, r22
	  block_x = 0;
    a216:	10 92 7a 0f 	sts	0x0F7A, r1
	  block_y = 1;
    a21a:	81 e0       	ldi	r24, 0x01	; 1
    a21c:	80 93 03 10 	sts	0x1003, r24
	  block_minx = 0;
    a220:	10 92 c4 0f 	sts	0x0FC4, r1
	  block_miny = 0;
    a224:	10 92 04 10 	sts	0x1004, r1
      block_maxx = 12;
    a228:	8c e0       	ldi	r24, 0x0C	; 12
    a22a:	80 93 02 10 	sts	0x1002, r24
      block_maxy = 10;
    a22e:	8a e0       	ldi	r24, 0x0A	; 10
    a230:	80 93 90 0f 	sts	0x0F90, r24
    a234:	69 ed       	ldi	r22, 0xD9	; 217
    a236:	7b e3       	ldi	r23, 0x3B	; 59
    a238:	00 e0       	ldi	r16, 0x00	; 0
    a23a:	40 e2       	ldi	r20, 0x20	; 32
    a23c:	50 e0       	ldi	r21, 0x00	; 0
    a23e:	11 e0       	ldi	r17, 0x01	; 1
   }


   int moff = 0;//13*11*level;
   //Draw the actual level data.
   for(u8 y=0;y<11;y++)
    a240:	e2 e0       	ldi	r30, 0x02	; 2
    a242:	fe 2e       	mov	r15, r30
    a244:	37 c0       	rjmp	.+110    	; 0xa2b4 <LoadLevel+0x15c>
	  block_miny = 0;
      block_maxx = 12;
      block_maxy = 10;
   }
   else{//start in lower right
      block_dir = DOWN|MOVE;
    a246:	50 93 8f 0f 	sts	0x0F8F, r21
	  block_x = 12;
    a24a:	8c e0       	ldi	r24, 0x0C	; 12
    a24c:	80 93 7a 0f 	sts	0x0F7A, r24
	  block_y = 9;//10
    a250:	99 e0       	ldi	r25, 0x09	; 9
    a252:	90 93 03 10 	sts	0x1003, r25
	  block_minx = 0;
    a256:	10 92 c4 0f 	sts	0x0FC4, r1
	  block_miny = 0;
    a25a:	10 92 04 10 	sts	0x1004, r1
    a25e:	e5 cf       	rjmp	.-54     	; 0xa22a <LoadLevel+0xd2>

   int moff = 0;//13*11*level;
   //Draw the actual level data.
   for(u8 y=0;y<11;y++)
   for(u8 x=0;x<13;x++){
      t = pgm_read_byte(&GameMaps[moff++]);
    a260:	f9 01       	movw	r30, r18
    a262:	84 91       	lpm	r24, Z+
	  
      if(t == PLAYERSTART){
    a264:	8e 3f       	cpi	r24, 0xFE	; 254
    a266:	89 f4       	brne	.+34     	; 0xa28a <LoadLevel+0x132>
	     if(playercount <= numplayers){
    a268:	04 30       	cpi	r16, 0x04	; 4
    a26a:	70 f4       	brcc	.+28     	; 0xa288 <LoadLevel+0x130>
            player_x[playercount] = (x*2)+ARENA_START_X;
    a26c:	e0 2f       	mov	r30, r16
    a26e:	f0 e0       	ldi	r31, 0x00	; 0
    a270:	df 01       	movw	r26, r30
    a272:	a9 5e       	subi	r26, 0xE9	; 233
    a274:	bf 4e       	sbci	r27, 0xEF	; 239
    a276:	9c 93       	st	X, r25
		    player_y[playercount] = (y*2)+ARENA_START_Y;
    a278:	df 01       	movw	r26, r30
    a27a:	a5 58       	subi	r26, 0x85	; 133
    a27c:	b0 4f       	sbci	r27, 0xF0	; 240
    a27e:	1c 93       	st	X, r17
			player_state[playercount] = DOWN;
    a280:	ea 53       	subi	r30, 0x3A	; 58
    a282:	f0 4f       	sbci	r31, 0xF0	; 240
    a284:	f0 82       	st	Z, r15
		    playercount++;
    a286:	0f 5f       	subi	r16, 0xFF	; 255
    a288:	80 e0       	ldi	r24, 0x00	; 0
   SetTile(16,0,ZERO_OFFSET+sec);
}

void SetMapTile(u8 x, u8 y, u8 t){
   int off = (y*30)+x;//((y<<1)*30)+(x<<1);
   t+=RAM_TILES_COUNT;//t = (t<<2)+RAM_TILES_COUNT;//t = (tileset*(NUMTILES*4)) + (t*4) + RAM_TILES_COUNT;
    a28a:	81 5e       	subi	r24, 0xE1	; 225
   
   vram[off+ 0] = t++;
    a28c:	88 83       	st	Y, r24
    a28e:	8f 5f       	subi	r24, 0xFF	; 255
   vram[off+ 1] = t++;
    a290:	89 83       	std	Y+1, r24	; 0x01
    a292:	8f 5f       	subi	r24, 0xFF	; 255
   vram[off+30] = t++;
    a294:	8e 8f       	std	Y+30, r24	; 0x1e
   vram[off+31] = t;
    a296:	8f 5f       	subi	r24, 0xFF	; 255
    a298:	8f 8f       	std	Y+31, r24	; 0x1f
    a29a:	2f 5f       	subi	r18, 0xFF	; 255
    a29c:	3f 4f       	sbci	r19, 0xFF	; 255
    a29e:	22 96       	adiw	r28, 0x02	; 2
    a2a0:	9e 5f       	subi	r25, 0xFE	; 254


   int moff = 0;//13*11*level;
   //Draw the actual level data.
   for(u8 y=0;y<11;y++)
   for(u8 x=0;x<13;x++){
    a2a2:	9c 31       	cpi	r25, 0x1C	; 28
    a2a4:	e9 f6       	brne	.-70     	; 0xa260 <LoadLevel+0x108>
    a2a6:	44 5c       	subi	r20, 0xC4	; 196
    a2a8:	5f 4f       	sbci	r21, 0xFF	; 255
    a2aa:	63 5f       	subi	r22, 0xF3	; 243
    a2ac:	7f 4f       	sbci	r23, 0xFF	; 255
    a2ae:	1e 5f       	subi	r17, 0xFE	; 254
   }


   int moff = 0;//13*11*level;
   //Draw the actual level data.
   for(u8 y=0;y<11;y++)
    a2b0:	17 31       	cpi	r17, 0x17	; 23
    a2b2:	31 f0       	breq	.+12     	; 0xa2c0 <LoadLevel+0x168>
    a2b4:	ea 01       	movw	r28, r20
    a2b6:	c0 5e       	subi	r28, 0xE0	; 224
    a2b8:	de 4f       	sbci	r29, 0xFE	; 254
    a2ba:	9b 01       	movw	r18, r22
    a2bc:	92 e0       	ldi	r25, 0x02	; 2
    a2be:	d0 cf       	rjmp	.-96     	; 0xa260 <LoadLevel+0x108>

   }


   moff = 0;//(lvl*BORDER_DESCRIPTOR_SIZE);
   border.base = pgm_read_byte(&BorderTable[moff++]);
    a2c0:	e5 ed       	ldi	r30, 0xD5	; 213
    a2c2:	fb e3       	ldi	r31, 0x3B	; 59
    a2c4:	84 91       	lpm	r24, Z+
    a2c6:	80 93 c0 0f 	sts	0x0FC0, r24
   border.max = pgm_read_byte(&BorderTable[moff++]);
    a2ca:	31 96       	adiw	r30, 0x01	; 1
    a2cc:	e4 91       	lpm	r30, Z+
    a2ce:	e0 93 c1 0f 	sts	0x0FC1, r30

   border.frame = border.max;//let it draw once on the first frame
    a2d2:	e0 93 be 0f 	sts	0x0FBE, r30
   border.ftime = 1;
    a2d6:	81 e0       	ldi	r24, 0x01	; 1
    a2d8:	80 93 bf 0f 	sts	0x0FBF, r24
    a2dc:	80 e0       	ldi	r24, 0x00	; 0
    a2de:	90 e0       	ldi	r25, 0x00	; 0

   for(u8 i=0;i<MAX_BOMBS;i++){
      bomb_owner[i] = 255;
    a2e0:	2f ef       	ldi	r18, 0xFF	; 255
    a2e2:	fc 01       	movw	r30, r24
    a2e4:	e2 51       	subi	r30, 0x12	; 18
    a2e6:	f0 4f       	sbci	r31, 0xF0	; 240
    a2e8:	20 83       	st	Z, r18
      bomb_offset[i] = 0;
    a2ea:	fc 01       	movw	r30, r24
    a2ec:	e4 5d       	subi	r30, 0xD4	; 212
    a2ee:	ff 4e       	sbci	r31, 0xEF	; 239
    a2f0:	10 82       	st	Z, r1
	  bomb_state[i] = 0;
    a2f2:	fc 01       	movw	r30, r24
    a2f4:	e2 53       	subi	r30, 0x32	; 50
    a2f6:	f0 4f       	sbci	r31, 0xF0	; 240
    a2f8:	10 82       	st	Z, r1
    a2fa:	01 96       	adiw	r24, 0x01	; 1
   border.max = pgm_read_byte(&BorderTable[moff++]);

   border.frame = border.max;//let it draw once on the first frame
   border.ftime = 1;

   for(u8 i=0;i<MAX_BOMBS;i++){
    a2fc:	80 31       	cpi	r24, 0x10	; 16
    a2fe:	91 05       	cpc	r25, r1
    a300:	81 f7       	brne	.-32     	; 0xa2e2 <LoadLevel+0x18a>
      bomb_owner[i] = 255;
      bomb_offset[i] = 0;
	  bomb_state[i] = 0;
   }

   WaitVsync(1);
    a302:	81 e0       	ldi	r24, 0x01	; 1
    a304:	90 e0       	ldi	r25, 0x00	; 0
    a306:	0e 94 a3 4a 	call	0x9546	; 0x9546 <WaitVsync>
    a30a:	40 e0       	ldi	r20, 0x00	; 0
    a30c:	10 e0       	ldi	r17, 0x00	; 0




inline u8 GetMapTile(u8 x, u8 y){
      return (vram[(y*30)+x]-RAM_TILES_COUNT);//return (vram[122+(y*30)+x]-RAM_TILES_COUNT);
    a30e:	6e e1       	ldi	r22, 0x1E	; 30
    a310:	c6 2e       	mov	r12, r22

void SetMapTile(u8 x, u8 y, u8 t){
   int off = (y*30)+x;//((y<<1)*30)+(x<<1);
   t+=RAM_TILES_COUNT;//t = (t<<2)+RAM_TILES_COUNT;//t = (tileset*(NUMTILES*4)) + (t*4) + RAM_TILES_COUNT;
   
   vram[off+ 0] = t++;
    a312:	5f e1       	ldi	r21, 0x1F	; 31
    a314:	d5 2e       	mov	r13, r21
   vram[off+ 1] = t++;
    a316:	30 e2       	ldi	r19, 0x20	; 32
    a318:	e3 2e       	mov	r14, r19
   vram[off+30] = t++;
    a31a:	21 e2       	ldi	r18, 0x21	; 33
    a31c:	f2 2e       	mov	r15, r18
   vram[off+31] = t;
    a31e:	02 e2       	ldi	r16, 0x22	; 34
    a320:	0a c0       	rjmp	.+20     	; 0xa336 <LoadLevel+0x1de>
   //Now randomly open up 24 of the blocked spaces. This gives us 70 blocks in accordance with Super Bomberman 5
   u8 rx,ry,count=0;
   for(u8 i=0;i<24;i++){
//continue;
      while(GetMapTile((rx = (((prand()%13)*2)+ARENA_START_X)),(ry = (((prand()%11)*2)+ARENA_START_Y))) != BLOCK_START ){
         if(++count > 254){
    a322:	4f 5f       	subi	r20, 0xFF	; 255
    a324:	4f 3f       	cpi	r20, 0xFF	; 255
    a326:	49 f4       	brne	.+18     	; 0xa33a <LoadLevel+0x1e2>
    a328:	30 93 04 01 	sts	0x0104, r19
		    count = 0;
			WaitVsync(1);
    a32c:	81 e0       	ldi	r24, 0x01	; 1
    a32e:	90 e0       	ldi	r25, 0x00	; 0
    a330:	0e 94 a3 4a 	call	0x9546	; 0x9546 <WaitVsync>
    a334:	40 e0       	ldi	r20, 0x00	; 0
    a336:	30 91 04 01 	lds	r19, 0x0104
    a33a:	23 2f       	mov	r18, r19
    a33c:	26 95       	lsr	r18
    a33e:	26 95       	lsr	r18
    a340:	83 2f       	mov	r24, r19
    a342:	86 95       	lsr	r24
    a344:	86 95       	lsr	r24
    a346:	86 95       	lsr	r24
    a348:	28 27       	eor	r18, r24
    a34a:	23 27       	eor	r18, r19
    a34c:	83 2f       	mov	r24, r19
    a34e:	82 95       	swap	r24
    a350:	8f 70       	andi	r24, 0x0F	; 15
    a352:	28 27       	eor	r18, r24
    a354:	27 95       	ror	r18
    a356:	22 27       	eor	r18, r18
    a358:	27 95       	ror	r18
    a35a:	36 95       	lsr	r19
    a35c:	23 2b       	or	r18, r19




inline u8 GetMapTile(u8 x, u8 y){
      return (vram[(y*30)+x]-RAM_TILES_COUNT);//return (vram[122+(y*30)+x]-RAM_TILES_COUNT);
    a35e:	32 2f       	mov	r19, r18
    a360:	36 95       	lsr	r19
    a362:	36 95       	lsr	r19
    a364:	82 2f       	mov	r24, r18
    a366:	86 95       	lsr	r24
    a368:	86 95       	lsr	r24
    a36a:	86 95       	lsr	r24
    a36c:	38 27       	eor	r19, r24
    a36e:	32 27       	eor	r19, r18
    a370:	82 2f       	mov	r24, r18
    a372:	82 95       	swap	r24
    a374:	8f 70       	andi	r24, 0x0F	; 15
    a376:	38 27       	eor	r19, r24
    a378:	37 95       	ror	r19
    a37a:	33 27       	eor	r19, r19
    a37c:	37 95       	ror	r19
    a37e:	82 2f       	mov	r24, r18
    a380:	86 95       	lsr	r24
    a382:	38 2b       	or	r19, r24
    a384:	83 2f       	mov	r24, r19
    a386:	6b e0       	ldi	r22, 0x0B	; 11
    a388:	0e 94 76 70 	call	0xe0ec	; 0xe0ec <__udivmodqi4>
    a38c:	99 0f       	add	r25, r25
    a38e:	9f 5f       	subi	r25, 0xFF	; 255
    a390:	9c 9d       	mul	r25, r12
    a392:	f0 01       	movw	r30, r0
    a394:	11 24       	eor	r1, r1
    a396:	82 2f       	mov	r24, r18
    a398:	6d e0       	ldi	r22, 0x0D	; 13
    a39a:	0e 94 76 70 	call	0xe0ec	; 0xe0ec <__udivmodqi4>
    a39e:	99 0f       	add	r25, r25
    a3a0:	9e 5f       	subi	r25, 0xFE	; 254
    a3a2:	e9 0f       	add	r30, r25
    a3a4:	f1 1d       	adc	r31, r1

   //Now randomly open up 24 of the blocked spaces. This gives us 70 blocks in accordance with Super Bomberman 5
   u8 rx,ry,count=0;
   for(u8 i=0;i<24;i++){
//continue;
      while(GetMapTile((rx = (((prand()%13)*2)+ARENA_START_X)),(ry = (((prand()%11)*2)+ARENA_START_Y))) != BLOCK_START ){
    a3a6:	e0 5e       	subi	r30, 0xE0	; 224
    a3a8:	fe 4f       	sbci	r31, 0xFE	; 254
    a3aa:	80 81       	ld	r24, Z
    a3ac:	83 32       	cpi	r24, 0x23	; 35
    a3ae:	09 f0       	breq	.+2      	; 0xa3b2 <LoadLevel+0x25a>
    a3b0:	b8 cf       	rjmp	.-144    	; 0xa322 <LoadLevel+0x1ca>
    a3b2:	30 93 04 01 	sts	0x0104, r19

void SetMapTile(u8 x, u8 y, u8 t){
   int off = (y*30)+x;//((y<<1)*30)+(x<<1);
   t+=RAM_TILES_COUNT;//t = (t<<2)+RAM_TILES_COUNT;//t = (tileset*(NUMTILES*4)) + (t*4) + RAM_TILES_COUNT;
   
   vram[off+ 0] = t++;
    a3b6:	d0 82       	st	Z, r13
   vram[off+ 1] = t++;
    a3b8:	e1 82       	std	Z+1, r14	; 0x01
   vram[off+30] = t++;
    a3ba:	f6 8e       	std	Z+30, r15	; 0x1e
   vram[off+31] = t;
    a3bc:	07 8f       	std	Z+31, r16	; 0x1f

   WaitVsync(1);

   //Now randomly open up 24 of the blocked spaces. This gives us 70 blocks in accordance with Super Bomberman 5
   u8 rx,ry,count=0;
   for(u8 i=0;i<24;i++){
    a3be:	1f 5f       	subi	r17, 0xFF	; 255
    a3c0:	18 31       	cpi	r17, 0x18	; 24
    a3c2:	09 f0       	breq	.+2      	; 0xa3c6 <LoadLevel+0x26e>
    a3c4:	b8 cf       	rjmp	.-144    	; 0xa336 <LoadLevel+0x1de>
   }


   for(u8 i=0;i<MAX_PLAYERS;i++){
      SetPlayerRange(i,3);
	  if(i > 1 && gameoptions & USETEAM)
    a3c6:	80 91 01 01 	lds	r24, 0x0101
    a3ca:	28 2f       	mov	r18, r24
    a3cc:	30 e0       	ldi	r19, 0x00	; 0
    a3ce:	20 72       	andi	r18, 0x20	; 32
    a3d0:	30 70       	andi	r19, 0x00	; 0
    a3d2:	e6 ec       	ldi	r30, 0xC6	; 198
    a3d4:	ff e0       	ldi	r31, 0x0F	; 15
    a3d6:	90 e0       	ldi	r25, 0x00	; 0
u8 GetNumRoundBits(){
   return (gameoptions & 0b00011000)>>3;
}

void SetPlayerRange(u8 p, u8 t){
   player_attrb[p] |= (t-3);
    a3d8:	92 30       	cpi	r25, 0x02	; 2
    a3da:	30 f0       	brcs	.+12     	; 0xa3e8 <LoadLevel+0x290>
   }


   for(u8 i=0;i<MAX_PLAYERS;i++){
      SetPlayerRange(i,3);
	  if(i > 1 && gameoptions & USETEAM)
    a3dc:	21 15       	cp	r18, r1
    a3de:	31 05       	cpc	r19, r1
    a3e0:	19 f0       	breq	.+6      	; 0xa3e8 <LoadLevel+0x290>
	     player_state[i] |= TEAM2;
    a3e2:	80 81       	ld	r24, Z
    a3e4:	80 62       	ori	r24, 0x20	; 32
    a3e6:	80 83       	st	Z, r24
	  SetMapTile(rx,ry,0);
	//  WaitVsync(1);
   }


   for(u8 i=0;i<MAX_PLAYERS;i++){
    a3e8:	9f 5f       	subi	r25, 0xFF	; 255
    a3ea:	31 96       	adiw	r30, 0x01	; 1
    a3ec:	94 30       	cpi	r25, 0x04	; 4
    a3ee:	a1 f7       	brne	.-24     	; 0xa3d8 <LoadLevel+0x280>
      SetPlayerRange(i,3);
	  if(i > 1 && gameoptions & USETEAM)
	     player_state[i] |= TEAM2;
   }
   
}
    a3f0:	cd b7       	in	r28, 0x3d	; 61
    a3f2:	de b7       	in	r29, 0x3e	; 62
    a3f4:	e8 e0       	ldi	r30, 0x08	; 8
    a3f6:	0c 94 cf 70 	jmp	0xe19e	; 0xe19e <__epilogue_restores__+0x14>

0000a3fa <StartMatch>:
   }//for each player
}


void StartMatch(){
   LoadLevel();
    a3fa:	0e 94 ac 50 	call	0xa158	; 0xa158 <LoadLevel>
   gamestate = PLAYING;
    a3fe:	82 e0       	ldi	r24, 0x02	; 2
    a400:	80 93 fc 0e 	sts	0x0EFC, r24
   if(!playSong)
    a404:	80 91 c0 0c 	lds	r24, 0x0CC0
    a408:	88 23       	and	r24, r24
    a40a:	21 f4       	brne	.+8      	; 0xa414 <StartMatch+0x1a>
      StartSong(StageSong);
    a40c:	89 e7       	ldi	r24, 0x79	; 121
    a40e:	95 e6       	ldi	r25, 0x65	; 101
    a410:	0e 94 6e 45 	call	0x8adc	; 0x8adc <StartSong>
    a414:	08 95       	ret

0000a416 <CompPrintNum>:
			break;
		}
	}	
}

void CompPrintNum(u8 x, u8 y, u8 val){
    a416:	28 2f       	mov	r18, r24
    a418:	36 2f       	mov	r19, r22
	u8 c = val%10;
	vram[(x+2)+(y*30)] = c;
    a41a:	8e e1       	ldi	r24, 0x1E	; 30
    a41c:	68 9f       	mul	r22, r24
    a41e:	f0 01       	movw	r30, r0
    a420:	11 24       	eor	r1, r1
    a422:	e0 5e       	subi	r30, 0xE0	; 224
    a424:	fe 4f       	sbci	r31, 0xFE	; 254
    a426:	e2 0f       	add	r30, r18
    a428:	f1 1d       	adc	r31, r1
    a42a:	84 2f       	mov	r24, r20
    a42c:	6a e0       	ldi	r22, 0x0A	; 10
    a42e:	0e 94 76 70 	call	0xe0ec	; 0xe0ec <__udivmodqi4>
    a432:	92 83       	std	Z+2, r25	; 0x02
	
	c=(val/10)%10;
    a434:	84 2f       	mov	r24, r20
    a436:	0e 94 76 70 	call	0xe0ec	; 0xe0ec <__udivmodqi4>
    a43a:	0e 94 76 70 	call	0xe0ec	; 0xe0ec <__udivmodqi4>
	if(!c){SetTile(x+1,y,BLANKT);}else{vram[(x+1)+(y*30)]=c;}
    a43e:	99 23       	and	r25, r25
    a440:	41 f4       	brne	.+16     	; 0xa452 <CompPrintNum+0x3c>
    a442:	82 2f       	mov	r24, r18
    a444:	8f 5f       	subi	r24, 0xFF	; 255
    a446:	63 2f       	mov	r22, r19
    a448:	40 e0       	ldi	r20, 0x00	; 0
    a44a:	50 e0       	ldi	r21, 0x00	; 0
    a44c:	0e 94 85 44 	call	0x890a	; 0x890a <SetTile>
    a450:	08 95       	ret
    a452:	91 83       	std	Z+1, r25	; 0x01
    a454:	08 95       	ret

0000a456 <CompPrint>:
         else
		    ram_tiles[roff++] = 0;
	  }
   }
}
void CompPrint(u8 x, u8 y,const char *string){
    a456:	ef 92       	push	r14
    a458:	ff 92       	push	r15
    a45a:	0f 93       	push	r16
    a45c:	1f 93       	push	r17
    a45e:	cf 93       	push	r28
    a460:	df 93       	push	r29
    a462:	f8 2e       	mov	r15, r24
    a464:	e6 2e       	mov	r14, r22
		if(c > '9')
		   c=((c&127)-('A'-6));	
		else
		   c -= '0';	

		    vram[(y*30)+(x++)] = c; 
    a466:	8e e1       	ldi	r24, 0x1E	; 30
    a468:	68 9f       	mul	r22, r24
    a46a:	80 01       	movw	r16, r0
    a46c:	11 24       	eor	r1, r1
    a46e:	ea 01       	movw	r28, r20
    a470:	00 5e       	subi	r16, 0xE0	; 224
    a472:	1e 4f       	sbci	r17, 0xFE	; 254
    a474:	02 c0       	rjmp	.+4      	; 0xa47a <CompPrint+0x24>
    a476:	f3 94       	inc	r15
    a478:	21 96       	adiw	r28, 0x01	; 1
void CompPrint(u8 x, u8 y,const char *string){
	int i=0;
	char c;

	while(true){
	    if(x > 29)
    a47a:	8d e1       	ldi	r24, 0x1D	; 29
    a47c:	8f 15       	cp	r24, r15
    a47e:	c0 f0       	brcs	.+48     	; 0xa4b0 <CompPrint+0x5a>
		   return;
		c=pgm_read_byte(&(string[i++]));		
    a480:	fe 01       	movw	r30, r28
    a482:	84 91       	lpm	r24, Z+
		if(c!=0){
    a484:	88 23       	and	r24, r24
    a486:	a1 f0       	breq	.+40     	; 0xa4b0 <CompPrint+0x5a>
		if(c == ' '){
    a488:	80 32       	cpi	r24, 0x20	; 32
    a48a:	39 f4       	brne	.+14     	; 0xa49a <CompPrint+0x44>
		   SetTile(x,y,BLANKT);
    a48c:	8f 2d       	mov	r24, r15
    a48e:	6e 2d       	mov	r22, r14
    a490:	40 e0       	ldi	r20, 0x00	; 0
    a492:	50 e0       	ldi	r21, 0x00	; 0
    a494:	0e 94 85 44 	call	0x890a	; 0x890a <SetTile>
    a498:	ee cf       	rjmp	.-36     	; 0xa476 <CompPrint+0x20>
		   x++;
		   continue;
        }
        
		if(c > '9')
    a49a:	8a 33       	cpi	r24, 0x3A	; 58
    a49c:	1c f0       	brlt	.+6      	; 0xa4a4 <CompPrint+0x4e>
		   c=((c&127)-('A'-6));	
    a49e:	8f 77       	andi	r24, 0x7F	; 127
    a4a0:	8b 53       	subi	r24, 0x3B	; 59
    a4a2:	01 c0       	rjmp	.+2      	; 0xa4a6 <CompPrint+0x50>
		else
		   c -= '0';	
    a4a4:	80 53       	subi	r24, 0x30	; 48

		    vram[(y*30)+(x++)] = c; 
    a4a6:	f8 01       	movw	r30, r16
    a4a8:	ef 0d       	add	r30, r15
    a4aa:	f1 1d       	adc	r31, r1
    a4ac:	80 83       	st	Z, r24
    a4ae:	e3 cf       	rjmp	.-58     	; 0xa476 <CompPrint+0x20>
		}else{
			break;
		}
	}	
}
    a4b0:	cd b7       	in	r28, 0x3d	; 61
    a4b2:	de b7       	in	r29, 0x3e	; 62
    a4b4:	e6 e0       	ldi	r30, 0x06	; 6
    a4b6:	0c 94 d1 70 	jmp	0xe1a2	; 0xe1a2 <__epilogue_restores__+0x18>

0000a4ba <DrawTimer>:
	
	c=(val/10)%10;
	if(!c){SetTile(x+1,y,BLANKT);}else{SetTile(x+1,y,ZERO_OFFSET+c-88);}
}

void DrawTimer(){
    a4ba:	0f 93       	push	r16
    a4bc:	1f 93       	push	r17
   if(roundtime%60)//save some time most ticks
    a4be:	20 91 c2 0f 	lds	r18, 0x0FC2
    a4c2:	30 91 c3 0f 	lds	r19, 0x0FC3
    a4c6:	c9 01       	movw	r24, r18
    a4c8:	6c e3       	ldi	r22, 0x3C	; 60
    a4ca:	70 e0       	ldi	r23, 0x00	; 0
    a4cc:	0e 94 82 70 	call	0xe104	; 0xe104 <__udivmodhi4>
    a4d0:	89 2b       	or	r24, r25
    a4d2:	d9 f5       	brne	.+118    	; 0xa54a <DrawTimer+0x90>
      return;

   u8 min,ten,sec;
   int rt = roundtime/60;
    a4d4:	c9 01       	movw	r24, r18
    a4d6:	6c e3       	ldi	r22, 0x3C	; 60
    a4d8:	70 e0       	ldi	r23, 0x00	; 0
    a4da:	0e 94 82 70 	call	0xe104	; 0xe104 <__udivmodhi4>
    a4de:	16 2f       	mov	r17, r22
    a4e0:	07 2f       	mov	r16, r23
   min = (rt/60);
   ten = (rt%60)/10;
   sec = (rt%10);   

   SetTile(13,0,ZERO_OFFSET+min);
    a4e2:	86 2f       	mov	r24, r22
    a4e4:	97 2f       	mov	r25, r23
    a4e6:	6c e3       	ldi	r22, 0x3C	; 60
    a4e8:	70 e0       	ldi	r23, 0x00	; 0
    a4ea:	0e 94 96 70 	call	0xe12c	; 0xe12c <__divmodhi4>
    a4ee:	46 2f       	mov	r20, r22
    a4f0:	50 e0       	ldi	r21, 0x00	; 0
    a4f2:	44 57       	subi	r20, 0x74	; 116
    a4f4:	5f 4f       	sbci	r21, 0xFF	; 255
    a4f6:	8d e0       	ldi	r24, 0x0D	; 13
    a4f8:	60 e0       	ldi	r22, 0x00	; 0
    a4fa:	0e 94 85 44 	call	0x890a	; 0x890a <SetTile>
   SetTile(14,0,ZERO_OFFSET+10);
    a4fe:	8e e0       	ldi	r24, 0x0E	; 14
    a500:	60 e0       	ldi	r22, 0x00	; 0
    a502:	46 e9       	ldi	r20, 0x96	; 150
    a504:	50 e0       	ldi	r21, 0x00	; 0
    a506:	0e 94 85 44 	call	0x890a	; 0x890a <SetTile>
   SetTile(15,0,ZERO_OFFSET+ten);
    a50a:	81 2f       	mov	r24, r17
    a50c:	90 2f       	mov	r25, r16
    a50e:	6c e3       	ldi	r22, 0x3C	; 60
    a510:	70 e0       	ldi	r23, 0x00	; 0
    a512:	0e 94 96 70 	call	0xe12c	; 0xe12c <__divmodhi4>
    a516:	6a e0       	ldi	r22, 0x0A	; 10
    a518:	70 e0       	ldi	r23, 0x00	; 0
    a51a:	0e 94 96 70 	call	0xe12c	; 0xe12c <__divmodhi4>
    a51e:	46 2f       	mov	r20, r22
    a520:	50 e0       	ldi	r21, 0x00	; 0
    a522:	44 57       	subi	r20, 0x74	; 116
    a524:	5f 4f       	sbci	r21, 0xFF	; 255
    a526:	8f e0       	ldi	r24, 0x0F	; 15
    a528:	60 e0       	ldi	r22, 0x00	; 0
    a52a:	0e 94 85 44 	call	0x890a	; 0x890a <SetTile>
   SetTile(16,0,ZERO_OFFSET+sec);
    a52e:	81 2f       	mov	r24, r17
    a530:	90 2f       	mov	r25, r16
    a532:	6a e0       	ldi	r22, 0x0A	; 10
    a534:	70 e0       	ldi	r23, 0x00	; 0
    a536:	0e 94 96 70 	call	0xe12c	; 0xe12c <__divmodhi4>
    a53a:	48 2f       	mov	r20, r24
    a53c:	50 e0       	ldi	r21, 0x00	; 0
    a53e:	44 57       	subi	r20, 0x74	; 116
    a540:	5f 4f       	sbci	r21, 0xFF	; 255
    a542:	80 e1       	ldi	r24, 0x10	; 16
    a544:	60 e0       	ldi	r22, 0x00	; 0
    a546:	0e 94 85 44 	call	0x890a	; 0x890a <SetTile>
}
    a54a:	1f 91       	pop	r17
    a54c:	0f 91       	pop	r16
    a54e:	08 95       	ret

0000a550 <Render>:
   }
   
}


inline void Render(){
    a550:	a4 e0       	ldi	r26, 0x04	; 4
    a552:	b0 e0       	ldi	r27, 0x00	; 0
    a554:	ee ea       	ldi	r30, 0xAE	; 174
    a556:	f2 e5       	ldi	r31, 0x52	; 82
    a558:	0c 94 a9 70 	jmp	0xe152	; 0xe152 <__prologue_saves__>
   spritecount = 0;
    a55c:	10 92 a2 0f 	sts	0x0FA2, r1
   u8 state;
   
   static u8 yorder[4]; u8 Y[4];


  if((gamestate & BLINK)){//distribute some cpu time every other frame for time safety
    a560:	80 91 fc 0e 	lds	r24, 0x0EFC
    a564:	90 e0       	ldi	r25, 0x00	; 0
    a566:	21 e0       	ldi	r18, 0x01	; 1
    a568:	c2 2e       	mov	r12, r18
    a56a:	d1 2c       	mov	r13, r1
    a56c:	c8 22       	and	r12, r24
    a56e:	d9 22       	and	r13, r25
    a570:	80 ff       	sbrs	r24, 0
    a572:	57 c0       	rjmp	.+174    	; 0xa622 <Render+0xd2>
     //Sort back to front
     for (u8 i = 0; i < numplayers; i++) {
    a574:	10 91 a7 0f 	lds	r17, 0x0FA7
    a578:	4e ef       	ldi	r20, 0xFE	; 254
    a57a:	5f e0       	ldi	r21, 0x0F	; 15
    a57c:	de 01       	movw	r26, r28
    a57e:	11 96       	adiw	r26, 0x01	; 1
    a580:	20 e0       	ldi	r18, 0x00	; 0
    a582:	30 e0       	ldi	r19, 0x00	; 0
    a584:	21 c0       	rjmp	.+66     	; 0xa5c8 <Render+0x78>
       //if(player_state[i] == 255)//dead and done with animation(totally dead, not drawn)
	      //continue;

       yorder[i] = i;
    a586:	f9 01       	movw	r30, r18
    a588:	e2 50       	subi	r30, 0x02	; 2
    a58a:	f1 4f       	sbci	r31, 0xF1	; 241
    a58c:	20 83       	st	Z, r18
       Y[i] = (player_y[i]<<3);
    a58e:	f9 01       	movw	r30, r18
    a590:	e5 58       	subi	r30, 0x85	; 133
    a592:	f0 4f       	sbci	r31, 0xF0	; 240
    a594:	90 81       	ld	r25, Z
    a596:	99 0f       	add	r25, r25
    a598:	99 0f       	add	r25, r25
    a59a:	99 0f       	add	r25, r25
    a59c:	9c 93       	st	X, r25

	   if(player_state[i] & UP)//adjust for offset if applicable
    a59e:	f9 01       	movw	r30, r18
    a5a0:	ea 53       	subi	r30, 0x3A	; 58
    a5a2:	f0 4f       	sbci	r31, 0xF0	; 240
    a5a4:	80 81       	ld	r24, Z
    a5a6:	80 ff       	sbrs	r24, 0
    a5a8:	04 c0       	rjmp	.+8      	; 0xa5b2 <Render+0x62>
	      Y[i] -= player_offset[i];
    a5aa:	fa 01       	movw	r30, r20
    a5ac:	80 81       	ld	r24, Z
    a5ae:	98 1b       	sub	r25, r24
    a5b0:	05 c0       	rjmp	.+10     	; 0xa5bc <Render+0x6c>
       else if(player_state[i] & DOWN)
    a5b2:	81 ff       	sbrs	r24, 1
    a5b4:	04 c0       	rjmp	.+8      	; 0xa5be <Render+0x6e>
	      Y[i] += player_offset[i];
    a5b6:	fa 01       	movw	r30, r20
    a5b8:	80 81       	ld	r24, Z
    a5ba:	98 0f       	add	r25, r24
    a5bc:	9c 93       	st	X, r25
    a5be:	2f 5f       	subi	r18, 0xFF	; 255
    a5c0:	3f 4f       	sbci	r19, 0xFF	; 255
    a5c2:	4f 5f       	subi	r20, 0xFF	; 255
    a5c4:	5f 4f       	sbci	r21, 0xFF	; 255
    a5c6:	11 96       	adiw	r26, 0x01	; 1
   static u8 yorder[4]; u8 Y[4];


  if((gamestate & BLINK)){//distribute some cpu time every other frame for time safety
     //Sort back to front
     for (u8 i = 0; i < numplayers; i++) {
    a5c8:	21 17       	cp	r18, r17
    a5ca:	e8 f2       	brcs	.-70     	; 0xa586 <Render+0x36>
    a5cc:	80 e0       	ldi	r24, 0x00	; 0

     u8 p;  

     for (u8 i=0;i<numplayers;i++){
        for (u8 j=i+1;j<numplayers;j++){
           if (Y[j] < Y[i]) {
    a5ce:	7e 01       	movw	r14, r28
    a5d0:	08 94       	sec
    a5d2:	e1 1c       	adc	r14, r1
    a5d4:	f1 1c       	adc	r15, r1
    a5d6:	23 c0       	rjmp	.+70     	; 0xa61e <Render+0xce>
  

     u8 p;  

     for (u8 i=0;i<numplayers;i++){
        for (u8 j=i+1;j<numplayers;j++){
    a5d8:	38 2f       	mov	r19, r24
    a5da:	3f 5f       	subi	r19, 0xFF	; 255
    a5dc:	23 2f       	mov	r18, r19
           if (Y[j] < Y[i]) {
    a5de:	90 e0       	ldi	r25, 0x00	; 0
    a5e0:	b7 01       	movw	r22, r14
    a5e2:	68 0f       	add	r22, r24
    a5e4:	79 1f       	adc	r23, r25
              p = Y[i];
              Y[i] = Y[j];
              Y[j] = p;
              p = yorder[i];
    a5e6:	ac 01       	movw	r20, r24
    a5e8:	42 50       	subi	r20, 0x02	; 2
    a5ea:	51 4f       	sbci	r21, 0xF1	; 241
    a5ec:	15 c0       	rjmp	.+42     	; 0xa618 <Render+0xc8>

     u8 p;  

     for (u8 i=0;i<numplayers;i++){
        for (u8 j=i+1;j<numplayers;j++){
           if (Y[j] < Y[i]) {
    a5ee:	a2 2e       	mov	r10, r18
    a5f0:	bb 24       	eor	r11, r11
    a5f2:	d7 01       	movw	r26, r14
    a5f4:	aa 0d       	add	r26, r10
    a5f6:	bb 1d       	adc	r27, r11
    a5f8:	9c 91       	ld	r25, X
    a5fa:	fb 01       	movw	r30, r22
    a5fc:	80 81       	ld	r24, Z
    a5fe:	98 17       	cp	r25, r24
    a600:	50 f4       	brcc	.+20     	; 0xa616 <Render+0xc6>
              p = Y[i];
              Y[i] = Y[j];
    a602:	90 83       	st	Z, r25
              Y[j] = p;
    a604:	8c 93       	st	X, r24
              p = yorder[i];
    a606:	da 01       	movw	r26, r20
    a608:	8c 91       	ld	r24, X
              yorder[i] = yorder[j];
    a60a:	f5 01       	movw	r30, r10
    a60c:	e2 50       	subi	r30, 0x02	; 2
    a60e:	f1 4f       	sbci	r31, 0xF1	; 241
    a610:	90 81       	ld	r25, Z
    a612:	9c 93       	st	X, r25
              yorder[j] = p;
    a614:	80 83       	st	Z, r24
  

     u8 p;  

     for (u8 i=0;i<numplayers;i++){
        for (u8 j=i+1;j<numplayers;j++){
    a616:	2f 5f       	subi	r18, 0xFF	; 255
    a618:	21 17       	cp	r18, r17
    a61a:	48 f3       	brcs	.-46     	; 0xa5ee <Render+0x9e>
    a61c:	83 2f       	mov	r24, r19
  
  

     u8 p;  

     for (u8 i=0;i<numplayers;i++){
    a61e:	81 17       	cp	r24, r17
    a620:	d8 f2       	brcs	.-74     	; 0xa5d8 <Render+0x88>
     }

  }


numplayers=4;
    a622:	84 e0       	ldi	r24, 0x04	; 4
    a624:	80 93 a7 0f 	sts	0x0FA7, r24
	  }
   
   } 
   */  

   if((gamestate & BLINK))//draw bombs first on blink, last on !blink. Give players and moving bombs a fair shair of ram tiles
    a628:	cd 28       	or	r12, r13
    a62a:	11 f0       	breq	.+4      	; 0xa630 <Render+0xe0>
      DrawBombs();
    a62c:	0e 94 c0 4f 	call	0x9f80	; 0x9f80 <DrawBombs>
    a630:	cc 24       	eor	r12, r12
    a632:	dd 24       	eor	r13, r13
bool PutSprite(u8 x, u8 y, u8 t, bool flip, u8 pallet){
   if(spritecount >= MAX_SPRITES){return false;}//covers roll over for decrementing count on blink

   sprites[spritecount].x=x; 
   sprites[spritecount].y=y; 
   sprites[spritecount].tileIndex=t;
    a634:	9d e5       	ldi	r25, 0x5D	; 93
    a636:	49 2e       	mov	r4, r25
    a638:	51 2c       	mov	r5, r1

   if(flip){sprites[spritecount].flags = SPR_FLIP_X;}
   else    {sprites[spritecount].flags = 0;}
   sprites[spritecount].flags |= pallet<<2;
    a63a:	88 eb       	ldi	r24, 0xB8	; 184
    a63c:	78 2e       	mov	r7, r24


bool PutSprite(u8 x, u8 y, u8 t, bool flip, u8 pallet){
   if(spritecount >= MAX_SPRITES){return false;}//covers roll over for decrementing count on blink

   sprites[spritecount].x=x; 
    a63e:	08 ee       	ldi	r16, 0xE8	; 232
    a640:	60 2e       	mov	r6, r16
   sprites[spritecount].y=y; 
    a642:	1b e0       	ldi	r17, 0x0B	; 11
    a644:	21 2e       	mov	r2, r17
    a646:	31 2c       	mov	r3, r1

   for(u8 i=0;i<MAX_PLAYERS;i++){
      xoff = yoff = 0;
	  t = yorder[i];

      if(player_x[t] == 255)//player is being used or drawn by a special object, ignore here
    a648:	f6 01       	movw	r30, r12
    a64a:	e2 50       	subi	r30, 0x02	; 2
    a64c:	f1 4f       	sbci	r31, 0xF1	; 241
    a64e:	80 81       	ld	r24, Z
    a650:	08 2f       	mov	r16, r24
    a652:	10 e0       	ldi	r17, 0x00	; 0
    a654:	f8 01       	movw	r30, r16
    a656:	e9 5e       	subi	r30, 0xE9	; 233
    a658:	ff 4e       	sbci	r31, 0xEF	; 239
    a65a:	f0 80       	ld	r15, Z
    a65c:	bf ef       	ldi	r27, 0xFF	; 255
    a65e:	fb 16       	cp	r15, r27
    a660:	09 f4       	brne	.+2      	; 0xa664 <Render+0x114>
    a662:	0e c2       	rjmp	.+1052   	; 0xaa80 <Render+0x530>
		 continue;

	  state = player_state[t];	  
    a664:	f8 01       	movw	r30, r16
    a666:	ea 53       	subi	r30, 0x3A	; 58
    a668:	f0 4f       	sbci	r31, 0xF0	; 240
    a66a:	b0 80       	ld	r11, Z
      
	  if(blip && player_attrb2[t] & 0b01100000)//invulnerable
    a66c:	90 90 03 01 	lds	r9, 0x0103
    a670:	99 20       	and	r9, r9
    a672:	39 f0       	breq	.+14     	; 0xa682 <Render+0x132>
    a674:	f8 01       	movw	r30, r16
    a676:	ea 58       	subi	r30, 0x8A	; 138
    a678:	f0 4f       	sbci	r31, 0xF0	; 240
    a67a:	80 81       	ld	r24, Z
    a67c:	80 76       	andi	r24, 0x60	; 96
    a67e:	09 f0       	breq	.+2      	; 0xa682 <Render+0x132>
    a680:	ff c1       	rjmp	.+1022   	; 0xaa80 <Render+0x530>
	     continue;
      if(player_attrb2[t] & GHOST){
    a682:	f8 01       	movw	r30, r16
    a684:	ea 58       	subi	r30, 0x8A	; 138
    a686:	f0 4f       	sbci	r31, 0xF0	; 240
    a688:	80 81       	ld	r24, Z
    a68a:	87 ff       	sbrs	r24, 7
    a68c:	24 c1       	rjmp	.+584    	; 0xa8d6 <Render+0x386>
	     if(blip || !(gameoptions & USEGHOST) || (roundtime < 60*SEC && (gameoptions & USEBLITZ)))//make ghosts "translucent" and save ram tiles
    a68e:	99 20       	and	r9, r9
    a690:	09 f0       	breq	.+2      	; 0xa694 <Render+0x144>
    a692:	f6 c1       	rjmp	.+1004   	; 0xaa80 <Render+0x530>
    a694:	20 91 01 01 	lds	r18, 0x0101
    a698:	27 ff       	sbrs	r18, 7
    a69a:	f2 c1       	rjmp	.+996    	; 0xaa80 <Render+0x530>
    a69c:	80 91 c2 0f 	lds	r24, 0x0FC2
    a6a0:	90 91 c3 0f 	lds	r25, 0x0FC3
    a6a4:	80 51       	subi	r24, 0x10	; 16
    a6a6:	9e 40       	sbci	r25, 0x0E	; 14
    a6a8:	10 f4       	brcc	.+4      	; 0xa6ae <Render+0x15e>
    a6aa:	26 fd       	sbrc	r18, 6
    a6ac:	e9 c1       	rjmp	.+978    	; 0xaa80 <Render+0x530>
		    continue;
         
         if(player_x[t] < 12){//left side
    a6ae:	fb e0       	ldi	r31, 0x0B	; 11
    a6b0:	ff 15       	cp	r31, r15
    a6b2:	08 f4       	brcc	.+2      	; 0xa6b6 <Render+0x166>
    a6b4:	5c c0       	rjmp	.+184    	; 0xa76e <Render+0x21e>
    a6b6:	d8 01       	movw	r26, r16
    a6b8:	a2 50       	subi	r26, 0x02	; 2
    a6ba:	b0 4f       	sbci	r27, 0xF0	; 240
			if(player_state[t] & LEFT)
    a6bc:	b2 fe       	sbrs	r11, 2
    a6be:	02 c0       	rjmp	.+4      	; 0xa6c4 <Render+0x174>
			   yoff = player_offset[t];
    a6c0:	4c 91       	ld	r20, X
    a6c2:	02 c0       	rjmp	.+4      	; 0xa6c8 <Render+0x178>
			else
			   yoff = -player_offset[t];
    a6c4:	4c 91       	ld	r20, X
    a6c6:	41 95       	neg	r20
            state = pgm_read_byte(&bombframelist[player_frame[t]])*4;
    a6c8:	07 54       	subi	r16, 0x47	; 71
    a6ca:	10 4f       	sbci	r17, 0xF0	; 240
    a6cc:	d8 01       	movw	r26, r16
    a6ce:	ec 91       	ld	r30, X
    a6d0:	f0 e0       	ldi	r31, 0x00	; 0
    a6d2:	ed 58       	subi	r30, 0x8D	; 141
    a6d4:	f6 48       	sbci	r31, 0x86	; 134
    a6d6:	24 91       	lpm	r18, Z+
    a6d8:	22 0f       	add	r18, r18
    a6da:	22 0f       	add	r18, r18
			PutSprite(0,(20*8)-(player_x[t]*16)+8+yoff,(FIRSTBOMBSPRITE+1)+state,false,BOMB_PALLET);
    a6dc:	6f 2d       	mov	r22, r15
    a6de:	70 e0       	ldi	r23, 0x00	; 0
inline void UpdateBorder();



bool PutSprite(u8 x, u8 y, u8 t, bool flip, u8 pallet){
   if(spritecount >= MAX_SPRITES){return false;}//covers roll over for decrementing count on blink
    a6e0:	30 91 a2 0f 	lds	r19, 0x0FA2
    a6e4:	3f 31       	cpi	r19, 0x1F	; 31
    a6e6:	00 f5       	brcc	.+64     	; 0xa728 <Render+0x1d8>

   sprites[spritecount].x=x; 
    a6e8:	83 2f       	mov	r24, r19
    a6ea:	90 e0       	ldi	r25, 0x00	; 0
    a6ec:	fc 01       	movw	r30, r24
    a6ee:	ee 0f       	add	r30, r30
    a6f0:	ff 1f       	adc	r31, r31
    a6f2:	ee 0f       	add	r30, r30
    a6f4:	ff 1f       	adc	r31, r31
    a6f6:	e8 0f       	add	r30, r24
    a6f8:	f9 1f       	adc	r31, r25
    a6fa:	ee 52       	subi	r30, 0x2E	; 46
    a6fc:	fc 4f       	sbci	r31, 0xFC	; 252
    a6fe:	10 82       	st	Z, r1
   sprites[spritecount].y=y; 
    a700:	8a e0       	ldi	r24, 0x0A	; 10
    a702:	90 e0       	ldi	r25, 0x00	; 0
    a704:	86 1b       	sub	r24, r22
    a706:	97 0b       	sbc	r25, r23
    a708:	a4 e0       	ldi	r26, 0x04	; 4
    a70a:	88 0f       	add	r24, r24
    a70c:	99 1f       	adc	r25, r25
    a70e:	aa 95       	dec	r26
    a710:	e1 f7       	brne	.-8      	; 0xa70a <Render+0x1ba>
    a712:	08 96       	adiw	r24, 0x08	; 8
    a714:	84 0f       	add	r24, r20
    a716:	81 83       	std	Z+1, r24	; 0x01
   sprites[spritecount].tileIndex=t;
    a718:	25 59       	subi	r18, 0x95	; 149
    a71a:	22 83       	std	Z+2, r18	; 0x02
    a71c:	2b 56       	subi	r18, 0x6B	; 107
    a71e:	13 82       	std	Z+3, r1	; 0x03

   if(flip){sprites[spritecount].flags = SPR_FLIP_X;}
   else    {sprites[spritecount].flags = 0;}
   sprites[spritecount].flags |= pallet<<2;
    a720:	74 82       	std	Z+4, r7	; 0x04
   //if(blink){spritecount++;}else{spritecount--;}
   spritecount++;
    a722:	3f 5f       	subi	r19, 0xFF	; 255
    a724:	30 93 a2 0f 	sts	0x0FA2, r19
inline void UpdateBorder();



bool PutSprite(u8 x, u8 y, u8 t, bool flip, u8 pallet){
   if(spritecount >= MAX_SPRITES){return false;}//covers roll over for decrementing count on blink
    a728:	30 91 a2 0f 	lds	r19, 0x0FA2
    a72c:	3f 31       	cpi	r19, 0x1F	; 31
    a72e:	08 f0       	brcs	.+2      	; 0xa732 <Render+0x1e2>
    a730:	a7 c1       	rjmp	.+846    	; 0xaa80 <Render+0x530>

   sprites[spritecount].x=x; 
    a732:	83 2f       	mov	r24, r19
    a734:	90 e0       	ldi	r25, 0x00	; 0
    a736:	fc 01       	movw	r30, r24
    a738:	ee 0f       	add	r30, r30
    a73a:	ff 1f       	adc	r31, r31
    a73c:	ee 0f       	add	r30, r30
    a73e:	ff 1f       	adc	r31, r31
    a740:	e8 0f       	add	r30, r24
    a742:	f9 1f       	adc	r31, r25
    a744:	ee 52       	subi	r30, 0x2E	; 46
    a746:	fc 4f       	sbci	r31, 0xFC	; 252
    a748:	10 82       	st	Z, r1
   sprites[spritecount].y=y; 
    a74a:	c1 01       	movw	r24, r2
    a74c:	86 1b       	sub	r24, r22
    a74e:	97 0b       	sbc	r25, r23
    a750:	b4 e0       	ldi	r27, 0x04	; 4
    a752:	88 0f       	add	r24, r24
    a754:	99 1f       	adc	r25, r25
    a756:	ba 95       	dec	r27
    a758:	e1 f7       	brne	.-8      	; 0xa752 <Render+0x202>
    a75a:	48 0f       	add	r20, r24
    a75c:	41 83       	std	Z+1, r20	; 0x01
   sprites[spritecount].tileIndex=t;
    a75e:	23 59       	subi	r18, 0x93	; 147
    a760:	22 83       	std	Z+2, r18	; 0x02
    a762:	13 82       	std	Z+3, r1	; 0x03

   if(flip){sprites[spritecount].flags = SPR_FLIP_X;}
   else    {sprites[spritecount].flags = 0;}
   sprites[spritecount].flags |= pallet<<2;
    a764:	74 82       	std	Z+4, r7	; 0x04
   //if(blink){spritecount++;}else{spritecount--;}
   spritecount++;
    a766:	3f 5f       	subi	r19, 0xFF	; 255
    a768:	30 93 a2 0f 	sts	0x0FA2, r19
    a76c:	89 c1       	rjmp	.+786    	; 0xaa80 <Render+0x530>
			   yoff = -player_offset[t];
            state = pgm_read_byte(&bombframelist[player_frame[t]])*4;
			PutSprite(0,(20*8)-(player_x[t]*16)+8+yoff,(FIRSTBOMBSPRITE+1)+state,false,BOMB_PALLET);
		    PutSprite(0,(20*8)-(player_x[t]*16)+16+yoff,(FIRSTBOMBSPRITE+3)+state,false,BOMB_PALLET);
	      }
          else if(player_x[t] > 26){//right side
    a76e:	ba e1       	ldi	r27, 0x1A	; 26
    a770:	bf 15       	cp	r27, r15
    a772:	08 f0       	brcs	.+2      	; 0xa776 <Render+0x226>
    a774:	57 c0       	rjmp	.+174    	; 0xa824 <Render+0x2d4>
    a776:	d8 01       	movw	r26, r16
    a778:	a2 50       	subi	r26, 0x02	; 2
    a77a:	b0 4f       	sbci	r27, 0xF0	; 240
			if(player_state[t] & RIGHT)
    a77c:	b3 fe       	sbrs	r11, 3
    a77e:	02 c0       	rjmp	.+4      	; 0xa784 <Render+0x234>
			   yoff = player_offset[t];
    a780:	6c 91       	ld	r22, X
    a782:	02 c0       	rjmp	.+4      	; 0xa788 <Render+0x238>
			else
			   yoff = -player_offset[t];
    a784:	6c 91       	ld	r22, X
    a786:	61 95       	neg	r22
            state = pgm_read_byte(&bombframelist[player_frame[t]])*4;
    a788:	07 54       	subi	r16, 0x47	; 71
    a78a:	10 4f       	sbci	r17, 0xF0	; 240
    a78c:	d8 01       	movw	r26, r16
    a78e:	ec 91       	ld	r30, X
    a790:	f0 e0       	ldi	r31, 0x00	; 0
    a792:	ed 58       	subi	r30, 0x8D	; 141
    a794:	f6 48       	sbci	r31, 0x86	; 134
    a796:	44 91       	lpm	r20, Z+
    a798:	44 0f       	add	r20, r20
    a79a:	44 0f       	add	r20, r20
            PutSprite(29*8,((player_x[t]-27)*16)-8+yoff,(FIRSTBOMBSPRITE+1)+state,true,BOMB_PALLET);
    a79c:	2f 2d       	mov	r18, r15
    a79e:	30 e0       	ldi	r19, 0x00	; 0
    a7a0:	2b 51       	subi	r18, 0x1B	; 27
    a7a2:	30 40       	sbci	r19, 0x00	; 0
inline void UpdateBorder();



bool PutSprite(u8 x, u8 y, u8 t, bool flip, u8 pallet){
   if(spritecount >= MAX_SPRITES){return false;}//covers roll over for decrementing count on blink
    a7a4:	50 91 a2 0f 	lds	r21, 0x0FA2
    a7a8:	5f 31       	cpi	r21, 0x1F	; 31
    a7aa:	f0 f4       	brcc	.+60     	; 0xa7e8 <Render+0x298>

   sprites[spritecount].x=x; 
    a7ac:	85 2f       	mov	r24, r21
    a7ae:	90 e0       	ldi	r25, 0x00	; 0
    a7b0:	fc 01       	movw	r30, r24
    a7b2:	ee 0f       	add	r30, r30
    a7b4:	ff 1f       	adc	r31, r31
    a7b6:	ee 0f       	add	r30, r30
    a7b8:	ff 1f       	adc	r31, r31
    a7ba:	e8 0f       	add	r30, r24
    a7bc:	f9 1f       	adc	r31, r25
    a7be:	ee 52       	subi	r30, 0x2E	; 46
    a7c0:	fc 4f       	sbci	r31, 0xFC	; 252
    a7c2:	60 82       	st	Z, r6
   sprites[spritecount].y=y; 
    a7c4:	c9 01       	movw	r24, r18
    a7c6:	74 e0       	ldi	r23, 0x04	; 4
    a7c8:	88 0f       	add	r24, r24
    a7ca:	99 1f       	adc	r25, r25
    a7cc:	7a 95       	dec	r23
    a7ce:	e1 f7       	brne	.-8      	; 0xa7c8 <Render+0x278>
    a7d0:	08 97       	sbiw	r24, 0x08	; 8
    a7d2:	86 0f       	add	r24, r22
    a7d4:	81 83       	std	Z+1, r24	; 0x01
   sprites[spritecount].tileIndex=t;
    a7d6:	45 59       	subi	r20, 0x95	; 149
    a7d8:	42 83       	std	Z+2, r20	; 0x02
    a7da:	4b 56       	subi	r20, 0x6B	; 107
    a7dc:	13 82       	std	Z+3, r1	; 0x03

   if(flip){sprites[spritecount].flags = SPR_FLIP_X;}
   else    {sprites[spritecount].flags = 0;}
   sprites[spritecount].flags |= pallet<<2;
    a7de:	b9 eb       	ldi	r27, 0xB9	; 185
    a7e0:	b4 83       	std	Z+4, r27	; 0x04
   //if(blink){spritecount++;}else{spritecount--;}
   spritecount++;
    a7e2:	5f 5f       	subi	r21, 0xFF	; 255
    a7e4:	50 93 a2 0f 	sts	0x0FA2, r21
inline void UpdateBorder();



bool PutSprite(u8 x, u8 y, u8 t, bool flip, u8 pallet){
   if(spritecount >= MAX_SPRITES){return false;}//covers roll over for decrementing count on blink
    a7e8:	50 91 a2 0f 	lds	r21, 0x0FA2
    a7ec:	5f 31       	cpi	r21, 0x1F	; 31
    a7ee:	08 f0       	brcs	.+2      	; 0xa7f2 <Render+0x2a2>
    a7f0:	47 c1       	rjmp	.+654    	; 0xaa80 <Render+0x530>

   sprites[spritecount].x=x; 
    a7f2:	85 2f       	mov	r24, r21
    a7f4:	90 e0       	ldi	r25, 0x00	; 0
    a7f6:	fc 01       	movw	r30, r24
    a7f8:	ee 0f       	add	r30, r30
    a7fa:	ff 1f       	adc	r31, r31
    a7fc:	ee 0f       	add	r30, r30
    a7fe:	ff 1f       	adc	r31, r31
    a800:	e8 0f       	add	r30, r24
    a802:	f9 1f       	adc	r31, r25
    a804:	ee 52       	subi	r30, 0x2E	; 46
    a806:	fc 4f       	sbci	r31, 0xFC	; 252
    a808:	60 82       	st	Z, r6
   sprites[spritecount].y=y; 
    a80a:	a4 e0       	ldi	r26, 0x04	; 4
    a80c:	22 0f       	add	r18, r18
    a80e:	33 1f       	adc	r19, r19
    a810:	aa 95       	dec	r26
    a812:	e1 f7       	brne	.-8      	; 0xa80c <Render+0x2bc>
    a814:	62 0f       	add	r22, r18
    a816:	61 83       	std	Z+1, r22	; 0x01
   sprites[spritecount].tileIndex=t;
    a818:	43 59       	subi	r20, 0x93	; 147
    a81a:	42 83       	std	Z+2, r20	; 0x02
    a81c:	13 82       	std	Z+3, r1	; 0x03

   if(flip){sprites[spritecount].flags = SPR_FLIP_X;}
   else    {sprites[spritecount].flags = 0;}
   sprites[spritecount].flags |= pallet<<2;
    a81e:	39 eb       	ldi	r19, 0xB9	; 185
    a820:	34 83       	std	Z+4, r19	; 0x04
    a822:	55 c0       	rjmp	.+170    	; 0xa8ce <Render+0x37e>
    a824:	d8 01       	movw	r26, r16
    a826:	a2 50       	subi	r26, 0x02	; 2
    a828:	b0 4f       	sbci	r27, 0xF0	; 240
            state = pgm_read_byte(&bombframelist[player_frame[t]])*4;
            PutSprite(29*8,((player_x[t]-27)*16)-8+yoff,(FIRSTBOMBSPRITE+1)+state,true,BOMB_PALLET);
		    PutSprite(29*8,((player_x[t]-27)*16)+0+yoff,(FIRSTBOMBSPRITE+3)+state,true,BOMB_PALLET);
		  }
          else{//top side
			if(player_state[t] & RIGHT)
    a82a:	b3 fe       	sbrs	r11, 3
    a82c:	02 c0       	rjmp	.+4      	; 0xa832 <Render+0x2e2>
			   yoff = player_offset[t];
    a82e:	6c 91       	ld	r22, X
    a830:	02 c0       	rjmp	.+4      	; 0xa836 <Render+0x2e6>
			else
			   yoff = -player_offset[t];
    a832:	6c 91       	ld	r22, X
    a834:	61 95       	neg	r22
            state = pgm_read_byte(&bombframelist[player_frame[t]])*4;
    a836:	07 54       	subi	r16, 0x47	; 71
    a838:	10 4f       	sbci	r17, 0xF0	; 240
    a83a:	d8 01       	movw	r26, r16
    a83c:	ec 91       	ld	r30, X
    a83e:	f0 e0       	ldi	r31, 0x00	; 0
    a840:	ed 58       	subi	r30, 0x8D	; 141
    a842:	f6 48       	sbci	r31, 0x86	; 134
    a844:	44 91       	lpm	r20, Z+
    a846:	44 0f       	add	r20, r20
    a848:	44 0f       	add	r20, r20
            PutSprite(((player_x[t]-12)*16)+0+yoff,0,(FIRSTBOMBSPRITE+2)+state,false,BOMB_PALLET);
    a84a:	2f 2d       	mov	r18, r15
    a84c:	30 e0       	ldi	r19, 0x00	; 0
    a84e:	2c 50       	subi	r18, 0x0C	; 12
    a850:	30 40       	sbci	r19, 0x00	; 0
inline void UpdateBorder();



bool PutSprite(u8 x, u8 y, u8 t, bool flip, u8 pallet){
   if(spritecount >= MAX_SPRITES){return false;}//covers roll over for decrementing count on blink
    a852:	50 91 a2 0f 	lds	r21, 0x0FA2
    a856:	5f 31       	cpi	r21, 0x1F	; 31
    a858:	e0 f4       	brcc	.+56     	; 0xa892 <Render+0x342>

   sprites[spritecount].x=x; 
    a85a:	85 2f       	mov	r24, r21
    a85c:	90 e0       	ldi	r25, 0x00	; 0
    a85e:	fc 01       	movw	r30, r24
    a860:	ee 0f       	add	r30, r30
    a862:	ff 1f       	adc	r31, r31
    a864:	ee 0f       	add	r30, r30
    a866:	ff 1f       	adc	r31, r31
    a868:	e8 0f       	add	r30, r24
    a86a:	f9 1f       	adc	r31, r25
    a86c:	ee 52       	subi	r30, 0x2E	; 46
    a86e:	fc 4f       	sbci	r31, 0xFC	; 252
    a870:	c9 01       	movw	r24, r18
    a872:	b4 e0       	ldi	r27, 0x04	; 4
    a874:	88 0f       	add	r24, r24
    a876:	99 1f       	adc	r25, r25
    a878:	ba 95       	dec	r27
    a87a:	e1 f7       	brne	.-8      	; 0xa874 <Render+0x324>
    a87c:	86 0f       	add	r24, r22
    a87e:	80 83       	st	Z, r24
   sprites[spritecount].y=y; 
    a880:	11 82       	std	Z+1, r1	; 0x01
   sprites[spritecount].tileIndex=t;
    a882:	44 59       	subi	r20, 0x94	; 148
    a884:	42 83       	std	Z+2, r20	; 0x02
    a886:	4c 56       	subi	r20, 0x6C	; 108
    a888:	13 82       	std	Z+3, r1	; 0x03

   if(flip){sprites[spritecount].flags = SPR_FLIP_X;}
   else    {sprites[spritecount].flags = 0;}
   sprites[spritecount].flags |= pallet<<2;
    a88a:	74 82       	std	Z+4, r7	; 0x04
   //if(blink){spritecount++;}else{spritecount--;}
   spritecount++;
    a88c:	5f 5f       	subi	r21, 0xFF	; 255
    a88e:	50 93 a2 0f 	sts	0x0FA2, r21
inline void UpdateBorder();



bool PutSprite(u8 x, u8 y, u8 t, bool flip, u8 pallet){
   if(spritecount >= MAX_SPRITES){return false;}//covers roll over for decrementing count on blink
    a892:	50 91 a2 0f 	lds	r21, 0x0FA2
    a896:	5f 31       	cpi	r21, 0x1F	; 31
    a898:	08 f0       	brcs	.+2      	; 0xa89c <Render+0x34c>
    a89a:	f2 c0       	rjmp	.+484    	; 0xaa80 <Render+0x530>

   sprites[spritecount].x=x; 
    a89c:	85 2f       	mov	r24, r21
    a89e:	90 e0       	ldi	r25, 0x00	; 0
    a8a0:	fc 01       	movw	r30, r24
    a8a2:	ee 0f       	add	r30, r30
    a8a4:	ff 1f       	adc	r31, r31
    a8a6:	ee 0f       	add	r30, r30
    a8a8:	ff 1f       	adc	r31, r31
    a8aa:	e8 0f       	add	r30, r24
    a8ac:	f9 1f       	adc	r31, r25
    a8ae:	ee 52       	subi	r30, 0x2E	; 46
    a8b0:	fc 4f       	sbci	r31, 0xFC	; 252
    a8b2:	74 e0       	ldi	r23, 0x04	; 4
    a8b4:	22 0f       	add	r18, r18
    a8b6:	33 1f       	adc	r19, r19
    a8b8:	7a 95       	dec	r23
    a8ba:	e1 f7       	brne	.-8      	; 0xa8b4 <Render+0x364>
    a8bc:	28 5f       	subi	r18, 0xF8	; 248
    a8be:	3f 4f       	sbci	r19, 0xFF	; 255
    a8c0:	62 0f       	add	r22, r18
    a8c2:	60 83       	st	Z, r22
   sprites[spritecount].y=y; 
    a8c4:	11 82       	std	Z+1, r1	; 0x01
   sprites[spritecount].tileIndex=t;
    a8c6:	43 59       	subi	r20, 0x93	; 147
    a8c8:	42 83       	std	Z+2, r20	; 0x02
    a8ca:	13 82       	std	Z+3, r1	; 0x03

   if(flip){sprites[spritecount].flags = SPR_FLIP_X;}
   else    {sprites[spritecount].flags = 0;}
   sprites[spritecount].flags |= pallet<<2;
    a8cc:	74 82       	std	Z+4, r7	; 0x04
   //if(blink){spritecount++;}else{spritecount--;}
   spritecount++;
    a8ce:	5f 5f       	subi	r21, 0xFF	; 255
    a8d0:	50 93 a2 0f 	sts	0x0FA2, r21
    a8d4:	d5 c0       	rjmp	.+426    	; 0xaa80 <Render+0x530>
		  }
		  continue;

      }
      
	  poff = (t*BOMBER_PALLET_ENTRIES);
    a8d6:	80 2e       	mov	r8, r16
    a8d8:	88 0c       	add	r8, r8
    a8da:	88 0c       	add	r8, r8
    a8dc:	88 0c       	add	r8, r8

	  if((gamestate & VICTORY) && player_offset[i] == 255){//victory and player has aligned with grid, draw jumping animation
    a8de:	80 91 fc 0e 	lds	r24, 0x0EFC
    a8e2:	86 ff       	sbrs	r24, 6
    a8e4:	6f c0       	rjmp	.+222    	; 0xa9c4 <Render+0x474>
    a8e6:	f6 01       	movw	r30, r12
    a8e8:	e2 50       	subi	r30, 0x02	; 2
    a8ea:	f0 4f       	sbci	r31, 0xF0	; 240
    a8ec:	80 81       	ld	r24, Z
    a8ee:	8f 3f       	cpi	r24, 0xFF	; 255
    a8f0:	09 f0       	breq	.+2      	; 0xa8f4 <Render+0x3a4>
    a8f2:	68 c0       	rjmp	.+208    	; 0xa9c4 <Render+0x474>
         yoff = -player_wait[i];
    a8f4:	f6 01       	movw	r30, r12
    a8f6:	e1 5f       	subi	r30, 0xF1	; 241
    a8f8:	ff 4e       	sbci	r31, 0xEF	; 239
    a8fa:	90 81       	ld	r25, Z
    a8fc:	a9 2f       	mov	r26, r25
    a8fe:	a1 95       	neg	r26
		 foff = VICTORYSTARTFRAME;

			//Draw shadow
		    PutSprite(((player_x[i]+0)*8)+(player_wait[i]>4)+(player_wait[i]>8),(player_y[i]+1)*8,SHADOW_SPRITE,false,0);
    a900:	f6 01       	movw	r30, r12
    a902:	e9 5e       	subi	r30, 0xE9	; 233
    a904:	ff 4e       	sbci	r31, 0xEF	; 239
    a906:	80 81       	ld	r24, Z
    a908:	68 2f       	mov	r22, r24
    a90a:	70 e0       	ldi	r23, 0x00	; 0
    a90c:	ee 24       	eor	r14, r14
    a90e:	95 30       	cpi	r25, 0x05	; 5
    a910:	10 f0       	brcs	.+4      	; 0xa916 <Render+0x3c6>
    a912:	ee 24       	eor	r14, r14
    a914:	e3 94       	inc	r14
    a916:	b0 e0       	ldi	r27, 0x00	; 0
    a918:	99 30       	cpi	r25, 0x09	; 9
    a91a:	08 f0       	brcs	.+2      	; 0xa91e <Render+0x3ce>
    a91c:	b1 e0       	ldi	r27, 0x01	; 1
    a91e:	f6 01       	movw	r30, r12
    a920:	e5 58       	subi	r30, 0x85	; 133
    a922:	f0 4f       	sbci	r31, 0xF0	; 240
    a924:	80 81       	ld	r24, Z
    a926:	48 2f       	mov	r20, r24
    a928:	50 e0       	ldi	r21, 0x00	; 0
    a92a:	4f 5f       	subi	r20, 0xFF	; 255
    a92c:	5f 4f       	sbci	r21, 0xFF	; 255
    a92e:	33 e0       	ldi	r19, 0x03	; 3
    a930:	44 0f       	add	r20, r20
    a932:	55 1f       	adc	r21, r21
    a934:	3a 95       	dec	r19
    a936:	e1 f7       	brne	.-8      	; 0xa930 <Render+0x3e0>
    a938:	a4 2e       	mov	r10, r20
inline void UpdateBorder();



bool PutSprite(u8 x, u8 y, u8 t, bool flip, u8 pallet){
   if(spritecount >= MAX_SPRITES){return false;}//covers roll over for decrementing count on blink
    a93a:	30 91 a2 0f 	lds	r19, 0x0FA2
    a93e:	3f 31       	cpi	r19, 0x1F	; 31
    a940:	e0 f4       	brcc	.+56     	; 0xa97a <Render+0x42a>

   sprites[spritecount].x=x; 
    a942:	83 2f       	mov	r24, r19
    a944:	90 e0       	ldi	r25, 0x00	; 0
    a946:	fc 01       	movw	r30, r24
    a948:	ee 0f       	add	r30, r30
    a94a:	ff 1f       	adc	r31, r31
    a94c:	ee 0f       	add	r30, r30
    a94e:	ff 1f       	adc	r31, r31
    a950:	e8 0f       	add	r30, r24
    a952:	f9 1f       	adc	r31, r25
    a954:	ee 52       	subi	r30, 0x2E	; 46
    a956:	fc 4f       	sbci	r31, 0xFC	; 252
    a958:	2b 2f       	mov	r18, r27
    a95a:	2e 0d       	add	r18, r14
    a95c:	cb 01       	movw	r24, r22
    a95e:	53 e0       	ldi	r21, 0x03	; 3
    a960:	88 0f       	add	r24, r24
    a962:	99 1f       	adc	r25, r25
    a964:	5a 95       	dec	r21
    a966:	e1 f7       	brne	.-8      	; 0xa960 <Render+0x410>
    a968:	28 0f       	add	r18, r24
    a96a:	20 83       	st	Z, r18
   sprites[spritecount].y=y; 
    a96c:	41 83       	std	Z+1, r20	; 0x01
   sprites[spritecount].tileIndex=t;
    a96e:	53 82       	std	Z+3, r5	; 0x03
    a970:	42 82       	std	Z+2, r4	; 0x02

   if(flip){sprites[spritecount].flags = SPR_FLIP_X;}
   else    {sprites[spritecount].flags = 0;}
   sprites[spritecount].flags |= pallet<<2;
    a972:	14 82       	std	Z+4, r1	; 0x04
   //if(blink){spritecount++;}else{spritecount--;}
   spritecount++;
    a974:	3f 5f       	subi	r19, 0xFF	; 255
    a976:	30 93 a2 0f 	sts	0x0FA2, r19
inline void UpdateBorder();



bool PutSprite(u8 x, u8 y, u8 t, bool flip, u8 pallet){
   if(spritecount >= MAX_SPRITES){return false;}//covers roll over for decrementing count on blink
    a97a:	20 91 a2 0f 	lds	r18, 0x0FA2
    a97e:	2f 31       	cpi	r18, 0x1F	; 31
    a980:	f0 f4       	brcc	.+60     	; 0xa9be <Render+0x46e>

   sprites[spritecount].x=x; 
    a982:	82 2f       	mov	r24, r18
    a984:	90 e0       	ldi	r25, 0x00	; 0
    a986:	fc 01       	movw	r30, r24
    a988:	ee 0f       	add	r30, r30
    a98a:	ff 1f       	adc	r31, r31
    a98c:	ee 0f       	add	r30, r30
    a98e:	ff 1f       	adc	r31, r31
    a990:	e8 0f       	add	r30, r24
    a992:	f9 1f       	adc	r31, r25
    a994:	ee 52       	subi	r30, 0x2E	; 46
    a996:	fc 4f       	sbci	r31, 0xFC	; 252
    a998:	6f 5f       	subi	r22, 0xFF	; 255
    a99a:	7f 4f       	sbci	r23, 0xFF	; 255
    a99c:	93 e0       	ldi	r25, 0x03	; 3
    a99e:	66 0f       	add	r22, r22
    a9a0:	77 1f       	adc	r23, r23
    a9a2:	9a 95       	dec	r25
    a9a4:	e1 f7       	brne	.-8      	; 0xa99e <Render+0x44e>
    a9a6:	86 2f       	mov	r24, r22
    a9a8:	8e 19       	sub	r24, r14
    a9aa:	8b 1b       	sub	r24, r27
    a9ac:	80 83       	st	Z, r24
   sprites[spritecount].y=y; 
    a9ae:	a1 82       	std	Z+1, r10	; 0x01
   sprites[spritecount].tileIndex=t;
    a9b0:	53 82       	std	Z+3, r5	; 0x03
    a9b2:	42 82       	std	Z+2, r4	; 0x02

   if(flip){sprites[spritecount].flags = SPR_FLIP_X;}
   else    {sprites[spritecount].flags = 0;}
   sprites[spritecount].flags |= pallet<<2;
    a9b4:	b1 e0       	ldi	r27, 0x01	; 1
    a9b6:	b4 83       	std	Z+4, r27	; 0x04
   //if(blink){spritecount++;}else{spritecount--;}
   spritecount++;
    a9b8:	2f 5f       	subi	r18, 0xFF	; 255
    a9ba:	20 93 a2 0f 	sts	0x0FA2, r18
    a9be:	90 e0       	ldi	r25, 0x00	; 0
    a9c0:	48 e2       	ldi	r20, 0x28	; 40
    a9c2:	33 c0       	rjmp	.+102    	; 0xaa2a <Render+0x4da>
			//Draw shadow
		    PutSprite(((player_x[i]+0)*8)+(player_wait[i]>4)+(player_wait[i]>8),(player_y[i]+1)*8,SHADOW_SPRITE,false,0);
		    PutSprite(((player_x[i]+1)*8)-(player_wait[i]>4)-(player_wait[i]>8),(player_y[i]+1)*8,SHADOW_SPRITE,true,0);

	  }
	  else if(player_ftime[t] >= 4*SEC){//player is in idle animation
    a9c4:	f8 01       	movw	r30, r16
    a9c6:	e6 53       	subi	r30, 0x36	; 54
    a9c8:	f0 4f       	sbci	r31, 0xF0	; 240
    a9ca:	80 81       	ld	r24, Z
    a9cc:	80 3f       	cpi	r24, 0xF0	; 240
    a9ce:	68 f0       	brcs	.+26     	; 0xa9ea <Render+0x49a>
         foff = pgm_read_byte(&IdleFrames[player_frame[t]]) - player_frame[t];//adjust for player frame, see below
    a9d0:	f8 01       	movw	r30, r16
    a9d2:	e7 54       	subi	r30, 0x47	; 71
    a9d4:	f0 4f       	sbci	r31, 0xF0	; 240
    a9d6:	80 81       	ld	r24, Z
    a9d8:	e8 2f       	mov	r30, r24
    a9da:	f0 e0       	ldi	r31, 0x00	; 0
    a9dc:	e3 5b       	subi	r30, 0xB3	; 179
    a9de:	fd 49       	sbci	r31, 0x9D	; 157
    a9e0:	44 91       	lpm	r20, Z+
    a9e2:	48 1b       	sub	r20, r24
    a9e4:	90 e0       	ldi	r25, 0x00	; 0
    a9e6:	a0 e0       	ldi	r26, 0x00	; 0
    a9e8:	20 c0       	rjmp	.+64     	; 0xaa2a <Render+0x4da>
	        PutSprite((player_x[t]*8)-4,player_y[t]*8,FIRSTIDLESPRITE+9,false,poff);
	        PutSprite((player_x[t]*8)+20,player_y[t]*8,FIRSTIDLESPRITE+9,true ,poff);
		 }
		 */
	  }       
	  else if(state & UP)   {yoff = -player_offset[t]; foff = 0;}
    a9ea:	90 e0       	ldi	r25, 0x00	; 0
    a9ec:	b0 fe       	sbrs	r11, 0
    a9ee:	07 c0       	rjmp	.+14     	; 0xa9fe <Render+0x4ae>
    a9f0:	f8 01       	movw	r30, r16
    a9f2:	e2 50       	subi	r30, 0x02	; 2
    a9f4:	f0 4f       	sbci	r31, 0xF0	; 240
    a9f6:	a0 81       	ld	r26, Z
    a9f8:	a1 95       	neg	r26
    a9fa:	40 e0       	ldi	r20, 0x00	; 0
    a9fc:	16 c0       	rjmp	.+44     	; 0xaa2a <Render+0x4da>
	  else if(state & DOWN) {yoff =  player_offset[t]; foff = 8;} 
    a9fe:	b1 fe       	sbrs	r11, 1
    aa00:	07 c0       	rjmp	.+14     	; 0xaa10 <Render+0x4c0>
    aa02:	f8 01       	movw	r30, r16
    aa04:	e2 50       	subi	r30, 0x02	; 2
    aa06:	f0 4f       	sbci	r31, 0xF0	; 240
    aa08:	a0 81       	ld	r26, Z
    aa0a:	90 e0       	ldi	r25, 0x00	; 0
    aa0c:	48 e0       	ldi	r20, 0x08	; 8
    aa0e:	0d c0       	rjmp	.+26     	; 0xaa2a <Render+0x4da>
    aa10:	d8 01       	movw	r26, r16
    aa12:	a2 50       	subi	r26, 0x02	; 2
    aa14:	b0 4f       	sbci	r27, 0xF0	; 240
      else if(state & LEFT) {xoff = -player_offset[t]; foff = 16;}
    aa16:	b2 fe       	sbrs	r11, 2
    aa18:	05 c0       	rjmp	.+10     	; 0xaa24 <Render+0x4d4>
    aa1a:	9c 91       	ld	r25, X
    aa1c:	91 95       	neg	r25
    aa1e:	a0 e0       	ldi	r26, 0x00	; 0
    aa20:	40 e1       	ldi	r20, 0x10	; 16
    aa22:	03 c0       	rjmp	.+6      	; 0xaa2a <Render+0x4da>
	  else                  {xoff =  player_offset[t]; foff = 24;}
    aa24:	9c 91       	ld	r25, X
    aa26:	a0 e0       	ldi	r26, 0x00	; 0
    aa28:	48 e1       	ldi	r20, 0x18	; 24

	  if(state == DYING)    {poff = DEATH_PALLET;foff = DEATHSTARTFRAME;}
    aa2a:	ef ef       	ldi	r30, 0xFF	; 255
    aa2c:	be 16       	cp	r11, r30
    aa2e:	21 f4       	brne	.+8      	; 0xaa38 <Render+0x4e8>
    aa30:	41 e3       	ldi	r20, 0x31	; 49
    aa32:	88 e2       	ldi	r24, 0x28	; 40
    aa34:	88 2e       	mov	r8, r24
    aa36:	02 c0       	rjmp	.+4      	; 0xaa3c <Render+0x4ec>
	  else if(state & STUNNED){foff = STUNNEDSTARTFRAME;}
    aa38:	b7 fc       	sbrc	r11, 7
    aa3a:	40 e2       	ldi	r20, 0x20	; 32
	  
	  if(blip && (player_attrb[t] & POISON)){poff = POISON_PALLET;}//poison
    aa3c:	99 20       	and	r9, r9
    aa3e:	41 f0       	breq	.+16     	; 0xaa50 <Render+0x500>
    aa40:	f8 01       	movw	r30, r16
    aa42:	ed 5e       	subi	r30, 0xED	; 237
    aa44:	ff 4e       	sbci	r31, 0xEF	; 239
    aa46:	80 81       	ld	r24, Z
    aa48:	83 ff       	sbrs	r24, 3
    aa4a:	02 c0       	rjmp	.+4      	; 0xaa50 <Render+0x500>
    aa4c:	b0 e2       	ldi	r27, 0x20	; 32
    aa4e:	8b 2e       	mov	r8, r27
                                                                     
	  DrawSpriteTile((player_x[t]<<3)+xoff,((player_y[t]<<3)+yoff)-8,player_frame[t]+foff,poff,0,0);
    aa50:	ff 0c       	add	r15, r15
    aa52:	ff 0c       	add	r15, r15
    aa54:	ff 0c       	add	r15, r15
    aa56:	f8 01       	movw	r30, r16
    aa58:	e5 58       	subi	r30, 0x85	; 133
    aa5a:	f0 4f       	sbci	r31, 0xF0	; 240
    aa5c:	60 81       	ld	r22, Z
    aa5e:	66 0f       	add	r22, r22
    aa60:	66 0f       	add	r22, r22
    aa62:	66 0f       	add	r22, r22
    aa64:	68 50       	subi	r22, 0x08	; 8
    aa66:	6a 0f       	add	r22, r26
    aa68:	07 54       	subi	r16, 0x47	; 71
    aa6a:	10 4f       	sbci	r17, 0xF0	; 240
    aa6c:	d8 01       	movw	r26, r16
    aa6e:	8c 91       	ld	r24, X
    aa70:	48 0f       	add	r20, r24
    aa72:	89 2f       	mov	r24, r25
    aa74:	8f 0d       	add	r24, r15
    aa76:	28 2d       	mov	r18, r8
    aa78:	00 e0       	ldi	r16, 0x00	; 0
    aa7a:	ee 24       	eor	r14, r14
    aa7c:	0e 94 41 4f 	call	0x9e82	; 0x9e82 <DrawSpriteTile>
    aa80:	08 94       	sec
    aa82:	c1 1c       	adc	r12, r1
    aa84:	d1 1c       	adc	r13, r1
   */  

   if((gamestate & BLINK))//draw bombs first on blink, last on !blink. Give players and moving bombs a fair shair of ram tiles
      DrawBombs();

   for(u8 i=0;i<MAX_PLAYERS;i++){
    aa86:	b4 e0       	ldi	r27, 0x04	; 4
    aa88:	cb 16       	cp	r12, r27
    aa8a:	d1 04       	cpc	r13, r1
    aa8c:	09 f0       	breq	.+2      	; 0xaa90 <Render+0x540>
    aa8e:	dc cd       	rjmp	.-1096   	; 0xa648 <Render+0xf8>
	  DrawSpriteTile((player_x[t]<<3)+xoff,((player_y[t]<<3)+yoff)-8,player_frame[t]+foff,poff,0,0);


   }//FOR PLAYERS

   if(!(gamestate & BLINK))
    aa90:	80 91 fc 0e 	lds	r24, 0x0EFC
    aa94:	80 fd       	sbrc	r24, 0
    aa96:	02 c0       	rjmp	.+4      	; 0xaa9c <Render+0x54c>
      DrawBombs();
    aa98:	0e 94 c0 4f 	call	0x9f80	; 0x9f80 <DrawBombs>
   }

}

inline void DrawBlock(){
   if(block_z == 255)
    aa9c:	40 91 a8 0f 	lds	r20, 0x0FA8
    aaa0:	4f 3f       	cpi	r20, 0xFF	; 255
    aaa2:	09 f4       	brne	.+2      	; 0xaaa6 <Render+0x556>
    aaa4:	ab c0       	rjmp	.+342    	; 0xabfc <Render+0x6ac>
      return;   
   
   bool smallshadow;
   if(block_z > ((block_y+1)*8))
    aaa6:	90 91 03 10 	lds	r25, 0x1003
      smallshadow = false;
   else
      smallshadow = true;

   //if(spritecount >= MAX_SPRITES){
      if(blip)
    aaaa:	80 91 03 01 	lds	r24, 0x0103
    aaae:	20 91 7a 0f 	lds	r18, 0x0F7A
    aab2:	88 23       	and	r24, r24
    aab4:	09 f4       	brne	.+2      	; 0xaab8 <Render+0x568>
    aab6:	45 c0       	rjmp	.+138    	; 0xab42 <Render+0x5f2>
		 PutSprite(((block_x*16)+24)-smallshadow,(block_y*16)+16,SHADOW_SPRITE,true,0);
	     return;//draw shadow instead
	  }
   //}
   //use the last 4 sprites
   u8 x = (block_x*16)+16;
    aab8:	30 e0       	ldi	r19, 0x00	; 0
    aaba:	2f 5f       	subi	r18, 0xFF	; 255
    aabc:	3f 4f       	sbci	r19, 0xFF	; 255
    aabe:	a4 e0       	ldi	r26, 0x04	; 4
    aac0:	22 0f       	add	r18, r18
    aac2:	33 1f       	adc	r19, r19
    aac4:	aa 95       	dec	r26
    aac6:	e1 f7       	brne	.-8      	; 0xaac0 <Render+0x570>
   u8 y = block_z;//(block_y*16)+16;
   u8 t = (roundtime%12)/4;

   PutSprite(x+0,y+0,BLOCK_SPRITE+t,false,BLOCK_PALLET);
    aac8:	80 91 c2 0f 	lds	r24, 0x0FC2
    aacc:	90 91 c3 0f 	lds	r25, 0x0FC3
    aad0:	6c e0       	ldi	r22, 0x0C	; 12
    aad2:	70 e0       	ldi	r23, 0x00	; 0
    aad4:	0e 94 82 70 	call	0xe104	; 0xe104 <__udivmodhi4>
    aad8:	96 95       	lsr	r25
    aada:	87 95       	ror	r24
    aadc:	96 95       	lsr	r25
    aade:	87 95       	ror	r24
    aae0:	8a 58       	subi	r24, 0x8A	; 138


bool PutSprite(u8 x, u8 y, u8 t, bool flip, u8 pallet){
   if(spritecount >= MAX_SPRITES){return false;}//covers roll over for decrementing count on blink

   sprites[spritecount].x=x; 
    aae2:	20 93 59 04 	sts	0x0459, r18
   sprites[spritecount].y=y; 
    aae6:	40 93 5a 04 	sts	0x045A, r20
   sprites[spritecount].tileIndex=t;
    aaea:	eb e5       	ldi	r30, 0x5B	; 91
    aaec:	f4 e0       	ldi	r31, 0x04	; 4
    aaee:	80 93 5b 04 	sts	0x045B, r24
    aaf2:	10 92 5c 04 	sts	0x045C, r1

   if(flip){sprites[spritecount].flags = SPR_FLIP_X;}
   else    {sprites[spritecount].flags = 0;}
   sprites[spritecount].flags |= pallet<<2;
    aaf6:	7c e0       	ldi	r23, 0x0C	; 12
    aaf8:	70 93 5d 04 	sts	0x045D, r23
   u8 x = (block_x*16)+16;
   u8 y = block_z;//(block_y*16)+16;
   u8 t = (roundtime%12)/4;

   PutSprite(x+0,y+0,BLOCK_SPRITE+t,false,BLOCK_PALLET);
   PutSprite(x+8,y+0,BLOCK_SPRITE+t,true,BLOCK_PALLET);
    aafc:	62 2f       	mov	r22, r18
    aafe:	68 5f       	subi	r22, 0xF8	; 248


bool PutSprite(u8 x, u8 y, u8 t, bool flip, u8 pallet){
   if(spritecount >= MAX_SPRITES){return false;}//covers roll over for decrementing count on blink

   sprites[spritecount].x=x; 
    ab00:	60 93 5e 04 	sts	0x045E, r22
   sprites[spritecount].y=y; 
    ab04:	40 93 5f 04 	sts	0x045F, r20
   sprites[spritecount].tileIndex=t;
    ab08:	80 93 60 04 	sts	0x0460, r24
    ab0c:	16 82       	std	Z+6, r1	; 0x06

   if(flip){sprites[spritecount].flags = SPR_FLIP_X;}
   else    {sprites[spritecount].flags = 0;}
   sprites[spritecount].flags |= pallet<<2;
    ab0e:	5d e0       	ldi	r21, 0x0D	; 13
    ab10:	50 93 62 04 	sts	0x0462, r21
   u8 y = block_z;//(block_y*16)+16;
   u8 t = (roundtime%12)/4;

   PutSprite(x+0,y+0,BLOCK_SPRITE+t,false,BLOCK_PALLET);
   PutSprite(x+8,y+0,BLOCK_SPRITE+t,true,BLOCK_PALLET);
   PutSprite(x+0,y+8,BLOCK_SPRITE+t,false,BLOCK_PALLET);
    ab14:	48 5f       	subi	r20, 0xF8	; 248


bool PutSprite(u8 x, u8 y, u8 t, bool flip, u8 pallet){
   if(spritecount >= MAX_SPRITES){return false;}//covers roll over for decrementing count on blink

   sprites[spritecount].x=x; 
    ab16:	20 93 63 04 	sts	0x0463, r18
   sprites[spritecount].y=y; 
    ab1a:	40 93 64 04 	sts	0x0464, r20
   sprites[spritecount].tileIndex=t;
    ab1e:	80 93 65 04 	sts	0x0465, r24
    ab22:	13 86       	std	Z+11, r1	; 0x0b

   if(flip){sprites[spritecount].flags = SPR_FLIP_X;}
   else    {sprites[spritecount].flags = 0;}
   sprites[spritecount].flags |= pallet<<2;
    ab24:	70 93 67 04 	sts	0x0467, r23


bool PutSprite(u8 x, u8 y, u8 t, bool flip, u8 pallet){
   if(spritecount >= MAX_SPRITES){return false;}//covers roll over for decrementing count on blink

   sprites[spritecount].x=x; 
    ab28:	60 93 68 04 	sts	0x0468, r22
   sprites[spritecount].y=y; 
    ab2c:	40 93 69 04 	sts	0x0469, r20
   sprites[spritecount].tileIndex=t;
    ab30:	80 93 6a 04 	sts	0x046A, r24
    ab34:	10 8a       	std	Z+16, r1	; 0x10

   if(flip){sprites[spritecount].flags = SPR_FLIP_X;}
   else    {sprites[spritecount].flags = 0;}
   sprites[spritecount].flags |= pallet<<2;
    ab36:	50 93 6c 04 	sts	0x046C, r21
   //if(blink){spritecount++;}else{spritecount--;}
   spritecount++;
    ab3a:	8f e1       	ldi	r24, 0x1F	; 31
    ab3c:	80 93 a2 0f 	sts	0x0FA2, r24
    ab40:	5d c0       	rjmp	.+186    	; 0xabfc <Render+0x6ac>
inline void DrawBlock(){
   if(block_z == 255)
      return;   
   
   bool smallshadow;
   if(block_z > ((block_y+1)*8))
    ab42:	69 2f       	mov	r22, r25
    ab44:	70 e0       	ldi	r23, 0x00	; 0
    ab46:	6f 5f       	subi	r22, 0xFF	; 255
    ab48:	7f 4f       	sbci	r23, 0xFF	; 255

   //if(spritecount >= MAX_SPRITES){
      if(blip)
         spritecount = MAX_SPRITES-4;//sprite overflow, steal last 4 sprites
      else{
         PutSprite(((block_x*16)+16)+smallshadow,(block_y*16)+16,SHADOW_SPRITE,false,0);
    ab4a:	a2 2f       	mov	r26, r18
    ab4c:	b0 e0       	ldi	r27, 0x00	; 0
    ab4e:	10 e0       	ldi	r17, 0x00	; 0
    ab50:	24 2f       	mov	r18, r20
    ab52:	30 e0       	ldi	r19, 0x00	; 0
    ab54:	cb 01       	movw	r24, r22
    ab56:	e3 e0       	ldi	r30, 0x03	; 3
    ab58:	88 0f       	add	r24, r24
    ab5a:	99 1f       	adc	r25, r25
    ab5c:	ea 95       	dec	r30
    ab5e:	e1 f7       	brne	.-8      	; 0xab58 <Render+0x608>
    ab60:	82 17       	cp	r24, r18
    ab62:	93 07       	cpc	r25, r19
    ab64:	0c f0       	brlt	.+2      	; 0xab68 <Render+0x618>
    ab66:	11 e0       	ldi	r17, 0x01	; 1
    ab68:	ab 01       	movw	r20, r22
    ab6a:	74 e0       	ldi	r23, 0x04	; 4
    ab6c:	44 0f       	add	r20, r20
    ab6e:	55 1f       	adc	r21, r21
    ab70:	7a 95       	dec	r23
    ab72:	e1 f7       	brne	.-8      	; 0xab6c <Render+0x61c>
    ab74:	34 2f       	mov	r19, r20
inline void UpdateBorder();



bool PutSprite(u8 x, u8 y, u8 t, bool flip, u8 pallet){
   if(spritecount >= MAX_SPRITES){return false;}//covers roll over for decrementing count on blink
    ab76:	20 91 a2 0f 	lds	r18, 0x0FA2
    ab7a:	2f 31       	cpi	r18, 0x1F	; 31
    ab7c:	e8 f4       	brcc	.+58     	; 0xabb8 <Render+0x668>

   sprites[spritecount].x=x; 
    ab7e:	82 2f       	mov	r24, r18
    ab80:	90 e0       	ldi	r25, 0x00	; 0
    ab82:	fc 01       	movw	r30, r24
    ab84:	ee 0f       	add	r30, r30
    ab86:	ff 1f       	adc	r31, r31
    ab88:	ee 0f       	add	r30, r30
    ab8a:	ff 1f       	adc	r31, r31
    ab8c:	e8 0f       	add	r30, r24
    ab8e:	f9 1f       	adc	r31, r25
    ab90:	ee 52       	subi	r30, 0x2E	; 46
    ab92:	fc 4f       	sbci	r31, 0xFC	; 252
    ab94:	cd 01       	movw	r24, r26
    ab96:	01 96       	adiw	r24, 0x01	; 1
    ab98:	54 e0       	ldi	r21, 0x04	; 4
    ab9a:	88 0f       	add	r24, r24
    ab9c:	99 1f       	adc	r25, r25
    ab9e:	5a 95       	dec	r21
    aba0:	e1 f7       	brne	.-8      	; 0xab9a <Render+0x64a>
    aba2:	81 0f       	add	r24, r17
    aba4:	80 83       	st	Z, r24
   sprites[spritecount].y=y; 
    aba6:	41 83       	std	Z+1, r20	; 0x01
   sprites[spritecount].tileIndex=t;
    aba8:	8d e5       	ldi	r24, 0x5D	; 93
    abaa:	90 e0       	ldi	r25, 0x00	; 0
    abac:	93 83       	std	Z+3, r25	; 0x03
    abae:	82 83       	std	Z+2, r24	; 0x02

   if(flip){sprites[spritecount].flags = SPR_FLIP_X;}
   else    {sprites[spritecount].flags = 0;}
   sprites[spritecount].flags |= pallet<<2;
    abb0:	14 82       	std	Z+4, r1	; 0x04
   //if(blink){spritecount++;}else{spritecount--;}
   spritecount++;
    abb2:	2f 5f       	subi	r18, 0xFF	; 255
    abb4:	20 93 a2 0f 	sts	0x0FA2, r18
inline void UpdateBorder();



bool PutSprite(u8 x, u8 y, u8 t, bool flip, u8 pallet){
   if(spritecount >= MAX_SPRITES){return false;}//covers roll over for decrementing count on blink
    abb8:	20 91 a2 0f 	lds	r18, 0x0FA2
    abbc:	2f 31       	cpi	r18, 0x1F	; 31
    abbe:	f0 f4       	brcc	.+60     	; 0xabfc <Render+0x6ac>

   sprites[spritecount].x=x; 
    abc0:	82 2f       	mov	r24, r18
    abc2:	90 e0       	ldi	r25, 0x00	; 0
    abc4:	fc 01       	movw	r30, r24
    abc6:	ee 0f       	add	r30, r30
    abc8:	ff 1f       	adc	r31, r31
    abca:	ee 0f       	add	r30, r30
    abcc:	ff 1f       	adc	r31, r31
    abce:	e8 0f       	add	r30, r24
    abd0:	f9 1f       	adc	r31, r25
    abd2:	ee 52       	subi	r30, 0x2E	; 46
    abd4:	fc 4f       	sbci	r31, 0xFC	; 252
    abd6:	84 e0       	ldi	r24, 0x04	; 4
    abd8:	aa 0f       	add	r26, r26
    abda:	bb 1f       	adc	r27, r27
    abdc:	8a 95       	dec	r24
    abde:	e1 f7       	brne	.-8      	; 0xabd8 <Render+0x688>
    abe0:	8a 2f       	mov	r24, r26
    abe2:	88 5e       	subi	r24, 0xE8	; 232
    abe4:	81 1b       	sub	r24, r17
    abe6:	80 83       	st	Z, r24
   sprites[spritecount].y=y; 
    abe8:	31 83       	std	Z+1, r19	; 0x01
   sprites[spritecount].tileIndex=t;
    abea:	8d e5       	ldi	r24, 0x5D	; 93
    abec:	90 e0       	ldi	r25, 0x00	; 0
    abee:	93 83       	std	Z+3, r25	; 0x03
    abf0:	82 83       	std	Z+2, r24	; 0x02

   if(flip){sprites[spritecount].flags = SPR_FLIP_X;}
    abf2:	81 e0       	ldi	r24, 0x01	; 1
   else    {sprites[spritecount].flags = 0;}
   sprites[spritecount].flags |= pallet<<2;
    abf4:	84 83       	std	Z+4, r24	; 0x04
   //if(blink){spritecount++;}else{spritecount--;}
   spritecount++;
    abf6:	2f 5f       	subi	r18, 0xFF	; 255
    abf8:	20 93 a2 0f 	sts	0x0FA2, r18
   return true;
}

void DoHideSprites(){//hide the unused sprites so they don't stick around
   for(u8 i=spritecount;i<MAX_SPRITES;i++){sprites[i].x=SCREEN_TILES_H*TILE_WIDTH;}
    abfc:	20 91 a2 0f 	lds	r18, 0x0FA2
    ac00:	30 ef       	ldi	r19, 0xF0	; 240
    ac02:	0d c0       	rjmp	.+26     	; 0xac1e <Render+0x6ce>
    ac04:	82 2f       	mov	r24, r18
    ac06:	90 e0       	ldi	r25, 0x00	; 0
    ac08:	fc 01       	movw	r30, r24
    ac0a:	ee 0f       	add	r30, r30
    ac0c:	ff 1f       	adc	r31, r31
    ac0e:	ee 0f       	add	r30, r30
    ac10:	ff 1f       	adc	r31, r31
    ac12:	e8 0f       	add	r30, r24
    ac14:	f9 1f       	adc	r31, r25
    ac16:	ee 52       	subi	r30, 0x2E	; 46
    ac18:	fc 4f       	sbci	r31, 0xFC	; 252
    ac1a:	30 83       	st	Z, r19
    ac1c:	2f 5f       	subi	r18, 0xFF	; 255
    ac1e:	2f 31       	cpi	r18, 0x1F	; 31
    ac20:	88 f3       	brcs	.-30     	; 0xac04 <Render+0x6b4>
      DrawBombs();
   
   DrawBlock();   

   DoHideSprites();
   UpdateBorder();
    ac22:	0e 94 52 50 	call	0xa0a4	; 0xa0a4 <UpdateBorder>
   DrawTimer();
    ac26:	0e 94 5d 52 	call	0xa4ba	; 0xa4ba <DrawTimer>

   if(gamestate & BLINK)
    ac2a:	90 91 fc 0e 	lds	r25, 0x0EFC
    ac2e:	90 ff       	sbrs	r25, 0
    ac30:	03 c0       	rjmp	.+6      	; 0xac38 <Render+0x6e8>
      gamestate ^= BLINK;
    ac32:	81 e0       	ldi	r24, 0x01	; 1
    ac34:	98 27       	eor	r25, r24
    ac36:	01 c0       	rjmp	.+2      	; 0xac3a <Render+0x6ea>
   else
      gamestate |= BLINK;
    ac38:	91 60       	ori	r25, 0x01	; 1
    ac3a:	90 93 fc 0e 	sts	0x0EFC, r25

   blip--;
    ac3e:	80 91 03 01 	lds	r24, 0x0103
    ac42:	81 50       	subi	r24, 0x01	; 1
    ac44:	80 93 03 01 	sts	0x0103, r24
   if(blip == 255)
    ac48:	8f 3f       	cpi	r24, 0xFF	; 255
    ac4a:	19 f4       	brne	.+6      	; 0xac52 <Render+0x702>
   
      blip = 2;
    ac4c:	82 e0       	ldi	r24, 0x02	; 2
    ac4e:	80 93 03 01 	sts	0x0103, r24
}
    ac52:	24 96       	adiw	r28, 0x04	; 4
    ac54:	e2 e1       	ldi	r30, 0x12	; 18
    ac56:	0c 94 c5 70 	jmp	0xe18a	; 0xe18a <__epilogue_restores__>

0000ac5a <DrawMenu>:

void DrawCursor(u8 x, u8 y){
   SetMapTile(x,y,CURSORSTART);
}

void DrawMenu(u8 x, u8 y, u8 w, u8 h){
    ac5a:	a0 e0       	ldi	r26, 0x00	; 0
    ac5c:	b0 e0       	ldi	r27, 0x00	; 0
    ac5e:	e3 e3       	ldi	r30, 0x33	; 51
    ac60:	f6 e5       	ldi	r31, 0x56	; 86
    ac62:	0c 94 ac 70 	jmp	0xe158	; 0xe158 <__prologue_saves__+0x6>
    ac66:	98 2e       	mov	r9, r24
    ac68:	b6 2e       	mov	r11, r22
    ac6a:	14 2f       	mov	r17, r20
    ac6c:	72 2e       	mov	r7, r18
   SetTile(x+0,y+0,MENUSTART+0);//draw the corners
    ac6e:	41 e0       	ldi	r20, 0x01	; 1
    ac70:	50 e0       	ldi	r21, 0x00	; 0
    ac72:	0e 94 85 44 	call	0x890a	; 0x890a <SetTile>
   SetTile(x+w,y+0,MENUSTART+1);
    ac76:	81 2e       	mov	r8, r17
    ac78:	89 0c       	add	r8, r9
    ac7a:	88 2d       	mov	r24, r8
    ac7c:	6b 2d       	mov	r22, r11
    ac7e:	42 e0       	ldi	r20, 0x02	; 2
    ac80:	50 e0       	ldi	r21, 0x00	; 0
    ac82:	0e 94 85 44 	call	0x890a	; 0x890a <SetTile>
   

   SetTile(x+0,y+h,MENUSTART+3);
    ac86:	a7 2c       	mov	r10, r7
    ac88:	ab 0c       	add	r10, r11
    ac8a:	89 2d       	mov	r24, r9
    ac8c:	6a 2d       	mov	r22, r10
    ac8e:	44 e0       	ldi	r20, 0x04	; 4
    ac90:	50 e0       	ldi	r21, 0x00	; 0
    ac92:	0e 94 85 44 	call	0x890a	; 0x890a <SetTile>
   SetTile(x+w,y+h,MENUSTART+2);
    ac96:	88 2d       	mov	r24, r8
    ac98:	6a 2d       	mov	r22, r10
    ac9a:	43 e0       	ldi	r20, 0x03	; 3
    ac9c:	50 e0       	ldi	r21, 0x00	; 0
    ac9e:	0e 94 85 44 	call	0x890a	; 0x890a <SetTile>
 
   bool flop = true;
   for(u8 i=x+1;i<x+w;i++){//draw top and bottom
    aca2:	59 2c       	mov	r5, r9
    aca4:	53 94       	inc	r5
    aca6:	f5 2c       	mov	r15, r5
    aca8:	ee 24       	eor	r14, r14
    acaa:	e3 94       	inc	r14
    acac:	c9 2c       	mov	r12, r9
    acae:	dd 24       	eor	r13, r13
    acb0:	c1 0e       	add	r12, r17
    acb2:	d1 1c       	adc	r13, r1
      SetTile(i,y,MENUSTART+5-flop);SetTile(i,y+h,MENUSTART+4+flop);
    acb4:	c6 e0       	ldi	r28, 0x06	; 6
    acb6:	d0 e0       	ldi	r29, 0x00	; 0
      flop = !flop;
    acb8:	66 24       	eor	r6, r6
    acba:	63 94       	inc	r6
    acbc:	12 c0       	rjmp	.+36     	; 0xace2 <DrawMenu+0x88>
   SetTile(x+0,y+h,MENUSTART+3);
   SetTile(x+w,y+h,MENUSTART+2);
 
   bool flop = true;
   for(u8 i=x+1;i<x+w;i++){//draw top and bottom
      SetTile(i,y,MENUSTART+5-flop);SetTile(i,y+h,MENUSTART+4+flop);
    acbe:	0e 2d       	mov	r16, r14
    acc0:	10 e0       	ldi	r17, 0x00	; 0
    acc2:	ae 01       	movw	r20, r28
    acc4:	40 1b       	sub	r20, r16
    acc6:	51 0b       	sbc	r21, r17
    acc8:	8f 2d       	mov	r24, r15
    acca:	6b 2d       	mov	r22, r11
    accc:	0e 94 85 44 	call	0x890a	; 0x890a <SetTile>
    acd0:	0b 5f       	subi	r16, 0xFB	; 251
    acd2:	1f 4f       	sbci	r17, 0xFF	; 255
    acd4:	8f 2d       	mov	r24, r15
    acd6:	6a 2d       	mov	r22, r10
    acd8:	a8 01       	movw	r20, r16
    acda:	0e 94 85 44 	call	0x890a	; 0x890a <SetTile>
      flop = !flop;
    acde:	e6 24       	eor	r14, r6

   SetTile(x+0,y+h,MENUSTART+3);
   SetTile(x+w,y+h,MENUSTART+2);
 
   bool flop = true;
   for(u8 i=x+1;i<x+w;i++){//draw top and bottom
    ace0:	f3 94       	inc	r15
    ace2:	8f 2d       	mov	r24, r15
    ace4:	90 e0       	ldi	r25, 0x00	; 0
    ace6:	8c 15       	cp	r24, r12
    ace8:	9d 05       	cpc	r25, r13
    acea:	4c f3       	brlt	.-46     	; 0xacbe <DrawMenu+0x64>
      SetTile(i,y,MENUSTART+5-flop);SetTile(i,y+h,MENUSTART+4+flop);
      flop = !flop;
   }
   
   flop = true;
   for(u8 i=y+1;i<y+h;i++){
    acec:	ab 2c       	mov	r10, r11
    acee:	a3 94       	inc	r10
    acf0:	fa 2c       	mov	r15, r10
    acf2:	ee 24       	eor	r14, r14
    acf4:	e3 94       	inc	r14
    acf6:	cb 2d       	mov	r28, r11
    acf8:	d0 e0       	ldi	r29, 0x00	; 0
    acfa:	c7 0d       	add	r28, r7
    acfc:	d1 1d       	adc	r29, r1
      SetTile(x,i,MENUSTART+7-flop);SetTile(x+w,i,MENUSTART+6+flop);
    acfe:	38 e0       	ldi	r19, 0x08	; 8
    ad00:	63 2e       	mov	r6, r19
    ad02:	71 2c       	mov	r7, r1
      flop = !flop;
    ad04:	bb 24       	eor	r11, r11
    ad06:	b3 94       	inc	r11
    ad08:	12 c0       	rjmp	.+36     	; 0xad2e <DrawMenu+0xd4>
      flop = !flop;
   }
   
   flop = true;
   for(u8 i=y+1;i<y+h;i++){
      SetTile(x,i,MENUSTART+7-flop);SetTile(x+w,i,MENUSTART+6+flop);
    ad0a:	0e 2d       	mov	r16, r14
    ad0c:	10 e0       	ldi	r17, 0x00	; 0
    ad0e:	a3 01       	movw	r20, r6
    ad10:	40 1b       	sub	r20, r16
    ad12:	51 0b       	sbc	r21, r17
    ad14:	89 2d       	mov	r24, r9
    ad16:	6f 2d       	mov	r22, r15
    ad18:	0e 94 85 44 	call	0x890a	; 0x890a <SetTile>
    ad1c:	09 5f       	subi	r16, 0xF9	; 249
    ad1e:	1f 4f       	sbci	r17, 0xFF	; 255
    ad20:	88 2d       	mov	r24, r8
    ad22:	6f 2d       	mov	r22, r15
    ad24:	a8 01       	movw	r20, r16
    ad26:	0e 94 85 44 	call	0x890a	; 0x890a <SetTile>
      flop = !flop;
    ad2a:	eb 24       	eor	r14, r11
      SetTile(i,y,MENUSTART+5-flop);SetTile(i,y+h,MENUSTART+4+flop);
      flop = !flop;
   }
   
   flop = true;
   for(u8 i=y+1;i<y+h;i++){
    ad2c:	f3 94       	inc	r15
    ad2e:	8f 2d       	mov	r24, r15
    ad30:	90 e0       	ldi	r25, 0x00	; 0
    ad32:	8c 17       	cp	r24, r28
    ad34:	9d 07       	cpc	r25, r29
    ad36:	4c f3       	brlt	.-46     	; 0xad0a <DrawMenu+0xb0>
    ad38:	0a 2d       	mov	r16, r10
    ad3a:	0d c0       	rjmp	.+26     	; 0xad56 <DrawMenu+0xfc>
      flop = !flop;
   }

   for(u8 i=y+1;i<y+h;i++)
   for(u8 j=x+1;j<x+w;j++)
      SetTile(j,i,BLANKT);
    ad3c:	81 2f       	mov	r24, r17
    ad3e:	60 2f       	mov	r22, r16
    ad40:	40 e0       	ldi	r20, 0x00	; 0
    ad42:	50 e0       	ldi	r21, 0x00	; 0
    ad44:	0e 94 85 44 	call	0x890a	; 0x890a <SetTile>
      SetTile(x,i,MENUSTART+7-flop);SetTile(x+w,i,MENUSTART+6+flop);
      flop = !flop;
   }

   for(u8 i=y+1;i<y+h;i++)
   for(u8 j=x+1;j<x+w;j++)
    ad48:	1f 5f       	subi	r17, 0xFF	; 255
    ad4a:	81 2f       	mov	r24, r17
    ad4c:	90 e0       	ldi	r25, 0x00	; 0
    ad4e:	8c 15       	cp	r24, r12
    ad50:	9d 05       	cpc	r25, r13
    ad52:	a4 f3       	brlt	.-24     	; 0xad3c <DrawMenu+0xe2>
   for(u8 i=y+1;i<y+h;i++){
      SetTile(x,i,MENUSTART+7-flop);SetTile(x+w,i,MENUSTART+6+flop);
      flop = !flop;
   }

   for(u8 i=y+1;i<y+h;i++)
    ad54:	0f 5f       	subi	r16, 0xFF	; 255
    ad56:	80 2f       	mov	r24, r16
    ad58:	90 e0       	ldi	r25, 0x00	; 0
    ad5a:	8c 17       	cp	r24, r28
    ad5c:	9d 07       	cpc	r25, r29
    ad5e:	14 f4       	brge	.+4      	; 0xad64 <DrawMenu+0x10a>
    ad60:	15 2d       	mov	r17, r5
    ad62:	f3 cf       	rjmp	.-26     	; 0xad4a <DrawMenu+0xf0>
   for(u8 j=x+1;j<x+w;j++)
      SetTile(j,i,BLANKT);

   
}
    ad64:	cd b7       	in	r28, 0x3d	; 61
    ad66:	de b7       	in	r29, 0x3e	; 62
    ad68:	ef e0       	ldi	r30, 0x0F	; 15
    ad6a:	0c 94 c8 70 	jmp	0xe190	; 0xe190 <__epilogue_restores__+0x6>

0000ad6e <DrawOpeningMenu>:

void DrawOpeningMenu(u8 x, u8 y, u8 w, u8 h, int speed){
    ad6e:	a0 e0       	ldi	r26, 0x00	; 0
    ad70:	b0 e0       	ldi	r27, 0x00	; 0
    ad72:	ed eb       	ldi	r30, 0xBD	; 189
    ad74:	f6 e5       	ldi	r31, 0x56	; 86
    ad76:	0c 94 ae 70 	jmp	0xe15c	; 0xe15c <__prologue_saves__+0xa>
    ad7a:	78 2e       	mov	r7, r24
    ad7c:	86 2e       	mov	r8, r22
    ad7e:	94 2e       	mov	r9, r20
    ad80:	a2 2e       	mov	r10, r18
   u8 mt;
   u8 count;
   mt = 1;
   count = speed;
    ad82:	b0 2e       	mov	r11, r16
    ad84:	f0 2e       	mov	r15, r16
    ad86:	ee 24       	eor	r14, r14
    ad88:	e3 94       	inc	r14
   while(mt<w+1){//open horizontally
    ad8a:	c4 2e       	mov	r12, r20
    ad8c:	dd 24       	eor	r13, r13
      DrawMenu(x,y,mt,1);
	  if(speed < 0){
         WaitVsync(abs(speed));
    ad8e:	cc 27       	eor	r28, r28
    ad90:	dd 27       	eor	r29, r29
    ad92:	c0 1b       	sub	r28, r16
    ad94:	d1 0b       	sbc	r29, r17
    ad96:	16 c0       	rjmp	.+44     	; 0xadc4 <DrawOpeningMenu+0x56>
   u8 mt;
   u8 count;
   mt = 1;
   count = speed;
   while(mt<w+1){//open horizontally
      DrawMenu(x,y,mt,1);
    ad98:	87 2d       	mov	r24, r7
    ad9a:	68 2d       	mov	r22, r8
    ad9c:	4e 2d       	mov	r20, r14
    ad9e:	21 e0       	ldi	r18, 0x01	; 1
    ada0:	0e 94 2d 56 	call	0xac5a	; 0xac5a <DrawMenu>
	  if(speed < 0){
    ada4:	17 ff       	sbrs	r17, 7
    ada6:	04 c0       	rjmp	.+8      	; 0xadb0 <DrawOpeningMenu+0x42>
         WaitVsync(abs(speed));
    ada8:	ce 01       	movw	r24, r28
    adaa:	0e 94 a3 4a 	call	0x9546	; 0x9546 <WaitVsync>
    adae:	09 c0       	rjmp	.+18     	; 0xadc2 <DrawOpeningMenu+0x54>
	  }
	  else{
	     if(!count){WaitVsync(1);count=speed;}else{count--;}
    adb0:	ff 20       	and	r15, r15
    adb2:	31 f4       	brne	.+12     	; 0xadc0 <DrawOpeningMenu+0x52>
    adb4:	81 e0       	ldi	r24, 0x01	; 1
    adb6:	90 e0       	ldi	r25, 0x00	; 0
    adb8:	0e 94 a3 4a 	call	0x9546	; 0x9546 <WaitVsync>
    adbc:	fb 2c       	mov	r15, r11
    adbe:	01 c0       	rjmp	.+2      	; 0xadc2 <DrawOpeningMenu+0x54>
    adc0:	fa 94       	dec	r15
	  }
	  mt++;
    adc2:	e3 94       	inc	r14
void DrawOpeningMenu(u8 x, u8 y, u8 w, u8 h, int speed){
   u8 mt;
   u8 count;
   mt = 1;
   count = speed;
   while(mt<w+1){//open horizontally
    adc4:	8e 2d       	mov	r24, r14
    adc6:	90 e0       	ldi	r25, 0x00	; 0
    adc8:	c8 16       	cp	r12, r24
    adca:	d9 06       	cpc	r13, r25
    adcc:	2c f7       	brge	.-54     	; 0xad98 <DrawOpeningMenu+0x2a>
    adce:	fb 2c       	mov	r15, r11
    add0:	ee 24       	eor	r14, r14
    add2:	e3 94       	inc	r14
	  }
	  mt++;
   }
   mt = 1;
   count = speed;
   while(mt<h+1){
    add4:	ca 2c       	mov	r12, r10
    add6:	dd 24       	eor	r13, r13
      DrawMenu(x,y,w,mt);
	  if(speed < 0){
         WaitVsync(abs(speed));
    add8:	cc 27       	eor	r28, r28
    adda:	dd 27       	eor	r29, r29
    addc:	c0 1b       	sub	r28, r16
    adde:	d1 0b       	sbc	r29, r17
    ade0:	16 c0       	rjmp	.+44     	; 0xae0e <DrawOpeningMenu+0xa0>
	  mt++;
   }
   mt = 1;
   count = speed;
   while(mt<h+1){
      DrawMenu(x,y,w,mt);
    ade2:	87 2d       	mov	r24, r7
    ade4:	68 2d       	mov	r22, r8
    ade6:	49 2d       	mov	r20, r9
    ade8:	2e 2d       	mov	r18, r14
    adea:	0e 94 2d 56 	call	0xac5a	; 0xac5a <DrawMenu>
	  if(speed < 0){
    adee:	17 ff       	sbrs	r17, 7
    adf0:	04 c0       	rjmp	.+8      	; 0xadfa <DrawOpeningMenu+0x8c>
         WaitVsync(abs(speed));
    adf2:	ce 01       	movw	r24, r28
    adf4:	0e 94 a3 4a 	call	0x9546	; 0x9546 <WaitVsync>
    adf8:	09 c0       	rjmp	.+18     	; 0xae0c <DrawOpeningMenu+0x9e>
	  }
	  else{
	     if(!count){WaitVsync(1);count=speed;}else{count--;}
    adfa:	ff 20       	and	r15, r15
    adfc:	31 f4       	brne	.+12     	; 0xae0a <DrawOpeningMenu+0x9c>
    adfe:	81 e0       	ldi	r24, 0x01	; 1
    ae00:	90 e0       	ldi	r25, 0x00	; 0
    ae02:	0e 94 a3 4a 	call	0x9546	; 0x9546 <WaitVsync>
    ae06:	fb 2c       	mov	r15, r11
    ae08:	01 c0       	rjmp	.+2      	; 0xae0c <DrawOpeningMenu+0x9e>
    ae0a:	fa 94       	dec	r15
	  }
	  mt++;
    ae0c:	e3 94       	inc	r14
	  }
	  mt++;
   }
   mt = 1;
   count = speed;
   while(mt<h+1){
    ae0e:	8e 2d       	mov	r24, r14
    ae10:	90 e0       	ldi	r25, 0x00	; 0
    ae12:	c8 16       	cp	r12, r24
    ae14:	d9 06       	cpc	r13, r25
    ae16:	2c f7       	brge	.-54     	; 0xade2 <DrawOpeningMenu+0x74>
	  else{
	     if(!count){WaitVsync(1);count=speed;}else{count--;}
	  }
	  mt++;
   }
}
    ae18:	cd b7       	in	r28, 0x3d	; 61
    ae1a:	de b7       	in	r29, 0x3e	; 62
    ae1c:	ed e0       	ldi	r30, 0x0D	; 13
    ae1e:	0c 94 ca 70 	jmp	0xe194	; 0xe194 <__epilogue_restores__+0xa>

0000ae22 <BlankCursor>:
	  if(y<11){SetMapTile(x  ,y+1,2);}
      if(x<14 && y<11){SetMapTile(x+1,y+1,3);}
   }
}
*/
void BlankCursor(u8 x, u8 y, u8 w, u8 h){
    ae22:	bf 92       	push	r11
    ae24:	cf 92       	push	r12
    ae26:	df 92       	push	r13
    ae28:	ef 92       	push	r14
    ae2a:	ff 92       	push	r15
    ae2c:	0f 93       	push	r16
    ae2e:	1f 93       	push	r17
    ae30:	b8 2e       	mov	r11, r24
    ae32:	c6 2e       	mov	r12, r22
    ae34:	d4 2e       	mov	r13, r20
    ae36:	e2 2e       	mov	r14, r18
    ae38:	00 e0       	ldi	r16, 0x00	; 0
    ae3a:	0b c0       	rjmp	.+22     	; 0xae52 <BlankCursor+0x30>
   for(u8 j=0;j<h;j++)
   for(u8 i=0;i<w;i++)
      SetTile(x+i,y+j,BLANKT);
    ae3c:	81 2f       	mov	r24, r17
    ae3e:	8b 0d       	add	r24, r11
    ae40:	6f 2d       	mov	r22, r15
    ae42:	40 e0       	ldi	r20, 0x00	; 0
    ae44:	50 e0       	ldi	r21, 0x00	; 0
    ae46:	0e 94 85 44 	call	0x890a	; 0x890a <SetTile>
   }
}
*/
void BlankCursor(u8 x, u8 y, u8 w, u8 h){
   for(u8 j=0;j<h;j++)
   for(u8 i=0;i<w;i++)
    ae4a:	1f 5f       	subi	r17, 0xFF	; 255
    ae4c:	1d 15       	cp	r17, r13
    ae4e:	b0 f3       	brcs	.-20     	; 0xae3c <BlankCursor+0x1a>
      if(x<14 && y<11){SetMapTile(x+1,y+1,3);}
   }
}
*/
void BlankCursor(u8 x, u8 y, u8 w, u8 h){
   for(u8 j=0;j<h;j++)
    ae50:	0f 5f       	subi	r16, 0xFF	; 255
    ae52:	0e 15       	cp	r16, r14
    ae54:	20 f4       	brcc	.+8      	; 0xae5e <BlankCursor+0x3c>
    ae56:	10 e0       	ldi	r17, 0x00	; 0
   for(u8 i=0;i<w;i++)
      SetTile(x+i,y+j,BLANKT);
    ae58:	f0 2e       	mov	r15, r16
    ae5a:	fc 0c       	add	r15, r12
    ae5c:	f7 cf       	rjmp	.-18     	; 0xae4c <BlankCursor+0x2a>
}
    ae5e:	1f 91       	pop	r17
    ae60:	0f 91       	pop	r16
    ae62:	ff 90       	pop	r15
    ae64:	ef 90       	pop	r14
    ae66:	df 90       	pop	r13
    ae68:	cf 90       	pop	r12
    ae6a:	bf 90       	pop	r11
    ae6c:	08 95       	ret

0000ae6e <SetTileSet>:
void SetTileSet(){
   SetTileTable(MapTiles);
    ae6e:	8e e5       	ldi	r24, 0x5E	; 94
    ae70:	94 e0       	ldi	r25, 0x04	; 4
    ae72:	0e 94 93 44 	call	0x8926	; 0x8926 <SetTileTable>
}
    ae76:	08 95       	ret

0000ae78 <RoundFade>:

}

void RoundFade(){
    //roundtime++;//undo what timer is about to do(freeze time in logic loop);rolls over for 65535/infinite
   if(masterVolume == NORMAL_VOL-96)
    ae78:	80 91 68 0f 	lds	r24, 0x0F68
    ae7c:	80 32       	cpi	r24, 0x20	; 32
    ae7e:	21 f4       	brne	.+8      	; 0xae88 <RoundFade+0x10>
      FadeOut(10,false);
    ae80:	8a e0       	ldi	r24, 0x0A	; 10
    ae82:	60 e0       	ldi	r22, 0x00	; 0
    ae84:	0e 94 66 4a 	call	0x94cc	; 0x94cc <FadeOut>

   if((gamestate & BLINK) && masterVolume)
    ae88:	80 91 fc 0e 	lds	r24, 0x0EFC
    ae8c:	80 ff       	sbrs	r24, 0
    ae8e:	07 c0       	rjmp	.+14     	; 0xae9e <RoundFade+0x26>
    ae90:	80 91 68 0f 	lds	r24, 0x0F68
    ae94:	88 23       	and	r24, r24
    ae96:	19 f0       	breq	.+6      	; 0xae9e <RoundFade+0x26>
      masterVolume--;
    ae98:	81 50       	subi	r24, 0x01	; 1
    ae9a:	80 93 68 0f 	sts	0x0F68, r24
    ae9e:	08 95       	ret

0000aea0 <InGameMenu>:
      WaitVsync(1);
   }
   */
}

void InGameMenu(){//This is running with the gamefield drawn...
    aea0:	0f 93       	push	r16
    aea2:	1f 93       	push	r17
//Can't draw the menu because we can't change tilesets, instead create a black ramtile and blot the area out

   u8 cursorpos = 0;
   blip = 2;
    aea4:	82 e0       	ldi	r24, 0x02	; 2
    aea6:	80 93 03 01 	sts	0x0103, r24
    aeaa:	e2 ed       	ldi	r30, 0xD2	; 210
    aeac:	f3 e0       	ldi	r31, 0x03	; 3
u8 GetNumRoundBits();
void SetNumRoundBits(u8 t);

void HideSprites(u8 start, u8 end){
    for(u8 i=start;i<end;i++)
	   sprites[i].x = SCREEN_TILES_H*TILE_WIDTH;
    aeae:	80 ef       	ldi	r24, 0xF0	; 240
    aeb0:	80 83       	st	Z, r24
    aeb2:	35 96       	adiw	r30, 0x05	; 5
void SetRoundTimeBits(u8 t);
u8 GetNumRoundBits();
void SetNumRoundBits(u8 t);

void HideSprites(u8 start, u8 end){
    for(u8 i=start;i<end;i++)
    aeb4:	94 e0       	ldi	r25, 0x04	; 4
    aeb6:	ed 36       	cpi	r30, 0x6D	; 109
    aeb8:	f9 07       	cpc	r31, r25
    aeba:	d1 f7       	brne	.-12     	; 0xaeb0 <InGameMenu+0x10>
   int restorepos = 64*29;
   HideSprites(0,MAX_SPRITES);
   WaitVsync(1);//get rid of ram tile indexes
    aebc:	81 e0       	ldi	r24, 0x01	; 1
    aebe:	90 e0       	ldi	r25, 0x00	; 0
    aec0:	0e 94 a3 4a 	call	0x9546	; 0x9546 <WaitVsync>
   
   RamifyFont(0,31);
    aec4:	80 e0       	ldi	r24, 0x00	; 0
    aec6:	90 e0       	ldi	r25, 0x00	; 0
    aec8:	6f e1       	ldi	r22, 0x1F	; 31
    aeca:	0e 94 f9 4e 	call	0x9df2	; 0x9df2 <RamifyFont>
   WaitVsync(1);
    aece:	81 e0       	ldi	r24, 0x01	; 1
    aed0:	90 e0       	ldi	r25, 0x00	; 0
    aed2:	0e 94 a3 4a 	call	0x9546	; 0x9546 <WaitVsync>
    aed6:	ed e6       	ldi	r30, 0x6D	; 109
    aed8:	f4 e0       	ldi	r31, 0x04	; 4

   for(u8 i=0;i<64;i++)
      ram_tiles[i] = 0;//make a black tile for us
    aeda:	11 92       	st	Z+, r1
   WaitVsync(1);//get rid of ram tile indexes
   
   RamifyFont(0,31);
   WaitVsync(1);

   for(u8 i=0;i<64;i++)
    aedc:	84 e0       	ldi	r24, 0x04	; 4
    aede:	ed 3a       	cpi	r30, 0xAD	; 173
    aee0:	f8 07       	cpc	r31, r24
    aee2:	d9 f7       	brne	.-10     	; 0xaeda <InGameMenu+0x3a>
    aee4:	20 e4       	ldi	r18, 0x40	; 64
    aee6:	37 e0       	ldi	r19, 0x07	; 7
    aee8:	46 e5       	ldi	r20, 0x56	; 86
    aeea:	51 e0       	ldi	r21, 0x01	; 1
    aeec:	0e c0       	rjmp	.+28     	; 0xaf0a <InGameMenu+0x6a>
      ram_tiles[i] = 0;//make a black tile for us
   	  
   for(u8 y=11;y<15;y++)
   for(u8 x=12;x<18;x++){
      ram_tiles[restorepos++] = vram[x+(y*30)];//save which tiles are underneath
    aeee:	80 81       	ld	r24, Z
    aef0:	8d 93       	st	X+, r24
      vram[x+(y*30)] = 0;//our black ram tile(replaced 0 in the font)
    aef2:	11 92       	st	Z+, r1

   for(u8 i=0;i<64;i++)
      ram_tiles[i] = 0;//make a black tile for us
   	  
   for(u8 y=11;y<15;y++)
   for(u8 x=12;x<18;x++){
    aef4:	9f 5f       	subi	r25, 0xFF	; 255
    aef6:	92 31       	cpi	r25, 0x12	; 18
    aef8:	d1 f7       	brne	.-12     	; 0xaeee <InGameMenu+0x4e>
    aefa:	2a 5f       	subi	r18, 0xFA	; 250
    aefc:	3f 4f       	sbci	r19, 0xFF	; 255
    aefe:	42 5e       	subi	r20, 0xE2	; 226
    af00:	5f 4f       	sbci	r21, 0xFF	; 255
   WaitVsync(1);

   for(u8 i=0;i<64;i++)
      ram_tiles[i] = 0;//make a black tile for us
   	  
   for(u8 y=11;y<15;y++)
    af02:	97 e0       	ldi	r25, 0x07	; 7
    af04:	28 35       	cpi	r18, 0x58	; 88
    af06:	39 07       	cpc	r19, r25
    af08:	41 f0       	breq	.+16     	; 0xaf1a <InGameMenu+0x7a>
    af0a:	fa 01       	movw	r30, r20
    af0c:	e0 5e       	subi	r30, 0xE0	; 224
    af0e:	fe 4f       	sbci	r31, 0xFE	; 254
    af10:	d9 01       	movw	r26, r18
    af12:	a3 59       	subi	r26, 0x93	; 147
    af14:	bb 4f       	sbci	r27, 0xFB	; 251
    af16:	9c e0       	ldi	r25, 0x0C	; 12
    af18:	ea cf       	rjmp	.-44     	; 0xaeee <InGameMenu+0x4e>
   for(u8 x=12;x<18;x++){
      ram_tiles[restorepos++] = vram[x+(y*30)];//save which tiles are underneath
      vram[x+(y*30)] = 0;//our black ram tile(replaced 0 in the font)
   }   
   WaitVsync(1);
    af1a:	81 e0       	ldi	r24, 0x01	; 1
    af1c:	90 e0       	ldi	r25, 0x00	; 0
    af1e:	0e 94 a3 4a 	call	0x9546	; 0x9546 <WaitVsync>
    af22:	10 e0       	ldi	r17, 0x00	; 0
	  CompPrint(13,12,strBack);
	  CompPrint(13,13,strQuit);

	  if(!blip){//flash the selected item
		 for(u8 x=12;x<18;x++)
		    vram[((12+cursorpos)*30)+x] = 0;//our black ram tile
    af24:	0e e1       	ldi	r16, 0x1E	; 30
extern bool StartDown(u8 i);
extern bool ADown(u8 i);
extern bool BDown(u8 i);
extern void KillPlayer(u8 p);
inline void FillPad(u8 i){
   oldpadstate[i] = padstate[i];
    af26:	80 91 87 0f 	lds	r24, 0x0F87
    af2a:	90 91 88 0f 	lds	r25, 0x0F88
    af2e:	90 93 80 0f 	sts	0x0F80, r25
    af32:	80 93 7f 0f 	sts	0x0F7F, r24
	 // if(multitap)//skip over this controller
	   //  ReadJoypad(i);
	   return;
   }

   if(!multitap)
    af36:	80 91 fa 0e 	lds	r24, 0x0EFA
    af3a:	88 23       	and	r24, r24
    af3c:	31 f4       	brne	.+12     	; 0xaf4a <InGameMenu+0xaa>
      padstate[i] = ReadJoypad(i);
    af3e:	0e 94 a2 44 	call	0x8944	; 0x8944 <ReadJoypad>
    af42:	90 93 88 0f 	sts	0x0F88, r25
    af46:	80 93 87 0f 	sts	0x0F87, r24
bool StartDown(u8 i) {return(padstate[i] & BTN_START)  && !(oldpadstate[i] & BTN_START);}
    af4a:	90 91 87 0f 	lds	r25, 0x0F87
    af4e:	93 ff       	sbrs	r25, 3
    af50:	60 c0       	rjmp	.+192    	; 0xb012 <InGameMenu+0x172>
    af52:	80 91 7f 0f 	lds	r24, 0x0F7F
    af56:	83 fd       	sbrc	r24, 3
    af58:	5c c0       	rjmp	.+184    	; 0xb012 <InGameMenu+0x172>
   
   while(true){
      FillPad(0);
	  if(StartDown(0)){
	     restorepos = 64*29;
         WaitVsync(1);
    af5a:	81 e0       	ldi	r24, 0x01	; 1
    af5c:	90 e0       	ldi	r25, 0x00	; 0
    af5e:	0e 94 a3 4a 	call	0x9546	; 0x9546 <WaitVsync>
    af62:	20 e4       	ldi	r18, 0x40	; 64
    af64:	37 e0       	ldi	r19, 0x07	; 7
    af66:	46 e5       	ldi	r20, 0x56	; 86
    af68:	51 e0       	ldi	r21, 0x01	; 1
    af6a:	0d c0       	rjmp	.+26     	; 0xaf86 <InGameMenu+0xe6>
         for(u8 y=11;y<15;y++)
         for(u8 x=12;x<18;x++)
            vram[x+(y*30)] = ram_tiles[restorepos++];//restore the tiles underneath
    af6c:	8d 91       	ld	r24, X+
    af6e:	81 93       	st	Z+, r24
      FillPad(0);
	  if(StartDown(0)){
	     restorepos = 64*29;
         WaitVsync(1);
         for(u8 y=11;y<15;y++)
         for(u8 x=12;x<18;x++)
    af70:	9f 5f       	subi	r25, 0xFF	; 255
    af72:	92 31       	cpi	r25, 0x12	; 18
    af74:	d9 f7       	brne	.-10     	; 0xaf6c <InGameMenu+0xcc>
    af76:	2a 5f       	subi	r18, 0xFA	; 250
    af78:	3f 4f       	sbci	r19, 0xFF	; 255
    af7a:	42 5e       	subi	r20, 0xE2	; 226
    af7c:	5f 4f       	sbci	r21, 0xFF	; 255
   while(true){
      FillPad(0);
	  if(StartDown(0)){
	     restorepos = 64*29;
         WaitVsync(1);
         for(u8 y=11;y<15;y++)
    af7e:	87 e0       	ldi	r24, 0x07	; 7
    af80:	28 35       	cpi	r18, 0x58	; 88
    af82:	38 07       	cpc	r19, r24
    af84:	41 f0       	breq	.+16     	; 0xaf96 <InGameMenu+0xf6>
    af86:	d9 01       	movw	r26, r18
    af88:	a3 59       	subi	r26, 0x93	; 147
    af8a:	bb 4f       	sbci	r27, 0xFB	; 251
    af8c:	fa 01       	movw	r30, r20
    af8e:	e0 5e       	subi	r30, 0xE0	; 224
    af90:	fe 4f       	sbci	r31, 0xFE	; 254
    af92:	9c e0       	ldi	r25, 0x0C	; 12
    af94:	eb cf       	rjmp	.-42     	; 0xaf6c <InGameMenu+0xcc>
         for(u8 x=12;x<18;x++)
            vram[x+(y*30)] = ram_tiles[restorepos++];//restore the tiles underneath
		 
		 if(cursorpos)
    af96:	11 23       	and	r17, r17
    af98:	09 f4       	brne	.+2      	; 0xaf9c <InGameMenu+0xfc>
    af9a:	40 c0       	rjmp	.+128    	; 0xb01c <InGameMenu+0x17c>
		    guistate = GMAINMENU;  
    af9c:	81 e0       	ldi	r24, 0x01	; 1
    af9e:	80 93 0e 10 	sts	0x100E, r24
    afa2:	3c c0       	rjmp	.+120    	; 0xb01c <InGameMenu+0x17c>
bool StartDown(u8 i) {return(padstate[i] & BTN_START)  && !(oldpadstate[i] & BTN_START);}
bool UpDown(u8 i)    {return(padstate[i] & BTN_UP)     && !(oldpadstate[i] & BTN_UP);   }
    afa4:	80 91 7f 0f 	lds	r24, 0x0F7F
    afa8:	84 fd       	sbrc	r24, 4
    afaa:	35 c0       	rjmp	.+106    	; 0xb016 <InGameMenu+0x176>
    afac:	04 c0       	rjmp	.+8      	; 0xafb6 <InGameMenu+0x116>
bool DownDown(u8 i)  {return(padstate[i] & BTN_DOWN)   && !(oldpadstate[i] & BTN_DOWN); }
    afae:	80 91 7f 0f 	lds	r24, 0x0F7F
    afb2:	85 fd       	sbrc	r24, 5
    afb4:	05 c0       	rjmp	.+10     	; 0xafc0 <InGameMenu+0x120>
		    guistate = GMAINMENU;  
		
		 return;
	  }
	  else if(UpDown(0) || DownDown(0))
	     cursorpos = !cursorpos;   
    afb6:	80 e0       	ldi	r24, 0x00	; 0
    afb8:	11 23       	and	r17, r17
    afba:	09 f4       	brne	.+2      	; 0xafbe <InGameMenu+0x11e>
    afbc:	81 e0       	ldi	r24, 0x01	; 1
    afbe:	18 2f       	mov	r17, r24

      blip=!blip;
    afc0:	90 e0       	ldi	r25, 0x00	; 0
    afc2:	80 91 03 01 	lds	r24, 0x0103
    afc6:	88 23       	and	r24, r24
    afc8:	09 f4       	brne	.+2      	; 0xafcc <InGameMenu+0x12c>
    afca:	91 e0       	ldi	r25, 0x01	; 1
    afcc:	90 93 03 01 	sts	0x0103, r25
	  CompPrint(13,12,strBack);
    afd0:	8d e0       	ldi	r24, 0x0D	; 13
    afd2:	6c e0       	ldi	r22, 0x0C	; 12
    afd4:	40 e5       	ldi	r20, 0x50	; 80
    afd6:	51 e0       	ldi	r21, 0x01	; 1
    afd8:	0e 94 2b 52 	call	0xa456	; 0xa456 <CompPrint>
	  CompPrint(13,13,strQuit);
    afdc:	8d e0       	ldi	r24, 0x0D	; 13
    afde:	6d e0       	ldi	r22, 0x0D	; 13
    afe0:	45 e5       	ldi	r20, 0x55	; 85
    afe2:	51 e0       	ldi	r21, 0x01	; 1
    afe4:	0e 94 2b 52 	call	0xa456	; 0xa456 <CompPrint>

	  if(!blip){//flash the selected item
    afe8:	80 91 03 01 	lds	r24, 0x0103
    afec:	88 23       	and	r24, r24
    afee:	61 f4       	brne	.+24     	; 0xb008 <InGameMenu+0x168>
		 for(u8 x=12;x<18;x++)
		    vram[((12+cursorpos)*30)+x] = 0;//our black ram tile
    aff0:	10 9f       	mul	r17, r16
    aff2:	c0 01       	movw	r24, r0
    aff4:	11 24       	eor	r1, r1
    aff6:	fc 01       	movw	r30, r24
    aff8:	ec 56       	subi	r30, 0x6C	; 108
    affa:	fd 4f       	sbci	r31, 0xFD	; 253
      blip=!blip;
	  CompPrint(13,12,strBack);
	  CompPrint(13,13,strQuit);

	  if(!blip){//flash the selected item
		 for(u8 x=12;x<18;x++)
    affc:	86 56       	subi	r24, 0x66	; 102
    affe:	9d 4f       	sbci	r25, 0xFD	; 253
		    vram[((12+cursorpos)*30)+x] = 0;//our black ram tile
    b000:	11 92       	st	Z+, r1
      blip=!blip;
	  CompPrint(13,12,strBack);
	  CompPrint(13,13,strQuit);

	  if(!blip){//flash the selected item
		 for(u8 x=12;x<18;x++)
    b002:	e8 17       	cp	r30, r24
    b004:	f9 07       	cpc	r31, r25
    b006:	e1 f7       	brne	.-8      	; 0xb000 <InGameMenu+0x160>
		    vram[((12+cursorpos)*30)+x] = 0;//our black ram tile

	  }

	  WaitVsync(3);
    b008:	83 e0       	ldi	r24, 0x03	; 3
    b00a:	90 e0       	ldi	r25, 0x00	; 0
    b00c:	0e 94 a3 4a 	call	0x9546	; 0x9546 <WaitVsync>
    b010:	8a cf       	rjmp	.-236    	; 0xaf26 <InGameMenu+0x86>
bool StartDown(u8 i) {return(padstate[i] & BTN_START)  && !(oldpadstate[i] & BTN_START);}
bool UpDown(u8 i)    {return(padstate[i] & BTN_UP)     && !(oldpadstate[i] & BTN_UP);   }
    b012:	94 fd       	sbrc	r25, 4
    b014:	c7 cf       	rjmp	.-114    	; 0xafa4 <InGameMenu+0x104>
bool DownDown(u8 i)  {return(padstate[i] & BTN_DOWN)   && !(oldpadstate[i] & BTN_DOWN); }
    b016:	95 ff       	sbrs	r25, 5
    b018:	d3 cf       	rjmp	.-90     	; 0xafc0 <InGameMenu+0x120>
    b01a:	c9 cf       	rjmp	.-110    	; 0xafae <InGameMenu+0x10e>
	  }

	  WaitVsync(3);
	  }
   
}
    b01c:	1f 91       	pop	r17
    b01e:	0f 91       	pop	r16
    b020:	08 95       	ret

0000b022 <SetupMenu>:
	  DrawCursor(6,7+cursorpos);
      WaitVsync(1);
   }
}

void SetupMenu(){
    b022:	a8 e0       	ldi	r26, 0x08	; 8
    b024:	b0 e0       	ldi	r27, 0x00	; 0
    b026:	e7 e1       	ldi	r30, 0x17	; 23
    b028:	f8 e5       	ldi	r31, 0x58	; 88
    b02a:	0c 94 a9 70 	jmp	0xe152	; 0xe152 <__prologue_saves__>
void SetRoundTimeBits(u8 t){//bottom3 bits
   gameoptions |= t;
}

u8 GetRoundTimeBits(){
   return gameoptions & 0b00000111;
    b02e:	10 91 01 01 	lds	r17, 0x0101
   u8 roundtime = GetRoundTimeBits();
   u8 numrounds = GetNumRoundBits();
   bool useghosts = true;
   bool useblitz = true;

   SetTileTable(GuiTiles);
    b032:	8a e9       	ldi	r24, 0x9A	; 154
    b034:	9c e3       	ldi	r25, 0x3C	; 60
    b036:	0e 94 93 44 	call	0x8926	; 0x8926 <SetTileTable>
    b03a:	e2 ed       	ldi	r30, 0xD2	; 210
    b03c:	f3 e0       	ldi	r31, 0x03	; 3
	   sprites[i].x = SCREEN_TILES_H*TILE_WIDTH;
    b03e:	80 ef       	ldi	r24, 0xF0	; 240
    b040:	80 83       	st	Z, r24
    b042:	35 96       	adiw	r30, 0x05	; 5
void SetRoundTimeBits(u8 t);
u8 GetNumRoundBits();
void SetNumRoundBits(u8 t);

void HideSprites(u8 start, u8 end){
    for(u8 i=start;i<end;i++)
    b044:	94 e0       	ldi	r25, 0x04	; 4
    b046:	ed 36       	cpi	r30, 0x6D	; 109
    b048:	f9 07       	cpc	r31, r25
    b04a:	d1 f7       	brne	.-12     	; 0xb040 <SetupMenu+0x1e>
    b04c:	e0 e2       	ldi	r30, 0x20	; 32
    b04e:	f1 e0       	ldi	r31, 0x01	; 1
bool ADown(u8 i) {return(padstate[i] & BTN_A)  && !(oldpadstate[i] & BTN_A); }
bool BDown(u8 i) {return(padstate[i] & BTN_B)  && !(oldpadstate[i] & BTN_B); }

void FillScreen(u8 t){
   for(int i=0;i<VRAM_TILES_H*VRAM_TILES_V;i++)
      vram[i] = t+RAM_TILES_COUNT;
    b050:	8f e1       	ldi	r24, 0x1F	; 31
    b052:	81 93       	st	Z+, r24
bool RightDown(u8 i) {return(padstate[i] & BTN_RIGHT)  && !(oldpadstate[i] & BTN_RIGHT); }
bool ADown(u8 i) {return(padstate[i] & BTN_A)  && !(oldpadstate[i] & BTN_A); }
bool BDown(u8 i) {return(padstate[i] & BTN_B)  && !(oldpadstate[i] & BTN_B); }

void FillScreen(u8 t){
   for(int i=0;i<VRAM_TILES_H*VRAM_TILES_V;i++)
    b054:	93 e0       	ldi	r25, 0x03	; 3
    b056:	e2 3d       	cpi	r30, 0xD2	; 210
    b058:	f9 07       	cpc	r31, r25
    b05a:	d9 f7       	brne	.-10     	; 0xb052 <SetupMenu+0x30>
   bool useblitz = true;

   SetTileTable(GuiTiles);
   HideSprites(0,MAX_SPRITES);
   FillScreen(BLANKT);
   RamifyFont(0,31);
    b05c:	80 e0       	ldi	r24, 0x00	; 0
    b05e:	90 e0       	ldi	r25, 0x00	; 0
    b060:	6f e1       	ldi	r22, 0x1F	; 31
    b062:	0e 94 f9 4e 	call	0x9df2	; 0x9df2 <RamifyFont>
   WaitVsync(1);
    b066:	81 e0       	ldi	r24, 0x01	; 1
    b068:	90 e0       	ldi	r25, 0x00	; 0
    b06a:	0e 94 a3 4a 	call	0x9546	; 0x9546 <WaitVsync>
void SetSlot(u8 p, u8 s){//0-2
   playerslots |= (s<<(p*2));
}

u8 GetSlot(u8 p){
   return playerslots & (3>>(p*2));
    b06e:	60 91 2b 10 	lds	r22, 0x102B
    b072:	fe 01       	movw	r30, r28
    b074:	31 96       	adiw	r30, 0x01	; 1
    b076:	20 e0       	ldi	r18, 0x00	; 0
    b078:	30 e0       	ldi	r19, 0x00	; 0

   for(u8 i=0;i<4;i++)
      ptype[i] = GetSlot(i);
    b07a:	43 e0       	ldi	r20, 0x03	; 3
    b07c:	50 e0       	ldi	r21, 0x00	; 0
    b07e:	ca 01       	movw	r24, r20
    b080:	02 2e       	mov	r0, r18
    b082:	02 c0       	rjmp	.+4      	; 0xb088 <SetupMenu+0x66>
    b084:	95 95       	asr	r25
    b086:	87 95       	ror	r24
    b088:	0a 94       	dec	r0
    b08a:	e2 f7       	brpl	.-8      	; 0xb084 <SetupMenu+0x62>
    b08c:	86 23       	and	r24, r22
    b08e:	81 93       	st	Z+, r24
    b090:	2e 5f       	subi	r18, 0xFE	; 254
    b092:	3f 4f       	sbci	r19, 0xFF	; 255
   HideSprites(0,MAX_SPRITES);
   FillScreen(BLANKT);
   RamifyFont(0,31);
   WaitVsync(1);

   for(u8 i=0;i<4;i++)
    b094:	28 30       	cpi	r18, 0x08	; 8
    b096:	31 05       	cpc	r19, r1
    b098:	91 f7       	brne	.-28     	; 0xb07e <SetupMenu+0x5c>
}

void SetupMenu(){
   unsigned char cursorpos = 0;
   u8 ptype[4];
   u8 teams[4] = {0,0,1,1};
    b09a:	1d 82       	std	Y+5, r1	; 0x05
    b09c:	1e 82       	std	Y+6, r1	; 0x06
    b09e:	81 e0       	ldi	r24, 0x01	; 1
    b0a0:	8f 83       	std	Y+7, r24	; 0x07
    b0a2:	88 87       	std	Y+8, r24	; 0x08
void SetRoundTimeBits(u8 t){//bottom3 bits
   gameoptions |= t;
}

u8 GetRoundTimeBits(){
   return gameoptions & 0b00000111;
    b0a4:	37 e0       	ldi	r19, 0x07	; 7
    b0a6:	b3 2e       	mov	r11, r19
    b0a8:	b1 22       	and	r11, r17
   t <<= 3;
   gameoptions |= t;
}

u8 GetNumRoundBits(){
   return (gameoptions & 0b00011000)>>3;
    b0aa:	81 2f       	mov	r24, r17
    b0ac:	90 e0       	ldi	r25, 0x00	; 0
    b0ae:	88 71       	andi	r24, 0x18	; 24
    b0b0:	90 70       	andi	r25, 0x00	; 0
    b0b2:	23 e0       	ldi	r18, 0x03	; 3
    b0b4:	95 95       	asr	r25
    b0b6:	87 95       	ror	r24
    b0b8:	2a 95       	dec	r18
    b0ba:	e1 f7       	brne	.-8      	; 0xb0b4 <SetupMenu+0x92>
    b0bc:	c8 2e       	mov	r12, r24
   WaitVsync(1);

   for(u8 i=0;i<4;i++)
      ptype[i] = GetSlot(i);

   DrawMenu(4,2,21,20);
    b0be:	84 e0       	ldi	r24, 0x04	; 4
    b0c0:	62 e0       	ldi	r22, 0x02	; 2
    b0c2:	45 e1       	ldi	r20, 0x15	; 21
    b0c4:	24 e1       	ldi	r18, 0x14	; 20
    b0c6:	0e 94 2d 56 	call	0xac5a	; 0xac5a <DrawMenu>
   CompPrint(9,0,strMegaBomber);
    b0ca:	89 e0       	ldi	r24, 0x09	; 9
    b0cc:	60 e0       	ldi	r22, 0x00	; 0
    b0ce:	42 ed       	ldi	r20, 0xD2	; 210
    b0d0:	50 e0       	ldi	r21, 0x00	; 0
    b0d2:	0e 94 2b 52 	call	0xa456	; 0xa456 <CompPrint>
   CompPrint(9,4,strBattleSetup);
    b0d6:	89 e0       	ldi	r24, 0x09	; 9
    b0d8:	64 e0       	ldi	r22, 0x04	; 4
    b0da:	42 e6       	ldi	r20, 0x62	; 98
    b0dc:	51 e0       	ldi	r21, 0x01	; 1
    b0de:	0e 94 2b 52 	call	0xa456	; 0xa456 <CompPrint>
   CompPrint(8,7,strTeam);
    b0e2:	88 e0       	ldi	r24, 0x08	; 8
    b0e4:	67 e0       	ldi	r22, 0x07	; 7
    b0e6:	40 e8       	ldi	r20, 0x80	; 128
    b0e8:	51 e0       	ldi	r21, 0x01	; 1
    b0ea:	0e 94 2b 52 	call	0xa456	; 0xa456 <CompPrint>
   CompPrint(8,9,strTime);
    b0ee:	88 e0       	ldi	r24, 0x08	; 8
    b0f0:	69 e0       	ldi	r22, 0x09	; 9
    b0f2:	41 e9       	ldi	r20, 0x91	; 145
    b0f4:	51 e0       	ldi	r21, 0x01	; 1
    b0f6:	0e 94 2b 52 	call	0xa456	; 0xa456 <CompPrint>
   CompPrint(8,11,strRound);
    b0fa:	88 e0       	ldi	r24, 0x08	; 8
    b0fc:	6b e0       	ldi	r22, 0x0B	; 11
    b0fe:	45 e8       	ldi	r20, 0x85	; 133
    b100:	51 e0       	ldi	r21, 0x01	; 1
    b102:	0e 94 2b 52 	call	0xa456	; 0xa456 <CompPrint>
   CompPrint(8,13,strGhost);   
    b106:	88 e0       	ldi	r24, 0x08	; 8
    b108:	6d e0       	ldi	r22, 0x0D	; 13
    b10a:	4e ea       	ldi	r20, 0xAE	; 174
    b10c:	51 e0       	ldi	r21, 0x01	; 1
    b10e:	0e 94 2b 52 	call	0xa456	; 0xa456 <CompPrint>
   CompPrint(8,15,strBlitz);
    b112:	88 e0       	ldi	r24, 0x08	; 8
    b114:	6f e0       	ldi	r22, 0x0F	; 15
    b116:	4b e8       	ldi	r20, 0x8B	; 139
    b118:	51 e0       	ldi	r21, 0x01	; 1
    b11a:	0e 94 2b 52 	call	0xa456	; 0xa456 <CompPrint>
   CompPrint(8,17,str1P);
    b11e:	88 e0       	ldi	r24, 0x08	; 8
    b120:	61 e1       	ldi	r22, 0x11	; 17
    b122:	4c eb       	ldi	r20, 0xBC	; 188
    b124:	51 e0       	ldi	r21, 0x01	; 1
    b126:	0e 94 2b 52 	call	0xa456	; 0xa456 <CompPrint>
   CompPrint(8,18,str2P);
    b12a:	88 e0       	ldi	r24, 0x08	; 8
    b12c:	62 e1       	ldi	r22, 0x12	; 18
    b12e:	40 ec       	ldi	r20, 0xC0	; 192
    b130:	51 e0       	ldi	r21, 0x01	; 1
    b132:	0e 94 2b 52 	call	0xa456	; 0xa456 <CompPrint>
   CompPrint(8,19,str3P);
    b136:	88 e0       	ldi	r24, 0x08	; 8
    b138:	63 e1       	ldi	r22, 0x13	; 19
    b13a:	44 ec       	ldi	r20, 0xC4	; 196
    b13c:	51 e0       	ldi	r21, 0x01	; 1
    b13e:	0e 94 2b 52 	call	0xa456	; 0xa456 <CompPrint>
   CompPrint(8,20,str4P);
    b142:	88 e0       	ldi	r24, 0x08	; 8
    b144:	64 e1       	ldi	r22, 0x14	; 20
    b146:	48 ec       	ldi	r20, 0xC8	; 200
    b148:	51 e0       	ldi	r21, 0x01	; 1
    b14a:	0e 94 2b 52 	call	0xa456	; 0xa456 <CompPrint>
    b14e:	00 e0       	ldi	r16, 0x00	; 0
    b150:	dd 24       	eor	r13, r13
    b152:	99 24       	eor	r9, r9
    b154:	93 94       	inc	r9
    b156:	aa 24       	eor	r10, r10
    b158:	a3 94       	inc	r10
		 }
		 else if(cursorpos == 3){
            useghosts = !useghosts;
		 }
		 else if(cursorpos == 4){
            useblitz = !useblitz;
    b15a:	88 24       	eor	r8, r8
    b15c:	83 94       	inc	r8
	     if(cursorpos > 4){
            if(cursorpos < 9){
			   if(ptype[cursorpos-5] < 2){ptype[cursorpos-5]++;}
		    }
			else
			   teams[cursorpos-9] = !teams[cursorpos-9];
    b15e:	95 e0       	ldi	r25, 0x05	; 5
    b160:	49 2e       	mov	r4, r25
    b162:	51 2c       	mov	r5, r1
    b164:	4c 0e       	add	r4, r28
    b166:	5d 1e       	adc	r5, r29
		 }
	  }
	  else if(RightDown(0)){
	     if(cursorpos > 4){
            if(cursorpos < 9){
			   if(ptype[cursorpos-5] < 2){ptype[cursorpos-5]++;}
    b168:	3e 01       	movw	r6, r28
    b16a:	08 94       	sec
    b16c:	61 1c       	adc	r6, r1
    b16e:	71 1c       	adc	r7, r1
void SetMapTile(u8 x, u8 y, u8 t){
   int off = (y*30)+x;//((y<<1)*30)+(x<<1);
   t+=RAM_TILES_COUNT;//t = (t<<2)+RAM_TILES_COUNT;//t = (tileset*(NUMTILES*4)) + (t*4) + RAM_TILES_COUNT;
   
   vram[off+ 0] = t++;
   vram[off+ 1] = t++;
    b170:	89 e2       	ldi	r24, 0x29	; 41
    b172:	28 2e       	mov	r2, r24
   vram[off+30] = t++;
   vram[off+31] = t;
    b174:	bb e2       	ldi	r27, 0x2B	; 43
    b176:	3b 2e       	mov	r3, r27
extern bool StartDown(u8 i);
extern bool ADown(u8 i);
extern bool BDown(u8 i);
extern void KillPlayer(u8 p);
inline void FillPad(u8 i){
   oldpadstate[i] = padstate[i];
    b178:	80 91 87 0f 	lds	r24, 0x0F87
    b17c:	90 91 88 0f 	lds	r25, 0x0F88
    b180:	90 93 80 0f 	sts	0x0F80, r25
    b184:	80 93 7f 0f 	sts	0x0F7F, r24
	 // if(multitap)//skip over this controller
	   //  ReadJoypad(i);
	   return;
   }

   if(!multitap)
    b188:	80 91 fa 0e 	lds	r24, 0x0EFA
    b18c:	88 23       	and	r24, r24
    b18e:	31 f4       	brne	.+12     	; 0xb19c <SetupMenu+0x17a>
      padstate[i] = ReadJoypad(i);
    b190:	0e 94 a2 44 	call	0x8944	; 0x8944 <ReadJoypad>
    b194:	90 93 88 0f 	sts	0x0F88, r25
    b198:	80 93 87 0f 	sts	0x0F87, r24
bool StartDown(u8 i) {return(padstate[i] & BTN_START)  && !(oldpadstate[i] & BTN_START);}
    b19c:	20 91 87 0f 	lds	r18, 0x0F87
    b1a0:	30 91 88 0f 	lds	r19, 0x0F88
    b1a4:	a9 01       	movw	r20, r18
    b1a6:	48 70       	andi	r20, 0x08	; 8
    b1a8:	50 70       	andi	r21, 0x00	; 0
    b1aa:	23 ff       	sbrs	r18, 3
    b1ac:	cb c1       	rjmp	.+918    	; 0xb544 <SetupMenu+0x522>
    b1ae:	80 91 7f 0f 	lds	r24, 0x0F7F
    b1b2:	83 fd       	sbrc	r24, 3
    b1b4:	c7 c1       	rjmp	.+910    	; 0xb544 <SetupMenu+0x522>
    b1b6:	06 c0       	rjmp	.+12     	; 0xb1c4 <SetupMenu+0x1a2>
bool UpDown(u8 i)    {return(padstate[i] & BTN_UP)     && !(oldpadstate[i] & BTN_UP);   }
bool DownDown(u8 i)  {return(padstate[i] & BTN_DOWN)   && !(oldpadstate[i] & BTN_DOWN); }
bool LeftDown(u8 i)  {return(padstate[i] & BTN_LEFT)   && !(oldpadstate[i] & BTN_LEFT); }
bool RightDown(u8 i) {return(padstate[i] & BTN_RIGHT)  && !(oldpadstate[i] & BTN_RIGHT); }
bool ADown(u8 i) {return(padstate[i] & BTN_A)  && !(oldpadstate[i] & BTN_A); }
    b1b8:	80 91 7f 0f 	lds	r24, 0x0F7F
    b1bc:	90 91 80 0f 	lds	r25, 0x0F80
    b1c0:	90 fd       	sbrc	r25, 0
    b1c2:	c2 c1       	rjmp	.+900    	; 0xb548 <SetupMenu+0x526>
void SetTileSet(){
   SetTileTable(MapTiles);
}

void SetRoundTimeBits(u8 t){//bottom3 bits
   gameoptions |= t;
    b1c4:	80 91 01 01 	lds	r24, 0x0101
    b1c8:	8b 29       	or	r24, r11
    b1ca:	cc 0c       	add	r12, r12
    b1cc:	cc 0c       	add	r12, r12
    b1ce:	cc 0c       	add	r12, r12
    b1d0:	8c 29       	or	r24, r12
    b1d2:	80 93 01 01 	sts	0x0101, r24
   while(true){
      FillPad(0);
	  if(StartDown(0) || ADown(0)){
	     SetNumRoundBits(numrounds);
		 SetRoundTimeBits(roundtime);
		 if(useteams){gameoptions |= USETEAM;}
    b1d6:	dd 20       	and	r13, r13
    b1d8:	19 f0       	breq	.+6      	; 0xb1e0 <SetupMenu+0x1be>
    b1da:	80 62       	ori	r24, 0x20	; 32
    b1dc:	80 93 01 01 	sts	0x0101, r24
		 if(useblitz){gameoptions |= USEBLITZ;}
    b1e0:	aa 20       	and	r10, r10
    b1e2:	29 f0       	breq	.+10     	; 0xb1ee <SetupMenu+0x1cc>
    b1e4:	80 91 01 01 	lds	r24, 0x0101
    b1e8:	80 64       	ori	r24, 0x40	; 64
    b1ea:	80 93 01 01 	sts	0x0101, r24
		 if(useghosts){gameoptions |= USEGHOST;}
    b1ee:	99 20       	and	r9, r9
    b1f0:	29 f0       	breq	.+10     	; 0xb1fc <SetupMenu+0x1da>
    b1f2:	80 91 01 01 	lds	r24, 0x0101
    b1f6:	80 68       	ori	r24, 0x80	; 128
    b1f8:	80 93 01 01 	sts	0x0101, r24
u8 GetScore(u8 p){
   return score & (3>>(p*2));
}

void SetSlot(u8 p, u8 s){//0-2
   playerslots |= (s<<(p*2));
    b1fc:	89 81       	ldd	r24, Y+1	; 0x01
    b1fe:	90 91 2b 10 	lds	r25, 0x102B
    b202:	98 2b       	or	r25, r24
    b204:	8a 81       	ldd	r24, Y+2	; 0x02
    b206:	88 0f       	add	r24, r24
    b208:	88 0f       	add	r24, r24
    b20a:	89 2b       	or	r24, r25
    b20c:	9b 81       	ldd	r25, Y+3	; 0x03
    b20e:	92 95       	swap	r25
    b210:	90 7f       	andi	r25, 0xF0	; 240
    b212:	98 2b       	or	r25, r24
    b214:	8c 81       	ldd	r24, Y+4	; 0x04
    b216:	82 95       	swap	r24
    b218:	88 0f       	add	r24, r24
    b21a:	88 0f       	add	r24, r24
    b21c:	80 7c       	andi	r24, 0xC0	; 192
    b21e:	89 2b       	or	r24, r25
    b220:	80 93 2b 10 	sts	0x102B, r24
		 
         for(u8 i=0;i<4;i++)
            SetSlot(i,ptype[i]);		    

		 FadeOut(1,true);
    b224:	81 e0       	ldi	r24, 0x01	; 1
    b226:	61 e0       	ldi	r22, 0x01	; 1
    b228:	0e 94 66 4a 	call	0x94cc	; 0x94cc <FadeOut>
         FadeIn(1,false);
    b22c:	81 e0       	ldi	r24, 0x01	; 1
    b22e:	60 e0       	ldi	r22, 0x00	; 0
    b230:	0e 94 4e 4a 	call	0x949c	; 0x949c <FadeIn>
		 SetTileSet(MapTiles);
    b234:	8e e5       	ldi	r24, 0x5E	; 94
    b236:	94 e0       	ldi	r25, 0x04	; 4
    b238:	0e 94 37 57 	call	0xae6e	; 0xae6e <SetTileSet>
		 LoadLevel();
    b23c:	0e 94 ac 50 	call	0xa158	; 0xa158 <LoadLevel>
		 guistate =  0;//GMAPSELECTMENU;
    b240:	10 92 0e 10 	sts	0x100E, r1
    b244:	91 c1       	rjmp	.+802    	; 0xb568 <SetupMenu+0x546>
bool StartDown(u8 i) {return(padstate[i] & BTN_START)  && !(oldpadstate[i] & BTN_START);}
bool UpDown(u8 i)    {return(padstate[i] & BTN_UP)     && !(oldpadstate[i] & BTN_UP);   }
bool DownDown(u8 i)  {return(padstate[i] & BTN_DOWN)   && !(oldpadstate[i] & BTN_DOWN); }
    b246:	80 91 7f 0f 	lds	r24, 0x0F7F
    b24a:	85 fd       	sbrc	r24, 5
    b24c:	7f c1       	rjmp	.+766    	; 0xb54c <SetupMenu+0x52a>
		 LoadLevel();
		 guistate =  0;//GMAPSELECTMENU;
		 return;
	  }
	  else if(DownDown(0)){
         cursorpos++;
    b24e:	0f 5f       	subi	r16, 0xFF	; 255
		 if(cursorpos > 12)//teams must be on
    b250:	0d 30       	cpi	r16, 0x0D	; 13
    b252:	08 f0       	brcs	.+2      	; 0xb256 <SetupMenu+0x234>
    b254:	a5 c0       	rjmp	.+330    	; 0xb3a0 <SetupMenu+0x37e>
		    cursorpos = 5;
         else if(!useteams && cursorpos > 8)
    b256:	dd 20       	and	r13, r13
    b258:	09 f0       	breq	.+2      	; 0xb25c <SetupMenu+0x23a>
    b25a:	a5 c0       	rjmp	.+330    	; 0xb3a6 <SetupMenu+0x384>
    b25c:	09 30       	cpi	r16, 0x09	; 9
    b25e:	08 f4       	brcc	.+2      	; 0xb262 <SetupMenu+0x240>
    b260:	a9 c0       	rjmp	.+338    	; 0xb3b4 <SetupMenu+0x392>
    b262:	00 e0       	ldi	r16, 0x00	; 0
    b264:	a7 c0       	rjmp	.+334    	; 0xb3b4 <SetupMenu+0x392>
bool StartDown(u8 i) {return(padstate[i] & BTN_START)  && !(oldpadstate[i] & BTN_START);}
bool UpDown(u8 i)    {return(padstate[i] & BTN_UP)     && !(oldpadstate[i] & BTN_UP);   }
    b266:	80 91 7f 0f 	lds	r24, 0x0F7F
    b26a:	84 fd       	sbrc	r24, 4
    b26c:	71 c1       	rjmp	.+738    	; 0xb550 <SetupMenu+0x52e>
		    cursorpos = 5;
         else if(!useteams && cursorpos > 8)
		    cursorpos = 0;
	  }
	  else if(UpDown(0)){
	     if(--cursorpos == 255){
    b26e:	01 50       	subi	r16, 0x01	; 1
    b270:	08 f0       	brcs	.+2      	; 0xb274 <SetupMenu+0x252>
    b272:	97 c0       	rjmp	.+302    	; 0xb3a2 <SetupMenu+0x380>
		    if(useteams)
    b274:	dd 20       	and	r13, r13
    b276:	09 f0       	breq	.+2      	; 0xb27a <SetupMenu+0x258>
    b278:	75 c1       	rjmp	.+746    	; 0xb564 <SetupMenu+0x542>
    b27a:	08 e0       	ldi	r16, 0x08	; 8
    b27c:	9b c0       	rjmp	.+310    	; 0xb3b4 <SetupMenu+0x392>
bool StartDown(u8 i) {return(padstate[i] & BTN_START)  && !(oldpadstate[i] & BTN_START);}
bool UpDown(u8 i)    {return(padstate[i] & BTN_UP)     && !(oldpadstate[i] & BTN_UP);   }
bool DownDown(u8 i)  {return(padstate[i] & BTN_DOWN)   && !(oldpadstate[i] & BTN_DOWN); }
bool LeftDown(u8 i)  {return(padstate[i] & BTN_LEFT)   && !(oldpadstate[i] & BTN_LEFT); }
    b27e:	80 91 7f 0f 	lds	r24, 0x0F7F
    b282:	86 fd       	sbrc	r24, 6
    b284:	67 c1       	rjmp	.+718    	; 0xb554 <SetupMenu+0x532>
            else
			   cursorpos = 8;
		 }
	  }
	  else if(LeftDown(0)){
	     if(cursorpos > 4){
    b286:	05 30       	cpi	r16, 0x05	; 5
    b288:	70 f0       	brcs	.+28     	; 0xb2a6 <SetupMenu+0x284>
    b28a:	80 2f       	mov	r24, r16
    b28c:	90 e0       	ldi	r25, 0x00	; 0
            if(cursorpos < 9){
    b28e:	09 30       	cpi	r16, 0x09	; 9
    b290:	88 f5       	brcc	.+98     	; 0xb2f4 <SetupMenu+0x2d2>
			   if(ptype[cursorpos-5] > 0){ptype[cursorpos-5]--;}
    b292:	fc 01       	movw	r30, r24
    b294:	35 97       	sbiw	r30, 0x05	; 5
    b296:	e6 0d       	add	r30, r6
    b298:	f7 1d       	adc	r31, r7
    b29a:	80 81       	ld	r24, Z
    b29c:	88 23       	and	r24, r24
    b29e:	09 f4       	brne	.+2      	; 0xb2a2 <SetupMenu+0x280>
    b2a0:	80 c0       	rjmp	.+256    	; 0xb3a2 <SetupMenu+0x380>
    b2a2:	81 50       	subi	r24, 0x01	; 1
    b2a4:	25 c0       	rjmp	.+74     	; 0xb2f0 <SetupMenu+0x2ce>
		    }
			else
			   teams[cursorpos-9] = !teams[cursorpos-9];
               
		 }
		 else if(cursorpos == 0){
    b2a6:	00 23       	and	r16, r16
    b2a8:	91 f1       	breq	.+100    	; 0xb30e <SetupMenu+0x2ec>
            useteams = !useteams;

		 }
		 else if(cursorpos == 1){
    b2aa:	01 30       	cpi	r16, 0x01	; 1
    b2ac:	31 f4       	brne	.+12     	; 0xb2ba <SetupMenu+0x298>
            if(roundtime > 1)
    b2ae:	81 e0       	ldi	r24, 0x01	; 1
    b2b0:	8b 15       	cp	r24, r11
    b2b2:	08 f0       	brcs	.+2      	; 0xb2b6 <SetupMenu+0x294>
    b2b4:	76 c0       	rjmp	.+236    	; 0xb3a2 <SetupMenu+0x380>
			   roundtime--;
    b2b6:	ba 94       	dec	r11
    b2b8:	74 c0       	rjmp	.+232    	; 0xb3a2 <SetupMenu+0x380>
         }
		 else if(cursorpos == 2){
    b2ba:	02 30       	cpi	r16, 0x02	; 2
    b2bc:	c9 f5       	brne	.+114    	; 0xb330 <SetupMenu+0x30e>
            if(numrounds > 1)
    b2be:	91 e0       	ldi	r25, 0x01	; 1
    b2c0:	9c 15       	cp	r25, r12
    b2c2:	08 f0       	brcs	.+2      	; 0xb2c6 <SetupMenu+0x2a4>
    b2c4:	6e c0       	rjmp	.+220    	; 0xb3a2 <SetupMenu+0x380>
			   numrounds--;
    b2c6:	ca 94       	dec	r12
    b2c8:	6c c0       	rjmp	.+216    	; 0xb3a2 <SetupMenu+0x380>
bool StartDown(u8 i) {return(padstate[i] & BTN_START)  && !(oldpadstate[i] & BTN_START);}
bool UpDown(u8 i)    {return(padstate[i] & BTN_UP)     && !(oldpadstate[i] & BTN_UP);   }
bool DownDown(u8 i)  {return(padstate[i] & BTN_DOWN)   && !(oldpadstate[i] & BTN_DOWN); }
bool LeftDown(u8 i)  {return(padstate[i] & BTN_LEFT)   && !(oldpadstate[i] & BTN_LEFT); }
bool RightDown(u8 i) {return(padstate[i] & BTN_RIGHT)  && !(oldpadstate[i] & BTN_RIGHT); }
    b2ca:	80 91 7f 0f 	lds	r24, 0x0F7F
    b2ce:	87 fd       	sbrc	r24, 7
    b2d0:	43 c1       	rjmp	.+646    	; 0xb558 <SetupMenu+0x536>
		 else if(cursorpos == 4){
            useblitz = !useblitz;
		 }
	  }
	  else if(RightDown(0)){
	     if(cursorpos > 4){
    b2d2:	05 30       	cpi	r16, 0x05	; 5
    b2d4:	d0 f0       	brcs	.+52     	; 0xb30a <SetupMenu+0x2e8>
    b2d6:	80 2f       	mov	r24, r16
    b2d8:	90 e0       	ldi	r25, 0x00	; 0
            if(cursorpos < 9){
    b2da:	09 30       	cpi	r16, 0x09	; 9
    b2dc:	58 f4       	brcc	.+22     	; 0xb2f4 <SetupMenu+0x2d2>
			   if(ptype[cursorpos-5] < 2){ptype[cursorpos-5]++;}
    b2de:	fc 01       	movw	r30, r24
    b2e0:	35 97       	sbiw	r30, 0x05	; 5
    b2e2:	e6 0d       	add	r30, r6
    b2e4:	f7 1d       	adc	r31, r7
    b2e6:	80 81       	ld	r24, Z
    b2e8:	82 30       	cpi	r24, 0x02	; 2
    b2ea:	08 f0       	brcs	.+2      	; 0xb2ee <SetupMenu+0x2cc>
    b2ec:	5a c0       	rjmp	.+180    	; 0xb3a2 <SetupMenu+0x380>
    b2ee:	8f 5f       	subi	r24, 0xFF	; 255
    b2f0:	80 83       	st	Z, r24
    b2f2:	57 c0       	rjmp	.+174    	; 0xb3a2 <SetupMenu+0x380>
		    }
			else
			   teams[cursorpos-9] = !teams[cursorpos-9];
    b2f4:	fc 01       	movw	r30, r24
    b2f6:	39 97       	sbiw	r30, 0x09	; 9
    b2f8:	e4 0d       	add	r30, r4
    b2fa:	f5 1d       	adc	r31, r5
    b2fc:	90 e0       	ldi	r25, 0x00	; 0
    b2fe:	80 81       	ld	r24, Z
    b300:	88 23       	and	r24, r24
    b302:	09 f4       	brne	.+2      	; 0xb306 <SetupMenu+0x2e4>
    b304:	91 e0       	ldi	r25, 0x01	; 1
    b306:	90 83       	st	Z, r25
    b308:	4c c0       	rjmp	.+152    	; 0xb3a2 <SetupMenu+0x380>
		 }
		 else if(cursorpos == 0){
    b30a:	00 23       	and	r16, r16
    b30c:	11 f4       	brne	.+4      	; 0xb312 <SetupMenu+0x2f0>
            useteams = !useteams;
    b30e:	d8 24       	eor	r13, r8
    b310:	48 c0       	rjmp	.+144    	; 0xb3a2 <SetupMenu+0x380>
		 }
		 else if(cursorpos == 1){
    b312:	01 30       	cpi	r16, 0x01	; 1
    b314:	31 f4       	brne	.+12     	; 0xb322 <SetupMenu+0x300>
            if(roundtime < 5)
    b316:	84 e0       	ldi	r24, 0x04	; 4
    b318:	8b 15       	cp	r24, r11
    b31a:	08 f4       	brcc	.+2      	; 0xb31e <SetupMenu+0x2fc>
    b31c:	42 c0       	rjmp	.+132    	; 0xb3a2 <SetupMenu+0x380>
			   roundtime++;
    b31e:	b3 94       	inc	r11
    b320:	40 c0       	rjmp	.+128    	; 0xb3a2 <SetupMenu+0x380>
         }
		 else if(cursorpos == 2){
    b322:	02 30       	cpi	r16, 0x02	; 2
    b324:	29 f4       	brne	.+10     	; 0xb330 <SetupMenu+0x30e>
            if(numrounds < 3)
    b326:	92 e0       	ldi	r25, 0x02	; 2
    b328:	9c 15       	cp	r25, r12
    b32a:	d8 f1       	brcs	.+118    	; 0xb3a2 <SetupMenu+0x380>
			   numrounds++;
    b32c:	c3 94       	inc	r12
    b32e:	39 c0       	rjmp	.+114    	; 0xb3a2 <SetupMenu+0x380>
		 }
		 else if(cursorpos == 3){
    b330:	03 30       	cpi	r16, 0x03	; 3
    b332:	11 f4       	brne	.+4      	; 0xb338 <SetupMenu+0x316>
            useghosts = !useghosts;
    b334:	98 24       	eor	r9, r8
    b336:	35 c0       	rjmp	.+106    	; 0xb3a2 <SetupMenu+0x380>
		 }
		 else if(cursorpos == 4){
            useblitz = !useblitz;
    b338:	a8 24       	eor	r10, r8
    b33a:	04 e0       	ldi	r16, 0x04	; 4
    b33c:	32 c0       	rjmp	.+100    	; 0xb3a2 <SetupMenu+0x380>
bool UpDown(u8 i)    {return(padstate[i] & BTN_UP)     && !(oldpadstate[i] & BTN_UP);   }
bool DownDown(u8 i)  {return(padstate[i] & BTN_DOWN)   && !(oldpadstate[i] & BTN_DOWN); }
bool LeftDown(u8 i)  {return(padstate[i] & BTN_LEFT)   && !(oldpadstate[i] & BTN_LEFT); }
bool RightDown(u8 i) {return(padstate[i] & BTN_RIGHT)  && !(oldpadstate[i] & BTN_RIGHT); }
bool ADown(u8 i) {return(padstate[i] & BTN_A)  && !(oldpadstate[i] & BTN_A); }
bool BDown(u8 i) {return(padstate[i] & BTN_B)  && !(oldpadstate[i] & BTN_B); }
    b33e:	80 91 7f 0f 	lds	r24, 0x0F7F
    b342:	80 fd       	sbrc	r24, 0
    b344:	0b c1       	rjmp	.+534    	; 0xb55c <SetupMenu+0x53a>
    b346:	04 c0       	rjmp	.+8      	; 0xb350 <SetupMenu+0x32e>
bool StartDown(u8 i) {return(padstate[i] & BTN_START)  && !(oldpadstate[i] & BTN_START);}
    b348:	80 91 7f 0f 	lds	r24, 0x0F7F
    b34c:	83 fd       	sbrc	r24, 3
    b34e:	29 c0       	rjmp	.+82     	; 0xb3a2 <SetupMenu+0x380>
		 else if(cursorpos == 4){
            useblitz = !useblitz;
		 }
	  }
	  else if(BDown(0) || StartDown(0)){
         guistate = GMAINMENU;
    b350:	81 e0       	ldi	r24, 0x01	; 1
    b352:	80 93 0e 10 	sts	0x100E, r24
    b356:	80 e0       	ldi	r24, 0x00	; 0
    b358:	90 e0       	ldi	r25, 0x00	; 0
		 for(u8 i=0;i<MAX_PLAYERS;i++){
			   botgoal[i] = (ptype[i] == 1);
    b35a:	9e 01       	movw	r18, r28
    b35c:	2f 5f       	subi	r18, 0xFF	; 255
    b35e:	3f 4f       	sbci	r19, 0xFF	; 255
    b360:	dc 01       	movw	r26, r24
    b362:	aa 5f       	subi	r26, 0xFA	; 250
    b364:	bf 4e       	sbci	r27, 0xEF	; 239
    b366:	1c 92       	st	X, r1
    b368:	f9 01       	movw	r30, r18
    b36a:	e8 0f       	add	r30, r24
    b36c:	f9 1f       	adc	r31, r25
    b36e:	e0 81       	ld	r30, Z
    b370:	e1 30       	cpi	r30, 0x01	; 1
    b372:	09 f4       	brne	.+2      	; 0xb376 <SetupMenu+0x354>
    b374:	ec 93       	st	X, r30
    b376:	01 96       	adiw	r24, 0x01	; 1
            useblitz = !useblitz;
		 }
	  }
	  else if(BDown(0) || StartDown(0)){
         guistate = GMAINMENU;
		 for(u8 i=0;i<MAX_PLAYERS;i++){
    b378:	84 30       	cpi	r24, 0x04	; 4
    b37a:	91 05       	cpc	r25, r1
    b37c:	89 f7       	brne	.-30     	; 0xb360 <SetupMenu+0x33e>
			   botgoal[i] = (ptype[i] == 1);

		 }
		 WaitVsync(1);
    b37e:	81 e0       	ldi	r24, 0x01	; 1
    b380:	90 e0       	ldi	r25, 0x00	; 0
    b382:	0e 94 a3 4a 	call	0x9546	; 0x9546 <WaitVsync>
		 FadeOut(1,true);
    b386:	81 e0       	ldi	r24, 0x01	; 1
    b388:	61 e0       	ldi	r22, 0x01	; 1
    b38a:	0e 94 66 4a 	call	0x94cc	; 0x94cc <FadeOut>
		 SetTileTable(MapTiles);
    b38e:	8e e5       	ldi	r24, 0x5E	; 94
    b390:	94 e0       	ldi	r25, 0x04	; 4
    b392:	0e 94 93 44 	call	0x8926	; 0x8926 <SetTileTable>
		 FadeIn(1,false);
    b396:	81 e0       	ldi	r24, 0x01	; 1
    b398:	60 e0       	ldi	r22, 0x00	; 0
    b39a:	0e 94 4e 4a 	call	0x949c	; 0x949c <FadeIn>
    b39e:	e4 c0       	rjmp	.+456    	; 0xb568 <SetupMenu+0x546>
		 return;
    b3a0:	05 e0       	ldi	r16, 0x05	; 5
	  }
      
      
	  if(useteams){CompPrint(17,7,strOn);}else{CompPrint(17,7,strOff);}
    b3a2:	dd 20       	and	r13, r13
    b3a4:	39 f0       	breq	.+14     	; 0xb3b4 <SetupMenu+0x392>
    b3a6:	81 e1       	ldi	r24, 0x11	; 17
    b3a8:	67 e0       	ldi	r22, 0x07	; 7
    b3aa:	44 eb       	ldi	r20, 0xB4	; 180
    b3ac:	51 e0       	ldi	r21, 0x01	; 1
    b3ae:	0e 94 2b 52 	call	0xa456	; 0xa456 <CompPrint>
    b3b2:	07 c0       	rjmp	.+14     	; 0xb3c2 <SetupMenu+0x3a0>
    b3b4:	81 e1       	ldi	r24, 0x11	; 17
    b3b6:	67 e0       	ldi	r22, 0x07	; 7
    b3b8:	48 eb       	ldi	r20, 0xB8	; 184
    b3ba:	51 e0       	ldi	r21, 0x01	; 1
    b3bc:	0e 94 2b 52 	call	0xa456	; 0xa456 <CompPrint>
    b3c0:	dd 24       	eor	r13, r13
	  if(useghosts){CompPrint(17,13,strOn);}else{CompPrint(17,13,strOff);}
    b3c2:	99 20       	and	r9, r9
    b3c4:	29 f0       	breq	.+10     	; 0xb3d0 <SetupMenu+0x3ae>
    b3c6:	81 e1       	ldi	r24, 0x11	; 17
    b3c8:	6d e0       	ldi	r22, 0x0D	; 13
    b3ca:	44 eb       	ldi	r20, 0xB4	; 180
    b3cc:	51 e0       	ldi	r21, 0x01	; 1
    b3ce:	04 c0       	rjmp	.+8      	; 0xb3d8 <SetupMenu+0x3b6>
    b3d0:	81 e1       	ldi	r24, 0x11	; 17
    b3d2:	6d e0       	ldi	r22, 0x0D	; 13
    b3d4:	48 eb       	ldi	r20, 0xB8	; 184
    b3d6:	51 e0       	ldi	r21, 0x01	; 1
    b3d8:	0e 94 2b 52 	call	0xa456	; 0xa456 <CompPrint>
	  if(useblitz){CompPrint(17,15,strOn);}else{CompPrint(17,15,strOff);}
    b3dc:	aa 20       	and	r10, r10
    b3de:	29 f0       	breq	.+10     	; 0xb3ea <SetupMenu+0x3c8>
    b3e0:	81 e1       	ldi	r24, 0x11	; 17
    b3e2:	6f e0       	ldi	r22, 0x0F	; 15
    b3e4:	44 eb       	ldi	r20, 0xB4	; 180
    b3e6:	51 e0       	ldi	r21, 0x01	; 1
    b3e8:	04 c0       	rjmp	.+8      	; 0xb3f2 <SetupMenu+0x3d0>
    b3ea:	81 e1       	ldi	r24, 0x11	; 17
    b3ec:	6f e0       	ldi	r22, 0x0F	; 15
    b3ee:	48 eb       	ldi	r20, 0xB8	; 184
    b3f0:	51 e0       	ldi	r21, 0x01	; 1
    b3f2:	0e 94 2b 52 	call	0xa456	; 0xa456 <CompPrint>
	  CompPrintNum(15,9,roundtime);
    b3f6:	8f e0       	ldi	r24, 0x0F	; 15
    b3f8:	69 e0       	ldi	r22, 0x09	; 9
    b3fa:	4b 2d       	mov	r20, r11
    b3fc:	0e 94 0b 52 	call	0xa416	; 0xa416 <CompPrintNum>
	  CompPrintNum(15,11,numrounds);
    b400:	8f e0       	ldi	r24, 0x0F	; 15
    b402:	6b e0       	ldi	r22, 0x0B	; 11
    b404:	4c 2d       	mov	r20, r12
    b406:	0e 94 0b 52 	call	0xa416	; 0xa416 <CompPrintNum>
    b40a:	ee 24       	eor	r14, r14
    b40c:	ff 24       	eor	r15, r15
    b40e:	11 e1       	ldi	r17, 0x11	; 17

      
      

	  for(u8 i=0;i<4;i++){//draw man,cpu,off
         if(ptype[i] == 0)
    b410:	f3 01       	movw	r30, r6
    b412:	ee 0d       	add	r30, r14
    b414:	ff 1d       	adc	r31, r15
    b416:	e0 81       	ld	r30, Z
    b418:	ee 23       	and	r30, r30
    b41a:	29 f4       	brne	.+10     	; 0xb426 <SetupMenu+0x404>
		    CompPrint(11,17+i,strMan);
    b41c:	8b e0       	ldi	r24, 0x0B	; 11
    b41e:	61 2f       	mov	r22, r17
    b420:	4a ea       	ldi	r20, 0xAA	; 170
    b422:	51 e0       	ldi	r21, 0x01	; 1
    b424:	0b c0       	rjmp	.+22     	; 0xb43c <SetupMenu+0x41a>
         else if(ptype[i] == 1)
    b426:	e1 30       	cpi	r30, 0x01	; 1
    b428:	29 f4       	brne	.+10     	; 0xb434 <SetupMenu+0x412>
		    CompPrint(11,17+i,strCpu);
    b42a:	8b e0       	ldi	r24, 0x0B	; 11
    b42c:	61 2f       	mov	r22, r17
    b42e:	46 ea       	ldi	r20, 0xA6	; 166
    b430:	51 e0       	ldi	r21, 0x01	; 1
    b432:	04 c0       	rjmp	.+8      	; 0xb43c <SetupMenu+0x41a>
         else
		    CompPrint(11,17+i,strOff);
    b434:	8b e0       	ldi	r24, 0x0B	; 11
    b436:	61 2f       	mov	r22, r17
    b438:	48 eb       	ldi	r20, 0xB8	; 184
    b43a:	51 e0       	ldi	r21, 0x01	; 1
    b43c:	0e 94 2b 52 	call	0xa456	; 0xa456 <CompPrint>

         if(useteams){
    b440:	dd 20       	and	r13, r13
    b442:	81 f0       	breq	.+32     	; 0xb464 <SetupMenu+0x442>
			CompPrint(17,17+i,strTeam);
    b444:	81 e1       	ldi	r24, 0x11	; 17
    b446:	61 2f       	mov	r22, r17
    b448:	40 e8       	ldi	r20, 0x80	; 128
    b44a:	51 e0       	ldi	r21, 0x01	; 1
    b44c:	0e 94 2b 52 	call	0xa456	; 0xa456 <CompPrint>
            CompPrintNum(20,17+i,(teams[i]+1));
    b450:	f2 01       	movw	r30, r4
    b452:	ee 0d       	add	r30, r14
    b454:	ff 1d       	adc	r31, r15
    b456:	40 81       	ld	r20, Z
    b458:	4f 5f       	subi	r20, 0xFF	; 255
    b45a:	84 e1       	ldi	r24, 0x14	; 20
    b45c:	61 2f       	mov	r22, r17
    b45e:	0e 94 0b 52 	call	0xa416	; 0xa416 <CompPrintNum>
    b462:	06 c0       	rjmp	.+12     	; 0xb470 <SetupMenu+0x44e>
		 }
		 else
		    CompPrint(17,17+i,PSTR("        "));
    b464:	81 e1       	ldi	r24, 0x11	; 17
    b466:	61 2f       	mov	r22, r17
    b468:	49 e8       	ldi	r20, 0x89	; 137
    b46a:	59 e7       	ldi	r21, 0x79	; 121
    b46c:	0e 94 2b 52 	call	0xa456	; 0xa456 <CompPrint>
    b470:	08 94       	sec
    b472:	e1 1c       	adc	r14, r1
    b474:	f1 1c       	adc	r15, r1
    b476:	1f 5f       	subi	r17, 0xFF	; 255
	  CompPrintNum(15,11,numrounds);

      
      

	  for(u8 i=0;i<4;i++){//draw man,cpu,off
    b478:	15 31       	cpi	r17, 0x15	; 21
    b47a:	51 f6       	brne	.-108    	; 0xb410 <SetupMenu+0x3ee>
		 }
		 else
		    CompPrint(17,17+i,PSTR("        "));
	  }
      
	  BlankCursor(6,7,2,15);
    b47c:	86 e0       	ldi	r24, 0x06	; 6
    b47e:	67 e0       	ldi	r22, 0x07	; 7
    b480:	42 e0       	ldi	r20, 0x02	; 2
    b482:	2f e0       	ldi	r18, 0x0F	; 15
    b484:	0e 94 11 57 	call	0xae22	; 0xae22 <BlankCursor>
	  BlankCursor(15,17,2,5);
    b488:	8f e0       	ldi	r24, 0x0F	; 15
    b48a:	61 e1       	ldi	r22, 0x11	; 17
    b48c:	42 e0       	ldi	r20, 0x02	; 2
    b48e:	25 e0       	ldi	r18, 0x05	; 5
    b490:	0e 94 11 57 	call	0xae22	; 0xae22 <BlankCursor>
      if(cursorpos < 5)
    b494:	05 30       	cpi	r16, 0x05	; 5
    b496:	50 f4       	brcc	.+20     	; 0xb4ac <SetupMenu+0x48a>
   SetTile(15,0,ZERO_OFFSET+ten);
   SetTile(16,0,ZERO_OFFSET+sec);
}

void SetMapTile(u8 x, u8 y, u8 t){
   int off = (y*30)+x;//((y<<1)*30)+(x<<1);
    b498:	e0 2f       	mov	r30, r16
    b49a:	ee 0f       	add	r30, r30
    b49c:	e9 5f       	subi	r30, 0xF9	; 249
    b49e:	8e e1       	ldi	r24, 0x1E	; 30
    b4a0:	e8 9f       	mul	r30, r24
    b4a2:	f0 01       	movw	r30, r0
    b4a4:	11 24       	eor	r1, r1
   t+=RAM_TILES_COUNT;//t = (t<<2)+RAM_TILES_COUNT;//t = (tileset*(NUMTILES*4)) + (t*4) + RAM_TILES_COUNT;
   
   vram[off+ 0] = t++;
    b4a6:	ea 5d       	subi	r30, 0xDA	; 218
    b4a8:	fe 4f       	sbci	r31, 0xFE	; 254
    b4aa:	18 c0       	rjmp	.+48     	; 0xb4dc <SetupMenu+0x4ba>
	     DrawCursor(6,7+(cursorpos*2));
      else if(cursorpos < 9)
    b4ac:	09 30       	cpi	r16, 0x09	; 9
    b4ae:	70 f4       	brcc	.+28     	; 0xb4cc <SetupMenu+0x4aa>
   SetTile(15,0,ZERO_OFFSET+ten);
   SetTile(16,0,ZERO_OFFSET+sec);
}

void SetMapTile(u8 x, u8 y, u8 t){
   int off = (y*30)+x;//((y<<1)*30)+(x<<1);
    b4b0:	04 5f       	subi	r16, 0xF4	; 244
    b4b2:	9e e1       	ldi	r25, 0x1E	; 30
    b4b4:	09 9f       	mul	r16, r25
    b4b6:	f0 01       	movw	r30, r0
    b4b8:	11 24       	eor	r1, r1
    b4ba:	0c 50       	subi	r16, 0x0C	; 12
   t+=RAM_TILES_COUNT;//t = (t<<2)+RAM_TILES_COUNT;//t = (tileset*(NUMTILES*4)) + (t*4) + RAM_TILES_COUNT;
   
   vram[off+ 0] = t++;
    b4bc:	ea 5d       	subi	r30, 0xDA	; 218
    b4be:	fe 4f       	sbci	r31, 0xFE	; 254
    b4c0:	88 e2       	ldi	r24, 0x28	; 40
    b4c2:	80 83       	st	Z, r24
   vram[off+ 1] = t++;
    b4c4:	21 82       	std	Z+1, r2	; 0x01
   vram[off+30] = t++;
    b4c6:	9a e2       	ldi	r25, 0x2A	; 42
    b4c8:	96 8f       	std	Z+30, r25	; 0x1e
    b4ca:	0d c0       	rjmp	.+26     	; 0xb4e6 <SetupMenu+0x4c4>
   SetTile(15,0,ZERO_OFFSET+ten);
   SetTile(16,0,ZERO_OFFSET+sec);
}

void SetMapTile(u8 x, u8 y, u8 t){
   int off = (y*30)+x;//((y<<1)*30)+(x<<1);
    b4cc:	08 5f       	subi	r16, 0xF8	; 248
    b4ce:	8e e1       	ldi	r24, 0x1E	; 30
    b4d0:	08 9f       	mul	r16, r24
    b4d2:	f0 01       	movw	r30, r0
    b4d4:	11 24       	eor	r1, r1
    b4d6:	08 50       	subi	r16, 0x08	; 8
   t+=RAM_TILES_COUNT;//t = (t<<2)+RAM_TILES_COUNT;//t = (tileset*(NUMTILES*4)) + (t*4) + RAM_TILES_COUNT;
   
   vram[off+ 0] = t++;
    b4d8:	e1 5d       	subi	r30, 0xD1	; 209
    b4da:	fe 4f       	sbci	r31, 0xFE	; 254
    b4dc:	98 e2       	ldi	r25, 0x28	; 40
    b4de:	90 83       	st	Z, r25
   vram[off+ 1] = t++;
    b4e0:	21 82       	std	Z+1, r2	; 0x01
   vram[off+30] = t++;
    b4e2:	8a e2       	ldi	r24, 0x2A	; 42
    b4e4:	86 8f       	std	Z+30, r24	; 0x1e
   vram[off+31] = t;
    b4e6:	37 8e       	std	Z+31, r3	; 0x1f
   spritecount++;
   return true;
}

void DoHideSprites(){//hide the unused sprites so they don't stick around
   for(u8 i=spritecount;i<MAX_SPRITES;i++){sprites[i].x=SCREEN_TILES_H*TILE_WIDTH;}
    b4e8:	20 91 a2 0f 	lds	r18, 0x0FA2
    b4ec:	0e c0       	rjmp	.+28     	; 0xb50a <SetupMenu+0x4e8>
    b4ee:	82 2f       	mov	r24, r18
    b4f0:	90 e0       	ldi	r25, 0x00	; 0
    b4f2:	fc 01       	movw	r30, r24
    b4f4:	ee 0f       	add	r30, r30
    b4f6:	ff 1f       	adc	r31, r31
    b4f8:	ee 0f       	add	r30, r30
    b4fa:	ff 1f       	adc	r31, r31
    b4fc:	e8 0f       	add	r30, r24
    b4fe:	f9 1f       	adc	r31, r25
    b500:	ee 52       	subi	r30, 0x2E	; 46
    b502:	fc 4f       	sbci	r31, 0xFC	; 252
    b504:	90 ef       	ldi	r25, 0xF0	; 240
    b506:	90 83       	st	Z, r25
    b508:	2f 5f       	subi	r18, 0xFF	; 255
    b50a:	2f 31       	cpi	r18, 0x1F	; 31
    b50c:	80 f3       	brcs	.-32     	; 0xb4ee <SetupMenu+0x4cc>
	   sprites[i].x = SCREEN_TILES_H*TILE_WIDTH;
}

 
u8 prand(){
  (prng = ((u8)((prng>>1) | ((prng^(prng>>2)^(prng>>3)^(prng>>4))<<7))));
    b50e:	90 91 04 01 	lds	r25, 0x0104
    b512:	89 2f       	mov	r24, r25
    b514:	86 95       	lsr	r24
    b516:	86 95       	lsr	r24
    b518:	29 2f       	mov	r18, r25
    b51a:	26 95       	lsr	r18
    b51c:	26 95       	lsr	r18
    b51e:	26 95       	lsr	r18
    b520:	82 27       	eor	r24, r18
    b522:	89 27       	eor	r24, r25
    b524:	29 2f       	mov	r18, r25
    b526:	22 95       	swap	r18
    b528:	2f 70       	andi	r18, 0x0F	; 15
    b52a:	82 27       	eor	r24, r18
    b52c:	87 95       	ror	r24
    b52e:	88 27       	eor	r24, r24
    b530:	87 95       	ror	r24
    b532:	96 95       	lsr	r25
    b534:	89 2b       	or	r24, r25
    b536:	80 93 04 01 	sts	0x0104, r24
      else
	     DrawCursor(15,8+(cursorpos));

	  DoHideSprites();
	  prand();
      WaitVsync(1);
    b53a:	81 e0       	ldi	r24, 0x01	; 1
    b53c:	90 e0       	ldi	r25, 0x00	; 0
    b53e:	0e 94 a3 4a 	call	0x9546	; 0x9546 <WaitVsync>
    b542:	1a ce       	rjmp	.-972    	; 0xb178 <SetupMenu+0x156>
bool StartDown(u8 i) {return(padstate[i] & BTN_START)  && !(oldpadstate[i] & BTN_START);}
bool UpDown(u8 i)    {return(padstate[i] & BTN_UP)     && !(oldpadstate[i] & BTN_UP);   }
bool DownDown(u8 i)  {return(padstate[i] & BTN_DOWN)   && !(oldpadstate[i] & BTN_DOWN); }
bool LeftDown(u8 i)  {return(padstate[i] & BTN_LEFT)   && !(oldpadstate[i] & BTN_LEFT); }
bool RightDown(u8 i) {return(padstate[i] & BTN_RIGHT)  && !(oldpadstate[i] & BTN_RIGHT); }
bool ADown(u8 i) {return(padstate[i] & BTN_A)  && !(oldpadstate[i] & BTN_A); }
    b544:	30 fd       	sbrc	r19, 0
    b546:	38 ce       	rjmp	.-912    	; 0xb1b8 <SetupMenu+0x196>
bool StartDown(u8 i) {return(padstate[i] & BTN_START)  && !(oldpadstate[i] & BTN_START);}
bool UpDown(u8 i)    {return(padstate[i] & BTN_UP)     && !(oldpadstate[i] & BTN_UP);   }
bool DownDown(u8 i)  {return(padstate[i] & BTN_DOWN)   && !(oldpadstate[i] & BTN_DOWN); }
    b548:	25 fd       	sbrc	r18, 5
    b54a:	7d ce       	rjmp	.-774    	; 0xb246 <SetupMenu+0x224>
bool StartDown(u8 i) {return(padstate[i] & BTN_START)  && !(oldpadstate[i] & BTN_START);}
bool UpDown(u8 i)    {return(padstate[i] & BTN_UP)     && !(oldpadstate[i] & BTN_UP);   }
    b54c:	24 fd       	sbrc	r18, 4
    b54e:	8b ce       	rjmp	.-746    	; 0xb266 <SetupMenu+0x244>
bool DownDown(u8 i)  {return(padstate[i] & BTN_DOWN)   && !(oldpadstate[i] & BTN_DOWN); }
bool LeftDown(u8 i)  {return(padstate[i] & BTN_LEFT)   && !(oldpadstate[i] & BTN_LEFT); }
    b550:	26 fd       	sbrc	r18, 6
    b552:	95 ce       	rjmp	.-726    	; 0xb27e <SetupMenu+0x25c>
bool RightDown(u8 i) {return(padstate[i] & BTN_RIGHT)  && !(oldpadstate[i] & BTN_RIGHT); }
    b554:	27 fd       	sbrc	r18, 7
    b556:	b9 ce       	rjmp	.-654    	; 0xb2ca <SetupMenu+0x2a8>
bool ADown(u8 i) {return(padstate[i] & BTN_A)  && !(oldpadstate[i] & BTN_A); }
bool BDown(u8 i) {return(padstate[i] & BTN_B)  && !(oldpadstate[i] & BTN_B); }
    b558:	20 fd       	sbrc	r18, 0
    b55a:	f1 ce       	rjmp	.-542    	; 0xb33e <SetupMenu+0x31c>
bool StartDown(u8 i) {return(padstate[i] & BTN_START)  && !(oldpadstate[i] & BTN_START);}
    b55c:	45 2b       	or	r20, r21
    b55e:	09 f4       	brne	.+2      	; 0xb562 <SetupMenu+0x540>
    b560:	20 cf       	rjmp	.-448    	; 0xb3a2 <SetupMenu+0x380>
    b562:	f2 ce       	rjmp	.-540    	; 0xb348 <SetupMenu+0x326>
    b564:	0c e0       	ldi	r16, 0x0C	; 12
    b566:	1f cf       	rjmp	.-450    	; 0xb3a6 <SetupMenu+0x384>

	  DoHideSprites();
	  prand();
      WaitVsync(1);
   }
}
    b568:	28 96       	adiw	r28, 0x08	; 8
    b56a:	e2 e1       	ldi	r30, 0x12	; 18
    b56c:	0c 94 c5 70 	jmp	0xe18a	; 0xe18a <__epilogue_restores__>

0000b570 <OptionMenu>:
		  
	  WaitVsync(1);
   }
}

void OptionMenu(){
    b570:	ef 92       	push	r14
    b572:	ff 92       	push	r15
    b574:	0f 93       	push	r16
    b576:	1f 93       	push	r17
   unsigned char cursorpos = 0;

   SetTileTable(GuiTiles);
    b578:	8a e9       	ldi	r24, 0x9A	; 154
    b57a:	9c e3       	ldi	r25, 0x3C	; 60
    b57c:	0e 94 93 44 	call	0x8926	; 0x8926 <SetTileTable>
    b580:	e2 ed       	ldi	r30, 0xD2	; 210
    b582:	f3 e0       	ldi	r31, 0x03	; 3
u8 GetNumRoundBits();
void SetNumRoundBits(u8 t);

void HideSprites(u8 start, u8 end){
    for(u8 i=start;i<end;i++)
	   sprites[i].x = SCREEN_TILES_H*TILE_WIDTH;
    b584:	80 ef       	ldi	r24, 0xF0	; 240
    b586:	80 83       	st	Z, r24
    b588:	35 96       	adiw	r30, 0x05	; 5
void SetRoundTimeBits(u8 t);
u8 GetNumRoundBits();
void SetNumRoundBits(u8 t);

void HideSprites(u8 start, u8 end){
    for(u8 i=start;i<end;i++)
    b58a:	94 e0       	ldi	r25, 0x04	; 4
    b58c:	ed 36       	cpi	r30, 0x6D	; 109
    b58e:	f9 07       	cpc	r31, r25
    b590:	d1 f7       	brne	.-12     	; 0xb586 <OptionMenu+0x16>
    b592:	e0 e2       	ldi	r30, 0x20	; 32
    b594:	f1 e0       	ldi	r31, 0x01	; 1
bool ADown(u8 i) {return(padstate[i] & BTN_A)  && !(oldpadstate[i] & BTN_A); }
bool BDown(u8 i) {return(padstate[i] & BTN_B)  && !(oldpadstate[i] & BTN_B); }

void FillScreen(u8 t){
   for(int i=0;i<VRAM_TILES_H*VRAM_TILES_V;i++)
      vram[i] = t+RAM_TILES_COUNT;
    b596:	8f e1       	ldi	r24, 0x1F	; 31
    b598:	81 93       	st	Z+, r24
bool RightDown(u8 i) {return(padstate[i] & BTN_RIGHT)  && !(oldpadstate[i] & BTN_RIGHT); }
bool ADown(u8 i) {return(padstate[i] & BTN_A)  && !(oldpadstate[i] & BTN_A); }
bool BDown(u8 i) {return(padstate[i] & BTN_B)  && !(oldpadstate[i] & BTN_B); }

void FillScreen(u8 t){
   for(int i=0;i<VRAM_TILES_H*VRAM_TILES_V;i++)
    b59a:	93 e0       	ldi	r25, 0x03	; 3
    b59c:	e2 3d       	cpi	r30, 0xD2	; 210
    b59e:	f9 07       	cpc	r31, r25
    b5a0:	d9 f7       	brne	.-10     	; 0xb598 <OptionMenu+0x28>
   unsigned char cursorpos = 0;

   SetTileTable(GuiTiles);
   HideSprites(0,MAX_SPRITES);
   FillScreen(BLANKT);
   RamifyFont(0,31);
    b5a2:	80 e0       	ldi	r24, 0x00	; 0
    b5a4:	90 e0       	ldi	r25, 0x00	; 0
    b5a6:	6f e1       	ldi	r22, 0x1F	; 31
    b5a8:	0e 94 f9 4e 	call	0x9df2	; 0x9df2 <RamifyFont>
   WaitVsync(1);
    b5ac:	81 e0       	ldi	r24, 0x01	; 1
    b5ae:	90 e0       	ldi	r25, 0x00	; 0
    b5b0:	0e 94 a3 4a 	call	0x9546	; 0x9546 <WaitVsync>

   DrawMenu(4,2,21,20);
    b5b4:	84 e0       	ldi	r24, 0x04	; 4
    b5b6:	62 e0       	ldi	r22, 0x02	; 2
    b5b8:	45 e1       	ldi	r20, 0x15	; 21
    b5ba:	24 e1       	ldi	r18, 0x14	; 20
    b5bc:	0e 94 2d 56 	call	0xac5a	; 0xac5a <DrawMenu>
   CompPrint(9,0,strMegaBomber);
    b5c0:	89 e0       	ldi	r24, 0x09	; 9
    b5c2:	60 e0       	ldi	r22, 0x00	; 0
    b5c4:	42 ed       	ldi	r20, 0xD2	; 210
    b5c6:	50 e0       	ldi	r21, 0x00	; 0
    b5c8:	0e 94 2b 52 	call	0xa456	; 0xa456 <CompPrint>
   CompPrint(11,4,strOptions);
    b5cc:	8b e0       	ldi	r24, 0x0B	; 11
    b5ce:	64 e0       	ldi	r22, 0x04	; 4
    b5d0:	4b e0       	ldi	r20, 0x0B	; 11
    b5d2:	51 e0       	ldi	r21, 0x01	; 1
    b5d4:	0e 94 2b 52 	call	0xa456	; 0xa456 <CompPrint>


   CompPrint(8,7,strTeam);
    b5d8:	88 e0       	ldi	r24, 0x08	; 8
    b5da:	67 e0       	ldi	r22, 0x07	; 7
    b5dc:	40 e8       	ldi	r20, 0x80	; 128
    b5de:	51 e0       	ldi	r21, 0x01	; 1
    b5e0:	0e 94 2b 52 	call	0xa456	; 0xa456 <CompPrint>
   CompPrint(8,20,strBack);
    b5e4:	88 e0       	ldi	r24, 0x08	; 8
    b5e6:	64 e1       	ldi	r22, 0x14	; 20
    b5e8:	40 e5       	ldi	r20, 0x50	; 80
    b5ea:	51 e0       	ldi	r21, 0x01	; 1
    b5ec:	0e 94 2b 52 	call	0xa456	; 0xa456 <CompPrint>

void SetMapTile(u8 x, u8 y, u8 t){
   int off = (y*30)+x;//((y<<1)*30)+(x<<1);
   t+=RAM_TILES_COUNT;//t = (t<<2)+RAM_TILES_COUNT;//t = (tileset*(NUMTILES*4)) + (t*4) + RAM_TILES_COUNT;
   
   vram[off+ 0] = t++;
    b5f0:	58 e2       	ldi	r21, 0x28	; 40
    b5f2:	e5 2e       	mov	r14, r21
   vram[off+ 1] = t++;
    b5f4:	49 e2       	ldi	r20, 0x29	; 41
    b5f6:	f4 2e       	mov	r15, r20
   vram[off+30] = t++;
    b5f8:	0a e2       	ldi	r16, 0x2A	; 42
   vram[off+31] = t;
    b5fa:	1b e2       	ldi	r17, 0x2B	; 43
extern bool StartDown(u8 i);
extern bool ADown(u8 i);
extern bool BDown(u8 i);
extern void KillPlayer(u8 p);
inline void FillPad(u8 i){
   oldpadstate[i] = padstate[i];
    b5fc:	80 91 87 0f 	lds	r24, 0x0F87
    b600:	90 91 88 0f 	lds	r25, 0x0F88
    b604:	90 93 80 0f 	sts	0x0F80, r25
    b608:	80 93 7f 0f 	sts	0x0F7F, r24
	 // if(multitap)//skip over this controller
	   //  ReadJoypad(i);
	   return;
   }

   if(!multitap)
    b60c:	80 91 fa 0e 	lds	r24, 0x0EFA
    b610:	88 23       	and	r24, r24
    b612:	31 f4       	brne	.+12     	; 0xb620 <OptionMenu+0xb0>
      padstate[i] = ReadJoypad(i);
    b614:	0e 94 a2 44 	call	0x8944	; 0x8944 <ReadJoypad>
    b618:	90 93 88 0f 	sts	0x0F88, r25
    b61c:	80 93 87 0f 	sts	0x0F87, r24

void SetMapTile(u8 x, u8 y, u8 t){
   int off = (y*30)+x;//((y<<1)*30)+(x<<1);
   t+=RAM_TILES_COUNT;//t = (t<<2)+RAM_TILES_COUNT;//t = (tileset*(NUMTILES*4)) + (t*4) + RAM_TILES_COUNT;
   
   vram[off+ 0] = t++;
    b620:	e0 92 f8 01 	sts	0x01F8, r14
   vram[off+ 1] = t++;
    b624:	f0 92 f9 01 	sts	0x01F9, r15
   vram[off+30] = t++;
    b628:	00 93 16 02 	sts	0x0216, r16
   vram[off+31] = t;
    b62c:	10 93 17 02 	sts	0x0217, r17

   while(true){
      FillPad(0);

	  DrawCursor(6,7+cursorpos);
      WaitVsync(1);
    b630:	81 e0       	ldi	r24, 0x01	; 1
    b632:	90 e0       	ldi	r25, 0x00	; 0
    b634:	0e 94 a3 4a 	call	0x9546	; 0x9546 <WaitVsync>
    b638:	e1 cf       	rjmp	.-62     	; 0xb5fc <OptionMenu+0x8c>

0000b63a <MainMenu>:
   WaitVsync(60);
   FadeIn(2,false);

}

void MainMenu(){
    b63a:	cf 92       	push	r12
    b63c:	df 92       	push	r13
    b63e:	ef 92       	push	r14
    b640:	ff 92       	push	r15
    b642:	0f 93       	push	r16
    b644:	1f 93       	push	r17
   u8 cursorpos = 0;

   SetTileTable(GuiTiles);
    b646:	8a e9       	ldi	r24, 0x9A	; 154
    b648:	9c e3       	ldi	r25, 0x3C	; 60
    b64a:	0e 94 93 44 	call	0x8926	; 0x8926 <SetTileTable>
    b64e:	e2 ed       	ldi	r30, 0xD2	; 210
    b650:	f3 e0       	ldi	r31, 0x03	; 3
	   sprites[i].x = SCREEN_TILES_H*TILE_WIDTH;
    b652:	80 ef       	ldi	r24, 0xF0	; 240
    b654:	80 83       	st	Z, r24
    b656:	35 96       	adiw	r30, 0x05	; 5
void SetRoundTimeBits(u8 t);
u8 GetNumRoundBits();
void SetNumRoundBits(u8 t);

void HideSprites(u8 start, u8 end){
    for(u8 i=start;i<end;i++)
    b658:	94 e0       	ldi	r25, 0x04	; 4
    b65a:	ed 36       	cpi	r30, 0x6D	; 109
    b65c:	f9 07       	cpc	r31, r25
    b65e:	d1 f7       	brne	.-12     	; 0xb654 <MainMenu+0x1a>
    b660:	e0 e2       	ldi	r30, 0x20	; 32
    b662:	f1 e0       	ldi	r31, 0x01	; 1
bool ADown(u8 i) {return(padstate[i] & BTN_A)  && !(oldpadstate[i] & BTN_A); }
bool BDown(u8 i) {return(padstate[i] & BTN_B)  && !(oldpadstate[i] & BTN_B); }

void FillScreen(u8 t){
   for(int i=0;i<VRAM_TILES_H*VRAM_TILES_V;i++)
      vram[i] = t+RAM_TILES_COUNT;
    b664:	8f e1       	ldi	r24, 0x1F	; 31
    b666:	81 93       	st	Z+, r24
bool RightDown(u8 i) {return(padstate[i] & BTN_RIGHT)  && !(oldpadstate[i] & BTN_RIGHT); }
bool ADown(u8 i) {return(padstate[i] & BTN_A)  && !(oldpadstate[i] & BTN_A); }
bool BDown(u8 i) {return(padstate[i] & BTN_B)  && !(oldpadstate[i] & BTN_B); }

void FillScreen(u8 t){
   for(int i=0;i<VRAM_TILES_H*VRAM_TILES_V;i++)
    b668:	93 e0       	ldi	r25, 0x03	; 3
    b66a:	e2 3d       	cpi	r30, 0xD2	; 210
    b66c:	f9 07       	cpc	r31, r25
    b66e:	d9 f7       	brne	.-10     	; 0xb666 <MainMenu+0x2c>
   u8 cursorpos = 0;

   SetTileTable(GuiTiles);
   HideSprites(0,MAX_SPRITES);
   FillScreen(BLANKT);
   RamifyFont(0,31);
    b670:	80 e0       	ldi	r24, 0x00	; 0
    b672:	90 e0       	ldi	r25, 0x00	; 0
    b674:	6f e1       	ldi	r22, 0x1F	; 31
    b676:	0e 94 f9 4e 	call	0x9df2	; 0x9df2 <RamifyFont>
   WaitVsync(1);
    b67a:	81 e0       	ldi	r24, 0x01	; 1
    b67c:	90 e0       	ldi	r25, 0x00	; 0
    b67e:	0e 94 a3 4a 	call	0x9546	; 0x9546 <WaitVsync>


   DrawOpeningMenu(9,13,10,6,-3);
    b682:	89 e0       	ldi	r24, 0x09	; 9
    b684:	6d e0       	ldi	r22, 0x0D	; 13
    b686:	4a e0       	ldi	r20, 0x0A	; 10
    b688:	26 e0       	ldi	r18, 0x06	; 6
    b68a:	0d ef       	ldi	r16, 0xFD	; 253
    b68c:	1f ef       	ldi	r17, 0xFF	; 255
    b68e:	0e 94 b7 56 	call	0xad6e	; 0xad6e <DrawOpeningMenu>
   CompPrint(9,10,strMegaBomber);
    b692:	89 e0       	ldi	r24, 0x09	; 9
    b694:	6a e0       	ldi	r22, 0x0A	; 10
    b696:	42 ed       	ldi	r20, 0xD2	; 210
    b698:	50 e0       	ldi	r21, 0x00	; 0
    b69a:	0e 94 2b 52 	call	0xa456	; 0xa456 <CompPrint>
   CompPrint(12,15,strLocal);
    b69e:	8c e0       	ldi	r24, 0x0C	; 12
    b6a0:	6f e0       	ldi	r22, 0x0F	; 15
    b6a2:	46 ef       	ldi	r20, 0xF6	; 246
    b6a4:	50 e0       	ldi	r21, 0x00	; 0
    b6a6:	0e 94 2b 52 	call	0xa456	; 0xa456 <CompPrint>
   CompPrint(12,16,strNetwork);
    b6aa:	8c e0       	ldi	r24, 0x0C	; 12
    b6ac:	60 e1       	ldi	r22, 0x10	; 16
    b6ae:	43 e0       	ldi	r20, 0x03	; 3
    b6b0:	51 e0       	ldi	r21, 0x01	; 1
    b6b2:	0e 94 2b 52 	call	0xa456	; 0xa456 <CompPrint>
   CompPrint(12,17,strOptions);
    b6b6:	8c e0       	ldi	r24, 0x0C	; 12
    b6b8:	61 e1       	ldi	r22, 0x11	; 17
    b6ba:	4b e0       	ldi	r20, 0x0B	; 11
    b6bc:	51 e0       	ldi	r21, 0x01	; 1
    b6be:	0e 94 2b 52 	call	0xa456	; 0xa456 <CompPrint>

   CompPrint(8,22,strVanity);
    b6c2:	88 e0       	ldi	r24, 0x08	; 8
    b6c4:	66 e1       	ldi	r22, 0x16	; 22
    b6c6:	43 e1       	ldi	r20, 0x13	; 19
    b6c8:	51 e0       	ldi	r21, 0x01	; 1
    b6ca:	0e 94 2b 52 	call	0xa456	; 0xa456 <CompPrint>
    b6ce:	10 e0       	ldi	r17, 0x00	; 0
   SetTile(15,0,ZERO_OFFSET+ten);
   SetTile(16,0,ZERO_OFFSET+sec);
}

void SetMapTile(u8 x, u8 y, u8 t){
   int off = (y*30)+x;//((y<<1)*30)+(x<<1);
    b6d0:	fe e1       	ldi	r31, 0x1E	; 30
    b6d2:	cf 2e       	mov	r12, r31
   t+=RAM_TILES_COUNT;//t = (t<<2)+RAM_TILES_COUNT;//t = (tileset*(NUMTILES*4)) + (t*4) + RAM_TILES_COUNT;
   
   vram[off+ 0] = t++;
    b6d4:	e8 e2       	ldi	r30, 0x28	; 40
    b6d6:	de 2e       	mov	r13, r30
   vram[off+ 1] = t++;
    b6d8:	79 e2       	ldi	r23, 0x29	; 41
    b6da:	e7 2e       	mov	r14, r23
   vram[off+30] = t++;
    b6dc:	6a e2       	ldi	r22, 0x2A	; 42
    b6de:	f6 2e       	mov	r15, r22
   vram[off+31] = t;
    b6e0:	0b e2       	ldi	r16, 0x2B	; 43
	   sprites[i].x = SCREEN_TILES_H*TILE_WIDTH;
}

 
u8 prand(){
  (prng = ((u8)((prng>>1) | ((prng^(prng>>2)^(prng>>3)^(prng>>4))<<7))));
    b6e2:	90 91 04 01 	lds	r25, 0x0104
    b6e6:	89 2f       	mov	r24, r25
    b6e8:	86 95       	lsr	r24
    b6ea:	86 95       	lsr	r24
    b6ec:	29 2f       	mov	r18, r25
    b6ee:	26 95       	lsr	r18
    b6f0:	26 95       	lsr	r18
    b6f2:	26 95       	lsr	r18
    b6f4:	82 27       	eor	r24, r18
    b6f6:	89 27       	eor	r24, r25
    b6f8:	29 2f       	mov	r18, r25
    b6fa:	22 95       	swap	r18
    b6fc:	2f 70       	andi	r18, 0x0F	; 15
    b6fe:	82 27       	eor	r24, r18
    b700:	87 95       	ror	r24
    b702:	88 27       	eor	r24, r24
    b704:	87 95       	ror	r24
    b706:	96 95       	lsr	r25
    b708:	89 2b       	or	r24, r25
    b70a:	80 93 04 01 	sts	0x0104, r24
extern bool StartDown(u8 i);
extern bool ADown(u8 i);
extern bool BDown(u8 i);
extern void KillPlayer(u8 p);
inline void FillPad(u8 i){
   oldpadstate[i] = padstate[i];
    b70e:	80 91 87 0f 	lds	r24, 0x0F87
    b712:	90 91 88 0f 	lds	r25, 0x0F88
    b716:	90 93 80 0f 	sts	0x0F80, r25
    b71a:	80 93 7f 0f 	sts	0x0F7F, r24
	 // if(multitap)//skip over this controller
	   //  ReadJoypad(i);
	   return;
   }

   if(!multitap)
    b71e:	80 91 fa 0e 	lds	r24, 0x0EFA
    b722:	88 23       	and	r24, r24
    b724:	31 f4       	brne	.+12     	; 0xb732 <MainMenu+0xf8>
      padstate[i] = ReadJoypad(i);
    b726:	0e 94 a2 44 	call	0x8944	; 0x8944 <ReadJoypad>
    b72a:	90 93 88 0f 	sts	0x0F88, r25
    b72e:	80 93 87 0f 	sts	0x0F87, r24
bool StartDown(u8 i) {return(padstate[i] & BTN_START)  && !(oldpadstate[i] & BTN_START);}
    b732:	20 91 87 0f 	lds	r18, 0x0F87
    b736:	30 91 88 0f 	lds	r19, 0x0F88
    b73a:	23 ff       	sbrs	r18, 3
    b73c:	53 c0       	rjmp	.+166    	; 0xb7e4 <MainMenu+0x1aa>
    b73e:	80 91 7f 0f 	lds	r24, 0x0F7F
    b742:	83 fd       	sbrc	r24, 3
    b744:	4f c0       	rjmp	.+158    	; 0xb7e4 <MainMenu+0x1aa>
    b746:	06 c0       	rjmp	.+12     	; 0xb754 <MainMenu+0x11a>
bool UpDown(u8 i)    {return(padstate[i] & BTN_UP)     && !(oldpadstate[i] & BTN_UP);   }
bool DownDown(u8 i)  {return(padstate[i] & BTN_DOWN)   && !(oldpadstate[i] & BTN_DOWN); }
bool LeftDown(u8 i)  {return(padstate[i] & BTN_LEFT)   && !(oldpadstate[i] & BTN_LEFT); }
bool RightDown(u8 i) {return(padstate[i] & BTN_RIGHT)  && !(oldpadstate[i] & BTN_RIGHT); }
bool ADown(u8 i) {return(padstate[i] & BTN_A)  && !(oldpadstate[i] & BTN_A); }
    b748:	80 91 7f 0f 	lds	r24, 0x0F7F
    b74c:	90 91 80 0f 	lds	r25, 0x0F80
    b750:	90 fd       	sbrc	r25, 0
    b752:	4a c0       	rjmp	.+148    	; 0xb7e8 <MainMenu+0x1ae>
   while(true){
      prand();
      FillPad(0);

	  if(StartDown(0) || ADown(0)){
	     WaitVsync(1);
    b754:	81 e0       	ldi	r24, 0x01	; 1
    b756:	90 e0       	ldi	r25, 0x00	; 0
    b758:	0e 94 a3 4a 	call	0x9546	; 0x9546 <WaitVsync>
		   gamestate = STARTMATCH;
    b75c:	80 e1       	ldi	r24, 0x10	; 16
    b75e:	80 93 fc 0e 	sts	0x0EFC, r24
	     if(cursorpos == 0){//Battle Game
    b762:	11 23       	and	r17, r17
    b764:	11 f4       	brne	.+4      	; 0xb76a <MainMenu+0x130>
		    guistate = GSETUPMENU;
    b766:	88 e0       	ldi	r24, 0x08	; 8
    b768:	06 c0       	rjmp	.+12     	; 0xb776 <MainMenu+0x13c>

		 }
		 else if(cursorpos == 1){//Uzebox Live
    b76a:	11 30       	cpi	r17, 0x01	; 1
    b76c:	19 f4       	brne	.+6      	; 0xb774 <MainMenu+0x13a>
            guistate = GMAINMENU;
    b76e:	10 93 0e 10 	sts	0x100E, r17
    b772:	03 c0       	rjmp	.+6      	; 0xb77a <MainMenu+0x140>
			
		 }
		 else{//option
            guistate = GMAINMENU;//GOPTIONMENU;
    b774:	81 e0       	ldi	r24, 0x01	; 1
    b776:	80 93 0e 10 	sts	0x100E, r24
		 }
		 FadeOut(1,true);
    b77a:	81 e0       	ldi	r24, 0x01	; 1
    b77c:	61 e0       	ldi	r22, 0x01	; 1
    b77e:	0e 94 66 4a 	call	0x94cc	; 0x94cc <FadeOut>
		 FadeIn(1,false);
    b782:	81 e0       	ldi	r24, 0x01	; 1
    b784:	60 e0       	ldi	r22, 0x00	; 0
    b786:	0e 94 4e 4a 	call	0x949c	; 0x949c <FadeIn>
		  BlankCursor(10,15,2,4);
		  DrawCursor(10,15+cursorpos);
		  
	  WaitVsync(1);
   }
}
    b78a:	1f 91       	pop	r17
    b78c:	0f 91       	pop	r16
    b78e:	ff 90       	pop	r15
    b790:	ef 90       	pop	r14
    b792:	df 90       	pop	r13
    b794:	cf 90       	pop	r12
    b796:	08 95       	ret
bool StartDown(u8 i) {return(padstate[i] & BTN_START)  && !(oldpadstate[i] & BTN_START);}
bool UpDown(u8 i)    {return(padstate[i] & BTN_UP)     && !(oldpadstate[i] & BTN_UP);   }
    b798:	80 91 7f 0f 	lds	r24, 0x0F7F
    b79c:	84 fd       	sbrc	r24, 4
    b79e:	26 c0       	rjmp	.+76     	; 0xb7ec <MainMenu+0x1b2>
		 FadeOut(1,true);
		 FadeIn(1,false);
		 return;
	  }   
	  else if(UpDown(0)){
	     if(--cursorpos > 254)
    b7a0:	11 50       	subi	r17, 0x01	; 1
    b7a2:	50 f4       	brcc	.+20     	; 0xb7b8 <MainMenu+0x17e>
    b7a4:	12 e0       	ldi	r17, 0x02	; 2
    b7a6:	08 c0       	rjmp	.+16     	; 0xb7b8 <MainMenu+0x17e>
bool StartDown(u8 i) {return(padstate[i] & BTN_START)  && !(oldpadstate[i] & BTN_START);}
bool UpDown(u8 i)    {return(padstate[i] & BTN_UP)     && !(oldpadstate[i] & BTN_UP);   }
bool DownDown(u8 i)  {return(padstate[i] & BTN_DOWN)   && !(oldpadstate[i] & BTN_DOWN); }
    b7a8:	80 91 7f 0f 	lds	r24, 0x0F7F
    b7ac:	85 fd       	sbrc	r24, 5
    b7ae:	04 c0       	rjmp	.+8      	; 0xb7b8 <MainMenu+0x17e>
	  }   
	  else if(UpDown(0)){
	     if(--cursorpos > 254)
		    cursorpos = 2;
	  }else if(DownDown(0)){
	     if(++cursorpos > 2)
    b7b0:	1f 5f       	subi	r17, 0xFF	; 255
    b7b2:	13 30       	cpi	r17, 0x03	; 3
    b7b4:	08 f0       	brcs	.+2      	; 0xb7b8 <MainMenu+0x17e>
    b7b6:	10 e0       	ldi	r17, 0x00	; 0
		    cursorpos = 0;
	  }  
	  

          
		  BlankCursor(10,15,2,4);
    b7b8:	8a e0       	ldi	r24, 0x0A	; 10
    b7ba:	6f e0       	ldi	r22, 0x0F	; 15
    b7bc:	42 e0       	ldi	r20, 0x02	; 2
    b7be:	24 e0       	ldi	r18, 0x04	; 4
    b7c0:	0e 94 11 57 	call	0xae22	; 0xae22 <BlankCursor>
   SetTile(15,0,ZERO_OFFSET+ten);
   SetTile(16,0,ZERO_OFFSET+sec);
}

void SetMapTile(u8 x, u8 y, u8 t){
   int off = (y*30)+x;//((y<<1)*30)+(x<<1);
    b7c4:	11 5f       	subi	r17, 0xF1	; 241
    b7c6:	1c 9d       	mul	r17, r12
    b7c8:	f0 01       	movw	r30, r0
    b7ca:	11 24       	eor	r1, r1
    b7cc:	1f 50       	subi	r17, 0x0F	; 15
   t+=RAM_TILES_COUNT;//t = (t<<2)+RAM_TILES_COUNT;//t = (tileset*(NUMTILES*4)) + (t*4) + RAM_TILES_COUNT;
   
   vram[off+ 0] = t++;
    b7ce:	e6 5d       	subi	r30, 0xD6	; 214
    b7d0:	fe 4f       	sbci	r31, 0xFE	; 254
    b7d2:	d0 82       	st	Z, r13
   vram[off+ 1] = t++;
    b7d4:	e1 82       	std	Z+1, r14	; 0x01
   vram[off+30] = t++;
    b7d6:	f6 8e       	std	Z+30, r15	; 0x1e
   vram[off+31] = t;
    b7d8:	07 8f       	std	Z+31, r16	; 0x1f
		  DrawCursor(10,15+cursorpos);
		  
	  WaitVsync(1);
    b7da:	81 e0       	ldi	r24, 0x01	; 1
    b7dc:	90 e0       	ldi	r25, 0x00	; 0
    b7de:	0e 94 a3 4a 	call	0x9546	; 0x9546 <WaitVsync>
    b7e2:	7f cf       	rjmp	.-258    	; 0xb6e2 <MainMenu+0xa8>
bool StartDown(u8 i) {return(padstate[i] & BTN_START)  && !(oldpadstate[i] & BTN_START);}
bool UpDown(u8 i)    {return(padstate[i] & BTN_UP)     && !(oldpadstate[i] & BTN_UP);   }
bool DownDown(u8 i)  {return(padstate[i] & BTN_DOWN)   && !(oldpadstate[i] & BTN_DOWN); }
bool LeftDown(u8 i)  {return(padstate[i] & BTN_LEFT)   && !(oldpadstate[i] & BTN_LEFT); }
bool RightDown(u8 i) {return(padstate[i] & BTN_RIGHT)  && !(oldpadstate[i] & BTN_RIGHT); }
bool ADown(u8 i) {return(padstate[i] & BTN_A)  && !(oldpadstate[i] & BTN_A); }
    b7e4:	30 fd       	sbrc	r19, 0
    b7e6:	b0 cf       	rjmp	.-160    	; 0xb748 <MainMenu+0x10e>
bool StartDown(u8 i) {return(padstate[i] & BTN_START)  && !(oldpadstate[i] & BTN_START);}
bool UpDown(u8 i)    {return(padstate[i] & BTN_UP)     && !(oldpadstate[i] & BTN_UP);   }
    b7e8:	24 fd       	sbrc	r18, 4
    b7ea:	d6 cf       	rjmp	.-84     	; 0xb798 <MainMenu+0x15e>
bool DownDown(u8 i)  {return(padstate[i] & BTN_DOWN)   && !(oldpadstate[i] & BTN_DOWN); }
    b7ec:	25 ff       	sbrs	r18, 5
    b7ee:	e4 cf       	rjmp	.-56     	; 0xb7b8 <MainMenu+0x17e>
    b7f0:	db cf       	rjmp	.-74     	; 0xb7a8 <MainMenu+0x16e>

0000b7f2 <Gui>:

      WaitVsync(1);
   }
}

void Gui(){
    b7f2:	14 c0       	rjmp	.+40     	; 0xb81c <Gui+0x2a>
   while(guistate){
   switch(guistate){
    b7f4:	89 30       	cpi	r24, 0x09	; 9
    b7f6:	b1 f0       	breq	.+44     	; 0xb824 <Gui+0x32>
    b7f8:	8a 30       	cpi	r24, 0x0A	; 10
    b7fa:	28 f4       	brcc	.+10     	; 0xb806 <Gui+0x14>
    b7fc:	88 23       	and	r24, r24
    b7fe:	91 f0       	breq	.+36     	; 0xb824 <Gui+0x32>
    b800:	88 30       	cpi	r24, 0x08	; 8
    b802:	51 f4       	brne	.+20     	; 0xb818 <Gui+0x26>
    b804:	03 c0       	rjmp	.+6      	; 0xb80c <Gui+0x1a>
    b806:	8a 30       	cpi	r24, 0x0A	; 10
    b808:	39 f4       	brne	.+14     	; 0xb818 <Gui+0x26>
    b80a:	03 c0       	rjmp	.+6      	; 0xb812 <Gui+0x20>
   case 0:
   return;
   case GSETUPMENU:
   SetupMenu();
    b80c:	0e 94 11 58 	call	0xb022	; 0xb022 <SetupMenu>
    b810:	08 95       	ret
   return;
   case GMAPSELECTMENU:
   MapSelectMenu();
   return;
   case GOPTIONMENU:
   OptionMenu();
    b812:	0e 94 b8 5a 	call	0xb570	; 0xb570 <OptionMenu>
    b816:	08 95       	ret
   return;
   default:
   MainMenu();
    b818:	0e 94 1d 5b 	call	0xb63a	; 0xb63a <MainMenu>
      WaitVsync(1);
   }
}

void Gui(){
   while(guistate){
    b81c:	80 91 0e 10 	lds	r24, 0x100E
    b820:	88 23       	and	r24, r24
    b822:	41 f7       	brne	.-48     	; 0xb7f4 <Gui+0x2>
    b824:	08 95       	ret

0000b826 <Input>:
bool DetectMultitap(){
   multitap = false;
   return false;
}

void Input(){
    b826:	a0 e0       	ldi	r26, 0x00	; 0
    b828:	b0 e0       	ldi	r27, 0x00	; 0
    b82a:	e9 e1       	ldi	r30, 0x19	; 25
    b82c:	fc e5       	ldi	r31, 0x5C	; 92
    b82e:	0c 94 b0 70 	jmp	0xe160	; 0xe160 <__prologue_saves__+0xe>
   //if(guistate){return;}
   if(!roundtime)
    b832:	80 91 c2 0f 	lds	r24, 0x0FC2
    b836:	90 91 c3 0f 	lds	r25, 0x0FC3
    b83a:	89 2b       	or	r24, r25
    b83c:	09 f4       	brne	.+2      	; 0xb840 <Input+0x1a>
    b83e:	e6 c0       	rjmp	.+460    	; 0xba0c <Input+0x1e6>
      return;
    b840:	ff 24       	eor	r15, r15
	  player_ftime[0] = 0;
	  //player_attrb2[i] ^= GHOST;
	  player_attrb[0] |= POISON;
	 // poison_type = POISON_FAST;
	  //player_attrb2[0] |= 0b01100000;
	  roundtime = 59*SEC;
    b842:	f4 ed       	ldi	r31, 0xD4	; 212
    b844:	cf 2e       	mov	r12, r31
    b846:	fd e0       	ldi	r31, 0x0D	; 13
    b848:	df 2e       	mov	r13, r31
		 }
		 else{
		    if(padstate[i] & BTN_UP)        {player_state[i] = MOVE|UP;}
            else if(padstate[i] & BTN_DOWN) {player_state[i] = MOVE|DOWN;}
            else if(padstate[i] & BTN_LEFT) {player_state[i] = MOVE|LEFT;}
            else if(padstate[i] & BTN_RIGHT){player_state[i] = MOVE|RIGHT;}
    b84a:	e8 e2       	ldi	r30, 0x28	; 40
    b84c:	9e 2e       	mov	r9, r30
		    else if(padstate[i] & BTN_B)    {player_state[i] |= GRAB;}
		 }
		 else{
		    if(padstate[i] & BTN_UP)        {player_state[i] = MOVE|UP;}
            else if(padstate[i] & BTN_DOWN) {player_state[i] = MOVE|DOWN;}
            else if(padstate[i] & BTN_LEFT) {player_state[i] = MOVE|LEFT;}
    b84e:	74 e2       	ldi	r23, 0x24	; 36
    b850:	a7 2e       	mov	r10, r23
            else if(padstate[i] & BTN_RIGHT){player_state[i] = MOVE|LEFT;}
		    else if(padstate[i] & BTN_B)    {player_state[i] |= GRAB;}
		 }
		 else{
		    if(padstate[i] & BTN_UP)        {player_state[i] = MOVE|UP;}
            else if(padstate[i] & BTN_DOWN) {player_state[i] = MOVE|DOWN;}
    b852:	62 e2       	ldi	r22, 0x22	; 34
    b854:	b6 2e       	mov	r11, r22
            else if(padstate[i] & BTN_LEFT) {player_state[i] = MOVE|RIGHT;}
            else if(padstate[i] & BTN_RIGHT){player_state[i] = MOVE|LEFT;}
		    else if(padstate[i] & BTN_B)    {player_state[i] |= GRAB;}
		 }
		 else{
		    if(padstate[i] & BTN_UP)        {player_state[i] = MOVE|UP;}
    b856:	51 e2       	ldi	r21, 0x21	; 33
    b858:	e5 2e       	mov	r14, r21
    b85a:	c5 c0       	rjmp	.+394    	; 0xb9e6 <Input+0x1c0>
extern bool StartDown(u8 i);
extern bool ADown(u8 i);
extern bool BDown(u8 i);
extern void KillPlayer(u8 p);
inline void FillPad(u8 i){
   oldpadstate[i] = padstate[i];
    b85c:	cf 2d       	mov	r28, r15
    b85e:	d0 e0       	ldi	r29, 0x00	; 0
    b860:	fe 01       	movw	r30, r28
    b862:	ee 0f       	add	r30, r30
    b864:	ff 1f       	adc	r31, r31
    b866:	8f 01       	movw	r16, r30
    b868:	09 57       	subi	r16, 0x79	; 121
    b86a:	10 4f       	sbci	r17, 0xF0	; 240
    b86c:	d8 01       	movw	r26, r16
    b86e:	8d 91       	ld	r24, X+
    b870:	9c 91       	ld	r25, X
    b872:	11 97       	sbiw	r26, 0x01	; 1
    b874:	e1 58       	subi	r30, 0x81	; 129
    b876:	f0 4f       	sbci	r31, 0xF0	; 240
    b878:	91 83       	std	Z+1, r25	; 0x01
    b87a:	80 83       	st	Z, r24
   
  if(i > 0){// if(botgoal[i]){
    b87c:	ff 20       	and	r15, r15
    b87e:	19 f0       	breq	.+6      	; 0xb886 <Input+0x60>
      padstate[i] = BotFillPad(i);
    b880:	1d 92       	st	X+, r1
    b882:	1c 92       	st	X, r1
    b884:	09 c0       	rjmp	.+18     	; 0xb898 <Input+0x72>
	 // if(multitap)//skip over this controller
	   //  ReadJoypad(i);
	   return;
   }

   if(!multitap)
    b886:	80 91 fa 0e 	lds	r24, 0x0EFA
    b88a:	88 23       	and	r24, r24
    b88c:	29 f4       	brne	.+10     	; 0xb898 <Input+0x72>
      padstate[i] = ReadJoypad(i);
    b88e:	0e 94 a2 44 	call	0x8944	; 0x8944 <ReadJoypad>
    b892:	f8 01       	movw	r30, r16
    b894:	91 83       	std	Z+1, r25	; 0x01
    b896:	80 83       	st	Z, r24
      return;

   for(u8 i=0;i<numplayers;i++){
	  FillPad(i);

      if(player_state[i] == DYING)
    b898:	de 01       	movw	r26, r28
    b89a:	aa 53       	subi	r26, 0x3A	; 58
    b89c:	b0 4f       	sbci	r27, 0xF0	; 240
    b89e:	9c 91       	ld	r25, X
    b8a0:	9f 3f       	cpi	r25, 0xFF	; 255
    b8a2:	09 f4       	brne	.+2      	; 0xb8a6 <Input+0x80>
    b8a4:	9f c0       	rjmp	.+318    	; 0xb9e4 <Input+0x1be>
	     continue;
 
      //if(StartDown(0)){guistate=GINGAMEMENU|GUIJUSTSTARTED;}

	  if(!player_offset[i]){
    b8a6:	fe 01       	movw	r30, r28
    b8a8:	e2 50       	subi	r30, 0x02	; 2
    b8aa:	f0 4f       	sbci	r31, 0xF0	; 240
    b8ac:	80 81       	ld	r24, Z
    b8ae:	88 23       	and	r24, r24
    b8b0:	09 f0       	breq	.+2      	; 0xb8b4 <Input+0x8e>
    b8b2:	4e c0       	rjmp	.+156    	; 0xb950 <Input+0x12a>
         if(poison_type == POISON_REVERSE && player_attrb[i] & POISON){//REVERSED CONTROLS
    b8b4:	80 91 bd 0f 	lds	r24, 0x0FBD
    b8b8:	84 30       	cpi	r24, 0x04	; 4
    b8ba:	09 f5       	brne	.+66     	; 0xb8fe <Input+0xd8>
    b8bc:	fe 01       	movw	r30, r28
    b8be:	ed 5e       	subi	r30, 0xED	; 237
    b8c0:	ff 4e       	sbci	r31, 0xEF	; 239
    b8c2:	80 81       	ld	r24, Z
    b8c4:	83 ff       	sbrs	r24, 3
    b8c6:	1b c0       	rjmp	.+54     	; 0xb8fe <Input+0xd8>
		    if(padstate[i] & BTN_UP)        {player_state[i] = MOVE|DOWN;}
    b8c8:	fe 01       	movw	r30, r28
    b8ca:	ee 0f       	add	r30, r30
    b8cc:	ff 1f       	adc	r31, r31
    b8ce:	e9 57       	subi	r30, 0x79	; 121
    b8d0:	f0 4f       	sbci	r31, 0xF0	; 240
    b8d2:	80 81       	ld	r24, Z
    b8d4:	84 ff       	sbrs	r24, 4
    b8d6:	02 c0       	rjmp	.+4      	; 0xb8dc <Input+0xb6>
    b8d8:	bc 92       	st	X, r11
    b8da:	3a c0       	rjmp	.+116    	; 0xb950 <Input+0x12a>
            else if(padstate[i] & BTN_DOWN) {player_state[i] = MOVE|UP;}
    b8dc:	85 ff       	sbrs	r24, 5
    b8de:	02 c0       	rjmp	.+4      	; 0xb8e4 <Input+0xbe>
    b8e0:	ec 92       	st	X, r14
    b8e2:	36 c0       	rjmp	.+108    	; 0xb950 <Input+0x12a>
            else if(padstate[i] & BTN_LEFT) {player_state[i] = MOVE|RIGHT;}
    b8e4:	86 ff       	sbrs	r24, 6
    b8e6:	02 c0       	rjmp	.+4      	; 0xb8ec <Input+0xc6>
    b8e8:	9c 92       	st	X, r9
    b8ea:	32 c0       	rjmp	.+100    	; 0xb950 <Input+0x12a>
            else if(padstate[i] & BTN_RIGHT){player_state[i] = MOVE|LEFT;}
    b8ec:	87 ff       	sbrs	r24, 7
    b8ee:	02 c0       	rjmp	.+4      	; 0xb8f4 <Input+0xce>
    b8f0:	ac 92       	st	X, r10
    b8f2:	2e c0       	rjmp	.+92     	; 0xb950 <Input+0x12a>
		    else if(padstate[i] & BTN_B)    {player_state[i] |= GRAB;}
    b8f4:	80 ff       	sbrs	r24, 0
    b8f6:	2c c0       	rjmp	.+88     	; 0xb950 <Input+0x12a>
    b8f8:	90 64       	ori	r25, 0x40	; 64
    b8fa:	9c 93       	st	X, r25
    b8fc:	29 c0       	rjmp	.+82     	; 0xb950 <Input+0x12a>
		 }
		 else{
		    if(padstate[i] & BTN_UP)        {player_state[i] = MOVE|UP;}
    b8fe:	fe 01       	movw	r30, r28
    b900:	ee 0f       	add	r30, r30
    b902:	ff 1f       	adc	r31, r31
    b904:	e9 57       	subi	r30, 0x79	; 121
    b906:	f0 4f       	sbci	r31, 0xF0	; 240
    b908:	80 81       	ld	r24, Z
    b90a:	84 ff       	sbrs	r24, 4
    b90c:	05 c0       	rjmp	.+10     	; 0xb918 <Input+0xf2>
    b90e:	fe 01       	movw	r30, r28
    b910:	ea 53       	subi	r30, 0x3A	; 58
    b912:	f0 4f       	sbci	r31, 0xF0	; 240
    b914:	e0 82       	st	Z, r14
    b916:	1c c0       	rjmp	.+56     	; 0xb950 <Input+0x12a>
            else if(padstate[i] & BTN_DOWN) {player_state[i] = MOVE|DOWN;}
    b918:	85 ff       	sbrs	r24, 5
    b91a:	05 c0       	rjmp	.+10     	; 0xb926 <Input+0x100>
    b91c:	fe 01       	movw	r30, r28
    b91e:	ea 53       	subi	r30, 0x3A	; 58
    b920:	f0 4f       	sbci	r31, 0xF0	; 240
    b922:	b0 82       	st	Z, r11
    b924:	15 c0       	rjmp	.+42     	; 0xb950 <Input+0x12a>
            else if(padstate[i] & BTN_LEFT) {player_state[i] = MOVE|LEFT;}
    b926:	86 ff       	sbrs	r24, 6
    b928:	05 c0       	rjmp	.+10     	; 0xb934 <Input+0x10e>
    b92a:	fe 01       	movw	r30, r28
    b92c:	ea 53       	subi	r30, 0x3A	; 58
    b92e:	f0 4f       	sbci	r31, 0xF0	; 240
    b930:	a0 82       	st	Z, r10
    b932:	0e c0       	rjmp	.+28     	; 0xb950 <Input+0x12a>
            else if(padstate[i] & BTN_RIGHT){player_state[i] = MOVE|RIGHT;}
    b934:	87 ff       	sbrs	r24, 7
    b936:	05 c0       	rjmp	.+10     	; 0xb942 <Input+0x11c>
    b938:	fe 01       	movw	r30, r28
    b93a:	ea 53       	subi	r30, 0x3A	; 58
    b93c:	f0 4f       	sbci	r31, 0xF0	; 240
    b93e:	90 82       	st	Z, r9
    b940:	07 c0       	rjmp	.+14     	; 0xb950 <Input+0x12a>
		    else if(padstate[i] & BTN_B)    {player_state[i] |= GRAB;}
    b942:	80 ff       	sbrs	r24, 0
    b944:	05 c0       	rjmp	.+10     	; 0xb950 <Input+0x12a>
    b946:	fe 01       	movw	r30, r28
    b948:	ea 53       	subi	r30, 0x3A	; 58
    b94a:	f0 4f       	sbci	r31, 0xF0	; 240
    b94c:	90 64       	ori	r25, 0x40	; 64
    b94e:	90 83       	st	Z, r25
         }
	  }      
      
	  if(poison_type == POISON_AUTOBOMB && player_attrb[i] & POISON && !(oldpadstate[i] & BTN_A))
    b950:	80 91 bd 0f 	lds	r24, 0x0FBD
    b954:	86 30       	cpi	r24, 0x06	; 6
    b956:	c1 f4       	brne	.+48     	; 0xb988 <Input+0x162>
    b958:	fe 01       	movw	r30, r28
    b95a:	ed 5e       	subi	r30, 0xED	; 237
    b95c:	ff 4e       	sbci	r31, 0xEF	; 239
    b95e:	80 81       	ld	r24, Z
    b960:	83 ff       	sbrs	r24, 3
    b962:	12 c0       	rjmp	.+36     	; 0xb988 <Input+0x162>
    b964:	9e 01       	movw	r18, r28
    b966:	22 0f       	add	r18, r18
    b968:	33 1f       	adc	r19, r19
    b96a:	f9 01       	movw	r30, r18
    b96c:	e1 58       	subi	r30, 0x81	; 129
    b96e:	f0 4f       	sbci	r31, 0xF0	; 240
    b970:	80 81       	ld	r24, Z
    b972:	91 81       	ldd	r25, Z+1	; 0x01
    b974:	90 fd       	sbrc	r25, 0
    b976:	08 c0       	rjmp	.+16     	; 0xb988 <Input+0x162>
	     padstate[i] |= BTN_A;
    b978:	f9 01       	movw	r30, r18
    b97a:	e9 57       	subi	r30, 0x79	; 121
    b97c:	f0 4f       	sbci	r31, 0xF0	; 240
    b97e:	80 81       	ld	r24, Z
    b980:	91 81       	ldd	r25, Z+1	; 0x01
    b982:	91 60       	ori	r25, 0x01	; 1
    b984:	91 83       	std	Z+1, r25	; 0x01
    b986:	80 83       	st	Z, r24

	  if(padstate[i] & BTN_A && !(oldpadstate[i] & BTN_A))         {player_state[i] |= BOMB;}
    b988:	de 01       	movw	r26, r28
    b98a:	aa 0f       	add	r26, r26
    b98c:	bb 1f       	adc	r27, r27
    b98e:	fd 01       	movw	r30, r26
    b990:	e9 57       	subi	r30, 0x79	; 121
    b992:	f0 4f       	sbci	r31, 0xF0	; 240
    b994:	20 81       	ld	r18, Z
    b996:	31 81       	ldd	r19, Z+1	; 0x01
    b998:	30 ff       	sbrs	r19, 0
    b99a:	0c c0       	rjmp	.+24     	; 0xb9b4 <Input+0x18e>
    b99c:	a1 58       	subi	r26, 0x81	; 129
    b99e:	b0 4f       	sbci	r27, 0xF0	; 240
    b9a0:	8d 91       	ld	r24, X+
    b9a2:	9c 91       	ld	r25, X
    b9a4:	90 fd       	sbrc	r25, 0
    b9a6:	06 c0       	rjmp	.+12     	; 0xb9b4 <Input+0x18e>
    b9a8:	fe 01       	movw	r30, r28
    b9aa:	ea 53       	subi	r30, 0x3A	; 58
    b9ac:	f0 4f       	sbci	r31, 0xF0	; 240
    b9ae:	80 81       	ld	r24, Z
    b9b0:	80 61       	ori	r24, 0x10	; 16
    b9b2:	80 83       	st	Z, r24
	  if(padstate[i] & BTN_B && !(oldpadstate[i] & BTN_B)){
    b9b4:	20 ff       	sbrs	r18, 0
    b9b6:	16 c0       	rjmp	.+44     	; 0xb9e4 <Input+0x1be>
    b9b8:	cc 0f       	add	r28, r28
    b9ba:	dd 1f       	adc	r29, r29
    b9bc:	c1 58       	subi	r28, 0x81	; 129
    b9be:	d0 4f       	sbci	r29, 0xF0	; 240
    b9c0:	88 81       	ld	r24, Y
    b9c2:	80 fd       	sbrc	r24, 0
    b9c4:	0f c0       	rjmp	.+30     	; 0xb9e4 <Input+0x1be>
//DispersePowerups(0);
//player_state[0] = UP;

	  //player_x[0] = player_y[0] = 2;
	  //player_state[0] = 0;
	  player_frame[0] = player_offset[0] = 0;
    b9c6:	10 92 fe 0f 	sts	0x0FFE, r1
    b9ca:	10 92 b9 0f 	sts	0x0FB9, r1
	  player_ftime[0] = 0;
    b9ce:	10 92 ca 0f 	sts	0x0FCA, r1
	  //player_attrb2[i] ^= GHOST;
	  player_attrb[0] |= POISON;
    b9d2:	80 91 13 10 	lds	r24, 0x1013
    b9d6:	88 60       	ori	r24, 0x08	; 8
    b9d8:	80 93 13 10 	sts	0x1013, r24
	 // poison_type = POISON_FAST;
	  //player_attrb2[0] |= 0b01100000;
	  roundtime = 59*SEC;
    b9dc:	d0 92 c3 0f 	sts	0x0FC3, r13
    b9e0:	c0 92 c2 0f 	sts	0x0FC2, r12
void Input(){
   //if(guistate){return;}
   if(!roundtime)
      return;

   for(u8 i=0;i<numplayers;i++){
    b9e4:	f3 94       	inc	r15
    b9e6:	80 91 a7 0f 	lds	r24, 0x0FA7
    b9ea:	f8 16       	cp	r15, r24
    b9ec:	08 f4       	brcc	.+2      	; 0xb9f0 <Input+0x1ca>
    b9ee:	36 cf       	rjmp	.-404    	; 0xb85c <Input+0x36>


		}
   }
   
   if(padstate[0] & BTN_START && !(oldpadstate[0] & BTN_START) && !(gamestate & VICTORY))
    b9f0:	80 91 87 0f 	lds	r24, 0x0F87
    b9f4:	83 ff       	sbrs	r24, 3
    b9f6:	0a c0       	rjmp	.+20     	; 0xba0c <Input+0x1e6>
    b9f8:	80 91 7f 0f 	lds	r24, 0x0F7F
    b9fc:	83 fd       	sbrc	r24, 3
    b9fe:	06 c0       	rjmp	.+12     	; 0xba0c <Input+0x1e6>
    ba00:	80 91 fc 0e 	lds	r24, 0x0EFC
    ba04:	86 fd       	sbrc	r24, 6
    ba06:	02 c0       	rjmp	.+4      	; 0xba0c <Input+0x1e6>
      InGameMenu();
    ba08:	0e 94 50 57 	call	0xaea0	; 0xaea0 <InGameMenu>
}
    ba0c:	cd b7       	in	r28, 0x3d	; 61
    ba0e:	de b7       	in	r29, 0x3e	; 62
    ba10:	eb e0       	ldi	r30, 0x0B	; 11
    ba12:	0c 94 cc 70 	jmp	0xe198	; 0xe198 <__epilogue_restores__+0xe>

0000ba16 <UpdateBombs>:

void SortBombs(){

}

void UpdateBombs(){
    ba16:	a9 e2       	ldi	r26, 0x29	; 41
    ba18:	b0 e0       	ldi	r27, 0x00	; 0
    ba1a:	e1 e1       	ldi	r30, 0x11	; 17
    ba1c:	fd e5       	ldi	r31, 0x5D	; 93
    ba1e:	0c 94 a9 70 	jmp	0xe152	; 0xe152 <__prologue_saves__>
    ba22:	1c 86       	std	Y+12, r1	; 0x0c

inline u8 bomb_frame(u8 b){
   if(bomb_timer[b] > EXPLODETIME)
      return pgm_read_byte( &bombframelist[(((BOMBSTARTTIME-bomb_timer[b])/10)&3)] );//WAS 20
   else
      return pgm_read_byte( &blockframelist[(((EXPLODETIME  -bomb_timer[b])/5 ))] );
    ba24:	ec e7       	ldi	r30, 0x7C	; 124
    ba26:	f9 e7       	ldi	r31, 0x79	; 121
    ba28:	24 91       	lpm	r18, Z+
    ba2a:	2f a3       	std	Y+39, r18	; 0x27

void UpdateBombs(){
   SortBombs();
   for(u8 i=0;i<MAX_BOMBS;i++){

      if(bomb_owner[i] == 255)
    ba2c:	3c 85       	ldd	r19, Y+12	; 0x0c
    ba2e:	e3 2e       	mov	r14, r19
    ba30:	ff 24       	eor	r15, r15
    ba32:	f7 01       	movw	r30, r14
    ba34:	e2 51       	subi	r30, 0x12	; 18
    ba36:	f0 4f       	sbci	r31, 0xF0	; 240
    ba38:	80 81       	ld	r24, Z
    ba3a:	8f 3f       	cpi	r24, 0xFF	; 255
    ba3c:	09 f4       	brne	.+2      	; 0xba40 <UpdateBombs+0x2a>
    ba3e:	3f c7       	rjmp	.+3710   	; 0xc8be <UpdateBombs+0xea8>
	     if(abs(player_x[bomb_owner[i]]-bomb_x[i]) > 1 || abs(player_y[bomb_owner[i]]-bomb_y[i]) > 1){
		    bomb_state[i] |= STEPPED_OFF;
		  // beep();
	  }
*/
	  if(bomb_state[i] & THROWN){
    ba40:	f7 01       	movw	r30, r14
    ba42:	e2 53       	subi	r30, 0x32	; 50
    ba44:	f0 4f       	sbci	r31, 0xF0	; 240
    ba46:	80 81       	ld	r24, Z
    ba48:	84 ff       	sbrs	r24, 4
    ba4a:	f4 c0       	rjmp	.+488    	; 0xbc34 <UpdateBombs+0x21e>
	  //When the bomb reaches it's target it converts back to tile coordinates and is done throwing. The addittional
	  //y value added for the arc effect is calculated every tick based on distance to target(in DrawBombs()).
	  //bomb_timer is temporarily used to keep track of the mid-point to calculate bomb_z(saving ram is fun...)

      bool landed = false;
	  if(bomb_state[i] & RIGHT){
    ba4c:	83 ff       	sbrs	r24, 3
    ba4e:	0a c0       	rjmp	.+20     	; 0xba64 <UpdateBombs+0x4e>
	     bomb_x[i] += BOMBSPEED;
    ba50:	f7 01       	movw	r30, r14
    ba52:	e5 5e       	subi	r30, 0xE5	; 229
    ba54:	ff 4e       	sbci	r31, 0xEF	; 239
    ba56:	80 81       	ld	r24, Z
    ba58:	8c 5f       	subi	r24, 0xFC	; 252
    ba5a:	80 83       	st	Z, r24
	     if(bomb_x[i] >= bomb_offset[i])
    ba5c:	f7 01       	movw	r30, r14
    ba5e:	e4 5d       	subi	r30, 0xD4	; 212
    ba60:	ff 4e       	sbci	r31, 0xEF	; 239
    ba62:	22 c0       	rjmp	.+68     	; 0xbaa8 <UpdateBombs+0x92>
		    landed = true;
      }
	  else if(bomb_state[i] & LEFT){
    ba64:	82 ff       	sbrs	r24, 2
    ba66:	0d c0       	rjmp	.+26     	; 0xba82 <UpdateBombs+0x6c>
	     bomb_x[i] -= BOMBSPEED;
    ba68:	f7 01       	movw	r30, r14
    ba6a:	e5 5e       	subi	r30, 0xE5	; 229
    ba6c:	ff 4e       	sbci	r31, 0xEF	; 239
    ba6e:	80 81       	ld	r24, Z
    ba70:	84 50       	subi	r24, 0x04	; 4
    ba72:	80 83       	st	Z, r24
	     if(bomb_x[i] <= bomb_offset[i])
    ba74:	f7 01       	movw	r30, r14
    ba76:	e4 5d       	subi	r30, 0xD4	; 212
    ba78:	ff 4e       	sbci	r31, 0xEF	; 239
    ba7a:	90 81       	ld	r25, Z
    ba7c:	98 17       	cp	r25, r24
    ba7e:	c0 f4       	brcc	.+48     	; 0xbab0 <UpdateBombs+0x9a>
    ba80:	c4 c0       	rjmp	.+392    	; 0xbc0a <UpdateBombs+0x1f4>
    ba82:	71 e9       	ldi	r23, 0x91	; 145
    ba84:	c7 2e       	mov	r12, r23
    ba86:	7f e0       	ldi	r23, 0x0F	; 15
    ba88:	d7 2e       	mov	r13, r23
    ba8a:	ce 0c       	add	r12, r14
    ba8c:	df 1c       	adc	r13, r15
    ba8e:	f7 01       	movw	r30, r14
    ba90:	e2 52       	subi	r30, 0x22	; 34
    ba92:	f0 4f       	sbci	r31, 0xF0	; 240
		    landed = true;
	  }
	  else if(bomb_state[i] & DOWN){
    ba94:	81 ff       	sbrs	r24, 1
    ba96:	04 c0       	rjmp	.+8      	; 0xbaa0 <UpdateBombs+0x8a>
	     bomb_y[i] += BOMBSPEED;
    ba98:	d6 01       	movw	r26, r12
    ba9a:	8c 91       	ld	r24, X
    ba9c:	8c 5f       	subi	r24, 0xFC	; 252
    ba9e:	03 c0       	rjmp	.+6      	; 0xbaa6 <UpdateBombs+0x90>
	     if(bomb_y[i] >= bomb_xtra[i])
		    landed = true;
	  }
	  else{
	     bomb_y[i] -= BOMBSPEED;
    baa0:	d6 01       	movw	r26, r12
    baa2:	8c 91       	ld	r24, X
    baa4:	84 50       	subi	r24, 0x04	; 4
    baa6:	8c 93       	st	X, r24
	     if(bomb_y[i] >= bomb_xtra[i])
    baa8:	90 81       	ld	r25, Z
    baaa:	89 17       	cp	r24, r25
    baac:	08 f4       	brcc	.+2      	; 0xbab0 <UpdateBombs+0x9a>
    baae:	ad c0       	rjmp	.+346    	; 0xbc0a <UpdateBombs+0x1f4>
		    landed = true;
      }
		 
	  if(landed){//we have reached the target
		    TriggerFx(HIT_FLOOR_FX,255,true);
    bab0:	89 e0       	ldi	r24, 0x09	; 9
    bab2:	6f ef       	ldi	r22, 0xFF	; 255
    bab4:	41 e0       	ldi	r20, 0x01	; 1
    bab6:	0e 94 df 48 	call	0x91be	; 0x91be <TriggerFx>
		    TriggerFx(HIT_FLOOR_FX2,255,true);
    baba:	8a e0       	ldi	r24, 0x0A	; 10
    babc:	6f ef       	ldi	r22, 0xFF	; 255
    babe:	41 e0       	ldi	r20, 0x01	; 1
    bac0:	0e 94 df 48 	call	0x91be	; 0x91be <TriggerFx>
			bomb_timer[i] = BOMBSTARTTIME;//bomb_timer was used to keep track of arc midpoint
    bac4:	f7 01       	movw	r30, r14
    bac6:	e7 55       	subi	r30, 0x57	; 87
    bac8:	f0 4f       	sbci	r31, 0xF0	; 240
    baca:	80 ef       	ldi	r24, 0xF0	; 240
    bacc:	80 83       	st	Z, r24
			bomb_x[i] /= 8;
    bace:	f7 01       	movw	r30, r14
    bad0:	e5 5e       	subi	r30, 0xE5	; 229
    bad2:	ff 4e       	sbci	r31, 0xEF	; 239
    bad4:	30 81       	ld	r19, Z
    bad6:	36 95       	lsr	r19
    bad8:	36 95       	lsr	r19
    bada:	36 95       	lsr	r19
    badc:	30 83       	st	Z, r19
			bomb_y[i] /= 8;
    bade:	d7 01       	movw	r26, r14
    bae0:	af 56       	subi	r26, 0x6F	; 111
    bae2:	b0 4f       	sbci	r27, 0xF0	; 240
    bae4:	9c 91       	ld	r25, X
    bae6:	96 95       	lsr	r25
    bae8:	96 95       	lsr	r25
    baea:	96 95       	lsr	r25
    baec:	9c 93       	st	X, r25

			if((bomb_state[i] & 0b00001100))//up or down
    baee:	f7 01       	movw	r30, r14
    baf0:	e2 53       	subi	r30, 0x32	; 50
    baf2:	f0 4f       	sbci	r31, 0xF0	; 240
    baf4:	80 81       	ld	r24, Z
    baf6:	8c 70       	andi	r24, 0x0C	; 12
    baf8:	11 f0       	breq	.+4      	; 0xbafe <UpdateBombs+0xe8>
			   bomb_y[i]++;//HACK,WHY??!!
    bafa:	9f 5f       	subi	r25, 0xFF	; 255
    bafc:	9c 93       	st	X, r25
//BUG HERE?? should be bomb_y[i] > 21...doesn't go out of bounds anyways???
            if(bomb_x[i] < ARENA_START_X || bomb_x[i] > ARENA_START_X+25 || bomb_y[i] < ARENA_START_Y || bomb_y[i] > ARENA_START_Y+20){//went out of bounds
    bafe:	83 2f       	mov	r24, r19
    bb00:	82 50       	subi	r24, 0x02	; 2
    bb02:	8a 31       	cpi	r24, 0x1A	; 26
    bb04:	40 f4       	brcc	.+16     	; 0xbb16 <UpdateBombs+0x100>
    bb06:	f7 01       	movw	r30, r14
    bb08:	ef 56       	subi	r30, 0x6F	; 111
    bb0a:	f0 4f       	sbci	r31, 0xF0	; 240
    bb0c:	20 81       	ld	r18, Z
    bb0e:	22 23       	and	r18, r18
    bb10:	11 f0       	breq	.+4      	; 0xbb16 <UpdateBombs+0x100>
    bb12:	26 31       	cpi	r18, 0x16	; 22
    bb14:	28 f0       	brcs	.+10     	; 0xbb20 <UpdateBombs+0x10a>
			   bomb_owner[i] = 255;
    bb16:	ee ee       	ldi	r30, 0xEE	; 238
    bb18:	ff e0       	ldi	r31, 0x0F	; 15
    bb1a:	ee 0e       	add	r14, r30
    bb1c:	ff 1e       	adc	r15, r31
    bb1e:	cc c6       	rjmp	.+3480   	; 0xc8b8 <UpdateBombs+0xea2>




inline u8 GetMapTile(u8 x, u8 y){
      return (vram[(y*30)+x]-RAM_TILES_COUNT);//return (vram[122+(y*30)+x]-RAM_TILES_COUNT);
    bb20:	43 2f       	mov	r20, r19
    bb22:	50 e0       	ldi	r21, 0x00	; 0
    bb24:	82 2f       	mov	r24, r18
    bb26:	90 e0       	ldi	r25, 0x00	; 0
    bb28:	fc 01       	movw	r30, r24
    bb2a:	65 e0       	ldi	r22, 0x05	; 5
    bb2c:	ee 0f       	add	r30, r30
    bb2e:	ff 1f       	adc	r31, r31
    bb30:	6a 95       	dec	r22
    bb32:	e1 f7       	brne	.-8      	; 0xbb2c <UpdateBombs+0x116>
    bb34:	88 0f       	add	r24, r24
    bb36:	99 1f       	adc	r25, r25
    bb38:	e8 1b       	sub	r30, r24
    bb3a:	f9 0b       	sbc	r31, r25
    bb3c:	e4 0f       	add	r30, r20
    bb3e:	f5 1f       	adc	r31, r21
    bb40:	e0 5e       	subi	r30, 0xE0	; 224
    bb42:	fe 4f       	sbci	r31, 0xFE	; 254
    bb44:	e0 81       	ld	r30, Z
    bb46:	9e 2f       	mov	r25, r30
    bb48:	9f 51       	subi	r25, 0x1F	; 31

   return b;
}

bool IsSolid(u8 t){
   if(t < 4)
    bb4a:	94 30       	cpi	r25, 0x04	; 4
    bb4c:	78 f0       	brcs	.+30     	; 0xbb6c <UpdateBombs+0x156>
      return false;

   if((t >= BLOCK_START && t <= WALL_END) || (t >= BOMB_START && t <= BOMB_END) || (t >= SPECIAL_SOLID_START && t <= SPECIAL_SOLID_END) || (t >= BORDER_START))
    bb4e:	8e 2f       	mov	r24, r30
    bb50:	83 52       	subi	r24, 0x23	; 35
    bb52:	88 32       	cpi	r24, 0x28	; 40
    bb54:	08 f4       	brcc	.+2      	; 0xbb58 <UpdateBombs+0x142>
    bb56:	ba c6       	rjmp	.+3444   	; 0xc8cc <UpdateBombs+0xeb6>
    bb58:	ef 59       	subi	r30, 0x9F	; 159
    bb5a:	ec 30       	cpi	r30, 0x0C	; 12
    bb5c:	08 f4       	brcc	.+2      	; 0xbb60 <UpdateBombs+0x14a>
    bb5e:	b6 c6       	rjmp	.+3436   	; 0xc8cc <UpdateBombs+0xeb6>
    bb60:	9e 3f       	cpi	r25, 0xFE	; 254
    bb62:	09 f4       	brne	.+2      	; 0xbb66 <UpdateBombs+0x150>
    bb64:	b3 c6       	rjmp	.+3430   	; 0xc8cc <UpdateBombs+0xeb6>
    bb66:	97 3c       	cpi	r25, 0xC7	; 199
    bb68:	08 f0       	brcs	.+2      	; 0xbb6c <UpdateBombs+0x156>
    bb6a:	b0 c6       	rjmp	.+3424   	; 0xc8cc <UpdateBombs+0xeb6>
			      bomb_y[i]--;//HACK,WHY??!!

			   ThrowBomb(bomb_x[i],bomb_y[i],(bomb_state[i] & 0b00001111),2,i);
			}
			else{
			   bomb_state[i] = 0;//now a normal bomb
    bb6c:	f7 01       	movw	r30, r14
    bb6e:	e2 53       	subi	r30, 0x32	; 50
    bb70:	f0 4f       	sbci	r31, 0xF0	; 240
    bb72:	10 82       	st	Z, r1
    bb74:	06 ec       	ldi	r16, 0xC6	; 198
    bb76:	1f e0       	ldi	r17, 0x0F	; 15
    bb78:	20 e0       	ldi	r18, 0x00	; 0
    bb7a:	30 e0       	ldi	r19, 0x00	; 0
               for(u8 k=0;k<MAX_PLAYERS;k++){
                  if(abs(bomb_x[i]-player_x[k]) < 2 && abs(bomb_y[i]-player_y[k])){
    bb7c:	d7 01       	movw	r26, r14
    bb7e:	af 56       	subi	r26, 0x6F	; 111
    bb80:	b0 4f       	sbci	r27, 0xF0	; 240
				     player_state[k] |= STUNNED;
					 player_wait[k] = STUNLENGTH;
					 player_frame[k] = 0;
					 player_ftime[k] = 10;
    bb82:	6a e0       	ldi	r22, 0x0A	; 10
    bb84:	14 c0       	rjmp	.+40     	; 0xbbae <UpdateBombs+0x198>
            }

            if(IsSolid(GetMapTile(bomb_x[i],bomb_y[i]))){//we hit something solid, bounce over 1 grid space
			  
			   if((bomb_state[i] & 0b00001100))//up or down
			      bomb_y[i]--;//HACK,WHY??!!
    bb86:	f7 01       	movw	r30, r14
    bb88:	ef 56       	subi	r30, 0x6F	; 111
    bb8a:	f0 4f       	sbci	r31, 0xF0	; 240
    bb8c:	21 50       	subi	r18, 0x01	; 1
    bb8e:	20 83       	st	Z, r18

			   ThrowBomb(bomb_x[i],bomb_y[i],(bomb_state[i] & 0b00001111),2,i);
    bb90:	f7 01       	movw	r30, r14
    bb92:	ef 56       	subi	r30, 0x6F	; 111
    bb94:	f0 4f       	sbci	r31, 0xF0	; 240
    bb96:	d7 01       	movw	r26, r14
    bb98:	a2 53       	subi	r26, 0x32	; 50
    bb9a:	b0 4f       	sbci	r27, 0xF0	; 240
    bb9c:	4c 91       	ld	r20, X
    bb9e:	4f 70       	andi	r20, 0x0F	; 15
    bba0:	83 2f       	mov	r24, r19
    bba2:	60 81       	ld	r22, Z
    bba4:	22 e0       	ldi	r18, 0x02	; 2
    bba6:	0c 85       	ldd	r16, Y+12	; 0x0c
    bba8:	0e 94 75 4e 	call	0x9cea	; 0x9cea <ThrowBomb>
    bbac:	2e c0       	rjmp	.+92     	; 0xbc0a <UpdateBombs+0x1f4>
			}
			else{
			   bomb_state[i] = 0;//now a normal bomb
               for(u8 k=0;k<MAX_PLAYERS;k++){
                  if(abs(bomb_x[i]-player_x[k]) < 2 && abs(bomb_y[i]-player_y[k])){
    bbae:	f9 01       	movw	r30, r18
    bbb0:	e9 5e       	subi	r30, 0xE9	; 233
    bbb2:	ff 4e       	sbci	r31, 0xEF	; 239
    bbb4:	80 81       	ld	r24, Z
    bbb6:	fa 01       	movw	r30, r20
    bbb8:	e8 1b       	sub	r30, r24
    bbba:	f1 09       	sbc	r31, r1
    bbbc:	cf 01       	movw	r24, r30
    bbbe:	01 96       	adiw	r24, 0x01	; 1
    bbc0:	03 97       	sbiw	r24, 0x03	; 3
    bbc2:	c0 f4       	brcc	.+48     	; 0xbbf4 <UpdateBombs+0x1de>
    bbc4:	f9 01       	movw	r30, r18
    bbc6:	e5 58       	subi	r30, 0x85	; 133
    bbc8:	f0 4f       	sbci	r31, 0xF0	; 240
    bbca:	9c 91       	ld	r25, X
    bbcc:	80 81       	ld	r24, Z
    bbce:	98 17       	cp	r25, r24
    bbd0:	89 f0       	breq	.+34     	; 0xbbf4 <UpdateBombs+0x1de>
				     player_state[k] |= STUNNED;
    bbd2:	f8 01       	movw	r30, r16
    bbd4:	80 81       	ld	r24, Z
    bbd6:	80 68       	ori	r24, 0x80	; 128
    bbd8:	80 83       	st	Z, r24
					 player_wait[k] = STUNLENGTH;
    bbda:	f9 01       	movw	r30, r18
    bbdc:	e1 5f       	subi	r30, 0xF1	; 241
    bbde:	ff 4e       	sbci	r31, 0xEF	; 239
    bbe0:	8f ef       	ldi	r24, 0xFF	; 255
    bbe2:	80 83       	st	Z, r24
					 player_frame[k] = 0;
    bbe4:	f9 01       	movw	r30, r18
    bbe6:	e7 54       	subi	r30, 0x47	; 71
    bbe8:	f0 4f       	sbci	r31, 0xF0	; 240
    bbea:	10 82       	st	Z, r1
					 player_ftime[k] = 10;
    bbec:	f9 01       	movw	r30, r18
    bbee:	e6 53       	subi	r30, 0x36	; 54
    bbf0:	f0 4f       	sbci	r31, 0xF0	; 240
    bbf2:	60 83       	st	Z, r22
    bbf4:	2f 5f       	subi	r18, 0xFF	; 255
    bbf6:	3f 4f       	sbci	r19, 0xFF	; 255
    bbf8:	0f 5f       	subi	r16, 0xFF	; 255
    bbfa:	1f 4f       	sbci	r17, 0xFF	; 255

			   ThrowBomb(bomb_x[i],bomb_y[i],(bomb_state[i] & 0b00001111),2,i);
			}
			else{
			   bomb_state[i] = 0;//now a normal bomb
               for(u8 k=0;k<MAX_PLAYERS;k++){
    bbfc:	24 30       	cpi	r18, 0x04	; 4
    bbfe:	31 05       	cpc	r19, r1
    bc00:	b1 f6       	brne	.-84     	; 0xbbae <UpdateBombs+0x198>
					 player_wait[k] = STUNLENGTH;
					 player_frame[k] = 0;
					 player_ftime[k] = 10;
                  }
			   }
		       i--;
    bc02:	9c 85       	ldd	r25, Y+12	; 0x0c
    bc04:	91 50       	subi	r25, 0x01	; 1
    bc06:	9c 87       	std	Y+12, r25	; 0x0c
    bc08:	5a c6       	rjmp	.+3252   	; 0xc8be <UpdateBombs+0xea8>
			   continue;//make it redraw immediately
			}
	  }


      if(bomb_x[i] > VRAM_TILES_H*8 || bomb_y[i] > VRAM_TILES_V*8){
    bc0a:	f7 01       	movw	r30, r14
    bc0c:	e5 5e       	subi	r30, 0xE5	; 229
    bc0e:	ff 4e       	sbci	r31, 0xEF	; 239
    bc10:	80 81       	ld	r24, Z
    bc12:	81 3f       	cpi	r24, 0xF1	; 241
    bc14:	38 f4       	brcc	.+14     	; 0xbc24 <UpdateBombs+0x20e>
    bc16:	f7 01       	movw	r30, r14
    bc18:	ef 56       	subi	r30, 0x6F	; 111
    bc1a:	f0 4f       	sbci	r31, 0xF0	; 240
    bc1c:	80 81       	ld	r24, Z
    bc1e:	89 3b       	cpi	r24, 0xB9	; 185
    bc20:	08 f4       	brcc	.+2      	; 0xbc24 <UpdateBombs+0x20e>
    bc22:	4d c6       	rjmp	.+3226   	; 0xc8be <UpdateBombs+0xea8>
         bomb_owner[i] = 255;
    bc24:	ae ee       	ldi	r26, 0xEE	; 238
    bc26:	bf e0       	ldi	r27, 0x0F	; 15
    bc28:	ea 0e       	add	r14, r26
    bc2a:	fb 1e       	adc	r15, r27
    bc2c:	2f ef       	ldi	r18, 0xFF	; 255
    bc2e:	f7 01       	movw	r30, r14
    bc30:	20 83       	st	Z, r18
    bc32:	45 c6       	rjmp	.+3210   	; 0xc8be <UpdateBombs+0xea8>
	  }
         
		 continue;
	 }//state & THROWN

      if(bomb_timer[i])
    bc34:	f7 01       	movw	r30, r14
    bc36:	e7 55       	subi	r30, 0x57	; 87
    bc38:	f0 4f       	sbci	r31, 0xF0	; 240
    bc3a:	80 81       	ld	r24, Z
    bc3c:	88 23       	and	r24, r24
    bc3e:	11 f0       	breq	.+4      	; 0xbc44 <UpdateBombs+0x22e>
	     bomb_timer[i]--;
    bc40:	81 50       	subi	r24, 0x01	; 1
    bc42:	80 83       	st	Z, r24

      if(bomb_state[i] & MOVE){
    bc44:	f7 01       	movw	r30, r14
    bc46:	e2 53       	subi	r30, 0x32	; 50
    bc48:	f0 4f       	sbci	r31, 0xF0	; 240
    bc4a:	80 81       	ld	r24, Z
    bc4c:	48 2f       	mov	r20, r24
    bc4e:	85 ff       	sbrs	r24, 5
    bc50:	80 c2       	rjmp	.+1280   	; 0xc152 <UpdateBombs+0x73c>
        u8 t,x,y;
	     if(!bomb_offset[i]){//bomb was drawn with tiles last frame, restore it TODO
    bc52:	f7 01       	movw	r30, r14
    bc54:	e4 5d       	subi	r30, 0xD4	; 212
    bc56:	ff 4e       	sbci	r31, 0xEF	; 239
    bc58:	80 81       	ld	r24, Z
    bc5a:	88 23       	and	r24, r24
    bc5c:	09 f0       	breq	.+2      	; 0xbc60 <UpdateBombs+0x24a>
    bc5e:	a2 c1       	rjmp	.+836    	; 0xbfa4 <UpdateBombs+0x58e>
			//TODO--Never check for colissions when the bomb is unaligned, it cannot stop no matter what
			//TODO--BOMB WILL ENTER SOLID FOR FIRST TICK OF MOVE!!(only if artificially set in input??)
			if((bomb_state[i] & UP    && IsSolid(t=GetMapTile(x=bomb_x[i]+0,y=bomb_y[i]-1))) ||
    bc60:	40 ff       	sbrs	r20, 0
    bc62:	2d c0       	rjmp	.+90     	; 0xbcbe <UpdateBombs+0x2a8>
    bc64:	f7 01       	movw	r30, r14
    bc66:	ef 56       	subi	r30, 0x6F	; 111
    bc68:	f0 4f       	sbci	r31, 0xF0	; 240
    bc6a:	20 81       	ld	r18, Z
    bc6c:	f7 01       	movw	r30, r14
    bc6e:	e5 5e       	subi	r30, 0xE5	; 229
    bc70:	ff 4e       	sbci	r31, 0xEF	; 239
    bc72:	30 81       	ld	r19, Z
    bc74:	82 2f       	mov	r24, r18
    bc76:	81 50       	subi	r24, 0x01	; 1
    bc78:	90 e0       	ldi	r25, 0x00	; 0
    bc7a:	fc 01       	movw	r30, r24
    bc7c:	15 e0       	ldi	r17, 0x05	; 5
    bc7e:	ee 0f       	add	r30, r30
    bc80:	ff 1f       	adc	r31, r31
    bc82:	1a 95       	dec	r17
    bc84:	e1 f7       	brne	.-8      	; 0xbc7e <UpdateBombs+0x268>
    bc86:	88 0f       	add	r24, r24
    bc88:	99 1f       	adc	r25, r25
    bc8a:	e8 1b       	sub	r30, r24
    bc8c:	f9 0b       	sbc	r31, r25
    bc8e:	e3 0f       	add	r30, r19
    bc90:	f1 1d       	adc	r31, r1
    bc92:	e0 5e       	subi	r30, 0xE0	; 224
    bc94:	fe 4f       	sbci	r31, 0xFE	; 254
    bc96:	e0 81       	ld	r30, Z
    bc98:	9e 2f       	mov	r25, r30
    bc9a:	9f 51       	subi	r25, 0x1F	; 31

   return b;
}

bool IsSolid(u8 t){
   if(t < 4)
    bc9c:	94 30       	cpi	r25, 0x04	; 4
    bc9e:	78 f0       	brcs	.+30     	; 0xbcbe <UpdateBombs+0x2a8>
      return false;

   if((t >= BLOCK_START && t <= WALL_END) || (t >= BOMB_START && t <= BOMB_END) || (t >= SPECIAL_SOLID_START && t <= SPECIAL_SOLID_END) || (t >= BORDER_START))
    bca0:	8e 2f       	mov	r24, r30
    bca2:	83 52       	subi	r24, 0x23	; 35
    bca4:	88 32       	cpi	r24, 0x28	; 40
    bca6:	08 f4       	brcc	.+2      	; 0xbcaa <UpdateBombs+0x294>
    bca8:	8f c0       	rjmp	.+286    	; 0xbdc8 <UpdateBombs+0x3b2>
    bcaa:	ef 59       	subi	r30, 0x9F	; 159
    bcac:	ec 30       	cpi	r30, 0x0C	; 12
    bcae:	08 f4       	brcc	.+2      	; 0xbcb2 <UpdateBombs+0x29c>
    bcb0:	8b c0       	rjmp	.+278    	; 0xbdc8 <UpdateBombs+0x3b2>
    bcb2:	9e 3f       	cpi	r25, 0xFE	; 254
    bcb4:	09 f4       	brne	.+2      	; 0xbcb8 <UpdateBombs+0x2a2>
    bcb6:	88 c0       	rjmp	.+272    	; 0xbdc8 <UpdateBombs+0x3b2>
    bcb8:	97 3c       	cpi	r25, 0xC7	; 199
    bcba:	08 f0       	brcs	.+2      	; 0xbcbe <UpdateBombs+0x2a8>
    bcbc:	85 c0       	rjmp	.+266    	; 0xbdc8 <UpdateBombs+0x3b2>
      if(bomb_state[i] & MOVE){
        u8 t,x,y;
	     if(!bomb_offset[i]){//bomb was drawn with tiles last frame, restore it TODO
			//TODO--Never check for colissions when the bomb is unaligned, it cannot stop no matter what
			//TODO--BOMB WILL ENTER SOLID FOR FIRST TICK OF MOVE!!(only if artificially set in input??)
			if((bomb_state[i] & UP    && IsSolid(t=GetMapTile(x=bomb_x[i]+0,y=bomb_y[i]-1))) ||
    bcbe:	41 ff       	sbrs	r20, 1
    bcc0:	2d c0       	rjmp	.+90     	; 0xbd1c <UpdateBombs+0x306>
    bcc2:	f7 01       	movw	r30, r14
    bcc4:	ef 56       	subi	r30, 0x6F	; 111
    bcc6:	f0 4f       	sbci	r31, 0xF0	; 240
    bcc8:	20 81       	ld	r18, Z
    bcca:	f7 01       	movw	r30, r14
    bccc:	e5 5e       	subi	r30, 0xE5	; 229
    bcce:	ff 4e       	sbci	r31, 0xEF	; 239
    bcd0:	30 81       	ld	r19, Z
    bcd2:	82 2f       	mov	r24, r18
    bcd4:	8e 5f       	subi	r24, 0xFE	; 254
    bcd6:	90 e0       	ldi	r25, 0x00	; 0
    bcd8:	fc 01       	movw	r30, r24
    bcda:	a5 e0       	ldi	r26, 0x05	; 5
    bcdc:	ee 0f       	add	r30, r30
    bcde:	ff 1f       	adc	r31, r31
    bce0:	aa 95       	dec	r26
    bce2:	e1 f7       	brne	.-8      	; 0xbcdc <UpdateBombs+0x2c6>
    bce4:	88 0f       	add	r24, r24
    bce6:	99 1f       	adc	r25, r25
    bce8:	e8 1b       	sub	r30, r24
    bcea:	f9 0b       	sbc	r31, r25
    bcec:	e3 0f       	add	r30, r19
    bcee:	f1 1d       	adc	r31, r1
    bcf0:	e0 5e       	subi	r30, 0xE0	; 224
    bcf2:	fe 4f       	sbci	r31, 0xFE	; 254
    bcf4:	e0 81       	ld	r30, Z
    bcf6:	9e 2f       	mov	r25, r30
    bcf8:	9f 51       	subi	r25, 0x1F	; 31

   return b;
}

bool IsSolid(u8 t){
   if(t < 4)
    bcfa:	94 30       	cpi	r25, 0x04	; 4
    bcfc:	78 f0       	brcs	.+30     	; 0xbd1c <UpdateBombs+0x306>
      return false;

   if((t >= BLOCK_START && t <= WALL_END) || (t >= BOMB_START && t <= BOMB_END) || (t >= SPECIAL_SOLID_START && t <= SPECIAL_SOLID_END) || (t >= BORDER_START))
    bcfe:	8e 2f       	mov	r24, r30
    bd00:	83 52       	subi	r24, 0x23	; 35
    bd02:	88 32       	cpi	r24, 0x28	; 40
    bd04:	08 f4       	brcc	.+2      	; 0xbd08 <UpdateBombs+0x2f2>
    bd06:	60 c0       	rjmp	.+192    	; 0xbdc8 <UpdateBombs+0x3b2>
    bd08:	ef 59       	subi	r30, 0x9F	; 159
    bd0a:	ec 30       	cpi	r30, 0x0C	; 12
    bd0c:	08 f4       	brcc	.+2      	; 0xbd10 <UpdateBombs+0x2fa>
    bd0e:	5c c0       	rjmp	.+184    	; 0xbdc8 <UpdateBombs+0x3b2>
    bd10:	9e 3f       	cpi	r25, 0xFE	; 254
    bd12:	09 f4       	brne	.+2      	; 0xbd16 <UpdateBombs+0x300>
    bd14:	59 c0       	rjmp	.+178    	; 0xbdc8 <UpdateBombs+0x3b2>
    bd16:	97 3c       	cpi	r25, 0xC7	; 199
    bd18:	08 f0       	brcs	.+2      	; 0xbd1c <UpdateBombs+0x306>
    bd1a:	56 c0       	rjmp	.+172    	; 0xbdc8 <UpdateBombs+0x3b2>
      if(bomb_state[i] & MOVE){
        u8 t,x,y;
	     if(!bomb_offset[i]){//bomb was drawn with tiles last frame, restore it TODO
			//TODO--Never check for colissions when the bomb is unaligned, it cannot stop no matter what
			//TODO--BOMB WILL ENTER SOLID FOR FIRST TICK OF MOVE!!(only if artificially set in input??)
			if((bomb_state[i] & UP    && IsSolid(t=GetMapTile(x=bomb_x[i]+0,y=bomb_y[i]-1))) ||
    bd1c:	42 ff       	sbrs	r20, 2
    bd1e:	28 c0       	rjmp	.+80     	; 0xbd70 <UpdateBombs+0x35a>
    bd20:	f7 01       	movw	r30, r14
    bd22:	e5 5e       	subi	r30, 0xE5	; 229
    bd24:	ff 4e       	sbci	r31, 0xEF	; 239
    bd26:	20 81       	ld	r18, Z
    bd28:	21 50       	subi	r18, 0x01	; 1
    bd2a:	f7 01       	movw	r30, r14
    bd2c:	ef 56       	subi	r30, 0x6F	; 111
    bd2e:	f0 4f       	sbci	r31, 0xF0	; 240
    bd30:	80 81       	ld	r24, Z
    bd32:	90 e0       	ldi	r25, 0x00	; 0
    bd34:	fc 01       	movw	r30, r24
    bd36:	65 e0       	ldi	r22, 0x05	; 5
    bd38:	ee 0f       	add	r30, r30
    bd3a:	ff 1f       	adc	r31, r31
    bd3c:	6a 95       	dec	r22
    bd3e:	e1 f7       	brne	.-8      	; 0xbd38 <UpdateBombs+0x322>
    bd40:	88 0f       	add	r24, r24
    bd42:	99 1f       	adc	r25, r25
    bd44:	e8 1b       	sub	r30, r24
    bd46:	f9 0b       	sbc	r31, r25
    bd48:	e2 0f       	add	r30, r18
    bd4a:	f1 1d       	adc	r31, r1
    bd4c:	e0 5e       	subi	r30, 0xE0	; 224
    bd4e:	fe 4f       	sbci	r31, 0xFE	; 254
    bd50:	e0 81       	ld	r30, Z
    bd52:	9e 2f       	mov	r25, r30
    bd54:	9f 51       	subi	r25, 0x1F	; 31

   return b;
}

bool IsSolid(u8 t){
   if(t < 4)
    bd56:	94 30       	cpi	r25, 0x04	; 4
    bd58:	58 f0       	brcs	.+22     	; 0xbd70 <UpdateBombs+0x35a>
      return false;

   if((t >= BLOCK_START && t <= WALL_END) || (t >= BOMB_START && t <= BOMB_END) || (t >= SPECIAL_SOLID_START && t <= SPECIAL_SOLID_END) || (t >= BORDER_START))
    bd5a:	8e 2f       	mov	r24, r30
    bd5c:	83 52       	subi	r24, 0x23	; 35
    bd5e:	88 32       	cpi	r24, 0x28	; 40
    bd60:	98 f1       	brcs	.+102    	; 0xbdc8 <UpdateBombs+0x3b2>
    bd62:	ef 59       	subi	r30, 0x9F	; 159
    bd64:	ec 30       	cpi	r30, 0x0C	; 12
    bd66:	80 f1       	brcs	.+96     	; 0xbdc8 <UpdateBombs+0x3b2>
    bd68:	9e 3f       	cpi	r25, 0xFE	; 254
    bd6a:	71 f1       	breq	.+92     	; 0xbdc8 <UpdateBombs+0x3b2>
    bd6c:	97 3c       	cpi	r25, 0xC7	; 199
    bd6e:	60 f5       	brcc	.+88     	; 0xbdc8 <UpdateBombs+0x3b2>
      if(bomb_state[i] & MOVE){
        u8 t,x,y;
	     if(!bomb_offset[i]){//bomb was drawn with tiles last frame, restore it TODO
			//TODO--Never check for colissions when the bomb is unaligned, it cannot stop no matter what
			//TODO--BOMB WILL ENTER SOLID FOR FIRST TICK OF MOVE!!(only if artificially set in input??)
			if((bomb_state[i] & UP    && IsSolid(t=GetMapTile(x=bomb_x[i]+0,y=bomb_y[i]-1))) ||
    bd70:	43 ff       	sbrs	r20, 3
    bd72:	6e c0       	rjmp	.+220    	; 0xbe50 <UpdateBombs+0x43a>
    bd74:	f7 01       	movw	r30, r14
    bd76:	e5 5e       	subi	r30, 0xE5	; 229
    bd78:	ff 4e       	sbci	r31, 0xEF	; 239
    bd7a:	20 81       	ld	r18, Z
    bd7c:	2e 5f       	subi	r18, 0xFE	; 254
    bd7e:	f7 01       	movw	r30, r14
    bd80:	ef 56       	subi	r30, 0x6F	; 111
    bd82:	f0 4f       	sbci	r31, 0xF0	; 240
    bd84:	80 81       	ld	r24, Z
    bd86:	90 e0       	ldi	r25, 0x00	; 0
    bd88:	fc 01       	movw	r30, r24
    bd8a:	45 e0       	ldi	r20, 0x05	; 5
    bd8c:	ee 0f       	add	r30, r30
    bd8e:	ff 1f       	adc	r31, r31
    bd90:	4a 95       	dec	r20
    bd92:	e1 f7       	brne	.-8      	; 0xbd8c <UpdateBombs+0x376>
    bd94:	88 0f       	add	r24, r24
    bd96:	99 1f       	adc	r25, r25
    bd98:	e8 1b       	sub	r30, r24
    bd9a:	f9 0b       	sbc	r31, r25
    bd9c:	e2 0f       	add	r30, r18
    bd9e:	f1 1d       	adc	r31, r1
    bda0:	e0 5e       	subi	r30, 0xE0	; 224
    bda2:	fe 4f       	sbci	r31, 0xFE	; 254
    bda4:	e0 81       	ld	r30, Z
    bda6:	9e 2f       	mov	r25, r30
    bda8:	9f 51       	subi	r25, 0x1F	; 31

   return b;
}

bool IsSolid(u8 t){
   if(t < 4)
    bdaa:	94 30       	cpi	r25, 0x04	; 4
    bdac:	08 f4       	brcc	.+2      	; 0xbdb0 <UpdateBombs+0x39a>
    bdae:	50 c0       	rjmp	.+160    	; 0xbe50 <UpdateBombs+0x43a>
      return false;

   if((t >= BLOCK_START && t <= WALL_END) || (t >= BOMB_START && t <= BOMB_END) || (t >= SPECIAL_SOLID_START && t <= SPECIAL_SOLID_END) || (t >= BORDER_START))
    bdb0:	8e 2f       	mov	r24, r30
    bdb2:	83 52       	subi	r24, 0x23	; 35
    bdb4:	88 32       	cpi	r24, 0x28	; 40
    bdb6:	40 f0       	brcs	.+16     	; 0xbdc8 <UpdateBombs+0x3b2>
    bdb8:	ef 59       	subi	r30, 0x9F	; 159
    bdba:	ec 30       	cpi	r30, 0x0C	; 12
    bdbc:	28 f0       	brcs	.+10     	; 0xbdc8 <UpdateBombs+0x3b2>
    bdbe:	9e 3f       	cpi	r25, 0xFE	; 254
    bdc0:	19 f0       	breq	.+6      	; 0xbdc8 <UpdateBombs+0x3b2>
    bdc2:	97 3c       	cpi	r25, 0xC7	; 199
    bdc4:	08 f4       	brcc	.+2      	; 0xbdc8 <UpdateBombs+0x3b2>
    bdc6:	44 c0       	rjmp	.+136    	; 0xbe50 <UpdateBombs+0x43a>
				 // && !((bomb_state[b] & LEFT|RIGHT) && (bomb_state[i] & LEFT|RIGHT)))
				    
					//if(!(bomb_x[b] & 1) && !(bomb_y[b] & 1))//don't move unaligned bombs
				     //bomb_state[b] = bomb_state[i];
			   }*/
			   bomb_state[i] = 0;
    bdc8:	f7 01       	movw	r30, r14
    bdca:	e2 53       	subi	r30, 0x32	; 50
    bdcc:	f0 4f       	sbci	r31, 0xF0	; 240
    bdce:	10 82       	st	Z, r1
			   SetMapTile(bomb_x[i], bomb_y[i], BOMB_START+(bomb_frame(i)<<2));
    bdd0:	f7 01       	movw	r30, r14
    bdd2:	e5 5e       	subi	r30, 0xE5	; 229
    bdd4:	ff 4e       	sbci	r31, 0xEF	; 239
    bdd6:	10 81       	ld	r17, Z
    bdd8:	f7 01       	movw	r30, r14
    bdda:	ef 56       	subi	r30, 0x6F	; 111
    bddc:	f0 4f       	sbci	r31, 0xF0	; 240
    bdde:	40 81       	ld	r20, Z
const char bombframelist[] PROGMEM = {2,1,0,1,};
const char fireframelist[] PROGMEM = {0,1,2,1,0};
const char blockframelist[] PROGMEM = {0,0,1,2,3,4,};

inline u8 bomb_frame(u8 b){
   if(bomb_timer[b] > EXPLODETIME)
    bde0:	89 ea       	ldi	r24, 0xA9	; 169
    bde2:	9f e0       	ldi	r25, 0x0F	; 15
    bde4:	e8 0e       	add	r14, r24
    bde6:	f9 1e       	adc	r15, r25
    bde8:	d7 01       	movw	r26, r14
    bdea:	8c 91       	ld	r24, X
    bdec:	28 2f       	mov	r18, r24
    bdee:	30 e0       	ldi	r19, 0x00	; 0
    bdf0:	8f 31       	cpi	r24, 0x1F	; 31
    bdf2:	78 f0       	brcs	.+30     	; 0xbe12 <UpdateBombs+0x3fc>
      return pgm_read_byte( &bombframelist[(((BOMBSTARTTIME-bomb_timer[b])/10)&3)] );//WAS 20
    bdf4:	80 ef       	ldi	r24, 0xF0	; 240
    bdf6:	90 e0       	ldi	r25, 0x00	; 0
    bdf8:	82 1b       	sub	r24, r18
    bdfa:	93 0b       	sbc	r25, r19
    bdfc:	6a e0       	ldi	r22, 0x0A	; 10
    bdfe:	70 e0       	ldi	r23, 0x00	; 0
    be00:	0e 94 96 70 	call	0xe12c	; 0xe12c <__divmodhi4>
    be04:	fb 01       	movw	r30, r22
    be06:	e3 70       	andi	r30, 0x03	; 3
    be08:	f0 70       	andi	r31, 0x00	; 0
    be0a:	ed 58       	subi	r30, 0x8D	; 141
    be0c:	f6 48       	sbci	r31, 0x86	; 134
    be0e:	84 91       	lpm	r24, Z+
    be10:	0c c0       	rjmp	.+24     	; 0xbe2a <UpdateBombs+0x414>
   else
      return pgm_read_byte( &blockframelist[(((EXPLODETIME  -bomb_timer[b])/5 ))] );
    be12:	8e e1       	ldi	r24, 0x1E	; 30
    be14:	90 e0       	ldi	r25, 0x00	; 0
    be16:	82 1b       	sub	r24, r18
    be18:	93 0b       	sbc	r25, r19
    be1a:	65 e0       	ldi	r22, 0x05	; 5
    be1c:	70 e0       	ldi	r23, 0x00	; 0
    be1e:	0e 94 96 70 	call	0xe12c	; 0xe12c <__divmodhi4>
    be22:	fb 01       	movw	r30, r22
    be24:	e4 58       	subi	r30, 0x84	; 132
    be26:	f6 48       	sbci	r31, 0x86	; 134
    be28:	84 91       	lpm	r24, Z+
   SetTile(15,0,ZERO_OFFSET+ten);
   SetTile(16,0,ZERO_OFFSET+sec);
}

void SetMapTile(u8 x, u8 y, u8 t){
   int off = (y*30)+x;//((y<<1)*30)+(x<<1);
    be2a:	be e1       	ldi	r27, 0x1E	; 30
    be2c:	4b 9f       	mul	r20, r27
    be2e:	f0 01       	movw	r30, r0
    be30:	11 24       	eor	r1, r1
    be32:	e1 0f       	add	r30, r17
    be34:	f1 1d       	adc	r31, r1
   t+=RAM_TILES_COUNT;//t = (t<<2)+RAM_TILES_COUNT;//t = (tileset*(NUMTILES*4)) + (t*4) + RAM_TILES_COUNT;
    be36:	88 0f       	add	r24, r24
    be38:	88 0f       	add	r24, r24
    be3a:	81 56       	subi	r24, 0x61	; 97
   
   vram[off+ 0] = t++;
    be3c:	e0 5e       	subi	r30, 0xE0	; 224
    be3e:	fe 4f       	sbci	r31, 0xFE	; 254
    be40:	80 83       	st	Z, r24
    be42:	8f 5f       	subi	r24, 0xFF	; 255
   vram[off+ 1] = t++;
    be44:	81 83       	std	Z+1, r24	; 0x01
    be46:	8f 5f       	subi	r24, 0xFF	; 255
   vram[off+30] = t++;
    be48:	86 8f       	std	Z+30, r24	; 0x1e
   vram[off+31] = t;
    be4a:	8f 5f       	subi	r24, 0xFF	; 255
    be4c:	87 8f       	std	Z+31, r24	; 0x1f
    be4e:	37 c5       	rjmp	.+2670   	; 0xc8be <UpdateBombs+0xea8>
			   }*/
			   bomb_state[i] = 0;
			   SetMapTile(bomb_x[i], bomb_y[i], BOMB_START+(bomb_frame(i)<<2));
               continue;
			}
            if(!(bomb_x[i]&1) && !(bomb_y[i]&1)){//bomb is grid aligned so could stop moving
    be50:	f7 01       	movw	r30, r14
    be52:	e5 5e       	subi	r30, 0xE5	; 229
    be54:	ff 4e       	sbci	r31, 0xEF	; 239
    be56:	80 81       	ld	r24, Z
    be58:	a8 2e       	mov	r10, r24
    be5a:	bb 24       	eor	r11, r11
    be5c:	80 fd       	sbrc	r24, 0
    be5e:	a2 c0       	rjmp	.+324    	; 0xbfa4 <UpdateBombs+0x58e>
    be60:	f7 01       	movw	r30, r14
    be62:	ef 56       	subi	r30, 0x6F	; 111
    be64:	f0 4f       	sbci	r31, 0xF0	; 240
    be66:	80 81       	ld	r24, Z
    be68:	80 fd       	sbrc	r24, 0
    be6a:	9c c0       	rjmp	.+312    	; 0xbfa4 <UpdateBombs+0x58e>
    be6c:	26 ec       	ldi	r18, 0xC6	; 198
    be6e:	c2 2e       	mov	r12, r18
    be70:	2f e0       	ldi	r18, 0x0F	; 15
    be72:	d2 2e       	mov	r13, r18
    be74:	07 e1       	ldi	r16, 0x17	; 23
    be76:	10 e1       	ldi	r17, 0x10	; 16
    be78:	2b e7       	ldi	r18, 0x7B	; 123
    be7a:	3f e0       	ldi	r19, 0x0F	; 15
    be7c:	39 a7       	std	Y+41, r19	; 0x29
    be7e:	28 a7       	std	Y+40, r18	; 0x28

			   for(u8 j=0;j<MAX_PLAYERS;j++){
			  // continue;//TODO THIS ISNT CORRECT, NEED TO CHECK THE BOMB IS MOVING TOWARDS PLAYER(IS STUNNING A KICKER)
			      if(player_state[j] == DYING)
				     continue;
                  if(((bomb_state[i] & LEFT || bomb_state[i] & RIGHT) && abs(player_x[j]-bomb_x[i]) < 3 && abs(player_y[j]-bomb_y[i]) < 1)
    be80:	9e ec       	ldi	r25, 0xCE	; 206
    be82:	49 2e       	mov	r4, r25
    be84:	9f e0       	ldi	r25, 0x0F	; 15
    be86:	59 2e       	mov	r5, r25
    be88:	4e 0c       	add	r4, r14
    be8a:	5f 1c       	adc	r5, r15
				  || (abs(player_x[j]-bomb_x[i]) < 2 && abs(player_y[j]-bomb_y[i]) < 2)){//collided with player
                     bomb_state[i] = 0;
				     SetMapTile(bomb_x[i],bomb_y[i], BOMB_START+(bomb_frame(i)<<2));
    be8c:	4f 01       	movw	r8, r30
const char bombframelist[] PROGMEM = {2,1,0,1,};
const char fireframelist[] PROGMEM = {0,1,2,1,0};
const char blockframelist[] PROGMEM = {0,0,1,2,3,4,};

inline u8 bomb_frame(u8 b){
   if(bomb_timer[b] > EXPLODETIME)
    be8e:	a7 01       	movw	r20, r14
    be90:	47 55       	subi	r20, 0x57	; 87
    be92:	50 4f       	sbci	r21, 0xF0	; 240
    be94:	5e a3       	std	Y+38, r21	; 0x26
    be96:	4d a3       	std	Y+37, r20	; 0x25
				     continue;
                  if(((bomb_state[i] & LEFT || bomb_state[i] & RIGHT) && abs(player_x[j]-bomb_x[i]) < 3 && abs(player_y[j]-bomb_y[i]) < 1)
				  || (abs(player_x[j]-bomb_x[i]) < 2 && abs(player_y[j]-bomb_y[i]) < 2)){//collided with player
                     bomb_state[i] = 0;
				     SetMapTile(bomb_x[i],bomb_y[i], BOMB_START+(bomb_frame(i)<<2));
                     player_state[i] |= STUNNED;
    be98:	36 01       	movw	r6, r12
    be9a:	6e 0c       	add	r6, r14
    be9c:	7f 1c       	adc	r7, r15
					 player_wait[i] = STUNLENGTH;
    be9e:	8f e0       	ldi	r24, 0x0F	; 15
    bea0:	28 2e       	mov	r2, r24
    bea2:	80 e1       	ldi	r24, 0x10	; 16
    bea4:	38 2e       	mov	r3, r24
    bea6:	2e 0c       	add	r2, r14
    bea8:	3f 1c       	adc	r3, r15
			}
            if(!(bomb_x[i]&1) && !(bomb_y[i]&1)){//bomb is grid aligned so could stop moving

			   for(u8 j=0;j<MAX_PLAYERS;j++){
			  // continue;//TODO THIS ISNT CORRECT, NEED TO CHECK THE BOMB IS MOVING TOWARDS PLAYER(IS STUNNING A KICKER)
			      if(player_state[j] == DYING)
    beaa:	d6 01       	movw	r26, r12
    beac:	8c 91       	ld	r24, X
    beae:	8f 3f       	cpi	r24, 0xFF	; 255
    beb0:	09 f4       	brne	.+2      	; 0xbeb4 <UpdateBombs+0x49e>
    beb2:	67 c0       	rjmp	.+206    	; 0xbf82 <UpdateBombs+0x56c>
				     continue;
                  if(((bomb_state[i] & LEFT || bomb_state[i] & RIGHT) && abs(player_x[j]-bomb_x[i]) < 3 && abs(player_y[j]-bomb_y[i]) < 1)
    beb4:	f2 01       	movw	r30, r4
    beb6:	80 81       	ld	r24, Z
    beb8:	8c 70       	andi	r24, 0x0C	; 12
    beba:	79 f0       	breq	.+30     	; 0xbeda <UpdateBombs+0x4c4>
    bebc:	d8 01       	movw	r26, r16
    bebe:	8c 91       	ld	r24, X
    bec0:	90 e0       	ldi	r25, 0x00	; 0
    bec2:	8a 19       	sub	r24, r10
    bec4:	9b 09       	sbc	r25, r11
    bec6:	02 96       	adiw	r24, 0x02	; 2
    bec8:	05 97       	sbiw	r24, 0x05	; 5
    beca:	38 f4       	brcc	.+14     	; 0xbeda <UpdateBombs+0x4c4>
    becc:	e8 a5       	ldd	r30, Y+40	; 0x28
    bece:	f9 a5       	ldd	r31, Y+41	; 0x29
    bed0:	90 81       	ld	r25, Z
    bed2:	d4 01       	movw	r26, r8
    bed4:	8c 91       	ld	r24, X
    bed6:	98 17       	cp	r25, r24
    bed8:	a9 f0       	breq	.+42     	; 0xbf04 <UpdateBombs+0x4ee>
    beda:	f8 01       	movw	r30, r16
    bedc:	80 81       	ld	r24, Z
    bede:	90 e0       	ldi	r25, 0x00	; 0
    bee0:	8a 19       	sub	r24, r10
    bee2:	9b 09       	sbc	r25, r11
    bee4:	01 96       	adiw	r24, 0x01	; 1
    bee6:	03 97       	sbiw	r24, 0x03	; 3
    bee8:	08 f0       	brcs	.+2      	; 0xbeec <UpdateBombs+0x4d6>
    beea:	4b c0       	rjmp	.+150    	; 0xbf82 <UpdateBombs+0x56c>
    beec:	a8 a5       	ldd	r26, Y+40	; 0x28
    beee:	b9 a5       	ldd	r27, Y+41	; 0x29
    bef0:	8c 91       	ld	r24, X
    bef2:	90 e0       	ldi	r25, 0x00	; 0
    bef4:	f4 01       	movw	r30, r8
    bef6:	20 81       	ld	r18, Z
    bef8:	82 1b       	sub	r24, r18
    befa:	91 09       	sbc	r25, r1
    befc:	01 96       	adiw	r24, 0x01	; 1
    befe:	03 97       	sbiw	r24, 0x03	; 3
    bf00:	08 f0       	brcs	.+2      	; 0xbf04 <UpdateBombs+0x4ee>
    bf02:	3f c0       	rjmp	.+126    	; 0xbf82 <UpdateBombs+0x56c>
				  || (abs(player_x[j]-bomb_x[i]) < 2 && abs(player_y[j]-bomb_y[i]) < 2)){//collided with player
                     bomb_state[i] = 0;
    bf04:	d2 01       	movw	r26, r4
    bf06:	1c 92       	st	X, r1
				     SetMapTile(bomb_x[i],bomb_y[i], BOMB_START+(bomb_frame(i)<<2));
    bf08:	f4 01       	movw	r30, r8
    bf0a:	40 81       	ld	r20, Z
const char bombframelist[] PROGMEM = {2,1,0,1,};
const char fireframelist[] PROGMEM = {0,1,2,1,0};
const char blockframelist[] PROGMEM = {0,0,1,2,3,4,};

inline u8 bomb_frame(u8 b){
   if(bomb_timer[b] > EXPLODETIME)
    bf0c:	ad a1       	ldd	r26, Y+37	; 0x25
    bf0e:	be a1       	ldd	r27, Y+38	; 0x26
    bf10:	8c 91       	ld	r24, X
    bf12:	28 2f       	mov	r18, r24
    bf14:	30 e0       	ldi	r19, 0x00	; 0
    bf16:	8f 31       	cpi	r24, 0x1F	; 31
    bf18:	78 f0       	brcs	.+30     	; 0xbf38 <UpdateBombs+0x522>
      return pgm_read_byte( &bombframelist[(((BOMBSTARTTIME-bomb_timer[b])/10)&3)] );//WAS 20
    bf1a:	80 ef       	ldi	r24, 0xF0	; 240
    bf1c:	90 e0       	ldi	r25, 0x00	; 0
    bf1e:	82 1b       	sub	r24, r18
    bf20:	93 0b       	sbc	r25, r19
    bf22:	6a e0       	ldi	r22, 0x0A	; 10
    bf24:	70 e0       	ldi	r23, 0x00	; 0
    bf26:	0e 94 96 70 	call	0xe12c	; 0xe12c <__divmodhi4>
    bf2a:	fb 01       	movw	r30, r22
    bf2c:	e3 70       	andi	r30, 0x03	; 3
    bf2e:	f0 70       	andi	r31, 0x00	; 0
    bf30:	ed 58       	subi	r30, 0x8D	; 141
    bf32:	f6 48       	sbci	r31, 0x86	; 134
    bf34:	84 91       	lpm	r24, Z+
    bf36:	0c c0       	rjmp	.+24     	; 0xbf50 <UpdateBombs+0x53a>
   else
      return pgm_read_byte( &blockframelist[(((EXPLODETIME  -bomb_timer[b])/5 ))] );
    bf38:	8e e1       	ldi	r24, 0x1E	; 30
    bf3a:	90 e0       	ldi	r25, 0x00	; 0
    bf3c:	82 1b       	sub	r24, r18
    bf3e:	93 0b       	sbc	r25, r19
    bf40:	65 e0       	ldi	r22, 0x05	; 5
    bf42:	70 e0       	ldi	r23, 0x00	; 0
    bf44:	0e 94 96 70 	call	0xe12c	; 0xe12c <__divmodhi4>
    bf48:	fb 01       	movw	r30, r22
    bf4a:	e4 58       	subi	r30, 0x84	; 132
    bf4c:	f6 48       	sbci	r31, 0x86	; 134
    bf4e:	84 91       	lpm	r24, Z+
   SetTile(15,0,ZERO_OFFSET+ten);
   SetTile(16,0,ZERO_OFFSET+sec);
}

void SetMapTile(u8 x, u8 y, u8 t){
   int off = (y*30)+x;//((y<<1)*30)+(x<<1);
    bf50:	be e1       	ldi	r27, 0x1E	; 30
    bf52:	4b 9f       	mul	r20, r27
    bf54:	f0 01       	movw	r30, r0
    bf56:	11 24       	eor	r1, r1
    bf58:	ea 0d       	add	r30, r10
    bf5a:	fb 1d       	adc	r31, r11
   t+=RAM_TILES_COUNT;//t = (t<<2)+RAM_TILES_COUNT;//t = (tileset*(NUMTILES*4)) + (t*4) + RAM_TILES_COUNT;
    bf5c:	88 0f       	add	r24, r24
    bf5e:	88 0f       	add	r24, r24
    bf60:	81 56       	subi	r24, 0x61	; 97
   
   vram[off+ 0] = t++;
    bf62:	e0 5e       	subi	r30, 0xE0	; 224
    bf64:	fe 4f       	sbci	r31, 0xFE	; 254
    bf66:	80 83       	st	Z, r24
    bf68:	8f 5f       	subi	r24, 0xFF	; 255
   vram[off+ 1] = t++;
    bf6a:	81 83       	std	Z+1, r24	; 0x01
    bf6c:	8f 5f       	subi	r24, 0xFF	; 255
   vram[off+30] = t++;
    bf6e:	86 8f       	std	Z+30, r24	; 0x1e
   vram[off+31] = t;
    bf70:	8f 5f       	subi	r24, 0xFF	; 255
    bf72:	87 8f       	std	Z+31, r24	; 0x1f
				     continue;
                  if(((bomb_state[i] & LEFT || bomb_state[i] & RIGHT) && abs(player_x[j]-bomb_x[i]) < 3 && abs(player_y[j]-bomb_y[i]) < 1)
				  || (abs(player_x[j]-bomb_x[i]) < 2 && abs(player_y[j]-bomb_y[i]) < 2)){//collided with player
                     bomb_state[i] = 0;
				     SetMapTile(bomb_x[i],bomb_y[i], BOMB_START+(bomb_frame(i)<<2));
                     player_state[i] |= STUNNED;
    bf74:	f3 01       	movw	r30, r6
    bf76:	80 81       	ld	r24, Z
    bf78:	80 68       	ori	r24, 0x80	; 128
    bf7a:	80 83       	st	Z, r24
					 player_wait[i] = STUNLENGTH;
    bf7c:	ef ef       	ldi	r30, 0xFF	; 255
    bf7e:	d1 01       	movw	r26, r2
    bf80:	ec 93       	st	X, r30
    bf82:	08 94       	sec
    bf84:	c1 1c       	adc	r12, r1
    bf86:	d1 1c       	adc	r13, r1
    bf88:	0f 5f       	subi	r16, 0xFF	; 255
    bf8a:	1f 4f       	sbci	r17, 0xFF	; 255
    bf8c:	28 a5       	ldd	r18, Y+40	; 0x28
    bf8e:	39 a5       	ldd	r19, Y+41	; 0x29
    bf90:	2f 5f       	subi	r18, 0xFF	; 255
    bf92:	3f 4f       	sbci	r19, 0xFF	; 255
    bf94:	39 a7       	std	Y+41, r19	; 0x29
    bf96:	28 a7       	std	Y+40, r18	; 0x28
			   SetMapTile(bomb_x[i], bomb_y[i], BOMB_START+(bomb_frame(i)<<2));
               continue;
			}
            if(!(bomb_x[i]&1) && !(bomb_y[i]&1)){//bomb is grid aligned so could stop moving

			   for(u8 j=0;j<MAX_PLAYERS;j++){
    bf98:	3a ec       	ldi	r19, 0xCA	; 202
    bf9a:	c3 16       	cp	r12, r19
    bf9c:	3f e0       	ldi	r19, 0x0F	; 15
    bf9e:	d3 06       	cpc	r13, r19
    bfa0:	09 f0       	breq	.+2      	; 0xbfa4 <UpdateBombs+0x58e>
    bfa2:	83 cf       	rjmp	.-250    	; 0xbeaa <UpdateBombs+0x494>
			      }
			   }
			}
		 }

         bomb_offset[i] += BOMBSPEED;
    bfa4:	f7 01       	movw	r30, r14
    bfa6:	e4 5d       	subi	r30, 0xD4	; 212
    bfa8:	ff 4e       	sbci	r31, 0xEF	; 239
    bfaa:	80 81       	ld	r24, Z
    bfac:	8c 5f       	subi	r24, 0xFC	; 252
    bfae:	80 83       	st	Z, r24

         if(bomb_offset[i] > 7){
    bfb0:	88 30       	cpi	r24, 0x08	; 8
    bfb2:	08 f4       	brcc	.+2      	; 0xbfb6 <UpdateBombs+0x5a0>
    bfb4:	ce c0       	rjmp	.+412    	; 0xc152 <UpdateBombs+0x73c>
            bomb_offset[i] = 0;		    
    bfb6:	10 82       	st	Z, r1

		    if(bomb_state[i] & UP){
    bfb8:	f7 01       	movw	r30, r14
    bfba:	e2 53       	subi	r30, 0x32	; 50
    bfbc:	f0 4f       	sbci	r31, 0xF0	; 240
    bfbe:	80 81       	ld	r24, Z
    bfc0:	80 ff       	sbrs	r24, 0
    bfc2:	32 c0       	rjmp	.+100    	; 0xc028 <UpdateBombs+0x612>
			   if(!(bomb_y[i] & 1)){
    bfc4:	11 e9       	ldi	r17, 0x91	; 145
    bfc6:	c1 2e       	mov	r12, r17
    bfc8:	1f e0       	ldi	r17, 0x0F	; 15
    bfca:	d1 2e       	mov	r13, r17
    bfcc:	ce 0c       	add	r12, r14
    bfce:	df 1c       	adc	r13, r15
    bfd0:	d6 01       	movw	r26, r12
    bfd2:	8c 91       	ld	r24, X
    bfd4:	87 01       	movw	r16, r14
    bfd6:	05 5e       	subi	r16, 0xE5	; 229
    bfd8:	1f 4e       	sbci	r17, 0xEF	; 239
    bfda:	68 2f       	mov	r22, r24
    bfdc:	6f 5f       	subi	r22, 0xFF	; 255
    bfde:	80 fd       	sbrc	r24, 0
    bfe0:	0f c0       	rjmp	.+30     	; 0xc000 <UpdateBombs+0x5ea>
                  SetTile(bomb_x[i]+0,bomb_y[i]+1,FLOOR_START+0);
    bfe2:	f8 01       	movw	r30, r16
    bfe4:	80 81       	ld	r24, Z
    bfe6:	40 e0       	ldi	r20, 0x00	; 0
    bfe8:	50 e0       	ldi	r21, 0x00	; 0
    bfea:	0e 94 85 44 	call	0x890a	; 0x890a <SetTile>
                  SetTile(bomb_x[i]+1,bomb_y[i]+1,FLOOR_START+1);
    bfee:	d8 01       	movw	r26, r16
    bff0:	8c 91       	ld	r24, X
    bff2:	f6 01       	movw	r30, r12
    bff4:	60 81       	ld	r22, Z
    bff6:	6f 5f       	subi	r22, 0xFF	; 255
    bff8:	8f 5f       	subi	r24, 0xFF	; 255
    bffa:	41 e0       	ldi	r20, 0x01	; 1
    bffc:	50 e0       	ldi	r21, 0x00	; 0
    bffe:	0e c0       	rjmp	.+28     	; 0xc01c <UpdateBombs+0x606>
			   }
			   else{
                  SetTile(bomb_x[i]+0,bomb_y[i]+1,FLOOR_START+2);
    c000:	d8 01       	movw	r26, r16
    c002:	8c 91       	ld	r24, X
    c004:	42 e0       	ldi	r20, 0x02	; 2
    c006:	50 e0       	ldi	r21, 0x00	; 0
    c008:	0e 94 85 44 	call	0x890a	; 0x890a <SetTile>
                  SetTile(bomb_x[i]+1,bomb_y[i]+1,FLOOR_START+3);
    c00c:	f8 01       	movw	r30, r16
    c00e:	80 81       	ld	r24, Z
    c010:	d6 01       	movw	r26, r12
    c012:	6c 91       	ld	r22, X
    c014:	6f 5f       	subi	r22, 0xFF	; 255
    c016:	8f 5f       	subi	r24, 0xFF	; 255
    c018:	43 e0       	ldi	r20, 0x03	; 3
    c01a:	50 e0       	ldi	r21, 0x00	; 0
    c01c:	0e 94 85 44 	call	0x890a	; 0x890a <SetTile>
			   }
			   bomb_y[i]--;
    c020:	f7 01       	movw	r30, r14
    c022:	ef 56       	subi	r30, 0x6F	; 111
    c024:	f0 4f       	sbci	r31, 0xF0	; 240
    c026:	65 c0       	rjmp	.+202    	; 0xc0f2 <UpdateBombs+0x6dc>

			}else if(bomb_state[i] & DOWN){
    c028:	81 ff       	sbrs	r24, 1
    c02a:	2e c0       	rjmp	.+92     	; 0xc088 <UpdateBombs+0x672>
			   if(!(bomb_y[i] & 1)){
    c02c:	b1 e9       	ldi	r27, 0x91	; 145
    c02e:	cb 2e       	mov	r12, r27
    c030:	bf e0       	ldi	r27, 0x0F	; 15
    c032:	db 2e       	mov	r13, r27
    c034:	ce 0c       	add	r12, r14
    c036:	df 1c       	adc	r13, r15
    c038:	f6 01       	movw	r30, r12
    c03a:	60 81       	ld	r22, Z
    c03c:	87 01       	movw	r16, r14
    c03e:	05 5e       	subi	r16, 0xE5	; 229
    c040:	1f 4e       	sbci	r17, 0xEF	; 239
    c042:	60 fd       	sbrc	r22, 0
    c044:	0e c0       	rjmp	.+28     	; 0xc062 <UpdateBombs+0x64c>
                  SetTile(bomb_x[i]+0,bomb_y[i]+0,FLOOR_START+2);
    c046:	d8 01       	movw	r26, r16
    c048:	8c 91       	ld	r24, X
    c04a:	42 e0       	ldi	r20, 0x02	; 2
    c04c:	50 e0       	ldi	r21, 0x00	; 0
    c04e:	0e 94 85 44 	call	0x890a	; 0x890a <SetTile>
                  SetTile(bomb_x[i]+1,bomb_y[i]+0,FLOOR_START+3);
    c052:	f8 01       	movw	r30, r16
    c054:	80 81       	ld	r24, Z
    c056:	8f 5f       	subi	r24, 0xFF	; 255
    c058:	d6 01       	movw	r26, r12
    c05a:	6c 91       	ld	r22, X
    c05c:	43 e0       	ldi	r20, 0x03	; 3
    c05e:	50 e0       	ldi	r21, 0x00	; 0
    c060:	0d c0       	rjmp	.+26     	; 0xc07c <UpdateBombs+0x666>
			   }
			   else{
                  SetTile(bomb_x[i]+0,bomb_y[i]+0,FLOOR_START+0);
    c062:	f8 01       	movw	r30, r16
    c064:	80 81       	ld	r24, Z
    c066:	40 e0       	ldi	r20, 0x00	; 0
    c068:	50 e0       	ldi	r21, 0x00	; 0
    c06a:	0e 94 85 44 	call	0x890a	; 0x890a <SetTile>
                  SetTile(bomb_x[i]+1,bomb_y[i]+0,FLOOR_START+1);
    c06e:	d8 01       	movw	r26, r16
    c070:	8c 91       	ld	r24, X
    c072:	8f 5f       	subi	r24, 0xFF	; 255
    c074:	f6 01       	movw	r30, r12
    c076:	60 81       	ld	r22, Z
    c078:	41 e0       	ldi	r20, 0x01	; 1
    c07a:	50 e0       	ldi	r21, 0x00	; 0
    c07c:	0e 94 85 44 	call	0x890a	; 0x890a <SetTile>
			   }
			   bomb_y[i]++;
    c080:	f7 01       	movw	r30, r14
    c082:	ef 56       	subi	r30, 0x6F	; 111
    c084:	f0 4f       	sbci	r31, 0xF0	; 240
    c086:	62 c0       	rjmp	.+196    	; 0xc14c <UpdateBombs+0x736>
    c088:	87 01       	movw	r16, r14
    c08a:	05 5e       	subi	r16, 0xE5	; 229
    c08c:	1f 4e       	sbci	r17, 0xEF	; 239
			}else if(bomb_state[i] & LEFT){
    c08e:	82 ff       	sbrs	r24, 2
    c090:	33 c0       	rjmp	.+102    	; 0xc0f8 <UpdateBombs+0x6e2>
			   if((bomb_x[i] & 1)){
    c092:	d8 01       	movw	r26, r16
    c094:	8c 91       	ld	r24, X
    c096:	a1 e9       	ldi	r26, 0x91	; 145
    c098:	ca 2e       	mov	r12, r26
    c09a:	af e0       	ldi	r26, 0x0F	; 15
    c09c:	da 2e       	mov	r13, r26
    c09e:	ce 0c       	add	r12, r14
    c0a0:	df 1c       	adc	r13, r15
    c0a2:	98 2f       	mov	r25, r24
    c0a4:	9f 5f       	subi	r25, 0xFF	; 255
    c0a6:	80 ff       	sbrs	r24, 0
    c0a8:	10 c0       	rjmp	.+32     	; 0xc0ca <UpdateBombs+0x6b4>
                  SetTile(bomb_x[i]+1,bomb_y[i]+0,FLOOR_START+0);
    c0aa:	89 2f       	mov	r24, r25
    c0ac:	f6 01       	movw	r30, r12
    c0ae:	60 81       	ld	r22, Z
    c0b0:	40 e0       	ldi	r20, 0x00	; 0
    c0b2:	50 e0       	ldi	r21, 0x00	; 0
    c0b4:	0e 94 85 44 	call	0x890a	; 0x890a <SetTile>
                  SetTile(bomb_x[i]+1,bomb_y[i]+1,FLOOR_START+2);
    c0b8:	d8 01       	movw	r26, r16
    c0ba:	8c 91       	ld	r24, X
    c0bc:	f6 01       	movw	r30, r12
    c0be:	60 81       	ld	r22, Z
    c0c0:	6f 5f       	subi	r22, 0xFF	; 255
    c0c2:	8f 5f       	subi	r24, 0xFF	; 255
    c0c4:	42 e0       	ldi	r20, 0x02	; 2
    c0c6:	50 e0       	ldi	r21, 0x00	; 0
    c0c8:	0f c0       	rjmp	.+30     	; 0xc0e8 <UpdateBombs+0x6d2>
			   }
			   else{
                  SetTile(bomb_x[i]+1,bomb_y[i]+0,FLOOR_START+1);
    c0ca:	89 2f       	mov	r24, r25
    c0cc:	d6 01       	movw	r26, r12
    c0ce:	6c 91       	ld	r22, X
    c0d0:	41 e0       	ldi	r20, 0x01	; 1
    c0d2:	50 e0       	ldi	r21, 0x00	; 0
    c0d4:	0e 94 85 44 	call	0x890a	; 0x890a <SetTile>
                  SetTile(bomb_x[i]+1,bomb_y[i]+1,FLOOR_START+3);
    c0d8:	f8 01       	movw	r30, r16
    c0da:	80 81       	ld	r24, Z
    c0dc:	d6 01       	movw	r26, r12
    c0de:	6c 91       	ld	r22, X
    c0e0:	6f 5f       	subi	r22, 0xFF	; 255
    c0e2:	8f 5f       	subi	r24, 0xFF	; 255
    c0e4:	43 e0       	ldi	r20, 0x03	; 3
    c0e6:	50 e0       	ldi	r21, 0x00	; 0
    c0e8:	0e 94 85 44 	call	0x890a	; 0x890a <SetTile>
			   }
			   bomb_x[i]--;
    c0ec:	f7 01       	movw	r30, r14
    c0ee:	e5 5e       	subi	r30, 0xE5	; 229
    c0f0:	ff 4e       	sbci	r31, 0xEF	; 239
    c0f2:	80 81       	ld	r24, Z
    c0f4:	81 50       	subi	r24, 0x01	; 1
    c0f6:	2c c0       	rjmp	.+88     	; 0xc150 <UpdateBombs+0x73a>
			}else{
			   if((bomb_x[i] & 1)){
    c0f8:	f8 01       	movw	r30, r16
    c0fa:	80 81       	ld	r24, Z
    c0fc:	f1 e9       	ldi	r31, 0x91	; 145
    c0fe:	cf 2e       	mov	r12, r31
    c100:	ff e0       	ldi	r31, 0x0F	; 15
    c102:	df 2e       	mov	r13, r31
    c104:	ce 0c       	add	r12, r14
    c106:	df 1c       	adc	r13, r15
    c108:	80 ff       	sbrs	r24, 0
    c10a:	0e c0       	rjmp	.+28     	; 0xc128 <UpdateBombs+0x712>
                  SetTile(bomb_x[i]+0,bomb_y[i]+0,FLOOR_START+1);
    c10c:	d6 01       	movw	r26, r12
    c10e:	6c 91       	ld	r22, X
    c110:	41 e0       	ldi	r20, 0x01	; 1
    c112:	50 e0       	ldi	r21, 0x00	; 0
    c114:	0e 94 85 44 	call	0x890a	; 0x890a <SetTile>
                  SetTile(bomb_x[i]+0,bomb_y[i]+1,FLOOR_START+3);
    c118:	f6 01       	movw	r30, r12
    c11a:	60 81       	ld	r22, Z
    c11c:	6f 5f       	subi	r22, 0xFF	; 255
    c11e:	d8 01       	movw	r26, r16
    c120:	8c 91       	ld	r24, X
    c122:	43 e0       	ldi	r20, 0x03	; 3
    c124:	50 e0       	ldi	r21, 0x00	; 0
    c126:	0d c0       	rjmp	.+26     	; 0xc142 <UpdateBombs+0x72c>
			   }
			   else{
                  SetTile(bomb_x[i]+0,bomb_y[i]+0,FLOOR_START+0);
    c128:	f6 01       	movw	r30, r12
    c12a:	60 81       	ld	r22, Z
    c12c:	40 e0       	ldi	r20, 0x00	; 0
    c12e:	50 e0       	ldi	r21, 0x00	; 0
    c130:	0e 94 85 44 	call	0x890a	; 0x890a <SetTile>
                  SetTile(bomb_x[i]+0,bomb_y[i]+1,FLOOR_START+2);
    c134:	d6 01       	movw	r26, r12
    c136:	6c 91       	ld	r22, X
    c138:	6f 5f       	subi	r22, 0xFF	; 255
    c13a:	f8 01       	movw	r30, r16
    c13c:	80 81       	ld	r24, Z
    c13e:	42 e0       	ldi	r20, 0x02	; 2
    c140:	50 e0       	ldi	r21, 0x00	; 0
    c142:	0e 94 85 44 	call	0x890a	; 0x890a <SetTile>
			   }
			   bomb_x[i]++;
    c146:	f7 01       	movw	r30, r14
    c148:	e5 5e       	subi	r30, 0xE5	; 229
    c14a:	ff 4e       	sbci	r31, 0xEF	; 239
    c14c:	80 81       	ld	r24, Z
    c14e:	8f 5f       	subi	r24, 0xFF	; 255
    c150:	80 83       	st	Z, r24
		// continue; 
		 //}
      
	  u8 t;
	  //Check to see if a block fell on it
	  if( ((t=GetMapTile(bomb_x[i]+0,bomb_y[i]+0))  >= WALL_START && t <= WALL_START+3)
    c152:	f7 01       	movw	r30, r14
    c154:	e5 5e       	subi	r30, 0xE5	; 229
    c156:	ff 4e       	sbci	r31, 0xEF	; 239
    c158:	a0 80       	ld	r10, Z
    c15a:	f7 01       	movw	r30, r14
    c15c:	ef 56       	subi	r30, 0x6F	; 111
    c15e:	f0 4f       	sbci	r31, 0xF0	; 240
    c160:	30 81       	ld	r19, Z




inline u8 GetMapTile(u8 x, u8 y){
      return (vram[(y*30)+x]-RAM_TILES_COUNT);//return (vram[122+(y*30)+x]-RAM_TILES_COUNT);
    c162:	43 2f       	mov	r20, r19
    c164:	50 e0       	ldi	r21, 0x00	; 0
    c166:	ca 2c       	mov	r12, r10
    c168:	dd 24       	eor	r13, r13
    c16a:	ca 01       	movw	r24, r20
    c16c:	88 0f       	add	r24, r24
    c16e:	99 1f       	adc	r25, r25
    c170:	8a 01       	movw	r16, r20
    c172:	75 e0       	ldi	r23, 0x05	; 5
    c174:	00 0f       	add	r16, r16
    c176:	11 1f       	adc	r17, r17
    c178:	7a 95       	dec	r23
    c17a:	e1 f7       	brne	.-8      	; 0xc174 <UpdateBombs+0x75e>
    c17c:	08 1b       	sub	r16, r24
    c17e:	19 0b       	sbc	r17, r25
    c180:	0c 0d       	add	r16, r12
    c182:	1d 1d       	adc	r17, r13
    c184:	f8 01       	movw	r30, r16
    c186:	e0 5e       	subi	r30, 0xE0	; 224
    c188:	fe 4f       	sbci	r31, 0xFE	; 254
    c18a:	20 81       	ld	r18, Z
    c18c:	2f 51       	subi	r18, 0x1F	; 31
    c18e:	2c 31       	cpi	r18, 0x1C	; 28
    c190:	10 f0       	brcs	.+4      	; 0xc196 <UpdateBombs+0x780>
    c192:	20 32       	cpi	r18, 0x20	; 32
    c194:	c8 f0       	brcs	.+50     	; 0xc1c8 <UpdateBombs+0x7b2>
    c196:	a3 94       	inc	r10
    c198:	83 2f       	mov	r24, r19
    c19a:	8f 5f       	subi	r24, 0xFF	; 255
    c19c:	90 e0       	ldi	r25, 0x00	; 0
    c19e:	fc 01       	movw	r30, r24
    c1a0:	65 e0       	ldi	r22, 0x05	; 5
    c1a2:	ee 0f       	add	r30, r30
    c1a4:	ff 1f       	adc	r31, r31
    c1a6:	6a 95       	dec	r22
    c1a8:	e1 f7       	brne	.-8      	; 0xc1a2 <UpdateBombs+0x78c>
    c1aa:	88 0f       	add	r24, r24
    c1ac:	99 1f       	adc	r25, r25
    c1ae:	e8 1b       	sub	r30, r24
    c1b0:	f9 0b       	sbc	r31, r25
    c1b2:	ea 0d       	add	r30, r10
    c1b4:	f1 1d       	adc	r31, r1
    c1b6:	aa 94       	dec	r10
    c1b8:	e0 5e       	subi	r30, 0xE0	; 224
    c1ba:	fe 4f       	sbci	r31, 0xFE	; 254
    c1bc:	e0 81       	ld	r30, Z
    c1be:	ef 51       	subi	r30, 0x1F	; 31
    c1c0:	ec 31       	cpi	r30, 0x1C	; 28
    c1c2:	38 f0       	brcs	.+14     	; 0xc1d2 <UpdateBombs+0x7bc>
    c1c4:	e0 32       	cpi	r30, 0x20	; 32
    c1c6:	28 f4       	brcc	.+10     	; 0xc1d2 <UpdateBombs+0x7bc>
	   || ((t=GetMapTile(bomb_x[i]+1,bomb_y[i]+1))  >= WALL_START && t <= WALL_START+3)){//CHECK SPECIAL BOMB MOVING INTO BLOCK CASE
	     bomb_owner[i] = 255;//bomb_timer[i] = EXPLODETIME-1;
    c1c8:	2e ee       	ldi	r18, 0xEE	; 238
    c1ca:	3f e0       	ldi	r19, 0x0F	; 15
    c1cc:	e2 0e       	add	r14, r18
    c1ce:	f3 1e       	adc	r15, r19
    c1d0:	73 c3       	rjmp	.+1766   	; 0xc8b8 <UpdateBombs+0xea2>
		 continue;
      }

	  if(bomb_timer[i] < EXPLODETIME){
    c1d2:	f7 01       	movw	r30, r14
    c1d4:	e7 55       	subi	r30, 0x57	; 87
    c1d6:	f0 4f       	sbci	r31, 0xF0	; 240
    c1d8:	80 81       	ld	r24, Z
    c1da:	8e 31       	cpi	r24, 0x1E	; 30
    c1dc:	08 f0       	brcs	.+2      	; 0xc1e0 <UpdateBombs+0x7ca>
    c1de:	2e c3       	rjmp	.+1628   	; 0xc83c <UpdateBombs+0xe26>
	     bomb_state[i] = EXPLODE;
    c1e0:	f7 01       	movw	r30, r14
    c1e2:	e2 53       	subi	r30, 0x32	; 50
    c1e4:	f0 4f       	sbci	r31, 0xF0	; 240
    c1e6:	20 e8       	ldi	r18, 0x80	; 128
    c1e8:	20 83       	st	Z, r18
   bomb_timer[b] = (abs(bomb_x[b]-bomb_offset[b])+abs(bomb_y[b]-bomb_xtra[b]))/2;
}


inline void ExplodeBomb(u8 b){
   u8 range = GetPlayerRange(bomb_owner[b])*2;//TODO? COULD CHANGE VIA PICKUP DURING EXPLOSION
    c1ea:	f7 01       	movw	r30, r14
    c1ec:	e2 51       	subi	r30, 0x12	; 18
    c1ee:	f0 4f       	sbci	r31, 0xF0	; 240
    c1f0:	90 81       	ld	r25, Z
void SetPlayerRange(u8 p, u8 t){
   player_attrb[p] |= (t-3);
}

u8 GetPlayerRange(u8 p){
   if(poison_type == POISON_RANGE && player_attrb[p] & POISON)
    c1f2:	80 91 bd 0f 	lds	r24, 0x0FBD
    c1f6:	83 30       	cpi	r24, 0x03	; 3
    c1f8:	49 f4       	brne	.+18     	; 0xc20c <UpdateBombs+0x7f6>
    c1fa:	e9 2f       	mov	r30, r25
    c1fc:	f0 e0       	ldi	r31, 0x00	; 0
    c1fe:	ed 5e       	subi	r30, 0xED	; 237
    c200:	ff 4e       	sbci	r31, 0xEF	; 239
    c202:	80 81       	ld	r24, Z
    c204:	83 ff       	sbrs	r24, 3
    c206:	02 c0       	rjmp	.+4      	; 0xc20c <UpdateBombs+0x7f6>
    c208:	e1 e0       	ldi	r30, 0x01	; 1
    c20a:	0d c0       	rjmp	.+26     	; 0xc226 <UpdateBombs+0x810>
      return 1;
   if(gamestate & MAXFIRE)//level has max fire
    c20c:	80 91 fc 0e 	lds	r24, 0x0EFC
    c210:	82 ff       	sbrs	r24, 2
    c212:	02 c0       	rjmp	.+4      	; 0xc218 <UpdateBombs+0x802>
    c214:	ed e0       	ldi	r30, 0x0D	; 13
    c216:	07 c0       	rjmp	.+14     	; 0xc226 <UpdateBombs+0x810>
      return 13;
   return (player_attrb[p] & 0b00000111)+3;
    c218:	e9 2f       	mov	r30, r25
    c21a:	f0 e0       	ldi	r31, 0x00	; 0
    c21c:	ed 5e       	subi	r30, 0xED	; 237
    c21e:	ff 4e       	sbci	r31, 0xEF	; 239
    c220:	e0 81       	ld	r30, Z
    c222:	e7 70       	andi	r30, 0x07	; 7
    c224:	ed 5f       	subi	r30, 0xFD	; 253
   bomb_timer[b] = (abs(bomb_x[b]-bomb_offset[b])+abs(bomb_y[b]-bomb_xtra[b]))/2;
}


inline void ExplodeBomb(u8 b){
   u8 range = GetPlayerRange(bomb_owner[b])*2;//TODO? COULD CHANGE VIA PICKUP DURING EXPLOSION
    c226:	ee 0f       	add	r30, r30
    c228:	ef 83       	std	Y+7, r30	; 0x07
   u8 x = bomb_x[b];
   u8 y = bomb_y[b];
    c22a:	f7 01       	movw	r30, r14
    c22c:	ef 56       	subi	r30, 0x6F	; 111
    c22e:	f0 4f       	sbci	r31, 0xF0	; 240
    c230:	70 80       	ld	r7, Z
const char bombframelist[] PROGMEM = {2,1,0,1,};
const char fireframelist[] PROGMEM = {0,1,2,1,0};
const char blockframelist[] PROGMEM = {0,0,1,2,3,4,};

inline u8 bomb_frame(u8 b){
   if(bomb_timer[b] > EXPLODETIME)
    c232:	f7 01       	movw	r30, r14
    c234:	e7 55       	subi	r30, 0x57	; 87
    c236:	f0 4f       	sbci	r31, 0xF0	; 240
    c238:	20 81       	ld	r18, Z
    c23a:	82 2f       	mov	r24, r18
    c23c:	90 e0       	ldi	r25, 0x00	; 0
    c23e:	2f 31       	cpi	r18, 0x1F	; 31
    c240:	80 f0       	brcs	.+32     	; 0xc262 <UpdateBombs+0x84c>
      return pgm_read_byte( &bombframelist[(((BOMBSTARTTIME-bomb_timer[b])/10)&3)] );//WAS 20
    c242:	40 ef       	ldi	r20, 0xF0	; 240
    c244:	50 e0       	ldi	r21, 0x00	; 0
    c246:	48 1b       	sub	r20, r24
    c248:	59 0b       	sbc	r21, r25
    c24a:	ca 01       	movw	r24, r20
    c24c:	6a e0       	ldi	r22, 0x0A	; 10
    c24e:	70 e0       	ldi	r23, 0x00	; 0
    c250:	0e 94 96 70 	call	0xe12c	; 0xe12c <__divmodhi4>
    c254:	fb 01       	movw	r30, r22
    c256:	e3 70       	andi	r30, 0x03	; 3
    c258:	f0 70       	andi	r31, 0x00	; 0
    c25a:	ed 58       	subi	r30, 0x8D	; 141
    c25c:	f6 48       	sbci	r31, 0x86	; 134
    c25e:	b4 90       	lpm	r11, Z+
    c260:	0d c0       	rjmp	.+26     	; 0xc27c <UpdateBombs+0x866>
   else
      return pgm_read_byte( &blockframelist[(((EXPLODETIME  -bomb_timer[b])/5 ))] );
    c262:	ae e1       	ldi	r26, 0x1E	; 30
    c264:	b0 e0       	ldi	r27, 0x00	; 0
    c266:	a8 1b       	sub	r26, r24
    c268:	b9 0b       	sbc	r27, r25
    c26a:	cd 01       	movw	r24, r26
    c26c:	65 e0       	ldi	r22, 0x05	; 5
    c26e:	70 e0       	ldi	r23, 0x00	; 0
    c270:	0e 94 96 70 	call	0xe12c	; 0xe12c <__divmodhi4>
    c274:	fb 01       	movw	r30, r22
    c276:	e4 58       	subi	r30, 0x84	; 132
    c278:	f6 48       	sbci	r31, 0x86	; 134
    c27a:	b4 90       	lpm	r11, Z+
}

inline u8 fire_frame(u8 b){
   return pgm_read_byte(&FireSequence[bomb_timer[b]/5]);
    c27c:	82 2f       	mov	r24, r18
    c27e:	65 e0       	ldi	r22, 0x05	; 5
    c280:	0e 94 76 70 	call	0xe0ec	; 0xe0ec <__udivmodqi4>
    c284:	e8 2f       	mov	r30, r24
    c286:	f0 e0       	ldi	r31, 0x00	; 0
    c288:	ea 5b       	subi	r30, 0xBA	; 186
    c28a:	fd 49       	sbci	r31, 0x9D	; 157
    c28c:	14 91       	lpm	r17, Z+
   u8 bframe = bomb_frame(b);
   u8 fframe = fire_frame(b);
   u8 t;
   bool end = false;
   
   if(bomb_timer[b] == 0){
    c28e:	22 23       	and	r18, r18
    c290:	c1 f4       	brne	.+48     	; 0xc2c2 <UpdateBombs+0x8ac>
   SetTile(15,0,ZERO_OFFSET+ten);
   SetTile(16,0,ZERO_OFFSET+sec);
}

void SetMapTile(u8 x, u8 y, u8 t){
   int off = (y*30)+x;//((y<<1)*30)+(x<<1);
    c292:	be e1       	ldi	r27, 0x1E	; 30
    c294:	7b 9e       	mul	r7, r27
    c296:	f0 01       	movw	r30, r0
    c298:	11 24       	eor	r1, r1
    c29a:	ec 0d       	add	r30, r12
    c29c:	fd 1d       	adc	r31, r13
   t+=RAM_TILES_COUNT;//t = (t<<2)+RAM_TILES_COUNT;//t = (tileset*(NUMTILES*4)) + (t*4) + RAM_TILES_COUNT;
   
   vram[off+ 0] = t++;
    c29e:	e0 5e       	subi	r30, 0xE0	; 224
    c2a0:	fe 4f       	sbci	r31, 0xFE	; 254
    c2a2:	2f e1       	ldi	r18, 0x1F	; 31
    c2a4:	20 83       	st	Z, r18
   vram[off+ 1] = t++;
    c2a6:	30 e2       	ldi	r19, 0x20	; 32
    c2a8:	31 83       	std	Z+1, r19	; 0x01
   vram[off+30] = t++;
    c2aa:	41 e2       	ldi	r20, 0x21	; 33
    c2ac:	46 8f       	std	Z+30, r20	; 0x1e
   vram[off+31] = t;
    c2ae:	52 e2       	ldi	r21, 0x22	; 34
    c2b0:	57 8f       	std	Z+31, r21	; 0x1f
      end = true;
      SetMapTile(x,y,0);
	  fframe = 0;//blank out fire
	  bomb_owner[b] = 255;
    c2b2:	f7 01       	movw	r30, r14
    c2b4:	e2 51       	subi	r30, 0x12	; 18
    c2b6:	f0 4f       	sbci	r31, 0xF0	; 240
    c2b8:	8f ef       	ldi	r24, 0xFF	; 255
    c2ba:	80 83       	st	Z, r24
    c2bc:	01 e0       	ldi	r16, 0x01	; 1
    c2be:	10 e0       	ldi	r17, 0x00	; 0
    c2c0:	28 c0       	rjmp	.+80     	; 0xc312 <UpdateBombs+0x8fc>
//	  bomb_state[b] = 0;
   }
   else if(bomb_timer[b] == (EXPLODETIME-2)){
    c2c2:	2c 31       	cpi	r18, 0x1C	; 28
    c2c4:	31 f4       	brne	.+12     	; 0xc2d2 <UpdateBombs+0x8bc>
      TriggerFx(EXPLODESFX,255,true);
    c2c6:	83 e0       	ldi	r24, 0x03	; 3
    c2c8:	6f ef       	ldi	r22, 0xFF	; 255
    c2ca:	41 e0       	ldi	r20, 0x01	; 1
    c2cc:	0e 94 df 48 	call	0x91be	; 0x91be <TriggerFx>
    c2d0:	1f c0       	rjmp	.+62     	; 0xc310 <UpdateBombs+0x8fa>




inline u8 GetMapTile(u8 x, u8 y){
      return (vram[(y*30)+x]-RAM_TILES_COUNT);//return (vram[122+(y*30)+x]-RAM_TILES_COUNT);
    c2d2:	9e e1       	ldi	r25, 0x1E	; 30
    c2d4:	79 9e       	mul	r7, r25
    c2d6:	f0 01       	movw	r30, r0
    c2d8:	11 24       	eor	r1, r1
    c2da:	ec 0d       	add	r30, r12
    c2dc:	fd 1d       	adc	r31, r13
   }
   else if((t = GetMapTile(x,y)) == FIRE_CENTER+((fframe)*28)){//same frame is already drawn, don't bother(this is expensive!)
    c2de:	ac e1       	ldi	r26, 0x1C	; 28
    c2e0:	1a 9f       	mul	r17, r26
    c2e2:	a0 01       	movw	r20, r0
    c2e4:	11 24       	eor	r1, r1
    c2e6:	e0 5e       	subi	r30, 0xE0	; 224
    c2e8:	fe 4f       	sbci	r31, 0xFE	; 254
    c2ea:	80 81       	ld	r24, Z
    c2ec:	8f 51       	subi	r24, 0x1F	; 31
    c2ee:	90 e0       	ldi	r25, 0x00	; 0
    c2f0:	9a 01       	movw	r18, r20
    c2f2:	2c 5c       	subi	r18, 0xCC	; 204
    c2f4:	3f 4f       	sbci	r19, 0xFF	; 255
    c2f6:	82 17       	cp	r24, r18
    c2f8:	93 07       	cpc	r25, r19
    c2fa:	09 f4       	brne	.+2      	; 0xc2fe <UpdateBombs+0x8e8>
    c2fc:	d3 c2       	rjmp	.+1446   	; 0xc8a4 <UpdateBombs+0xe8e>
   SetTile(16,0,ZERO_OFFSET+sec);
}

void SetMapTile(u8 x, u8 y, u8 t){
   int off = (y*30)+x;//((y<<1)*30)+(x<<1);
   t+=RAM_TILES_COUNT;//t = (t<<2)+RAM_TILES_COUNT;//t = (tileset*(NUMTILES*4)) + (t*4) + RAM_TILES_COUNT;
    c2fe:	84 2f       	mov	r24, r20
    c300:	8d 5a       	subi	r24, 0xAD	; 173
   
   vram[off+ 0] = t++;
    c302:	80 83       	st	Z, r24
    c304:	8f 5f       	subi	r24, 0xFF	; 255
   vram[off+ 1] = t++;
    c306:	81 83       	std	Z+1, r24	; 0x01
    c308:	8f 5f       	subi	r24, 0xFF	; 255
   vram[off+30] = t++;
    c30a:	86 8f       	std	Z+30, r24	; 0x1e
   vram[off+31] = t;
    c30c:	8f 5f       	subi	r24, 0xFF	; 255
    c30e:	87 8f       	std	Z+31, r24	; 0x1f
    c310:	00 e0       	ldi	r16, 0x00	; 0

   bool u,d,l,r;
   u=d=l=r=true;
   bool tip = false;
   
   fframe *= 28;
    c312:	bc e1       	ldi	r27, 0x1C	; 28
    c314:	1b 9f       	mul	r17, r27
    c316:	20 2d       	mov	r18, r0
    c318:	11 24       	eor	r1, r1

   for(u8 i=2;i<=range;i+=2){
   if(i == range)
      tip = true;

      if(y-i < ARENA_START_Y && y-i < 200)
    c31a:	47 2c       	mov	r4, r7
    c31c:	55 24       	eor	r5, r5
   SetTile(16,0,ZERO_OFFSET+sec);
}

void SetMapTile(u8 x, u8 y, u8 t){
   int off = (y*30)+x;//((y<<1)*30)+(x<<1);
   t+=RAM_TILES_COUNT;//t = (t<<2)+RAM_TILES_COUNT;//t = (tileset*(NUMTILES*4)) + (t*4) + RAM_TILES_COUNT;
    c31e:	8b 2d       	mov	r24, r11
    c320:	88 0f       	add	r24, r24
    c322:	88 0f       	add	r24, r24
    c324:	e8 2f       	mov	r30, r24
    c326:	e9 5d       	subi	r30, 0xD9	; 217
    c328:	ea 87       	std	Y+10, r30	; 0x0a
   
   vram[off+ 0] = t++;
    c32a:	f8 2f       	mov	r31, r24
    c32c:	f8 5d       	subi	r31, 0xD8	; 216
    c32e:	fe 83       	std	Y+6, r31	; 0x06
   vram[off+ 1] = t++;
    c330:	38 2f       	mov	r19, r24
    c332:	37 5d       	subi	r19, 0xD7	; 215
    c334:	3d 83       	std	Y+5, r19	; 0x05
   vram[off+30] = t++;
    c336:	86 5d       	subi	r24, 0xD6	; 214
    c338:	8c 83       	std	Y+4, r24	; 0x04
   SetTile(16,0,ZERO_OFFSET+sec);
}

void SetMapTile(u8 x, u8 y, u8 t){
   int off = (y*30)+x;//((y<<1)*30)+(x<<1);
   t+=RAM_TILES_COUNT;//t = (t<<2)+RAM_TILES_COUNT;//t = (tileset*(NUMTILES*4)) + (t*4) + RAM_TILES_COUNT;
    c33a:	2b 9f       	mul	r18, r27
    c33c:	c0 01       	movw	r24, r0
    c33e:	11 24       	eor	r1, r1
    c340:	48 2f       	mov	r20, r24
    c342:	4d 5a       	subi	r20, 0xAD	; 173
    c344:	4b 87       	std	Y+11, r20	; 0x0b
   
   vram[off+ 0] = t++;
    c346:	58 2f       	mov	r21, r24
    c348:	5c 5a       	subi	r21, 0xAC	; 172
    c34a:	5b 83       	std	Y+3, r21	; 0x03
   vram[off+ 1] = t++;
    c34c:	a8 2f       	mov	r26, r24
    c34e:	ab 5a       	subi	r26, 0xAB	; 171
    c350:	aa 83       	std	Y+2, r26	; 0x02
   vram[off+30] = t++;
    c352:	b8 2f       	mov	r27, r24
    c354:	ba 5a       	subi	r27, 0xAA	; 170
    c356:	b9 83       	std	Y+1, r27	; 0x01




inline u8 GetMapTile(u8 x, u8 y){
      return (vram[(y*30)+x]-RAM_TILES_COUNT);//return (vram[122+(y*30)+x]-RAM_TILES_COUNT);
    c358:	c2 01       	movw	r24, r4
    c35a:	88 0f       	add	r24, r24
    c35c:	99 1f       	adc	r25, r25
    c35e:	42 01       	movw	r8, r4
    c360:	b5 e0       	ldi	r27, 0x05	; 5
    c362:	88 0c       	add	r8, r8
    c364:	99 1c       	adc	r9, r9
    c366:	ba 95       	dec	r27
    c368:	e1 f7       	brne	.-8      	; 0xc362 <UpdateBombs+0x94c>
    c36a:	88 1a       	sub	r8, r24
    c36c:	99 0a       	sbc	r9, r25
    c36e:	a2 e0       	ldi	r26, 0x02	; 2
    c370:	ba 2e       	mov	r11, r26
    c372:	e1 e0       	ldi	r30, 0x01	; 1
    c374:	e8 87       	std	Y+8, r30	; 0x08
    c376:	19 86       	std	Y+9, r1	; 0x09
    c378:	22 24       	eor	r2, r2
    c37a:	23 94       	inc	r2
    c37c:	33 24       	eor	r3, r3
    c37e:	33 94       	inc	r3
    c380:	66 24       	eor	r6, r6
    c382:	63 94       	inc	r6
   SetTile(16,0,ZERO_OFFSET+sec);
}

void SetMapTile(u8 x, u8 y, u8 t){
   int off = (y*30)+x;//((y<<1)*30)+(x<<1);
   t+=RAM_TILES_COUNT;//t = (t<<2)+RAM_TILES_COUNT;//t = (tileset*(NUMTILES*4)) + (t*4) + RAM_TILES_COUNT;
    c384:	f2 2f       	mov	r31, r18
    c386:	f9 5a       	subi	r31, 0xA9	; 169
    c388:	fd 87       	std	Y+13, r31	; 0x0d
   
   vram[off+ 0] = t++;
    c38a:	32 2f       	mov	r19, r18
    c38c:	38 5a       	subi	r19, 0xA8	; 168
    c38e:	3e 87       	std	Y+14, r19	; 0x0e
   vram[off+ 1] = t++;
    c390:	42 2f       	mov	r20, r18
    c392:	47 5a       	subi	r20, 0xA7	; 167
    c394:	4f 87       	std	Y+15, r20	; 0x0f
   vram[off+30] = t++;
   vram[off+31] = t;
    c396:	52 2f       	mov	r21, r18
    c398:	56 5a       	subi	r21, 0xA6	; 166
    c39a:	58 8b       	std	Y+16, r21	; 0x10
   SetTile(16,0,ZERO_OFFSET+sec);
}

void SetMapTile(u8 x, u8 y, u8 t){
   int off = (y*30)+x;//((y<<1)*30)+(x<<1);
   t+=RAM_TILES_COUNT;//t = (t<<2)+RAM_TILES_COUNT;//t = (tileset*(NUMTILES*4)) + (t*4) + RAM_TILES_COUNT;
    c39c:	82 2f       	mov	r24, r18
    c39e:	85 5b       	subi	r24, 0xB5	; 181
    c3a0:	89 8b       	std	Y+17, r24	; 0x11
   
   vram[off+ 0] = t++;
    c3a2:	92 2f       	mov	r25, r18
    c3a4:	94 5b       	subi	r25, 0xB4	; 180
    c3a6:	9a 8b       	std	Y+18, r25	; 0x12
   vram[off+ 1] = t++;
    c3a8:	a2 2f       	mov	r26, r18
    c3aa:	a3 5b       	subi	r26, 0xB3	; 179
    c3ac:	ab 8b       	std	Y+19, r26	; 0x13
   vram[off+30] = t++;
   vram[off+31] = t;
    c3ae:	b2 2f       	mov	r27, r18
    c3b0:	b2 5b       	subi	r27, 0xB2	; 178
    c3b2:	bc 8b       	std	Y+20, r27	; 0x14
   SetTile(16,0,ZERO_OFFSET+sec);
}

void SetMapTile(u8 x, u8 y, u8 t){
   int off = (y*30)+x;//((y<<1)*30)+(x<<1);
   t+=RAM_TILES_COUNT;//t = (t<<2)+RAM_TILES_COUNT;//t = (tileset*(NUMTILES*4)) + (t*4) + RAM_TILES_COUNT;
    c3b4:	e2 2f       	mov	r30, r18
    c3b6:	e5 5a       	subi	r30, 0xA5	; 165
    c3b8:	ed 8b       	std	Y+21, r30	; 0x15
   
   vram[off+ 0] = t++;
    c3ba:	fb 5f       	subi	r31, 0xFB	; 251
    c3bc:	fe 8b       	std	Y+22, r31	; 0x16
   vram[off+ 1] = t++;
    c3be:	3b 5f       	subi	r19, 0xFB	; 251
    c3c0:	3f 8b       	std	Y+23, r19	; 0x17
   vram[off+30] = t++;
   vram[off+31] = t;
    c3c2:	4b 5f       	subi	r20, 0xFB	; 251
    c3c4:	48 8f       	std	Y+24, r20	; 0x18
   SetTile(16,0,ZERO_OFFSET+sec);
}

void SetMapTile(u8 x, u8 y, u8 t){
   int off = (y*30)+x;//((y<<1)*30)+(x<<1);
   t+=RAM_TILES_COUNT;//t = (t<<2)+RAM_TILES_COUNT;//t = (tileset*(NUMTILES*4)) + (t*4) + RAM_TILES_COUNT;
    c3c6:	5b 5f       	subi	r21, 0xFB	; 251
    c3c8:	59 8f       	std	Y+25, r21	; 0x19
   
   vram[off+ 0] = t++;
    c3ca:	8b 5e       	subi	r24, 0xEB	; 235
    c3cc:	8a 8f       	std	Y+26, r24	; 0x1a
   vram[off+ 1] = t++;
    c3ce:	9b 5e       	subi	r25, 0xEB	; 235
    c3d0:	9b 8f       	std	Y+27, r25	; 0x1b
   vram[off+30] = t++;
   vram[off+31] = t;
    c3d2:	ab 5e       	subi	r26, 0xEB	; 235
    c3d4:	ac 8f       	std	Y+28, r26	; 0x1c
   SetTile(16,0,ZERO_OFFSET+sec);
}

void SetMapTile(u8 x, u8 y, u8 t){
   int off = (y*30)+x;//((y<<1)*30)+(x<<1);
   t+=RAM_TILES_COUNT;//t = (t<<2)+RAM_TILES_COUNT;//t = (tileset*(NUMTILES*4)) + (t*4) + RAM_TILES_COUNT;
    c3d6:	bf 5f       	subi	r27, 0xFF	; 255
    c3d8:	bd 8f       	std	Y+29, r27	; 0x1d
   
   vram[off+ 0] = t++;
    c3da:	eb 50       	subi	r30, 0x0B	; 11
    c3dc:	ee 8f       	std	Y+30, r30	; 0x1e
   vram[off+ 1] = t++;
    c3de:	fb 50       	subi	r31, 0x0B	; 11
    c3e0:	ff 8f       	std	Y+31, r31	; 0x1f
   vram[off+30] = t++;
   vram[off+31] = t;
    c3e2:	3b 50       	subi	r19, 0x0B	; 11
    c3e4:	38 a3       	std	Y+32, r19	; 0x20
   SetTile(16,0,ZERO_OFFSET+sec);
}

void SetMapTile(u8 x, u8 y, u8 t){
   int off = (y*30)+x;//((y<<1)*30)+(x<<1);
   t+=RAM_TILES_COUNT;//t = (t<<2)+RAM_TILES_COUNT;//t = (tileset*(NUMTILES*4)) + (t*4) + RAM_TILES_COUNT;
    c3e6:	4b 5f       	subi	r20, 0xFB	; 251
    c3e8:	49 a3       	std	Y+33, r20	; 0x21
   
   vram[off+ 0] = t++;
    c3ea:	5b 5f       	subi	r21, 0xFB	; 251
    c3ec:	5a a3       	std	Y+34, r21	; 0x22
   vram[off+ 1] = t++;
    c3ee:	8b 5f       	subi	r24, 0xFB	; 251
    c3f0:	8b a3       	std	Y+35, r24	; 0x23
   vram[off+30] = t++;
   vram[off+31] = t;
    c3f2:	2a 59       	subi	r18, 0x9A	; 154
    c3f4:	2c a3       	std	Y+36, r18	; 0x24
   bool tip = false;
   
   fframe *= 28;

   for(u8 i=2;i<=range;i+=2){
   if(i == range)
    c3f6:	9f 81       	ldd	r25, Y+7	; 0x07
    c3f8:	b9 16       	cp	r11, r25
    c3fa:	11 f4       	brne	.+4      	; 0xc400 <UpdateBombs+0x9ea>
    c3fc:	a1 e0       	ldi	r26, 0x01	; 1
    c3fe:	a9 87       	std	Y+9, r26	; 0x09
      tip = true;

      if(y-i < ARENA_START_Y && y-i < 200)
    c400:	2b 2d       	mov	r18, r11
    c402:	30 e0       	ldi	r19, 0x00	; 0
    c404:	c2 01       	movw	r24, r4
    c406:	82 1b       	sub	r24, r18
    c408:	93 0b       	sbc	r25, r19
    c40a:	18 16       	cp	r1, r24
    c40c:	19 06       	cpc	r1, r25
    c40e:	0c f0       	brlt	.+2      	; 0xc412 <UpdateBombs+0x9fc>
    c410:	22 24       	eor	r2, r2
	     u = false;
      if(y+i > 22)
    c412:	c9 01       	movw	r24, r18
    c414:	84 0d       	add	r24, r4
    c416:	95 1d       	adc	r25, r5
    c418:	47 97       	sbiw	r24, 0x17	; 23
    c41a:	0c f0       	brlt	.+2      	; 0xc41e <UpdateBombs+0xa08>
    c41c:	33 24       	eor	r3, r3
	     d = false;
      if(x-i < ARENA_START_X && x-i < 200)
    c41e:	c6 01       	movw	r24, r12
    c420:	82 1b       	sub	r24, r18
    c422:	93 0b       	sbc	r25, r19
    c424:	02 97       	sbiw	r24, 0x02	; 2
    c426:	0c f4       	brge	.+2      	; 0xc42a <UpdateBombs+0xa14>
    c428:	66 24       	eor	r6, r6
	     l = false;
      
	  if(u){
    c42a:	22 20       	and	r2, r2
    c42c:	09 f4       	brne	.+2      	; 0xc430 <UpdateBombs+0xa1a>
    c42e:	7e c0       	rjmp	.+252    	; 0xc52c <UpdateBombs+0xb16>
    c430:	67 2d       	mov	r22, r7
    c432:	6b 19       	sub	r22, r11




inline u8 GetMapTile(u8 x, u8 y){
      return (vram[(y*30)+x]-RAM_TILES_COUNT);//return (vram[122+(y*30)+x]-RAM_TILES_COUNT);
    c434:	fe e1       	ldi	r31, 0x1E	; 30
    c436:	6f 9f       	mul	r22, r31
    c438:	f0 01       	movw	r30, r0
    c43a:	11 24       	eor	r1, r1
    c43c:	ec 0d       	add	r30, r12
    c43e:	fd 1d       	adc	r31, r13
    c440:	f9 a7       	std	Y+41, r31	; 0x29
    c442:	e8 a7       	std	Y+40, r30	; 0x28
    c444:	e0 5e       	subi	r30, 0xE0	; 224
    c446:	fe 4f       	sbci	r31, 0xFE	; 254
    c448:	e0 81       	ld	r30, Z
    c44a:	1e 2f       	mov	r17, r30
    c44c:	1f 51       	subi	r17, 0x1F	; 31
     
   return false;
}

inline bool IsSolidForFire(u8 t){
   if(t < 4)
    c44e:	14 30       	cpi	r17, 0x04	; 4
    c450:	50 f0       	brcs	.+20     	; 0xc466 <UpdateBombs+0xa50>
      return false;

   if((t >= BLOCK_START && t <= WALL_END) || (t >= SPECIAL_SOLID_START && t <= SPECIAL_SOLID_END) || (t >= BORDER_START))
    c452:	e3 52       	subi	r30, 0x23	; 35
    c454:	e8 32       	cpi	r30, 0x28	; 40
    c456:	08 f4       	brcc	.+2      	; 0xc45a <UpdateBombs+0xa44>
    c458:	41 c2       	rjmp	.+1154   	; 0xc8dc <UpdateBombs+0xec6>
    c45a:	1e 3f       	cpi	r17, 0xFE	; 254
    c45c:	09 f4       	brne	.+2      	; 0xc460 <UpdateBombs+0xa4a>
    c45e:	3e c2       	rjmp	.+1148   	; 0xc8dc <UpdateBombs+0xec6>
    c460:	17 3c       	cpi	r17, 0xC7	; 199
    c462:	08 f0       	brcs	.+2      	; 0xc466 <UpdateBombs+0xa50>
    c464:	3b c2       	rjmp	.+1142   	; 0xc8dc <UpdateBombs+0xec6>
		
			
            u = false;
	     }
		 else{//not solid
            if(end)
    c466:	00 23       	and	r16, r16
    c468:	c1 f4       	brne	.+48     	; 0xc49a <UpdateBombs+0xa84>
    c46a:	24 c0       	rjmp	.+72     	; 0xc4b4 <UpdateBombs+0xa9e>
      return true;
   return false;
}

inline bool IsBlock(u8 t){
   if(t >= BLOCK_START && t <= BLOCK_END)
    c46c:	e8 31       	cpi	r30, 0x18	; 24
    c46e:	08 f0       	brcs	.+2      	; 0xc472 <UpdateBombs+0xa5c>
    c470:	5c c0       	rjmp	.+184    	; 0xc52a <UpdateBombs+0xb14>

void SetMapTile(u8 x, u8 y, u8 t){
   int off = (y*30)+x;//((y<<1)*30)+(x<<1);
   t+=RAM_TILES_COUNT;//t = (t<<2)+RAM_TILES_COUNT;//t = (tileset*(NUMTILES*4)) + (t*4) + RAM_TILES_COUNT;
   
   vram[off+ 0] = t++;
    c472:	e8 a5       	ldd	r30, Y+40	; 0x28
    c474:	f9 a5       	ldd	r31, Y+41	; 0x29
    c476:	e0 5e       	subi	r30, 0xE0	; 224
    c478:	fe 4f       	sbci	r31, 0xFE	; 254
    c47a:	2a 85       	ldd	r18, Y+10	; 0x0a
    c47c:	20 83       	st	Z, r18
   vram[off+ 1] = t++;
    c47e:	3e 81       	ldd	r19, Y+6	; 0x06
    c480:	31 83       	std	Z+1, r19	; 0x01
   vram[off+30] = t++;
    c482:	4d 81       	ldd	r20, Y+5	; 0x05
    c484:	46 8f       	std	Z+30, r20	; 0x1e
   vram[off+31] = t;
    c486:	5c 81       	ldd	r21, Y+4	; 0x04
    c488:	57 8f       	std	Z+31, r21	; 0x1f
    c48a:	4f c0       	rjmp	.+158    	; 0xc52a <UpdateBombs+0xb14>
    c48c:	e8 31       	cpi	r30, 0x18	; 24
    c48e:	08 f0       	brcs	.+2      	; 0xc492 <UpdateBombs+0xa7c>
    c490:	4c c0       	rjmp	.+152    	; 0xc52a <UpdateBombs+0xb14>
		//	      TriggerBomb(x,y-i);
		    //   else
		      //    SetMapTile(x,y-i,FIRE_START);
		    }
		    else if(IsBlock(t))
		       DestroyBlock(x,y-i);//SetMapTile(x,y-i,0);
    c492:	8a 2d       	mov	r24, r10
    c494:	0e 94 41 4c 	call	0x9882	; 0x9882 <DestroyBlock>
    c498:	48 c0       	rjmp	.+144    	; 0xc52a <UpdateBombs+0xb14>

void SetMapTile(u8 x, u8 y, u8 t){
   int off = (y*30)+x;//((y<<1)*30)+(x<<1);
   t+=RAM_TILES_COUNT;//t = (t<<2)+RAM_TILES_COUNT;//t = (tileset*(NUMTILES*4)) + (t*4) + RAM_TILES_COUNT;
   
   vram[off+ 0] = t++;
    c49a:	e8 a5       	ldd	r30, Y+40	; 0x28
    c49c:	f9 a5       	ldd	r31, Y+41	; 0x29
    c49e:	e0 5e       	subi	r30, 0xE0	; 224
    c4a0:	fe 4f       	sbci	r31, 0xFE	; 254
    c4a2:	8f e1       	ldi	r24, 0x1F	; 31
    c4a4:	80 83       	st	Z, r24
   vram[off+ 1] = t++;
    c4a6:	90 e2       	ldi	r25, 0x20	; 32
    c4a8:	91 83       	std	Z+1, r25	; 0x01
   vram[off+30] = t++;
    c4aa:	a1 e2       	ldi	r26, 0x21	; 33
    c4ac:	a6 8f       	std	Z+30, r26	; 0x1e
   vram[off+31] = t;
    c4ae:	b2 e2       	ldi	r27, 0x22	; 34
    c4b0:	b7 8f       	std	Z+31, r27	; 0x1f
    c4b2:	3c c0       	rjmp	.+120    	; 0xc52c <UpdateBombs+0xb16>
            u = false;
	     }
		 else{//not solid
            if(end)
		       SetMapTile(x,y-i,0);//DestroyBlock(x,y-i);
            else if(IsCenterFire(t)){
    c4b4:	81 2f       	mov	r24, r17
    c4b6:	0e 94 24 4c 	call	0x9848	; 0x9848 <IsCenterFire>
    c4ba:	88 23       	and	r24, r24
    c4bc:	b9 f5       	brne	.+110    	; 0xc52c <UpdateBombs+0xb16>

			}
			else if(IsHorizontalFire(t))
    c4be:	81 2f       	mov	r24, r17
    c4c0:	0e 94 fe 4b 	call	0x97fc	; 0x97fc <IsHorizontalFire>
    c4c4:	88 23       	and	r24, r24
    c4c6:	69 f0       	breq	.+26     	; 0xc4e2 <UpdateBombs+0xacc>

void SetMapTile(u8 x, u8 y, u8 t){
   int off = (y*30)+x;//((y<<1)*30)+(x<<1);
   t+=RAM_TILES_COUNT;//t = (t<<2)+RAM_TILES_COUNT;//t = (tileset*(NUMTILES*4)) + (t*4) + RAM_TILES_COUNT;
   
   vram[off+ 0] = t++;
    c4c8:	e8 a5       	ldd	r30, Y+40	; 0x28
    c4ca:	f9 a5       	ldd	r31, Y+41	; 0x29
    c4cc:	e0 5e       	subi	r30, 0xE0	; 224
    c4ce:	fe 4f       	sbci	r31, 0xFE	; 254
    c4d0:	2b 85       	ldd	r18, Y+11	; 0x0b
    c4d2:	20 83       	st	Z, r18
   vram[off+ 1] = t++;
    c4d4:	3b 81       	ldd	r19, Y+3	; 0x03
    c4d6:	31 83       	std	Z+1, r19	; 0x01
   vram[off+30] = t++;
    c4d8:	4a 81       	ldd	r20, Y+2	; 0x02
    c4da:	46 8f       	std	Z+30, r20	; 0x1e
   vram[off+31] = t;
    c4dc:	59 81       	ldd	r21, Y+1	; 0x01
    c4de:	57 8f       	std	Z+31, r21	; 0x1f
    c4e0:	25 c0       	rjmp	.+74     	; 0xc52c <UpdateBombs+0xb16>
			   SetMapTile(x,y-i,FIRE_CENTER+((fframe)*28));
			else if(!tip)
    c4e2:	89 85       	ldd	r24, Y+9	; 0x09
    c4e4:	88 23       	and	r24, r24
    c4e6:	69 f4       	brne	.+26     	; 0xc502 <UpdateBombs+0xaec>

void SetMapTile(u8 x, u8 y, u8 t){
   int off = (y*30)+x;//((y<<1)*30)+(x<<1);
   t+=RAM_TILES_COUNT;//t = (t<<2)+RAM_TILES_COUNT;//t = (tileset*(NUMTILES*4)) + (t*4) + RAM_TILES_COUNT;
   
   vram[off+ 0] = t++;
    c4e8:	e8 a5       	ldd	r30, Y+40	; 0x28
    c4ea:	f9 a5       	ldd	r31, Y+41	; 0x29
    c4ec:	e0 5e       	subi	r30, 0xE0	; 224
    c4ee:	fe 4f       	sbci	r31, 0xFE	; 254
    c4f0:	99 89       	ldd	r25, Y+17	; 0x11
    c4f2:	90 83       	st	Z, r25
   vram[off+ 1] = t++;
    c4f4:	aa 89       	ldd	r26, Y+18	; 0x12
    c4f6:	a1 83       	std	Z+1, r26	; 0x01
   vram[off+30] = t++;
    c4f8:	bb 89       	ldd	r27, Y+19	; 0x13
    c4fa:	b6 8f       	std	Z+30, r27	; 0x1e
   vram[off+31] = t;
    c4fc:	2c 89       	ldd	r18, Y+20	; 0x14
    c4fe:	27 8f       	std	Z+31, r18	; 0x1f
    c500:	15 c0       	rjmp	.+42     	; 0xc52c <UpdateBombs+0xb16>
		       SetMapTile(x,y-i,FIRE_VERT+(fframe/**28*/));
            else if(t < FIRE_START || IsTipFire(t))//don't draw a tip over another explosion(looks bad)
    c502:	1c 32       	cpi	r17, 0x2C	; 44
    c504:	28 f0       	brcs	.+10     	; 0xc510 <UpdateBombs+0xafa>
    c506:	81 2f       	mov	r24, r17
    c508:	0e 94 33 4c 	call	0x9866	; 0x9866 <IsTipFire>
    c50c:	88 23       	and	r24, r24
    c50e:	71 f0       	breq	.+28     	; 0xc52c <UpdateBombs+0xb16>

void SetMapTile(u8 x, u8 y, u8 t){
   int off = (y*30)+x;//((y<<1)*30)+(x<<1);
   t+=RAM_TILES_COUNT;//t = (t<<2)+RAM_TILES_COUNT;//t = (tileset*(NUMTILES*4)) + (t*4) + RAM_TILES_COUNT;
   
   vram[off+ 0] = t++;
    c510:	e8 a5       	ldd	r30, Y+40	; 0x28
    c512:	f9 a5       	ldd	r31, Y+41	; 0x29
    c514:	e0 5e       	subi	r30, 0xE0	; 224
    c516:	fe 4f       	sbci	r31, 0xFE	; 254
    c518:	3d 85       	ldd	r19, Y+13	; 0x0d
    c51a:	30 83       	st	Z, r19
   vram[off+ 1] = t++;
    c51c:	4e 85       	ldd	r20, Y+14	; 0x0e
    c51e:	41 83       	std	Z+1, r20	; 0x01
   vram[off+30] = t++;
    c520:	5f 85       	ldd	r21, Y+15	; 0x0f
    c522:	56 8f       	std	Z+30, r21	; 0x1e
   vram[off+31] = t;
    c524:	88 89       	ldd	r24, Y+16	; 0x10
    c526:	87 8f       	std	Z+31, r24	; 0x1f
    c528:	01 c0       	rjmp	.+2      	; 0xc52c <UpdateBombs+0xb16>
    c52a:	22 24       	eor	r2, r2
			   SetMapTile(x,y-i,FIRE_TOP_TIP+(fframe/**28*/));
		 }
	  }

	  if(d){
    c52c:	33 20       	and	r3, r3
    c52e:	09 f4       	brne	.+2      	; 0xc532 <UpdateBombs+0xb1c>
    c530:	7f c0       	rjmp	.+254    	; 0xc630 <UpdateBombs+0xc1a>
    c532:	6b 2d       	mov	r22, r11
    c534:	67 0d       	add	r22, r7




inline u8 GetMapTile(u8 x, u8 y){
      return (vram[(y*30)+x]-RAM_TILES_COUNT);//return (vram[122+(y*30)+x]-RAM_TILES_COUNT);
    c536:	be e1       	ldi	r27, 0x1E	; 30
    c538:	6b 9f       	mul	r22, r27
    c53a:	d0 01       	movw	r26, r0
    c53c:	11 24       	eor	r1, r1
    c53e:	ac 0d       	add	r26, r12
    c540:	bd 1d       	adc	r27, r13
    c542:	b9 a7       	std	Y+41, r27	; 0x29
    c544:	a8 a7       	std	Y+40, r26	; 0x28
    c546:	fd 01       	movw	r30, r26
    c548:	e0 5e       	subi	r30, 0xE0	; 224
    c54a:	fe 4f       	sbci	r31, 0xFE	; 254
    c54c:	e0 81       	ld	r30, Z
    c54e:	1e 2f       	mov	r17, r30
    c550:	1f 51       	subi	r17, 0x1F	; 31
     
   return false;
}

inline bool IsSolidForFire(u8 t){
   if(t < 4)
    c552:	14 30       	cpi	r17, 0x04	; 4
    c554:	50 f0       	brcs	.+20     	; 0xc56a <UpdateBombs+0xb54>
      return false;

   if((t >= BLOCK_START && t <= WALL_END) || (t >= SPECIAL_SOLID_START && t <= SPECIAL_SOLID_END) || (t >= BORDER_START))
    c556:	e3 52       	subi	r30, 0x23	; 35
    c558:	e8 32       	cpi	r30, 0x28	; 40
    c55a:	08 f4       	brcc	.+2      	; 0xc55e <UpdateBombs+0xb48>
    c55c:	c3 c1       	rjmp	.+902    	; 0xc8e4 <UpdateBombs+0xece>
    c55e:	1e 3f       	cpi	r17, 0xFE	; 254
    c560:	09 f4       	brne	.+2      	; 0xc564 <UpdateBombs+0xb4e>
    c562:	c0 c1       	rjmp	.+896    	; 0xc8e4 <UpdateBombs+0xece>
    c564:	17 3c       	cpi	r17, 0xC7	; 199
    c566:	08 f0       	brcs	.+2      	; 0xc56a <UpdateBombs+0xb54>
    c568:	bd c1       	rjmp	.+890    	; 0xc8e4 <UpdateBombs+0xece>
		
			
            d = false;
	     }
		 else{
            if(end)
    c56a:	00 23       	and	r16, r16
    c56c:	c1 f4       	brne	.+48     	; 0xc59e <UpdateBombs+0xb88>
    c56e:	24 c0       	rjmp	.+72     	; 0xc5b8 <UpdateBombs+0xba2>
      return true;
   return false;
}

inline bool IsBlock(u8 t){
   if(t >= BLOCK_START && t <= BLOCK_END)
    c570:	e8 31       	cpi	r30, 0x18	; 24
    c572:	08 f0       	brcs	.+2      	; 0xc576 <UpdateBombs+0xb60>
    c574:	5c c0       	rjmp	.+184    	; 0xc62e <UpdateBombs+0xc18>

void SetMapTile(u8 x, u8 y, u8 t){
   int off = (y*30)+x;//((y<<1)*30)+(x<<1);
   t+=RAM_TILES_COUNT;//t = (t<<2)+RAM_TILES_COUNT;//t = (tileset*(NUMTILES*4)) + (t*4) + RAM_TILES_COUNT;
   
   vram[off+ 0] = t++;
    c576:	e8 a5       	ldd	r30, Y+40	; 0x28
    c578:	f9 a5       	ldd	r31, Y+41	; 0x29
    c57a:	e0 5e       	subi	r30, 0xE0	; 224
    c57c:	fe 4f       	sbci	r31, 0xFE	; 254
    c57e:	2a 85       	ldd	r18, Y+10	; 0x0a
    c580:	20 83       	st	Z, r18
   vram[off+ 1] = t++;
    c582:	3e 81       	ldd	r19, Y+6	; 0x06
    c584:	31 83       	std	Z+1, r19	; 0x01
   vram[off+30] = t++;
    c586:	4d 81       	ldd	r20, Y+5	; 0x05
    c588:	46 8f       	std	Z+30, r20	; 0x1e
   vram[off+31] = t;
    c58a:	5c 81       	ldd	r21, Y+4	; 0x04
    c58c:	57 8f       	std	Z+31, r21	; 0x1f
    c58e:	4f c0       	rjmp	.+158    	; 0xc62e <UpdateBombs+0xc18>
    c590:	e8 31       	cpi	r30, 0x18	; 24
    c592:	08 f0       	brcs	.+2      	; 0xc596 <UpdateBombs+0xb80>
    c594:	4c c0       	rjmp	.+152    	; 0xc62e <UpdateBombs+0xc18>
//			      TriggerBomb(x,y+i);
		    //   else
		      //    SetMapTile(x,y-i,FIRE_START);
		    }
		    else if(IsBlock(t))
		       DestroyBlock(x,y+i);//SetMapTile(x,y+i,0);
    c596:	8a 2d       	mov	r24, r10
    c598:	0e 94 41 4c 	call	0x9882	; 0x9882 <DestroyBlock>
    c59c:	48 c0       	rjmp	.+144    	; 0xc62e <UpdateBombs+0xc18>

void SetMapTile(u8 x, u8 y, u8 t){
   int off = (y*30)+x;//((y<<1)*30)+(x<<1);
   t+=RAM_TILES_COUNT;//t = (t<<2)+RAM_TILES_COUNT;//t = (tileset*(NUMTILES*4)) + (t*4) + RAM_TILES_COUNT;
   
   vram[off+ 0] = t++;
    c59e:	e8 a5       	ldd	r30, Y+40	; 0x28
    c5a0:	f9 a5       	ldd	r31, Y+41	; 0x29
    c5a2:	e0 5e       	subi	r30, 0xE0	; 224
    c5a4:	fe 4f       	sbci	r31, 0xFE	; 254
    c5a6:	8f e1       	ldi	r24, 0x1F	; 31
    c5a8:	80 83       	st	Z, r24
   vram[off+ 1] = t++;
    c5aa:	90 e2       	ldi	r25, 0x20	; 32
    c5ac:	91 83       	std	Z+1, r25	; 0x01
   vram[off+30] = t++;
    c5ae:	a1 e2       	ldi	r26, 0x21	; 33
    c5b0:	a6 8f       	std	Z+30, r26	; 0x1e
   vram[off+31] = t;
    c5b2:	b2 e2       	ldi	r27, 0x22	; 34
    c5b4:	b7 8f       	std	Z+31, r27	; 0x1f
    c5b6:	3c c0       	rjmp	.+120    	; 0xc630 <UpdateBombs+0xc1a>
            d = false;
	     }
		 else{
            if(end)
		       SetMapTile(x,y+i,0);//DestroyBlock(x,y+i);
            else if(IsCenterFire(t)){
    c5b8:	81 2f       	mov	r24, r17
    c5ba:	0e 94 24 4c 	call	0x9848	; 0x9848 <IsCenterFire>
    c5be:	88 23       	and	r24, r24
    c5c0:	b9 f5       	brne	.+110    	; 0xc630 <UpdateBombs+0xc1a>

			}
            else if(IsHorizontalFire(t))
    c5c2:	81 2f       	mov	r24, r17
    c5c4:	0e 94 fe 4b 	call	0x97fc	; 0x97fc <IsHorizontalFire>
    c5c8:	88 23       	and	r24, r24
    c5ca:	69 f0       	breq	.+26     	; 0xc5e6 <UpdateBombs+0xbd0>

void SetMapTile(u8 x, u8 y, u8 t){
   int off = (y*30)+x;//((y<<1)*30)+(x<<1);
   t+=RAM_TILES_COUNT;//t = (t<<2)+RAM_TILES_COUNT;//t = (tileset*(NUMTILES*4)) + (t*4) + RAM_TILES_COUNT;
   
   vram[off+ 0] = t++;
    c5cc:	e8 a5       	ldd	r30, Y+40	; 0x28
    c5ce:	f9 a5       	ldd	r31, Y+41	; 0x29
    c5d0:	e0 5e       	subi	r30, 0xE0	; 224
    c5d2:	fe 4f       	sbci	r31, 0xFE	; 254
    c5d4:	2b 85       	ldd	r18, Y+11	; 0x0b
    c5d6:	20 83       	st	Z, r18
   vram[off+ 1] = t++;
    c5d8:	3b 81       	ldd	r19, Y+3	; 0x03
    c5da:	31 83       	std	Z+1, r19	; 0x01
   vram[off+30] = t++;
    c5dc:	4a 81       	ldd	r20, Y+2	; 0x02
    c5de:	46 8f       	std	Z+30, r20	; 0x1e
   vram[off+31] = t;
    c5e0:	59 81       	ldd	r21, Y+1	; 0x01
    c5e2:	57 8f       	std	Z+31, r21	; 0x1f
    c5e4:	25 c0       	rjmp	.+74     	; 0xc630 <UpdateBombs+0xc1a>
			   SetMapTile(x,y+i,FIRE_CENTER+((fframe)*28));
            else if(!tip)
    c5e6:	89 85       	ldd	r24, Y+9	; 0x09
    c5e8:	88 23       	and	r24, r24
    c5ea:	69 f4       	brne	.+26     	; 0xc606 <UpdateBombs+0xbf0>

void SetMapTile(u8 x, u8 y, u8 t){
   int off = (y*30)+x;//((y<<1)*30)+(x<<1);
   t+=RAM_TILES_COUNT;//t = (t<<2)+RAM_TILES_COUNT;//t = (tileset*(NUMTILES*4)) + (t*4) + RAM_TILES_COUNT;
   
   vram[off+ 0] = t++;
    c5ec:	e8 a5       	ldd	r30, Y+40	; 0x28
    c5ee:	f9 a5       	ldd	r31, Y+41	; 0x29
    c5f0:	e0 5e       	subi	r30, 0xE0	; 224
    c5f2:	fe 4f       	sbci	r31, 0xFE	; 254
    c5f4:	99 89       	ldd	r25, Y+17	; 0x11
    c5f6:	90 83       	st	Z, r25
   vram[off+ 1] = t++;
    c5f8:	aa 89       	ldd	r26, Y+18	; 0x12
    c5fa:	a1 83       	std	Z+1, r26	; 0x01
   vram[off+30] = t++;
    c5fc:	bb 89       	ldd	r27, Y+19	; 0x13
    c5fe:	b6 8f       	std	Z+30, r27	; 0x1e
   vram[off+31] = t;
    c600:	2c 89       	ldd	r18, Y+20	; 0x14
    c602:	27 8f       	std	Z+31, r18	; 0x1f
    c604:	15 c0       	rjmp	.+42     	; 0xc630 <UpdateBombs+0xc1a>
		       SetMapTile(x,y+i,FIRE_VERT+(fframe/**28*/));
            else if(t < FIRE_START || IsTipFire(t))
    c606:	1c 32       	cpi	r17, 0x2C	; 44
    c608:	28 f0       	brcs	.+10     	; 0xc614 <UpdateBombs+0xbfe>
    c60a:	81 2f       	mov	r24, r17
    c60c:	0e 94 33 4c 	call	0x9866	; 0x9866 <IsTipFire>
    c610:	88 23       	and	r24, r24
    c612:	71 f0       	breq	.+28     	; 0xc630 <UpdateBombs+0xc1a>

void SetMapTile(u8 x, u8 y, u8 t){
   int off = (y*30)+x;//((y<<1)*30)+(x<<1);
   t+=RAM_TILES_COUNT;//t = (t<<2)+RAM_TILES_COUNT;//t = (tileset*(NUMTILES*4)) + (t*4) + RAM_TILES_COUNT;
   
   vram[off+ 0] = t++;
    c614:	e8 a5       	ldd	r30, Y+40	; 0x28
    c616:	f9 a5       	ldd	r31, Y+41	; 0x29
    c618:	e0 5e       	subi	r30, 0xE0	; 224
    c61a:	fe 4f       	sbci	r31, 0xFE	; 254
    c61c:	3d 89       	ldd	r19, Y+21	; 0x15
    c61e:	30 83       	st	Z, r19
   vram[off+ 1] = t++;
    c620:	4e 89       	ldd	r20, Y+22	; 0x16
    c622:	41 83       	std	Z+1, r20	; 0x01
   vram[off+30] = t++;
    c624:	5f 89       	ldd	r21, Y+23	; 0x17
    c626:	56 8f       	std	Z+30, r21	; 0x1e
   vram[off+31] = t;
    c628:	88 8d       	ldd	r24, Y+24	; 0x18
    c62a:	87 8f       	std	Z+31, r24	; 0x1f
    c62c:	01 c0       	rjmp	.+2      	; 0xc630 <UpdateBombs+0xc1a>
    c62e:	33 24       	eor	r3, r3
			   SetMapTile(x,y+i,FIRE_BOTTOM_TIP+(fframe/**28*/));
		 }
	  }

	  if(l){
    c630:	66 20       	and	r6, r6
    c632:	09 f4       	brne	.+2      	; 0xc636 <UpdateBombs+0xc20>
    c634:	7c c0       	rjmp	.+248    	; 0xc72e <UpdateBombs+0xd18>
    c636:	8a 2d       	mov	r24, r10
    c638:	8b 19       	sub	r24, r11




inline u8 GetMapTile(u8 x, u8 y){
      return (vram[(y*30)+x]-RAM_TILES_COUNT);//return (vram[122+(y*30)+x]-RAM_TILES_COUNT);
    c63a:	d4 01       	movw	r26, r8
    c63c:	a8 0f       	add	r26, r24
    c63e:	b1 1d       	adc	r27, r1
    c640:	b9 a7       	std	Y+41, r27	; 0x29
    c642:	a8 a7       	std	Y+40, r26	; 0x28
    c644:	fd 01       	movw	r30, r26
    c646:	e0 5e       	subi	r30, 0xE0	; 224
    c648:	fe 4f       	sbci	r31, 0xFE	; 254
    c64a:	e0 81       	ld	r30, Z
    c64c:	1e 2f       	mov	r17, r30
    c64e:	1f 51       	subi	r17, 0x1F	; 31
     
   return false;
}

inline bool IsSolidForFire(u8 t){
   if(t < 4)
    c650:	14 30       	cpi	r17, 0x04	; 4
    c652:	50 f0       	brcs	.+20     	; 0xc668 <UpdateBombs+0xc52>
      return false;

   if((t >= BLOCK_START && t <= WALL_END) || (t >= SPECIAL_SOLID_START && t <= SPECIAL_SOLID_END) || (t >= BORDER_START))
    c654:	e3 52       	subi	r30, 0x23	; 35
    c656:	e8 32       	cpi	r30, 0x28	; 40
    c658:	08 f4       	brcc	.+2      	; 0xc65c <UpdateBombs+0xc46>
    c65a:	48 c1       	rjmp	.+656    	; 0xc8ec <UpdateBombs+0xed6>
    c65c:	1e 3f       	cpi	r17, 0xFE	; 254
    c65e:	09 f4       	brne	.+2      	; 0xc662 <UpdateBombs+0xc4c>
    c660:	45 c1       	rjmp	.+650    	; 0xc8ec <UpdateBombs+0xed6>
    c662:	17 3c       	cpi	r17, 0xC7	; 199
    c664:	08 f0       	brcs	.+2      	; 0xc668 <UpdateBombs+0xc52>
    c666:	42 c1       	rjmp	.+644    	; 0xc8ec <UpdateBombs+0xed6>
		

            l = false;
	     }			
		 else{
            if(end)
    c668:	00 23       	and	r16, r16
    c66a:	c1 f4       	brne	.+48     	; 0xc69c <UpdateBombs+0xc86>
    c66c:	24 c0       	rjmp	.+72     	; 0xc6b6 <UpdateBombs+0xca0>
      return true;
   return false;
}

inline bool IsBlock(u8 t){
   if(t >= BLOCK_START && t <= BLOCK_END)
    c66e:	e8 31       	cpi	r30, 0x18	; 24
    c670:	08 f0       	brcs	.+2      	; 0xc674 <UpdateBombs+0xc5e>
    c672:	5c c0       	rjmp	.+184    	; 0xc72c <UpdateBombs+0xd16>

void SetMapTile(u8 x, u8 y, u8 t){
   int off = (y*30)+x;//((y<<1)*30)+(x<<1);
   t+=RAM_TILES_COUNT;//t = (t<<2)+RAM_TILES_COUNT;//t = (tileset*(NUMTILES*4)) + (t*4) + RAM_TILES_COUNT;
   
   vram[off+ 0] = t++;
    c674:	e8 a5       	ldd	r30, Y+40	; 0x28
    c676:	f9 a5       	ldd	r31, Y+41	; 0x29
    c678:	e0 5e       	subi	r30, 0xE0	; 224
    c67a:	fe 4f       	sbci	r31, 0xFE	; 254
    c67c:	ba 85       	ldd	r27, Y+10	; 0x0a
    c67e:	b0 83       	st	Z, r27
   vram[off+ 1] = t++;
    c680:	2e 81       	ldd	r18, Y+6	; 0x06
    c682:	21 83       	std	Z+1, r18	; 0x01
   vram[off+30] = t++;
    c684:	3d 81       	ldd	r19, Y+5	; 0x05
    c686:	36 8f       	std	Z+30, r19	; 0x1e
   vram[off+31] = t;
    c688:	4c 81       	ldd	r20, Y+4	; 0x04
    c68a:	47 8f       	std	Z+31, r20	; 0x1f
    c68c:	4f c0       	rjmp	.+158    	; 0xc72c <UpdateBombs+0xd16>
    c68e:	e8 31       	cpi	r30, 0x18	; 24
    c690:	08 f0       	brcs	.+2      	; 0xc694 <UpdateBombs+0xc7e>
    c692:	4c c0       	rjmp	.+152    	; 0xc72c <UpdateBombs+0xd16>
//			      TriggerBomb(x-i,y);
		    //   else
		      //    SetMapTile(x,y-i,FIRE_START);
		    }
		    else if(IsBlock(t))
		       DestroyBlock(x-i,y);//SetMapTile(x-i,y,0);
    c694:	67 2d       	mov	r22, r7
    c696:	0e 94 41 4c 	call	0x9882	; 0x9882 <DestroyBlock>
    c69a:	48 c0       	rjmp	.+144    	; 0xc72c <UpdateBombs+0xd16>

void SetMapTile(u8 x, u8 y, u8 t){
   int off = (y*30)+x;//((y<<1)*30)+(x<<1);
   t+=RAM_TILES_COUNT;//t = (t<<2)+RAM_TILES_COUNT;//t = (tileset*(NUMTILES*4)) + (t*4) + RAM_TILES_COUNT;
   
   vram[off+ 0] = t++;
    c69c:	e8 a5       	ldd	r30, Y+40	; 0x28
    c69e:	f9 a5       	ldd	r31, Y+41	; 0x29
    c6a0:	e0 5e       	subi	r30, 0xE0	; 224
    c6a2:	fe 4f       	sbci	r31, 0xFE	; 254
    c6a4:	5f e1       	ldi	r21, 0x1F	; 31
    c6a6:	50 83       	st	Z, r21
   vram[off+ 1] = t++;
    c6a8:	80 e2       	ldi	r24, 0x20	; 32
    c6aa:	81 83       	std	Z+1, r24	; 0x01
   vram[off+30] = t++;
    c6ac:	91 e2       	ldi	r25, 0x21	; 33
    c6ae:	96 8f       	std	Z+30, r25	; 0x1e
   vram[off+31] = t;
    c6b0:	a2 e2       	ldi	r26, 0x22	; 34
    c6b2:	a7 8f       	std	Z+31, r26	; 0x1f
    c6b4:	3c c0       	rjmp	.+120    	; 0xc72e <UpdateBombs+0xd18>
            l = false;
	     }			
		 else{
            if(end)
		       SetMapTile(x-i,y,0);//DestroyBlock(x-i,y);
            else if(IsCenterFire(t)){
    c6b6:	81 2f       	mov	r24, r17
    c6b8:	0e 94 24 4c 	call	0x9848	; 0x9848 <IsCenterFire>
    c6bc:	88 23       	and	r24, r24
    c6be:	b9 f5       	brne	.+110    	; 0xc72e <UpdateBombs+0xd18>

			}
            else if(IsVerticalFire(t))
    c6c0:	81 2f       	mov	r24, r17
    c6c2:	0e 94 12 4c 	call	0x9824	; 0x9824 <IsVerticalFire>
    c6c6:	88 23       	and	r24, r24
    c6c8:	69 f0       	breq	.+26     	; 0xc6e4 <UpdateBombs+0xcce>

void SetMapTile(u8 x, u8 y, u8 t){
   int off = (y*30)+x;//((y<<1)*30)+(x<<1);
   t+=RAM_TILES_COUNT;//t = (t<<2)+RAM_TILES_COUNT;//t = (tileset*(NUMTILES*4)) + (t*4) + RAM_TILES_COUNT;
   
   vram[off+ 0] = t++;
    c6ca:	e8 a5       	ldd	r30, Y+40	; 0x28
    c6cc:	f9 a5       	ldd	r31, Y+41	; 0x29
    c6ce:	e0 5e       	subi	r30, 0xE0	; 224
    c6d0:	fe 4f       	sbci	r31, 0xFE	; 254
    c6d2:	bb 85       	ldd	r27, Y+11	; 0x0b
    c6d4:	b0 83       	st	Z, r27
   vram[off+ 1] = t++;
    c6d6:	2b 81       	ldd	r18, Y+3	; 0x03
    c6d8:	21 83       	std	Z+1, r18	; 0x01
   vram[off+30] = t++;
    c6da:	3a 81       	ldd	r19, Y+2	; 0x02
    c6dc:	36 8f       	std	Z+30, r19	; 0x1e
   vram[off+31] = t;
    c6de:	49 81       	ldd	r20, Y+1	; 0x01
    c6e0:	47 8f       	std	Z+31, r20	; 0x1f
    c6e2:	25 c0       	rjmp	.+74     	; 0xc72e <UpdateBombs+0xd18>
			   SetMapTile(x-i,y,FIRE_CENTER+((fframe)*28));
            else if(!tip)
    c6e4:	59 85       	ldd	r21, Y+9	; 0x09
    c6e6:	55 23       	and	r21, r21
    c6e8:	69 f4       	brne	.+26     	; 0xc704 <UpdateBombs+0xcee>

void SetMapTile(u8 x, u8 y, u8 t){
   int off = (y*30)+x;//((y<<1)*30)+(x<<1);
   t+=RAM_TILES_COUNT;//t = (t<<2)+RAM_TILES_COUNT;//t = (tileset*(NUMTILES*4)) + (t*4) + RAM_TILES_COUNT;
   
   vram[off+ 0] = t++;
    c6ea:	e8 a5       	ldd	r30, Y+40	; 0x28
    c6ec:	f9 a5       	ldd	r31, Y+41	; 0x29
    c6ee:	e0 5e       	subi	r30, 0xE0	; 224
    c6f0:	fe 4f       	sbci	r31, 0xFE	; 254
    c6f2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    c6f4:	80 83       	st	Z, r24
   vram[off+ 1] = t++;
    c6f6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    c6f8:	91 83       	std	Z+1, r25	; 0x01
   vram[off+30] = t++;
    c6fa:	af 8d       	ldd	r26, Y+31	; 0x1f
    c6fc:	a6 8f       	std	Z+30, r26	; 0x1e
   vram[off+31] = t;
    c6fe:	b8 a1       	ldd	r27, Y+32	; 0x20
    c700:	b7 8f       	std	Z+31, r27	; 0x1f
    c702:	15 c0       	rjmp	.+42     	; 0xc72e <UpdateBombs+0xd18>
		       SetMapTile(x-i,y,FIRE_HORZ+(fframe/**28*/));
            else if(t < FIRE_START || IsTipFire(t))
    c704:	1c 32       	cpi	r17, 0x2C	; 44
    c706:	28 f0       	brcs	.+10     	; 0xc712 <UpdateBombs+0xcfc>
    c708:	81 2f       	mov	r24, r17
    c70a:	0e 94 33 4c 	call	0x9866	; 0x9866 <IsTipFire>
    c70e:	88 23       	and	r24, r24
    c710:	71 f0       	breq	.+28     	; 0xc72e <UpdateBombs+0xd18>

void SetMapTile(u8 x, u8 y, u8 t){
   int off = (y*30)+x;//((y<<1)*30)+(x<<1);
   t+=RAM_TILES_COUNT;//t = (t<<2)+RAM_TILES_COUNT;//t = (tileset*(NUMTILES*4)) + (t*4) + RAM_TILES_COUNT;
   
   vram[off+ 0] = t++;
    c712:	e8 a5       	ldd	r30, Y+40	; 0x28
    c714:	f9 a5       	ldd	r31, Y+41	; 0x29
    c716:	e0 5e       	subi	r30, 0xE0	; 224
    c718:	fe 4f       	sbci	r31, 0xFE	; 254
    c71a:	29 8d       	ldd	r18, Y+25	; 0x19
    c71c:	20 83       	st	Z, r18
   vram[off+ 1] = t++;
    c71e:	3a 8d       	ldd	r19, Y+26	; 0x1a
    c720:	31 83       	std	Z+1, r19	; 0x01
   vram[off+30] = t++;
    c722:	4b 8d       	ldd	r20, Y+27	; 0x1b
    c724:	46 8f       	std	Z+30, r20	; 0x1e
   vram[off+31] = t;
    c726:	5c 8d       	ldd	r21, Y+28	; 0x1c
    c728:	57 8f       	std	Z+31, r21	; 0x1f
    c72a:	01 c0       	rjmp	.+2      	; 0xc72e <UpdateBombs+0xd18>
    c72c:	66 24       	eor	r6, r6
			   SetMapTile(x-i,y,FIRE_LEFT_TIP+(fframe/**28*/));
		 }
	  }

	  if(r){
    c72e:	88 85       	ldd	r24, Y+8	; 0x08
    c730:	88 23       	and	r24, r24
    c732:	09 f4       	brne	.+2      	; 0xc736 <UpdateBombs+0xd20>
    c734:	7c c0       	rjmp	.+248    	; 0xc82e <UpdateBombs+0xe18>
    c736:	8b 2d       	mov	r24, r11
    c738:	8a 0d       	add	r24, r10




inline u8 GetMapTile(u8 x, u8 y){
      return (vram[(y*30)+x]-RAM_TILES_COUNT);//return (vram[122+(y*30)+x]-RAM_TILES_COUNT);
    c73a:	d4 01       	movw	r26, r8
    c73c:	a8 0f       	add	r26, r24
    c73e:	b1 1d       	adc	r27, r1
    c740:	b9 a7       	std	Y+41, r27	; 0x29
    c742:	a8 a7       	std	Y+40, r26	; 0x28
    c744:	fd 01       	movw	r30, r26
    c746:	e0 5e       	subi	r30, 0xE0	; 224
    c748:	fe 4f       	sbci	r31, 0xFE	; 254
    c74a:	e0 81       	ld	r30, Z
    c74c:	1e 2f       	mov	r17, r30
    c74e:	1f 51       	subi	r17, 0x1F	; 31
     
   return false;
}

inline bool IsSolidForFire(u8 t){
   if(t < 4)
    c750:	14 30       	cpi	r17, 0x04	; 4
    c752:	50 f0       	brcs	.+20     	; 0xc768 <UpdateBombs+0xd52>
      return false;

   if((t >= BLOCK_START && t <= WALL_END) || (t >= SPECIAL_SOLID_START && t <= SPECIAL_SOLID_END) || (t >= BORDER_START))
    c754:	e3 52       	subi	r30, 0x23	; 35
    c756:	e8 32       	cpi	r30, 0x28	; 40
    c758:	08 f4       	brcc	.+2      	; 0xc75c <UpdateBombs+0xd46>
    c75a:	cc c0       	rjmp	.+408    	; 0xc8f4 <UpdateBombs+0xede>
    c75c:	1e 3f       	cpi	r17, 0xFE	; 254
    c75e:	09 f4       	brne	.+2      	; 0xc762 <UpdateBombs+0xd4c>
    c760:	c9 c0       	rjmp	.+402    	; 0xc8f4 <UpdateBombs+0xede>
    c762:	17 3c       	cpi	r17, 0xC7	; 199
    c764:	08 f0       	brcs	.+2      	; 0xc768 <UpdateBombs+0xd52>
    c766:	c6 c0       	rjmp	.+396    	; 0xc8f4 <UpdateBombs+0xede>
		
			
            r = false;
	     }
		 else{
            if(end)
    c768:	00 23       	and	r16, r16
    c76a:	c1 f4       	brne	.+48     	; 0xc79c <UpdateBombs+0xd86>
    c76c:	24 c0       	rjmp	.+72     	; 0xc7b6 <UpdateBombs+0xda0>
      return true;
   return false;
}

inline bool IsBlock(u8 t){
   if(t >= BLOCK_START && t <= BLOCK_END)
    c76e:	e8 31       	cpi	r30, 0x18	; 24
    c770:	08 f0       	brcs	.+2      	; 0xc774 <UpdateBombs+0xd5e>
    c772:	5c c0       	rjmp	.+184    	; 0xc82c <UpdateBombs+0xe16>

void SetMapTile(u8 x, u8 y, u8 t){
   int off = (y*30)+x;//((y<<1)*30)+(x<<1);
   t+=RAM_TILES_COUNT;//t = (t<<2)+RAM_TILES_COUNT;//t = (tileset*(NUMTILES*4)) + (t*4) + RAM_TILES_COUNT;
   
   vram[off+ 0] = t++;
    c774:	e8 a5       	ldd	r30, Y+40	; 0x28
    c776:	f9 a5       	ldd	r31, Y+41	; 0x29
    c778:	e0 5e       	subi	r30, 0xE0	; 224
    c77a:	fe 4f       	sbci	r31, 0xFE	; 254
    c77c:	ba 85       	ldd	r27, Y+10	; 0x0a
    c77e:	b0 83       	st	Z, r27
   vram[off+ 1] = t++;
    c780:	2e 81       	ldd	r18, Y+6	; 0x06
    c782:	21 83       	std	Z+1, r18	; 0x01
   vram[off+30] = t++;
    c784:	3d 81       	ldd	r19, Y+5	; 0x05
    c786:	36 8f       	std	Z+30, r19	; 0x1e
   vram[off+31] = t;
    c788:	4c 81       	ldd	r20, Y+4	; 0x04
    c78a:	47 8f       	std	Z+31, r20	; 0x1f
    c78c:	4f c0       	rjmp	.+158    	; 0xc82c <UpdateBombs+0xe16>
    c78e:	e8 31       	cpi	r30, 0x18	; 24
    c790:	08 f0       	brcs	.+2      	; 0xc794 <UpdateBombs+0xd7e>
    c792:	4c c0       	rjmp	.+152    	; 0xc82c <UpdateBombs+0xe16>
//			      TriggerBomb(x+i,y);
		    //   else
		      //    SetMapTile(x,y-i,FIRE_START);
		    }
		    else if(IsBlock(t))
		       DestroyBlock(x+i,y);//SetMapTile(x+i,y,0);
    c794:	67 2d       	mov	r22, r7
    c796:	0e 94 41 4c 	call	0x9882	; 0x9882 <DestroyBlock>
    c79a:	48 c0       	rjmp	.+144    	; 0xc82c <UpdateBombs+0xe16>

void SetMapTile(u8 x, u8 y, u8 t){
   int off = (y*30)+x;//((y<<1)*30)+(x<<1);
   t+=RAM_TILES_COUNT;//t = (t<<2)+RAM_TILES_COUNT;//t = (tileset*(NUMTILES*4)) + (t*4) + RAM_TILES_COUNT;
   
   vram[off+ 0] = t++;
    c79c:	e8 a5       	ldd	r30, Y+40	; 0x28
    c79e:	f9 a5       	ldd	r31, Y+41	; 0x29
    c7a0:	e0 5e       	subi	r30, 0xE0	; 224
    c7a2:	fe 4f       	sbci	r31, 0xFE	; 254
    c7a4:	5f e1       	ldi	r21, 0x1F	; 31
    c7a6:	50 83       	st	Z, r21
   vram[off+ 1] = t++;
    c7a8:	80 e2       	ldi	r24, 0x20	; 32
    c7aa:	81 83       	std	Z+1, r24	; 0x01
   vram[off+30] = t++;
    c7ac:	91 e2       	ldi	r25, 0x21	; 33
    c7ae:	96 8f       	std	Z+30, r25	; 0x1e
   vram[off+31] = t;
    c7b0:	a2 e2       	ldi	r26, 0x22	; 34
    c7b2:	a7 8f       	std	Z+31, r26	; 0x1f
    c7b4:	3c c0       	rjmp	.+120    	; 0xc82e <UpdateBombs+0xe18>
            r = false;
	     }
		 else{
            if(end)
		       SetMapTile(x+i,y,0);//DestroyBlock(x+i,y);
            else if(IsCenterFire(t)){
    c7b6:	81 2f       	mov	r24, r17
    c7b8:	0e 94 24 4c 	call	0x9848	; 0x9848 <IsCenterFire>
    c7bc:	88 23       	and	r24, r24
    c7be:	b9 f5       	brne	.+110    	; 0xc82e <UpdateBombs+0xe18>

			}
            else if(IsVerticalFire(t))
    c7c0:	81 2f       	mov	r24, r17
    c7c2:	0e 94 12 4c 	call	0x9824	; 0x9824 <IsVerticalFire>
    c7c6:	88 23       	and	r24, r24
    c7c8:	69 f0       	breq	.+26     	; 0xc7e4 <UpdateBombs+0xdce>

void SetMapTile(u8 x, u8 y, u8 t){
   int off = (y*30)+x;//((y<<1)*30)+(x<<1);
   t+=RAM_TILES_COUNT;//t = (t<<2)+RAM_TILES_COUNT;//t = (tileset*(NUMTILES*4)) + (t*4) + RAM_TILES_COUNT;
   
   vram[off+ 0] = t++;
    c7ca:	e8 a5       	ldd	r30, Y+40	; 0x28
    c7cc:	f9 a5       	ldd	r31, Y+41	; 0x29
    c7ce:	e0 5e       	subi	r30, 0xE0	; 224
    c7d0:	fe 4f       	sbci	r31, 0xFE	; 254
    c7d2:	bb 85       	ldd	r27, Y+11	; 0x0b
    c7d4:	b0 83       	st	Z, r27
   vram[off+ 1] = t++;
    c7d6:	2b 81       	ldd	r18, Y+3	; 0x03
    c7d8:	21 83       	std	Z+1, r18	; 0x01
   vram[off+30] = t++;
    c7da:	3a 81       	ldd	r19, Y+2	; 0x02
    c7dc:	36 8f       	std	Z+30, r19	; 0x1e
   vram[off+31] = t;
    c7de:	49 81       	ldd	r20, Y+1	; 0x01
    c7e0:	47 8f       	std	Z+31, r20	; 0x1f
    c7e2:	25 c0       	rjmp	.+74     	; 0xc82e <UpdateBombs+0xe18>
			   SetMapTile(x+i,y,FIRE_CENTER+((fframe)*28));
            else if(!tip)
    c7e4:	59 85       	ldd	r21, Y+9	; 0x09
    c7e6:	55 23       	and	r21, r21
    c7e8:	69 f4       	brne	.+26     	; 0xc804 <UpdateBombs+0xdee>

void SetMapTile(u8 x, u8 y, u8 t){
   int off = (y*30)+x;//((y<<1)*30)+(x<<1);
   t+=RAM_TILES_COUNT;//t = (t<<2)+RAM_TILES_COUNT;//t = (tileset*(NUMTILES*4)) + (t*4) + RAM_TILES_COUNT;
   
   vram[off+ 0] = t++;
    c7ea:	e8 a5       	ldd	r30, Y+40	; 0x28
    c7ec:	f9 a5       	ldd	r31, Y+41	; 0x29
    c7ee:	e0 5e       	subi	r30, 0xE0	; 224
    c7f0:	fe 4f       	sbci	r31, 0xFE	; 254
    c7f2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    c7f4:	80 83       	st	Z, r24
   vram[off+ 1] = t++;
    c7f6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    c7f8:	91 83       	std	Z+1, r25	; 0x01
   vram[off+30] = t++;
    c7fa:	af 8d       	ldd	r26, Y+31	; 0x1f
    c7fc:	a6 8f       	std	Z+30, r26	; 0x1e
   vram[off+31] = t;
    c7fe:	b8 a1       	ldd	r27, Y+32	; 0x20
    c800:	b7 8f       	std	Z+31, r27	; 0x1f
    c802:	15 c0       	rjmp	.+42     	; 0xc82e <UpdateBombs+0xe18>
		       SetMapTile(x+i,y,FIRE_HORZ+(fframe/**28*/));
            else if(t < FIRE_START || IsTipFire(t))
    c804:	1c 32       	cpi	r17, 0x2C	; 44
    c806:	28 f0       	brcs	.+10     	; 0xc812 <UpdateBombs+0xdfc>
    c808:	81 2f       	mov	r24, r17
    c80a:	0e 94 33 4c 	call	0x9866	; 0x9866 <IsTipFire>
    c80e:	88 23       	and	r24, r24
    c810:	71 f0       	breq	.+28     	; 0xc82e <UpdateBombs+0xe18>

void SetMapTile(u8 x, u8 y, u8 t){
   int off = (y*30)+x;//((y<<1)*30)+(x<<1);
   t+=RAM_TILES_COUNT;//t = (t<<2)+RAM_TILES_COUNT;//t = (tileset*(NUMTILES*4)) + (t*4) + RAM_TILES_COUNT;
   
   vram[off+ 0] = t++;
    c812:	e8 a5       	ldd	r30, Y+40	; 0x28
    c814:	f9 a5       	ldd	r31, Y+41	; 0x29
    c816:	e0 5e       	subi	r30, 0xE0	; 224
    c818:	fe 4f       	sbci	r31, 0xFE	; 254
    c81a:	29 a1       	ldd	r18, Y+33	; 0x21
    c81c:	20 83       	st	Z, r18
   vram[off+ 1] = t++;
    c81e:	3a a1       	ldd	r19, Y+34	; 0x22
    c820:	31 83       	std	Z+1, r19	; 0x01
   vram[off+30] = t++;
    c822:	4b a1       	ldd	r20, Y+35	; 0x23
    c824:	46 8f       	std	Z+30, r20	; 0x1e
   vram[off+31] = t;
    c826:	5c a1       	ldd	r21, Y+36	; 0x24
    c828:	57 8f       	std	Z+31, r21	; 0x1f
    c82a:	01 c0       	rjmp	.+2      	; 0xc82e <UpdateBombs+0xe18>
    c82c:	18 86       	std	Y+8, r1	; 0x08
   u=d=l=r=true;
   bool tip = false;
   
   fframe *= 28;

   for(u8 i=2;i<=range;i+=2){
    c82e:	82 e0       	ldi	r24, 0x02	; 2
    c830:	b8 0e       	add	r11, r24
    c832:	9f 81       	ldd	r25, Y+7	; 0x07
    c834:	9b 15       	cp	r25, r11
    c836:	08 f0       	brcs	.+2      	; 0xc83a <UpdateBombs+0xe24>
    c838:	de cd       	rjmp	.-1092   	; 0xc3f6 <UpdateBombs+0x9e0>
    c83a:	34 c0       	rjmp	.+104    	; 0xc8a4 <UpdateBombs+0xe8e>

	  if(bomb_timer[i] < EXPLODETIME){
	     bomb_state[i] = EXPLODE;
	     ExplodeBomb(i);
	  }
	  else if(!(bomb_x[i] & 1) && (bomb_y[i] & 1) &&
    c83c:	c0 fc       	sbrc	r12, 0
    c83e:	12 c0       	rjmp	.+36     	; 0xc864 <UpdateBombs+0xe4e>
    c840:	40 ff       	sbrs	r20, 0
    c842:	10 c0       	rjmp	.+32     	; 0xc864 <UpdateBombs+0xe4e>

   return false;
}

bool IsFire(u8 t){
   if(t >= FIRE_START && t <= FIRE_END)
    c844:	2c 52       	subi	r18, 0x2C	; 44
    c846:	24 35       	cpi	r18, 0x54	; 84
    c848:	68 f4       	brcc	.+26     	; 0xc864 <UpdateBombs+0xe4e>
	     bomb_state[i] = EXPLODE;
	     ExplodeBomb(i);
	  }
	  else if(!(bomb_x[i] & 1) && (bomb_y[i] & 1) &&
	  IsFire(GetMapTile(bomb_x[i],bomb_y[i]))){//if not yet exploding and fire was drawn over the bomb
            bomb_timer[i] = EXPLODETIME-1;
    c84a:	ad e1       	ldi	r26, 0x1D	; 29
    c84c:	a0 83       	st	Z, r26
			bomb_state[i] = EXPLODE;
    c84e:	ee ec       	ldi	r30, 0xCE	; 206
    c850:	ff e0       	ldi	r31, 0x0F	; 15
    c852:	ee 0e       	add	r14, r30
    c854:	ff 1e       	adc	r15, r31
    c856:	e0 e8       	ldi	r30, 0x80	; 128
    c858:	d7 01       	movw	r26, r14
    c85a:	ec 93       	st	X, r30
			i--;
    c85c:	fc 85       	ldd	r31, Y+12	; 0x0c
    c85e:	f1 50       	subi	r31, 0x01	; 1
    c860:	fc 87       	std	Y+12, r31	; 0x0c
    c862:	2d c0       	rjmp	.+90     	; 0xc8be <UpdateBombs+0xea8>
const char bombframelist[] PROGMEM = {2,1,0,1,};
const char fireframelist[] PROGMEM = {0,1,2,1,0};
const char blockframelist[] PROGMEM = {0,0,1,2,3,4,};

inline u8 bomb_frame(u8 b){
   if(bomb_timer[b] > EXPLODETIME)
    c864:	8e 31       	cpi	r24, 0x1E	; 30
    c866:	81 f0       	breq	.+32     	; 0xc888 <UpdateBombs+0xe72>
      return pgm_read_byte( &bombframelist[(((BOMBSTARTTIME-bomb_timer[b])/10)&3)] );//WAS 20
    c868:	20 ef       	ldi	r18, 0xF0	; 240
    c86a:	30 e0       	ldi	r19, 0x00	; 0
    c86c:	28 1b       	sub	r18, r24
    c86e:	31 09       	sbc	r19, r1
    c870:	c9 01       	movw	r24, r18
    c872:	6a e0       	ldi	r22, 0x0A	; 10
    c874:	70 e0       	ldi	r23, 0x00	; 0
    c876:	0e 94 96 70 	call	0xe12c	; 0xe12c <__divmodhi4>
    c87a:	fb 01       	movw	r30, r22
    c87c:	e3 70       	andi	r30, 0x03	; 3
    c87e:	f0 70       	andi	r31, 0x00	; 0
    c880:	ed 58       	subi	r30, 0x8D	; 141
    c882:	f6 48       	sbci	r31, 0x86	; 134
    c884:	84 91       	lpm	r24, Z+
    c886:	01 c0       	rjmp	.+2      	; 0xc88a <UpdateBombs+0xe74>
   else
      return pgm_read_byte( &blockframelist[(((EXPLODETIME  -bomb_timer[b])/5 ))] );
    c888:	8f a1       	ldd	r24, Y+39	; 0x27
   SetTile(16,0,ZERO_OFFSET+sec);
}

void SetMapTile(u8 x, u8 y, u8 t){
   int off = (y*30)+x;//((y<<1)*30)+(x<<1);
   t+=RAM_TILES_COUNT;//t = (t<<2)+RAM_TILES_COUNT;//t = (tileset*(NUMTILES*4)) + (t*4) + RAM_TILES_COUNT;
    c88a:	88 0f       	add	r24, r24
    c88c:	88 0f       	add	r24, r24
    c88e:	81 56       	subi	r24, 0x61	; 97
   
   vram[off+ 0] = t++;
    c890:	f8 01       	movw	r30, r16
    c892:	e0 5e       	subi	r30, 0xE0	; 224
    c894:	fe 4f       	sbci	r31, 0xFE	; 254
    c896:	80 83       	st	Z, r24
    c898:	8f 5f       	subi	r24, 0xFF	; 255
   vram[off+ 1] = t++;
    c89a:	81 83       	std	Z+1, r24	; 0x01
    c89c:	8f 5f       	subi	r24, 0xFF	; 255
   vram[off+30] = t++;
    c89e:	86 8f       	std	Z+30, r24	; 0x1e
   vram[off+31] = t;
    c8a0:	8f 5f       	subi	r24, 0xFF	; 255
    c8a2:	87 8f       	std	Z+31, r24	; 0x1f

		 SetMapTile(bomb_x[i], bomb_y[i], BOMB_START+(bomb_frame(i)<<2));

	  }

	  if(!bomb_timer[i]){
    c8a4:	f7 01       	movw	r30, r14
    c8a6:	e7 55       	subi	r30, 0x57	; 87
    c8a8:	f0 4f       	sbci	r31, 0xF0	; 240
    c8aa:	80 81       	ld	r24, Z
    c8ac:	88 23       	and	r24, r24
    c8ae:	39 f4       	brne	.+14     	; 0xc8be <UpdateBombs+0xea8>
         bomb_owner[i] = 255;
    c8b0:	4e ee       	ldi	r20, 0xEE	; 238
    c8b2:	5f e0       	ldi	r21, 0x0F	; 15
    c8b4:	e4 0e       	add	r14, r20
    c8b6:	f5 1e       	adc	r15, r21
    c8b8:	ef ef       	ldi	r30, 0xFF	; 255
    c8ba:	d7 01       	movw	r26, r14
    c8bc:	ec 93       	st	X, r30

}

void UpdateBombs(){
   SortBombs();
   for(u8 i=0;i<MAX_BOMBS;i++){
    c8be:	fc 85       	ldd	r31, Y+12	; 0x0c
    c8c0:	ff 5f       	subi	r31, 0xFF	; 255
    c8c2:	fc 87       	std	Y+12, r31	; 0x0c
    c8c4:	f0 31       	cpi	r31, 0x10	; 16
    c8c6:	08 f4       	brcc	.+2      	; 0xc8ca <UpdateBombs+0xeb4>
    c8c8:	b1 c8       	rjmp	.-3742   	; 0xba2c <UpdateBombs+0x16>
    c8ca:	18 c0       	rjmp	.+48     	; 0xc8fc <UpdateBombs+0xee6>
			   continue;
            }

            if(IsSolid(GetMapTile(bomb_x[i],bomb_y[i]))){//we hit something solid, bounce over 1 grid space
			  
			   if((bomb_state[i] & 0b00001100))//up or down
    c8cc:	f7 01       	movw	r30, r14
    c8ce:	e2 53       	subi	r30, 0x32	; 50
    c8d0:	f0 4f       	sbci	r31, 0xF0	; 240
    c8d2:	80 81       	ld	r24, Z
    c8d4:	8c 70       	andi	r24, 0x0C	; 12
    c8d6:	09 f0       	breq	.+2      	; 0xc8da <UpdateBombs+0xec4>
    c8d8:	56 c9       	rjmp	.-3412   	; 0xbb86 <UpdateBombs+0x170>
    c8da:	5a c9       	rjmp	.-3404   	; 0xbb90 <UpdateBombs+0x17a>
	     l = false;
      
	  if(u){
         t = GetMapTile(x,y-i);
      if(IsSolidForFire(t)){
            if(!end){
    c8dc:	00 23       	and	r16, r16
    c8de:	09 f4       	brne	.+2      	; 0xc8e2 <UpdateBombs+0xecc>
    c8e0:	c5 cd       	rjmp	.-1142   	; 0xc46c <UpdateBombs+0xa56>
    c8e2:	d4 cd       	rjmp	.-1112   	; 0xc48c <UpdateBombs+0xa76>
	  }

	  if(d){
         t = GetMapTile(x,y+i);
         if(IsSolidForFire(t)){
            if(!end){
    c8e4:	00 23       	and	r16, r16
    c8e6:	09 f4       	brne	.+2      	; 0xc8ea <UpdateBombs+0xed4>
    c8e8:	43 ce       	rjmp	.-890    	; 0xc570 <UpdateBombs+0xb5a>
    c8ea:	52 ce       	rjmp	.-860    	; 0xc590 <UpdateBombs+0xb7a>
	  }

	  if(l){
         t = GetMapTile(x-i,y);
         if(IsSolidForFire(t)){
            if(!end){
    c8ec:	00 23       	and	r16, r16
    c8ee:	09 f4       	brne	.+2      	; 0xc8f2 <UpdateBombs+0xedc>
    c8f0:	be ce       	rjmp	.-644    	; 0xc66e <UpdateBombs+0xc58>
    c8f2:	cd ce       	rjmp	.-614    	; 0xc68e <UpdateBombs+0xc78>
	  }

	  if(r){
         t = GetMapTile(x+i,y);
         if(IsSolidForFire(t)){
            if(!end){
    c8f4:	00 23       	and	r16, r16
    c8f6:	09 f4       	brne	.+2      	; 0xc8fa <UpdateBombs+0xee4>
    c8f8:	3a cf       	rjmp	.-396    	; 0xc76e <UpdateBombs+0xd58>
    c8fa:	49 cf       	rjmp	.-366    	; 0xc78e <UpdateBombs+0xd78>
	  if(!bomb_timer[i]){
         bomb_owner[i] = 255;
	  }

   }
}
    c8fc:	a9 96       	adiw	r28, 0x29	; 41
    c8fe:	e2 e1       	ldi	r30, 0x12	; 18
    c900:	0c 94 c5 70 	jmp	0xe18a	; 0xe18a <__epilogue_restores__>

0000c904 <PlaceBomb>:
   }

   return 255;//didn't find the killer
}

void PlaceBomb(u8 p){
    c904:	cf 93       	push	r28
    c906:	df 93       	push	r29
    c908:	58 2f       	mov	r21, r24
   player_state[p] ^= BOMB;
    c90a:	a8 2f       	mov	r26, r24
    c90c:	b0 e0       	ldi	r27, 0x00	; 0
    c90e:	fd 01       	movw	r30, r26
    c910:	ea 53       	subi	r30, 0x3A	; 58
    c912:	f0 4f       	sbci	r31, 0xF0	; 240
    c914:	40 81       	ld	r20, Z
    c916:	80 e1       	ldi	r24, 0x10	; 16
    c918:	48 27       	eor	r20, r24
    c91a:	40 83       	st	Z, r20
    c91c:	9f e0       	ldi	r25, 0x0F	; 15
}

inline u8 FindOpenBomb(){

   for(u8 i=MAX_BOMBS-1;i<255;i--){
      if(bomb_owner[i] == 255)//bomb is open
    c91e:	c9 2f       	mov	r28, r25
    c920:	d0 e0       	ldi	r29, 0x00	; 0
    c922:	fe 01       	movw	r30, r28
    c924:	e2 51       	subi	r30, 0x12	; 18
    c926:	f0 4f       	sbci	r31, 0xF0	; 240
    c928:	80 81       	ld	r24, Z
    c92a:	8f 3f       	cpi	r24, 0xFF	; 255
    c92c:	19 f0       	breq	.+6      	; 0xc934 <PlaceBomb+0x30>
   return pgm_read_byte(&FireSequence[bomb_timer[b]/5]);
}

inline u8 FindOpenBomb(){

   for(u8 i=MAX_BOMBS-1;i<255;i--){
    c92e:	91 50       	subi	r25, 0x01	; 1
    c930:	b0 f7       	brcc	.-20     	; 0xc91e <PlaceBomb+0x1a>
    c932:	57 c0       	rjmp	.+174    	; 0xc9e2 <PlaceBomb+0xde>
   u8 b = FindOpenBomb();

   if(b == 255)//no free bomb
      return;

   u8 x = player_x[p];
    c934:	fd 01       	movw	r30, r26
    c936:	e9 5e       	subi	r30, 0xE9	; 233
    c938:	ff 4e       	sbci	r31, 0xEF	; 239
    c93a:	30 81       	ld	r19, Z
   u8 y = player_y[p];
    c93c:	a5 58       	subi	r26, 0x85	; 133
    c93e:	b0 4f       	sbci	r27, 0xF0	; 240
    c940:	2c 91       	ld	r18, X
   //bomb_x[b] = x;
   //bomb_y[b] = y;
   bomb_offset[b] = 0;
    c942:	fe 01       	movw	r30, r28
    c944:	e4 5d       	subi	r30, 0xD4	; 212
    c946:	ff 4e       	sbci	r31, 0xEF	; 239
    c948:	10 82       	st	Z, r1



   u8 state = player_state[p];

   if(x & 1){//player is offset, bomb must be aligned on 16x16 boundaries. This wouldn't work if he was not aligned on 2 axis'(which wont happen)
    c94a:	30 ff       	sbrs	r19, 0
    c94c:	06 c0       	rjmp	.+12     	; 0xc95a <PlaceBomb+0x56>
      if(state & RIGHT)
    c94e:	43 ff       	sbrs	r20, 3
    c950:	02 c0       	rjmp	.+4      	; 0xc956 <PlaceBomb+0x52>
	     x--;
    c952:	31 50       	subi	r19, 0x01	; 1
    c954:	09 c0       	rjmp	.+18     	; 0xc968 <PlaceBomb+0x64>
      else
	     x++;
    c956:	3f 5f       	subi	r19, 0xFF	; 255
    c958:	07 c0       	rjmp	.+14     	; 0xc968 <PlaceBomb+0x64>
   }
   else if(!(y & 1)){
    c95a:	20 fd       	sbrc	r18, 0
    c95c:	05 c0       	rjmp	.+10     	; 0xc968 <PlaceBomb+0x64>
      if(state & UP)
    c95e:	40 ff       	sbrs	r20, 0
    c960:	02 c0       	rjmp	.+4      	; 0xc966 <PlaceBomb+0x62>
	     y++;
    c962:	2f 5f       	subi	r18, 0xFF	; 255
    c964:	01 c0       	rjmp	.+2      	; 0xc968 <PlaceBomb+0x64>
      else
	     y--;
    c966:	21 50       	subi	r18, 0x01	; 1




inline u8 GetMapTile(u8 x, u8 y){
      return (vram[(y*30)+x]-RAM_TILES_COUNT);//return (vram[122+(y*30)+x]-RAM_TILES_COUNT);
    c968:	82 2f       	mov	r24, r18
    c96a:	90 e0       	ldi	r25, 0x00	; 0
    c96c:	fc 01       	movw	r30, r24
    c96e:	b5 e0       	ldi	r27, 0x05	; 5
    c970:	ee 0f       	add	r30, r30
    c972:	ff 1f       	adc	r31, r31
    c974:	ba 95       	dec	r27
    c976:	e1 f7       	brne	.-8      	; 0xc970 <PlaceBomb+0x6c>
    c978:	88 0f       	add	r24, r24
    c97a:	99 1f       	adc	r25, r25
    c97c:	e8 1b       	sub	r30, r24
    c97e:	f9 0b       	sbc	r31, r25
    c980:	e3 0f       	add	r30, r19
    c982:	f1 1d       	adc	r31, r1
    c984:	e0 5e       	subi	r30, 0xE0	; 224
    c986:	fe 4f       	sbci	r31, 0xFE	; 254
    c988:	e0 81       	ld	r30, Z
    c98a:	9e 2f       	mov	r25, r30
    c98c:	9f 51       	subi	r25, 0x1F	; 31

   return b;
}

bool IsSolid(u8 t){
   if(t < 4)
    c98e:	94 30       	cpi	r25, 0x04	; 4
    c990:	58 f0       	brcs	.+22     	; 0xc9a8 <PlaceBomb+0xa4>
      return false;

   if((t >= BLOCK_START && t <= WALL_END) || (t >= BOMB_START && t <= BOMB_END) || (t >= SPECIAL_SOLID_START && t <= SPECIAL_SOLID_END) || (t >= BORDER_START))
    c992:	8e 2f       	mov	r24, r30
    c994:	83 52       	subi	r24, 0x23	; 35
    c996:	88 32       	cpi	r24, 0x28	; 40
    c998:	20 f1       	brcs	.+72     	; 0xc9e2 <PlaceBomb+0xde>
    c99a:	ef 59       	subi	r30, 0x9F	; 159
    c99c:	ec 30       	cpi	r30, 0x0C	; 12
    c99e:	08 f1       	brcs	.+66     	; 0xc9e2 <PlaceBomb+0xde>
    c9a0:	9e 3f       	cpi	r25, 0xFE	; 254
    c9a2:	f9 f0       	breq	.+62     	; 0xc9e2 <PlaceBomb+0xde>
    c9a4:	97 3c       	cpi	r25, 0xC7	; 199
    c9a6:	e8 f4       	brcc	.+58     	; 0xc9e2 <PlaceBomb+0xde>
   }
   
   if(IsSolid(GetMapTile(x,y)))//blocked
      return;

   bomb_x[b] = x;
    c9a8:	fe 01       	movw	r30, r28
    c9aa:	e5 5e       	subi	r30, 0xE5	; 229
    c9ac:	ff 4e       	sbci	r31, 0xEF	; 239
    c9ae:	30 83       	st	Z, r19
   bomb_y[b] = y;
    c9b0:	fe 01       	movw	r30, r28
    c9b2:	ef 56       	subi	r30, 0x6F	; 111
    c9b4:	f0 4f       	sbci	r31, 0xF0	; 240
    c9b6:	20 83       	st	Z, r18
   bomb_owner[b] = p;
    c9b8:	fe 01       	movw	r30, r28
    c9ba:	e2 51       	subi	r30, 0x12	; 18
    c9bc:	f0 4f       	sbci	r31, 0xF0	; 240
    c9be:	50 83       	st	Z, r21
   bomb_timer[b] = BOMBSTARTTIME;
    c9c0:	fe 01       	movw	r30, r28
    c9c2:	e7 55       	subi	r30, 0x57	; 87
    c9c4:	f0 4f       	sbci	r31, 0xF0	; 240
    c9c6:	80 ef       	ldi	r24, 0xF0	; 240
    c9c8:	80 83       	st	Z, r24
   bomb_offset[b] = 0;
    c9ca:	fe 01       	movw	r30, r28
    c9cc:	e4 5d       	subi	r30, 0xD4	; 212
    c9ce:	ff 4e       	sbci	r31, 0xEF	; 239
    c9d0:	10 82       	st	Z, r1
   bomb_state[b] = 0;
    c9d2:	c2 53       	subi	r28, 0x32	; 50
    c9d4:	d0 4f       	sbci	r29, 0xF0	; 240
    c9d6:	18 82       	st	Y, r1
   //SetMapTile(x,y,10);

   TriggerFx(PLANT_BOMB_FX,255,true);
    c9d8:	88 e0       	ldi	r24, 0x08	; 8
    c9da:	6f ef       	ldi	r22, 0xFF	; 255
    c9dc:	41 e0       	ldi	r20, 0x01	; 1
    c9de:	0e 94 df 48 	call	0x91be	; 0x91be <TriggerFx>
}
    c9e2:	df 91       	pop	r29
    c9e4:	cf 91       	pop	r28
    c9e6:	08 95       	ret

0000c9e8 <KillPlayer>:
         PlacePowerUp(((prand()%11)<<1)+ARENA_START_X,((prand()%11)<<1)+ARENA_START_Y,POWERUP_START+8);  
   }
}


void KillPlayer(u8 p){
    c9e8:	1f 93       	push	r17
    c9ea:	18 2f       	mov	r17, r24
   TriggerFx(PLAYER_DIE_FX,255,false);
    c9ec:	8b e0       	ldi	r24, 0x0B	; 11
    c9ee:	6f ef       	ldi	r22, 0xFF	; 255
    c9f0:	40 e0       	ldi	r20, 0x00	; 0
    c9f2:	0e 94 df 48 	call	0x91be	; 0x91be <TriggerFx>
   player_state[p] = DYING;
    c9f6:	a1 2f       	mov	r26, r17
    c9f8:	b0 e0       	ldi	r27, 0x00	; 0
    c9fa:	fd 01       	movw	r30, r26
    c9fc:	ea 53       	subi	r30, 0x3A	; 58
    c9fe:	f0 4f       	sbci	r31, 0xF0	; 240
    ca00:	9f ef       	ldi	r25, 0xFF	; 255
    ca02:	90 83       	st	Z, r25
   player_offset[p] = 0;
    ca04:	fd 01       	movw	r30, r26
    ca06:	e2 50       	subi	r30, 0x02	; 2
    ca08:	f0 4f       	sbci	r31, 0xF0	; 240
    ca0a:	10 82       	st	Z, r1
   player_frame[p] = 0;
    ca0c:	fd 01       	movw	r30, r26
    ca0e:	e7 54       	subi	r30, 0x47	; 71
    ca10:	f0 4f       	sbci	r31, 0xF0	; 240
    ca12:	10 82       	st	Z, r1
   player_ftime[p] = 14;
    ca14:	fd 01       	movw	r30, r26
    ca16:	e6 53       	subi	r30, 0x36	; 54
    ca18:	f0 4f       	sbci	r31, 0xF0	; 240
    ca1a:	8e e0       	ldi	r24, 0x0E	; 14
    ca1c:	80 83       	st	Z, r24
   player_wait[p] = 255;//set killer to NULL, FindKiller() will set it if applicable
    ca1e:	fd 01       	movw	r30, r26
    ca20:	e1 5f       	subi	r30, 0xF1	; 241
    ca22:	ff 4e       	sbci	r31, 0xEF	; 239
    ca24:	90 83       	st	Z, r25

   if(player_attrb[p] & 0b0010000)//keep team bit
    ca26:	fd 01       	movw	r30, r26
    ca28:	ed 5e       	subi	r30, 0xED	; 237
    ca2a:	ff 4e       	sbci	r31, 0xEF	; 239
    ca2c:	80 81       	ld	r24, Z
    ca2e:	84 ff       	sbrs	r24, 4
    ca30:	03 c0       	rjmp	.+6      	; 0xca38 <KillPlayer+0x50>
      player_attrb[p] = 0b0010000;
    ca32:	80 e1       	ldi	r24, 0x10	; 16
    ca34:	80 83       	st	Z, r24
    ca36:	01 c0       	rjmp	.+2      	; 0xca3a <KillPlayer+0x52>
   else
      player_attrb[p] = 0;
    ca38:	10 82       	st	Z, r1

   player_attrb2[p] = 0;
    ca3a:	aa 58       	subi	r26, 0x8A	; 138
    ca3c:	b0 4f       	sbci	r27, 0xF0	; 240
    ca3e:	1c 92       	st	X, r1
}
    ca40:	1f 91       	pop	r17
    ca42:	08 95       	ret

0000ca44 <LevelSpecial>:
   gamestate = PLAYING;
   if(!playSong)
      StartSong(StageSong);
}

void LevelSpecial(){//handle all special logic and animation for a specific level
    ca44:	ef 92       	push	r14
    ca46:	0f 93       	push	r16
    ca48:	cf 93       	push	r28
    ca4a:	df 93       	push	r29
   }   

   return;
*/

   if(cartowner == 255){//see if any players have walked on
    ca4c:	e0 91 08 01 	lds	r30, 0x0108
    ca50:	ef 3f       	cpi	r30, 0xFF	; 255
    ca52:	09 f0       	breq	.+2      	; 0xca56 <LevelSpecial+0x12>
    ca54:	45 c0       	rjmp	.+138    	; 0xcae0 <LevelSpecial+0x9c>
      for(u8 i=0;i<MAX_PLAYERS;i++){
         if(player_x[i] == cartx && player_y[i] == carty){//player has entered cart
    ca56:	50 91 07 01 	lds	r21, 0x0107
    ca5a:	40 91 06 01 	lds	r20, 0x0106
    ca5e:	20 e0       	ldi	r18, 0x00	; 0
    ca60:	30 e0       	ldi	r19, 0x00	; 0
    ca62:	d9 01       	movw	r26, r18
    ca64:	a9 5e       	subi	r26, 0xE9	; 233
    ca66:	bf 4e       	sbci	r27, 0xEF	; 239
    ca68:	8c 91       	ld	r24, X
    ca6a:	85 17       	cp	r24, r21
    ca6c:	99 f5       	brne	.+102    	; 0xcad4 <LevelSpecial+0x90>
    ca6e:	f9 01       	movw	r30, r18
    ca70:	e5 58       	subi	r30, 0x85	; 133
    ca72:	f0 4f       	sbci	r31, 0xF0	; 240
    ca74:	80 81       	ld	r24, Z
    ca76:	84 17       	cp	r24, r20
    ca78:	69 f5       	brne	.+90     	; 0xcad4 <LevelSpecial+0x90>
            cartowner = i;
    ca7a:	20 93 08 01 	sts	0x0108, r18
			player_x[i] = 255;//make sure Render() doesn't draw him
    ca7e:	8f ef       	ldi	r24, 0xFF	; 255
    ca80:	8c 93       	st	X, r24

			   SetMapTile(cartx,carty,SPECIAL_START+((cartlastdir>DOWN)*4));//get rid of cart tiles
    ca82:	90 91 05 01 	lds	r25, 0x0105
    ca86:	93 30       	cpi	r25, 0x03	; 3
    ca88:	10 f4       	brcc	.+4      	; 0xca8e <LevelSpecial+0x4a>
    ca8a:	8f ea       	ldi	r24, 0xAF	; 175
    ca8c:	01 c0       	rjmp	.+2      	; 0xca90 <LevelSpecial+0x4c>
    ca8e:	83 eb       	ldi	r24, 0xB3	; 179
   SetTile(15,0,ZERO_OFFSET+ten);
   SetTile(16,0,ZERO_OFFSET+sec);
}

void SetMapTile(u8 x, u8 y, u8 t){
   int off = (y*30)+x;//((y<<1)*30)+(x<<1);
    ca90:	ee e1       	ldi	r30, 0x1E	; 30
    ca92:	4e 9f       	mul	r20, r30
    ca94:	f0 01       	movw	r30, r0
    ca96:	11 24       	eor	r1, r1
    ca98:	e5 0f       	add	r30, r21
    ca9a:	f1 1d       	adc	r31, r1
   t+=RAM_TILES_COUNT;//t = (t<<2)+RAM_TILES_COUNT;//t = (tileset*(NUMTILES*4)) + (t*4) + RAM_TILES_COUNT;
    ca9c:	81 5e       	subi	r24, 0xE1	; 225
   
   vram[off+ 0] = t++;
    ca9e:	e0 5e       	subi	r30, 0xE0	; 224
    caa0:	fe 4f       	sbci	r31, 0xFE	; 254
    caa2:	80 83       	st	Z, r24
    caa4:	8f 5f       	subi	r24, 0xFF	; 255
   vram[off+ 1] = t++;
    caa6:	81 83       	std	Z+1, r24	; 0x01
    caa8:	8f 5f       	subi	r24, 0xFF	; 255
   vram[off+30] = t++;
    caaa:	86 8f       	std	Z+30, r24	; 0x1e
   vram[off+31] = t;
    caac:	8f 5f       	subi	r24, 0xFF	; 255
    caae:	87 8f       	std	Z+31, r24	; 0x1f

			if(cartlastdir == UP)
    cab0:	91 30       	cpi	r25, 0x01	; 1
    cab2:	11 f4       	brne	.+4      	; 0xcab8 <LevelSpecial+0x74>
			   cartlastdir = cartstate = DOWN;
    cab4:	82 e0       	ldi	r24, 0x02	; 2
    cab6:	03 c0       	rjmp	.+6      	; 0xcabe <LevelSpecial+0x7a>
            else if(cartlastdir == DOWN)
    cab8:	92 30       	cpi	r25, 0x02	; 2
    caba:	31 f4       	brne	.+12     	; 0xcac8 <LevelSpecial+0x84>
			   cartlastdir = cartstate = UP;
    cabc:	81 e0       	ldi	r24, 0x01	; 1
    cabe:	80 93 02 0f 	sts	0x0F02, r24
    cac2:	80 93 05 01 	sts	0x0105, r24
    cac6:	2a c1       	rjmp	.+596    	; 0xcd1c <LevelSpecial+0x2d8>
            else if(cartlastdir == LEFT)
    cac8:	94 30       	cpi	r25, 0x04	; 4
    caca:	11 f4       	brne	.+4      	; 0xcad0 <LevelSpecial+0x8c>
			   cartlastdir = cartstate = RIGHT;
    cacc:	88 e0       	ldi	r24, 0x08	; 8
    cace:	f7 cf       	rjmp	.-18     	; 0xcabe <LevelSpecial+0x7a>
            else// if(cartlastdir == RIGHT)
			   cartlastdir = cartstate = LEFT;
    cad0:	84 e0       	ldi	r24, 0x04	; 4
    cad2:	f5 cf       	rjmp	.-22     	; 0xcabe <LevelSpecial+0x7a>
    cad4:	2f 5f       	subi	r18, 0xFF	; 255
    cad6:	3f 4f       	sbci	r19, 0xFF	; 255

   return;
*/

   if(cartowner == 255){//see if any players have walked on
      for(u8 i=0;i<MAX_PLAYERS;i++){
    cad8:	24 30       	cpi	r18, 0x04	; 4
    cada:	31 05       	cpc	r19, r1
    cadc:	11 f6       	brne	.-124    	; 0xca62 <LevelSpecial+0x1e>
    cade:	b4 c0       	rjmp	.+360    	; 0xcc48 <LevelSpecial+0x204>
			return;
		 }
	  }
   }
   else{//update cart
      player_x[cartowner] = 255;//make sure player doesnt draw or update on his own
    cae0:	f0 e0       	ldi	r31, 0x00	; 0
    cae2:	e9 5e       	subi	r30, 0xE9	; 233
    cae4:	ff 4e       	sbci	r31, 0xEF	; 239
    cae6:	8f ef       	ldi	r24, 0xFF	; 255
    cae8:	80 83       	st	Z, r24
      cartoffset += 2;
    caea:	80 91 03 0f 	lds	r24, 0x0F03
    caee:	8e 5f       	subi	r24, 0xFE	; 254
    caf0:	80 93 03 0f 	sts	0x0F03, r24
	  if(cartoffset > 7){
    caf4:	88 30       	cpi	r24, 0x08	; 8
    caf6:	08 f4       	brcc	.+2      	; 0xcafa <LevelSpecial+0xb6>
    caf8:	77 c0       	rjmp	.+238    	; 0xcbe8 <LevelSpecial+0x1a4>
         cartoffset = 0;
    cafa:	10 92 03 0f 	sts	0x0F03, r1

		 if(cartstate == UP)
    cafe:	90 91 02 0f 	lds	r25, 0x0F02
    cb02:	91 30       	cpi	r25, 0x01	; 1
    cb04:	41 f4       	brne	.+16     	; 0xcb16 <LevelSpecial+0xd2>
		    carty--;
    cb06:	80 91 06 01 	lds	r24, 0x0106
    cb0a:	81 50       	subi	r24, 0x01	; 1
    cb0c:	80 93 06 01 	sts	0x0106, r24
    cb10:	c0 e0       	ldi	r28, 0x00	; 0
    cb12:	d0 e0       	ldi	r29, 0x00	; 0
    cb14:	10 c0       	rjmp	.+32     	; 0xcb36 <LevelSpecial+0xf2>
         else if(cartstate == DOWN)
    cb16:	92 30       	cpi	r25, 0x02	; 2
    cb18:	21 f4       	brne	.+8      	; 0xcb22 <LevelSpecial+0xde>
		    carty++;
    cb1a:	80 91 06 01 	lds	r24, 0x0106
    cb1e:	8f 5f       	subi	r24, 0xFF	; 255
    cb20:	f5 cf       	rjmp	.-22     	; 0xcb0c <LevelSpecial+0xc8>
    cb22:	80 91 07 01 	lds	r24, 0x0107
         else if(cartstate == LEFT)
    cb26:	94 30       	cpi	r25, 0x04	; 4
    cb28:	11 f4       	brne	.+4      	; 0xcb2e <LevelSpecial+0xea>
		    cartx--;
    cb2a:	81 50       	subi	r24, 0x01	; 1
    cb2c:	01 c0       	rjmp	.+2      	; 0xcb30 <LevelSpecial+0xec>
         else
		    cartx++;
    cb2e:	8f 5f       	subi	r24, 0xFF	; 255
    cb30:	80 93 07 01 	sts	0x0107, r24
    cb34:	ed cf       	rjmp	.-38     	; 0xcb10 <LevelSpecial+0xcc>
         
		 for(u8 i=0;i<MAX_PLAYERS;i++){//check for players in the way
            if(abs(player_x[i]-cartx) < 2 && abs(player_y[i]-carty) < 2)
    cb36:	fe 01       	movw	r30, r28
    cb38:	e9 5e       	subi	r30, 0xE9	; 233
    cb3a:	ff 4e       	sbci	r31, 0xEF	; 239
    cb3c:	80 81       	ld	r24, Z
    cb3e:	90 e0       	ldi	r25, 0x00	; 0
    cb40:	20 91 07 01 	lds	r18, 0x0107
    cb44:	82 1b       	sub	r24, r18
    cb46:	91 09       	sbc	r25, r1
    cb48:	01 96       	adiw	r24, 0x01	; 1
    cb4a:	03 97       	sbiw	r24, 0x03	; 3
    cb4c:	78 f4       	brcc	.+30     	; 0xcb6c <LevelSpecial+0x128>
    cb4e:	fe 01       	movw	r30, r28
    cb50:	e5 58       	subi	r30, 0x85	; 133
    cb52:	f0 4f       	sbci	r31, 0xF0	; 240
    cb54:	80 81       	ld	r24, Z
    cb56:	90 e0       	ldi	r25, 0x00	; 0
    cb58:	20 91 06 01 	lds	r18, 0x0106
    cb5c:	82 1b       	sub	r24, r18
    cb5e:	91 09       	sbc	r25, r1
    cb60:	01 96       	adiw	r24, 0x01	; 1
    cb62:	03 97       	sbiw	r24, 0x03	; 3
    cb64:	18 f4       	brcc	.+6      	; 0xcb6c <LevelSpecial+0x128>
			   KillPlayer(i);
    cb66:	8c 2f       	mov	r24, r28
    cb68:	0e 94 f4 64 	call	0xc9e8	; 0xc9e8 <KillPlayer>
    cb6c:	21 96       	adiw	r28, 0x01	; 1
         else if(cartstate == LEFT)
		    cartx--;
         else
		    cartx++;
         
		 for(u8 i=0;i<MAX_PLAYERS;i++){//check for players in the way
    cb6e:	c4 30       	cpi	r28, 0x04	; 4
    cb70:	d1 05       	cpc	r29, r1
    cb72:	09 f7       	brne	.-62     	; 0xcb36 <LevelSpecial+0xf2>




inline u8 GetMapTile(u8 x, u8 y){
      return (vram[(y*30)+x]-RAM_TILES_COUNT);//return (vram[122+(y*30)+x]-RAM_TILES_COUNT);
    cb74:	30 91 06 01 	lds	r19, 0x0106
    cb78:	20 91 07 01 	lds	r18, 0x0107
    cb7c:	22 0f       	add	r18, r18
    cb7e:	83 2f       	mov	r24, r19
    cb80:	88 0f       	add	r24, r24
    cb82:	90 e0       	ldi	r25, 0x00	; 0
    cb84:	fc 01       	movw	r30, r24
    cb86:	45 e0       	ldi	r20, 0x05	; 5
    cb88:	ee 0f       	add	r30, r30
    cb8a:	ff 1f       	adc	r31, r31
    cb8c:	4a 95       	dec	r20
    cb8e:	e1 f7       	brne	.-8      	; 0xcb88 <LevelSpecial+0x144>
    cb90:	88 0f       	add	r24, r24
    cb92:	99 1f       	adc	r25, r25
    cb94:	e8 1b       	sub	r30, r24
    cb96:	f9 0b       	sbc	r31, r25
    cb98:	e2 0f       	add	r30, r18
    cb9a:	f1 1d       	adc	r31, r1
    cb9c:	e0 5e       	subi	r30, 0xE0	; 224
    cb9e:	fe 4f       	sbci	r31, 0xFE	; 254
    cba0:	e0 81       	ld	r30, Z
    cba2:	ef 51       	subi	r30, 0x1F	; 31
		 //player_state[cartowner] = cartstate|MOVE;
		 //player_offset[cartowner] = cartoffset/2;                  

		 t = GetMapTile((cartx*2),(carty*2));
         //Only corner pieces can change direction
         if(t < SPECIAL_START+8){
    cba4:	e7 3b       	cpi	r30, 0xB7	; 183
    cba6:	00 f1       	brcs	.+64     	; 0xcbe8 <LevelSpecial+0x1a4>

		 }
		 else if(t < SPECIAL_START+12){//6 to 9 oclock
    cba8:	eb 3b       	cpi	r30, 0xBB	; 187
    cbaa:	28 f4       	brcc	.+10     	; 0xcbb6 <LevelSpecial+0x172>

			if(cartlastdir == UP)
    cbac:	80 91 05 01 	lds	r24, 0x0105
    cbb0:	81 30       	cpi	r24, 0x01	; 1
    cbb2:	a9 f4       	brne	.+42     	; 0xcbde <LevelSpecial+0x19a>
    cbb4:	06 c0       	rjmp	.+12     	; 0xcbc2 <LevelSpecial+0x17e>
			   cartlastdir = cartstate = LEFT;
            else
			   cartlastdir = cartstate = DOWN;
		 }
		 else if(t < SPECIAL_START+16){//9 TO 12 oclock
    cbb6:	ef 3b       	cpi	r30, 0xBF	; 191
    cbb8:	30 f4       	brcc	.+12     	; 0xcbc6 <LevelSpecial+0x182>

            if(cartlastdir == DOWN)
    cbba:	80 91 05 01 	lds	r24, 0x0105
    cbbe:	82 30       	cpi	r24, 0x02	; 2
    cbc0:	41 f4       	brne	.+16     	; 0xcbd2 <LevelSpecial+0x18e>
			   cartlastdir = cartstate = LEFT;
    cbc2:	84 e0       	ldi	r24, 0x04	; 4
    cbc4:	0d c0       	rjmp	.+26     	; 0xcbe0 <LevelSpecial+0x19c>
    cbc6:	80 91 05 01 	lds	r24, 0x0105
            else
			   cartlastdir = cartstate = UP;
		 }
		 else if(t < SPECIAL_START+20){//12 TO 3 oclock
    cbca:	e3 3c       	cpi	r30, 0xC3	; 195
    cbcc:	20 f4       	brcc	.+8      	; 0xcbd6 <LevelSpecial+0x192>
            if(cartlastdir == DOWN)
    cbce:	82 30       	cpi	r24, 0x02	; 2
    cbd0:	21 f0       	breq	.+8      	; 0xcbda <LevelSpecial+0x196>
			   cartlastdir = cartstate = RIGHT;
            else
			   cartlastdir = cartstate = UP;
    cbd2:	81 e0       	ldi	r24, 0x01	; 1
    cbd4:	05 c0       	rjmp	.+10     	; 0xcbe0 <LevelSpecial+0x19c>
		 }

		 else{// if(t < SPECIAL_START+24){//9 TO 12 oclock
            if(cartlastdir == UP)
    cbd6:	81 30       	cpi	r24, 0x01	; 1
    cbd8:	11 f4       	brne	.+4      	; 0xcbde <LevelSpecial+0x19a>
			   cartlastdir = cartstate = RIGHT;
    cbda:	88 e0       	ldi	r24, 0x08	; 8
    cbdc:	01 c0       	rjmp	.+2      	; 0xcbe0 <LevelSpecial+0x19c>
            else
			   cartlastdir = cartstate = DOWN;
    cbde:	82 e0       	ldi	r24, 0x02	; 2
    cbe0:	80 93 02 0f 	sts	0x0F02, r24
    cbe4:	80 93 05 01 	sts	0x0105, r24
		 }
	  }
   char xo = 0;
   char yo = 0;
   char f = 0;
   if(cartstate == UP){yo = -cartoffset;f=0;}
    cbe8:	80 91 02 0f 	lds	r24, 0x0F02
    cbec:	81 30       	cpi	r24, 0x01	; 1
    cbee:	31 f4       	brne	.+12     	; 0xcbfc <LevelSpecial+0x1b8>
    cbf0:	90 91 03 0f 	lds	r25, 0x0F03
    cbf4:	91 95       	neg	r25
    cbf6:	20 e0       	ldi	r18, 0x00	; 0
    cbf8:	40 e0       	ldi	r20, 0x00	; 0
    cbfa:	13 c0       	rjmp	.+38     	; 0xcc22 <LevelSpecial+0x1de>
   else if(cartstate == DOWN){yo = cartoffset;f=1;}
    cbfc:	82 30       	cpi	r24, 0x02	; 2
    cbfe:	29 f4       	brne	.+10     	; 0xcc0a <LevelSpecial+0x1c6>
    cc00:	90 91 03 0f 	lds	r25, 0x0F03
    cc04:	20 e0       	ldi	r18, 0x00	; 0
    cc06:	41 e0       	ldi	r20, 0x01	; 1
    cc08:	0c c0       	rjmp	.+24     	; 0xcc22 <LevelSpecial+0x1de>
    cc0a:	90 91 03 0f 	lds	r25, 0x0F03
   else if(cartstate == LEFT){xo = -cartoffset;f=2;}
    cc0e:	84 30       	cpi	r24, 0x04	; 4
    cc10:	29 f4       	brne	.+10     	; 0xcc1c <LevelSpecial+0x1d8>
    cc12:	29 2f       	mov	r18, r25
    cc14:	21 95       	neg	r18
    cc16:	90 e0       	ldi	r25, 0x00	; 0
    cc18:	42 e0       	ldi	r20, 0x02	; 2
    cc1a:	03 c0       	rjmp	.+6      	; 0xcc22 <LevelSpecial+0x1de>
   else                      {xo = cartoffset;f=3;}
    cc1c:	29 2f       	mov	r18, r25
    cc1e:	90 e0       	ldi	r25, 0x00	; 0
    cc20:	43 e0       	ldi	r20, 0x03	; 3
   DrawSpriteTile((cartx*8)+xo,(carty*8)+yo-8,FIRSTSPECIALFRAME+f,0,0,0);
    cc22:	80 91 07 01 	lds	r24, 0x0107
    cc26:	88 0f       	add	r24, r24
    cc28:	88 0f       	add	r24, r24
    cc2a:	88 0f       	add	r24, r24
    cc2c:	60 91 06 01 	lds	r22, 0x0106
    cc30:	66 0f       	add	r22, r22
    cc32:	66 0f       	add	r22, r22
    cc34:	66 0f       	add	r22, r22
    cc36:	68 50       	subi	r22, 0x08	; 8
    cc38:	69 0f       	add	r22, r25
    cc3a:	47 5c       	subi	r20, 0xC7	; 199
    cc3c:	82 0f       	add	r24, r18
    cc3e:	20 e0       	ldi	r18, 0x00	; 0
    cc40:	00 e0       	ldi	r16, 0x00	; 0
    cc42:	ee 24       	eor	r14, r14
    cc44:	0e 94 41 4f 	call	0x9e82	; 0x9e82 <DrawSpriteTile>
      
   }

   if(!--mineframetime){
    cc48:	80 91 09 01 	lds	r24, 0x0109
    cc4c:	81 50       	subi	r24, 0x01	; 1
    cc4e:	80 93 09 01 	sts	0x0109, r24
    cc52:	88 23       	and	r24, r24
    cc54:	09 f0       	breq	.+2      	; 0xcc58 <LevelSpecial+0x214>
    cc56:	62 c0       	rjmp	.+196    	; 0xcd1c <LevelSpecial+0x2d8>
      mineframetime = 30;
    cc58:	8e e1       	ldi	r24, 0x1E	; 30
    cc5a:	80 93 09 01 	sts	0x0109, r24
	  if(++mineframe > 3)
    cc5e:	80 91 04 0f 	lds	r24, 0x0F04
    cc62:	8f 5f       	subi	r24, 0xFF	; 255
    cc64:	80 93 04 0f 	sts	0x0F04, r24
    cc68:	84 30       	cpi	r24, 0x04	; 4
    cc6a:	10 f0       	brcs	.+4      	; 0xcc70 <LevelSpecial+0x22c>
	     mineframe = 0;
    cc6c:	10 92 04 0f 	sts	0x0F04, r1
   
//Animate the wall tiles
      if(roundtime >= 60*SEC){
    cc70:	80 91 c2 0f 	lds	r24, 0x0FC2
    cc74:	90 91 c3 0f 	lds	r25, 0x0FC3
    cc78:	20 91 04 0f 	lds	r18, 0x0F04
    cc7c:	80 51       	subi	r24, 0x10	; 16
    cc7e:	9e 40       	sbci	r25, 0x0E	; 14
    cc80:	90 f4       	brcc	.+36     	; 0xcca6 <LevelSpecial+0x262>
   SetTile(16,0,ZERO_OFFSET+sec);
}

void SetMapTile(u8 x, u8 y, u8 t){
   int off = (y*30)+x;//((y<<1)*30)+(x<<1);
   t+=RAM_TILES_COUNT;//t = (t<<2)+RAM_TILES_COUNT;//t = (tileset*(NUMTILES*4)) + (t*4) + RAM_TILES_COUNT;
    cc82:	82 2f       	mov	r24, r18
    cc84:	90 e0       	ldi	r25, 0x00	; 0
    cc86:	07 96       	adiw	r24, 0x07	; 7
    cc88:	88 0f       	add	r24, r24
    cc8a:	99 1f       	adc	r25, r25
    cc8c:	88 0f       	add	r24, r24
    cc8e:	99 1f       	adc	r25, r25
    cc90:	78 2f       	mov	r23, r24
    cc92:	71 5e       	subi	r23, 0xE1	; 225
   
   vram[off+ 0] = t++;
    cc94:	68 2f       	mov	r22, r24
    cc96:	60 5e       	subi	r22, 0xE0	; 224
   vram[off+ 1] = t++;
    cc98:	58 2f       	mov	r21, r24
    cc9a:	5f 5d       	subi	r21, 0xDF	; 223
   vram[off+30] = t++;
    cc9c:	98 2f       	mov	r25, r24
    cc9e:	9e 5d       	subi	r25, 0xDE	; 222
    cca0:	20 e2       	ldi	r18, 0x20	; 32
    cca2:	30 e0       	ldi	r19, 0x00	; 0
    cca4:	36 c0       	rjmp	.+108    	; 0xcd12 <LevelSpecial+0x2ce>
   SetTile(16,0,ZERO_OFFSET+sec);
}

void SetMapTile(u8 x, u8 y, u8 t){
   int off = (y*30)+x;//((y<<1)*30)+(x<<1);
   t+=RAM_TILES_COUNT;//t = (t<<2)+RAM_TILES_COUNT;//t = (tileset*(NUMTILES*4)) + (t*4) + RAM_TILES_COUNT;
    cca6:	82 2f       	mov	r24, r18
    cca8:	90 e0       	ldi	r25, 0x00	; 0
    ccaa:	07 96       	adiw	r24, 0x07	; 7
    ccac:	88 0f       	add	r24, r24
    ccae:	99 1f       	adc	r25, r25
    ccb0:	88 0f       	add	r24, r24
    ccb2:	99 1f       	adc	r25, r25
    ccb4:	68 2f       	mov	r22, r24
    ccb6:	61 5e       	subi	r22, 0xE1	; 225
   
   vram[off+ 0] = t++;
    ccb8:	58 2f       	mov	r21, r24
    ccba:	50 5e       	subi	r21, 0xE0	; 224
   vram[off+ 1] = t++;
    ccbc:	98 2f       	mov	r25, r24
    ccbe:	9f 5d       	subi	r25, 0xDF	; 223
   vram[off+30] = t++;
    ccc0:	8e 5d       	subi	r24, 0xDE	; 222
    ccc2:	2e e5       	ldi	r18, 0x5E	; 94
    ccc4:	30 e0       	ldi	r19, 0x00	; 0
    ccc6:	0e c0       	rjmp	.+28     	; 0xcce4 <LevelSpecial+0x2a0>

void SetMapTile(u8 x, u8 y, u8 t){
   int off = (y*30)+x;//((y<<1)*30)+(x<<1);
   t+=RAM_TILES_COUNT;//t = (t<<2)+RAM_TILES_COUNT;//t = (tileset*(NUMTILES*4)) + (t*4) + RAM_TILES_COUNT;
   
   vram[off+ 0] = t++;
    ccc8:	60 83       	st	Z, r22
   vram[off+ 1] = t++;
    ccca:	51 83       	std	Z+1, r21	; 0x01
   vram[off+30] = t++;
    cccc:	96 8f       	std	Z+30, r25	; 0x1e
   vram[off+31] = t;
    ccce:	87 8f       	std	Z+31, r24	; 0x1f
         for(u8 y=0;y<10;y+=2)
	        for(u8 x=0;x<12;x+=2){
    ccd0:	4e 5f       	subi	r20, 0xFE	; 254
    ccd2:	34 96       	adiw	r30, 0x04	; 4
    ccd4:	4c 30       	cpi	r20, 0x0C	; 12
    ccd6:	c1 f7       	brne	.-16     	; 0xccc8 <LevelSpecial+0x284>
    ccd8:	28 58       	subi	r18, 0x88	; 136
    ccda:	3f 4f       	sbci	r19, 0xFF	; 255
	  if(++mineframe > 3)
	     mineframe = 0;
   
//Animate the wall tiles
      if(roundtime >= 60*SEC){
         for(u8 y=0;y<10;y+=2)
    ccdc:	42 e0       	ldi	r20, 0x02	; 2
    ccde:	26 3b       	cpi	r18, 0xB6	; 182
    cce0:	34 07       	cpc	r19, r20
    cce2:	e1 f0       	breq	.+56     	; 0xcd1c <LevelSpecial+0x2d8>
    cce4:	f9 01       	movw	r30, r18
    cce6:	e0 5e       	subi	r30, 0xE0	; 224
    cce8:	fe 4f       	sbci	r31, 0xFE	; 254
    ccea:	40 e0       	ldi	r20, 0x00	; 0
    ccec:	ed cf       	rjmp	.-38     	; 0xccc8 <LevelSpecial+0x284>
      }
	  else{//must check for the extra dropped blocks
         for(u8 y=ARENA_START_Y;y<VRAM_TILES_V;y+=2)
	        for(u8 x=ARENA_START_X;x<VRAM_TILES_H-2;x+=2){
			   t = GetMapTile(x,y);
			   if(t >= WALL_START && t <= WALL_END)
    ccee:	80 81       	ld	r24, Z
    ccf0:	8b 53       	subi	r24, 0x3B	; 59
    ccf2:	80 31       	cpi	r24, 0x10	; 16
    ccf4:	20 f4       	brcc	.+8      	; 0xccfe <LevelSpecial+0x2ba>

void SetMapTile(u8 x, u8 y, u8 t){
   int off = (y*30)+x;//((y<<1)*30)+(x<<1);
   t+=RAM_TILES_COUNT;//t = (t<<2)+RAM_TILES_COUNT;//t = (tileset*(NUMTILES*4)) + (t*4) + RAM_TILES_COUNT;
   
   vram[off+ 0] = t++;
    ccf6:	70 83       	st	Z, r23
   vram[off+ 1] = t++;
    ccf8:	61 83       	std	Z+1, r22	; 0x01
   vram[off+30] = t++;
    ccfa:	56 8f       	std	Z+30, r21	; 0x1e
   vram[off+31] = t;
    ccfc:	97 8f       	std	Z+31, r25	; 0x1f
               SetMapTile(2+ARENA_START_X+(x*2),2+ARENA_START_Y+(y*2),WALL_START+(4*mineframe));
	     } 
      }
	  else{//must check for the extra dropped blocks
         for(u8 y=ARENA_START_Y;y<VRAM_TILES_V;y+=2)
	        for(u8 x=ARENA_START_X;x<VRAM_TILES_H-2;x+=2){
    ccfe:	4e 5f       	subi	r20, 0xFE	; 254
    cd00:	32 96       	adiw	r30, 0x02	; 2
    cd02:	4c 31       	cpi	r20, 0x1C	; 28
    cd04:	a1 f7       	brne	.-24     	; 0xccee <LevelSpecial+0x2aa>
    cd06:	24 5c       	subi	r18, 0xC4	; 196
    cd08:	3f 4f       	sbci	r19, 0xFF	; 255
	        for(u8 x=0;x<12;x+=2){
               SetMapTile(2+ARENA_START_X+(x*2),2+ARENA_START_Y+(y*2),WALL_START+(4*mineframe));
	     } 
      }
	  else{//must check for the extra dropped blocks
         for(u8 y=ARENA_START_Y;y<VRAM_TILES_V;y+=2)
    cd0a:	82 e0       	ldi	r24, 0x02	; 2
    cd0c:	24 3b       	cpi	r18, 0xB4	; 180
    cd0e:	38 07       	cpc	r19, r24
    cd10:	29 f0       	breq	.+10     	; 0xcd1c <LevelSpecial+0x2d8>
    cd12:	f9 01       	movw	r30, r18
    cd14:	e0 5e       	subi	r30, 0xE0	; 224
    cd16:	fe 4f       	sbci	r31, 0xFE	; 254
    cd18:	42 e0       	ldi	r20, 0x02	; 2
    cd1a:	e9 cf       	rjmp	.-46     	; 0xccee <LevelSpecial+0x2aa>
	  }*/
   }


#endif
}
    cd1c:	df 91       	pop	r29
    cd1e:	cf 91       	pop	r28
    cd20:	0f 91       	pop	r16
    cd22:	ef 90       	pop	r14
    cd24:	08 95       	ret

0000cd26 <DropBlocks>:

void DropBlocks(){
    cd26:	cf 93       	push	r28
    cd28:	df 93       	push	r29
   if(block_dir & MOVE){//very first block, doesn't currently drop??
    cd2a:	90 91 8f 0f 	lds	r25, 0x0F8F
    cd2e:	95 ff       	sbrs	r25, 5
    cd30:	04 c0       	rjmp	.+8      	; 0xcd3a <DropBlocks+0x14>
      
	  block_dir ^= MOVE;
    cd32:	80 e2       	ldi	r24, 0x20	; 32
    cd34:	98 27       	eor	r25, r24
    cd36:	90 93 8f 0f 	sts	0x0F8F, r25

   }

   if(block_z < ((block_y+1)*16)){
    cd3a:	40 91 a8 0f 	lds	r20, 0x0FA8
    cd3e:	24 2f       	mov	r18, r20
    cd40:	30 e0       	ldi	r19, 0x00	; 0
    cd42:	80 91 03 10 	lds	r24, 0x1003
    cd46:	90 e0       	ldi	r25, 0x00	; 0
    cd48:	01 96       	adiw	r24, 0x01	; 1
    cd4a:	f4 e0       	ldi	r31, 0x04	; 4
    cd4c:	88 0f       	add	r24, r24
    cd4e:	99 1f       	adc	r25, r25
    cd50:	fa 95       	dec	r31
    cd52:	e1 f7       	brne	.-8      	; 0xcd4c <DropBlocks+0x26>
    cd54:	28 17       	cp	r18, r24
    cd56:	39 07       	cpc	r19, r25
    cd58:	4c f4       	brge	.+18     	; 0xcd6c <DropBlocks+0x46>
	  block_z += 8;
    cd5a:	48 5f       	subi	r20, 0xF8	; 248
    cd5c:	40 93 a8 0f 	sts	0x0FA8, r20
	  ++block_time;
    cd60:	80 91 3d 10 	lds	r24, 0x103D
    cd64:	8f 5f       	subi	r24, 0xFF	; 255
    cd66:	80 93 3d 10 	sts	0x103D, r24
    cd6a:	d0 c0       	rjmp	.+416    	; 0xcf0c <DropBlocks+0x1e6>
      //SetMapTile(ARENA_START_X+(block_x*2),ARENA_START_Y+(block_y*2),WALL_START);//hack to draw first drop
      return;
   }
   
   if(block_z != 255){
    cd6c:	4f 3f       	cpi	r20, 0xFF	; 255
    cd6e:	09 f4       	brne	.+2      	; 0xcd72 <DropBlocks+0x4c>
    cd70:	54 c0       	rjmp	.+168    	; 0xce1a <DropBlocks+0xf4>
      block_z = 255;
    cd72:	8f ef       	ldi	r24, 0xFF	; 255
    cd74:	80 93 a8 0f 	sts	0x0FA8, r24
      TriggerFx(BLOCK_DROP_FX,254,false);
    cd78:	89 e0       	ldi	r24, 0x09	; 9
    cd7a:	6e ef       	ldi	r22, 0xFE	; 254
    cd7c:	40 e0       	ldi	r20, 0x00	; 0
    cd7e:	0e 94 df 48 	call	0x91be	; 0x91be <TriggerFx>
   SetTile(15,0,ZERO_OFFSET+ten);
   SetTile(16,0,ZERO_OFFSET+sec);
}

void SetMapTile(u8 x, u8 y, u8 t){
   int off = (y*30)+x;//((y<<1)*30)+(x<<1);
    cd82:	e0 91 03 10 	lds	r30, 0x1003
    cd86:	ee 0f       	add	r30, r30
    cd88:	ef 5f       	subi	r30, 0xFF	; 255
    cd8a:	8e e1       	ldi	r24, 0x1E	; 30
    cd8c:	e8 9f       	mul	r30, r24
    cd8e:	f0 01       	movw	r30, r0
    cd90:	11 24       	eor	r1, r1
    cd92:	80 91 7a 0f 	lds	r24, 0x0F7A
    cd96:	88 0f       	add	r24, r24
    cd98:	8e 5f       	subi	r24, 0xFE	; 254
    cd9a:	e8 0f       	add	r30, r24
    cd9c:	f1 1d       	adc	r31, r1
   t+=RAM_TILES_COUNT;//t = (t<<2)+RAM_TILES_COUNT;//t = (tileset*(NUMTILES*4)) + (t*4) + RAM_TILES_COUNT;
   
   vram[off+ 0] = t++;
    cd9e:	e0 5e       	subi	r30, 0xE0	; 224
    cda0:	fe 4f       	sbci	r31, 0xFE	; 254
    cda2:	8b e3       	ldi	r24, 0x3B	; 59
    cda4:	80 83       	st	Z, r24
   vram[off+ 1] = t++;
    cda6:	8c e3       	ldi	r24, 0x3C	; 60
    cda8:	81 83       	std	Z+1, r24	; 0x01
   vram[off+30] = t++;
    cdaa:	8d e3       	ldi	r24, 0x3D	; 61
    cdac:	86 8f       	std	Z+30, r24	; 0x1e
   vram[off+31] = t;
    cdae:	8e e3       	ldi	r24, 0x3E	; 62
    cdb0:	87 8f       	std	Z+31, r24	; 0x1f
    cdb2:	c0 e0       	ldi	r28, 0x00	; 0
    cdb4:	d0 e0       	ldi	r29, 0x00	; 0
      SetMapTile(ARENA_START_X+(block_x*2),ARENA_START_Y+(block_y*2),WALL_START);

      for(u8 i=0;i<MAX_PLAYERS;i++)
	     if(!(player_state[i] == DYING) && !(player_attrb2[i] & GHOST) && abs(player_x[i]-(ARENA_START_X+(block_x*2))) < 2 && abs(player_y[i]-(ARENA_START_Y+(block_y*2))) < 2)
    cdb6:	fe 01       	movw	r30, r28
    cdb8:	ea 53       	subi	r30, 0x3A	; 58
    cdba:	f0 4f       	sbci	r31, 0xF0	; 240
    cdbc:	80 81       	ld	r24, Z
    cdbe:	8f 3f       	cpi	r24, 0xFF	; 255
    cdc0:	41 f1       	breq	.+80     	; 0xce12 <DropBlocks+0xec>
    cdc2:	fe 01       	movw	r30, r28
    cdc4:	ea 58       	subi	r30, 0x8A	; 138
    cdc6:	f0 4f       	sbci	r31, 0xF0	; 240
    cdc8:	80 81       	ld	r24, Z
    cdca:	87 fd       	sbrc	r24, 7
    cdcc:	22 c0       	rjmp	.+68     	; 0xce12 <DropBlocks+0xec>
    cdce:	80 91 7a 0f 	lds	r24, 0x0F7A
    cdd2:	90 e0       	ldi	r25, 0x00	; 0
    cdd4:	80 95       	com	r24
    cdd6:	90 95       	com	r25
    cdd8:	88 0f       	add	r24, r24
    cdda:	99 1f       	adc	r25, r25
    cddc:	fe 01       	movw	r30, r28
    cdde:	e9 5e       	subi	r30, 0xE9	; 233
    cde0:	ff 4e       	sbci	r31, 0xEF	; 239
    cde2:	20 81       	ld	r18, Z
    cde4:	82 0f       	add	r24, r18
    cde6:	91 1d       	adc	r25, r1
    cde8:	01 96       	adiw	r24, 0x01	; 1
    cdea:	03 97       	sbiw	r24, 0x03	; 3
    cdec:	90 f4       	brcc	.+36     	; 0xce12 <DropBlocks+0xec>
    cdee:	80 91 03 10 	lds	r24, 0x1003
    cdf2:	90 e0       	ldi	r25, 0x00	; 0
    cdf4:	88 0f       	add	r24, r24
    cdf6:	99 1f       	adc	r25, r25
    cdf8:	fe 01       	movw	r30, r28
    cdfa:	e5 58       	subi	r30, 0x85	; 133
    cdfc:	f0 4f       	sbci	r31, 0xF0	; 240
    cdfe:	20 81       	ld	r18, Z
    ce00:	30 e0       	ldi	r19, 0x00	; 0
    ce02:	28 1b       	sub	r18, r24
    ce04:	39 0b       	sbc	r19, r25
    ce06:	23 30       	cpi	r18, 0x03	; 3
    ce08:	31 05       	cpc	r19, r1
    ce0a:	18 f4       	brcc	.+6      	; 0xce12 <DropBlocks+0xec>
		    KillPlayer(i);
    ce0c:	8c 2f       	mov	r24, r28
    ce0e:	0e 94 f4 64 	call	0xc9e8	; 0xc9e8 <KillPlayer>
    ce12:	21 96       	adiw	r28, 0x01	; 1
   if(block_z != 255){
      block_z = 255;
      TriggerFx(BLOCK_DROP_FX,254,false);
      SetMapTile(ARENA_START_X+(block_x*2),ARENA_START_Y+(block_y*2),WALL_START);

      for(u8 i=0;i<MAX_PLAYERS;i++)
    ce14:	c4 30       	cpi	r28, 0x04	; 4
    ce16:	d1 05       	cpc	r29, r1
    ce18:	71 f6       	brne	.-100    	; 0xcdb6 <DropBlocks+0x90>
		    KillPlayer(i);
   }

   //TODO - rare situation where kicked bomb would be half way into the dropped block

   if(++block_time < BLOCK_TIME)
    ce1a:	80 91 3d 10 	lds	r24, 0x103D
    ce1e:	8f 5f       	subi	r24, 0xFF	; 255
    ce20:	80 93 3d 10 	sts	0x103D, r24
    ce24:	89 31       	cpi	r24, 0x19	; 25
    ce26:	08 f4       	brcc	.+2      	; 0xce2a <DropBlocks+0x104>
    ce28:	71 c0       	rjmp	.+226    	; 0xcf0c <DropBlocks+0x1e6>
      return;

   block_z = 0;
    ce2a:	10 92 a8 0f 	sts	0x0FA8, r1
   block_time = 0;   
    ce2e:	10 92 3d 10 	sts	0x103D, r1
     
   if(block_dir == UP){
    ce32:	80 91 8f 0f 	lds	r24, 0x0F8F
    ce36:	81 30       	cpi	r24, 0x01	; 1
    ce38:	81 f4       	brne	.+32     	; 0xce5a <DropBlocks+0x134>
      if(block_y > block_miny)
    ce3a:	80 91 03 10 	lds	r24, 0x1003
    ce3e:	90 91 04 10 	lds	r25, 0x1004
    ce42:	98 17       	cp	r25, r24
    ce44:	08 f4       	brcc	.+2      	; 0xce48 <DropBlocks+0x122>
    ce46:	41 c0       	rjmp	.+130    	; 0xceca <DropBlocks+0x1a4>
		 block_y--;
      else{
		 block_dir = RIGHT;
    ce48:	88 e0       	ldi	r24, 0x08	; 8
    ce4a:	80 93 8f 0f 	sts	0x0F8F, r24
	     block_miny++;
    ce4e:	9f 5f       	subi	r25, 0xFF	; 255
    ce50:	90 93 04 10 	sts	0x1004, r25
	     block_x++;
    ce54:	80 91 7a 0f 	lds	r24, 0x0F7A
    ce58:	08 c0       	rjmp	.+16     	; 0xce6a <DropBlocks+0x144>
	  }
   }
   else if(block_dir == RIGHT){
    ce5a:	88 30       	cpi	r24, 0x08	; 8
    ce5c:	89 f4       	brne	.+34     	; 0xce80 <DropBlocks+0x15a>
      if(block_x < block_maxx)
    ce5e:	80 91 7a 0f 	lds	r24, 0x0F7A
    ce62:	90 91 02 10 	lds	r25, 0x1002
    ce66:	89 17       	cp	r24, r25
    ce68:	10 f4       	brcc	.+4      	; 0xce6e <DropBlocks+0x148>
		 block_x++;
    ce6a:	8f 5f       	subi	r24, 0xFF	; 255
    ce6c:	23 c0       	rjmp	.+70     	; 0xceb4 <DropBlocks+0x18e>
      else{
		 block_dir = DOWN;
    ce6e:	82 e0       	ldi	r24, 0x02	; 2
    ce70:	80 93 8f 0f 	sts	0x0F8F, r24
	     block_maxx--;
    ce74:	91 50       	subi	r25, 0x01	; 1
    ce76:	90 93 02 10 	sts	0x1002, r25
	     block_y++;
    ce7a:	80 91 03 10 	lds	r24, 0x1003
    ce7e:	08 c0       	rjmp	.+16     	; 0xce90 <DropBlocks+0x16a>
	  }
   }
   else if(block_dir == DOWN){
    ce80:	82 30       	cpi	r24, 0x02	; 2
    ce82:	89 f4       	brne	.+34     	; 0xcea6 <DropBlocks+0x180>
      if(block_y < block_maxy)
    ce84:	80 91 03 10 	lds	r24, 0x1003
    ce88:	90 91 90 0f 	lds	r25, 0x0F90
    ce8c:	89 17       	cp	r24, r25
    ce8e:	10 f4       	brcc	.+4      	; 0xce94 <DropBlocks+0x16e>
		 block_y++;
    ce90:	8f 5f       	subi	r24, 0xFF	; 255
    ce92:	1c c0       	rjmp	.+56     	; 0xcecc <DropBlocks+0x1a6>
      else{
		 block_dir = LEFT;
    ce94:	84 e0       	ldi	r24, 0x04	; 4
    ce96:	80 93 8f 0f 	sts	0x0F8F, r24
	     block_maxy--;
    ce9a:	91 50       	subi	r25, 0x01	; 1
    ce9c:	90 93 90 0f 	sts	0x0F90, r25
	     block_x--;
    cea0:	80 91 7a 0f 	lds	r24, 0x0F7A
    cea4:	06 c0       	rjmp	.+12     	; 0xceb2 <DropBlocks+0x18c>
	  }
   }
   else{//LEFT
      if(block_x > block_minx)
    cea6:	80 91 7a 0f 	lds	r24, 0x0F7A
    ceaa:	90 91 c4 0f 	lds	r25, 0x0FC4
    ceae:	98 17       	cp	r25, r24
    ceb0:	20 f4       	brcc	.+8      	; 0xceba <DropBlocks+0x194>
		 block_x--;
    ceb2:	81 50       	subi	r24, 0x01	; 1
    ceb4:	80 93 7a 0f 	sts	0x0F7A, r24
    ceb8:	0b c0       	rjmp	.+22     	; 0xced0 <DropBlocks+0x1aa>
      else{
		 block_dir = UP;
    ceba:	81 e0       	ldi	r24, 0x01	; 1
    cebc:	80 93 8f 0f 	sts	0x0F8F, r24
	     block_minx++;
    cec0:	9f 5f       	subi	r25, 0xFF	; 255
    cec2:	90 93 c4 0f 	sts	0x0FC4, r25
	     block_y--;
    cec6:	80 91 03 10 	lds	r24, 0x1003
    ceca:	81 50       	subi	r24, 0x01	; 1
    cecc:	80 93 03 10 	sts	0x1003, r24
	  }
   }

   if(GetMapTile(ARENA_START_X+(block_x*2),ARENA_START_Y+(block_y*2)) == WALL_START)//skip this one
    ced0:	20 91 03 10 	lds	r18, 0x1003
    ced4:	22 0f       	add	r18, r18
    ced6:	30 91 7a 0f 	lds	r19, 0x0F7A
    ceda:	33 0f       	add	r19, r19
    cedc:	3e 5f       	subi	r19, 0xFE	; 254
    cede:	82 2f       	mov	r24, r18
    cee0:	8f 5f       	subi	r24, 0xFF	; 255
    cee2:	90 e0       	ldi	r25, 0x00	; 0
    cee4:	fc 01       	movw	r30, r24
    cee6:	65 e0       	ldi	r22, 0x05	; 5
    cee8:	ee 0f       	add	r30, r30
    ceea:	ff 1f       	adc	r31, r31
    ceec:	6a 95       	dec	r22
    ceee:	e1 f7       	brne	.-8      	; 0xcee8 <DropBlocks+0x1c2>
    cef0:	88 0f       	add	r24, r24
    cef2:	99 1f       	adc	r25, r25
    cef4:	e8 1b       	sub	r30, r24
    cef6:	f9 0b       	sbc	r31, r25
    cef8:	e3 0f       	add	r30, r19
    cefa:	f1 1d       	adc	r31, r1
    cefc:	e0 5e       	subi	r30, 0xE0	; 224
    cefe:	fe 4f       	sbci	r31, 0xFE	; 254
    cf00:	80 81       	ld	r24, Z
    cf02:	8b 33       	cpi	r24, 0x3B	; 59
    cf04:	19 f4       	brne	.+6      	; 0xcf0c <DropBlocks+0x1e6>
      block_z = 255;
    cf06:	8f ef       	ldi	r24, 0xFF	; 255
    cf08:	80 93 a8 0f 	sts	0x0FA8, r24
}
    cf0c:	df 91       	pop	r29
    cf0e:	cf 91       	pop	r28
    cf10:	08 95       	ret

0000cf12 <UpdatePlayers>:
	  
   }
   }
}

void UpdatePlayers(){
    cf12:	a3 e1       	ldi	r26, 0x13	; 19
    cf14:	b0 e0       	ldi	r27, 0x00	; 0
    cf16:	ef e8       	ldi	r30, 0x8F	; 143
    cf18:	f7 e6       	ldi	r31, 0x67	; 103
    cf1a:	0c 94 a9 70 	jmp	0xe152	; 0xe152 <__prologue_saves__>
    cf1e:	27 e1       	ldi	r18, 0x17	; 23
    cf20:	30 e1       	ldi	r19, 0x10	; 16
    cf22:	3a 87       	std	Y+10, r19	; 0x0a
    cf24:	29 87       	std	Y+9, r18	; 0x09
    cf26:	0a ec       	ldi	r16, 0xCA	; 202
    cf28:	80 2e       	mov	r8, r16
    cf2a:	0f e0       	ldi	r16, 0x0F	; 15
    cf2c:	90 2e       	mov	r9, r16
    cf2e:	b9 eb       	ldi	r27, 0xB9	; 185
    cf30:	6b 2e       	mov	r6, r27
    cf32:	bf e0       	ldi	r27, 0x0F	; 15
    cf34:	7b 2e       	mov	r7, r27
    cf36:	4f e0       	ldi	r20, 0x0F	; 15
    cf38:	50 e1       	ldi	r21, 0x10	; 16
    cf3a:	58 87       	std	Y+8, r21	; 0x08
    cf3c:	4f 83       	std	Y+7, r20	; 0x07
    cf3e:	66 ec       	ldi	r22, 0xC6	; 198
    cf40:	7f e0       	ldi	r23, 0x0F	; 15
    cf42:	7b 8b       	std	Y+19, r23	; 0x13
    cf44:	6a 8b       	std	Y+18, r22	; 0x12
    cf46:	8b e7       	ldi	r24, 0x7B	; 123
    cf48:	9f e0       	ldi	r25, 0x0F	; 15
    cf4a:	9e 83       	std	Y+6, r25	; 0x06
    cf4c:	8d 83       	std	Y+5, r24	; 0x05
    cf4e:	ae ef       	ldi	r26, 0xFE	; 254
    cf50:	2a 2e       	mov	r2, r26
    cf52:	af e0       	ldi	r26, 0x0F	; 15
    cf54:	3a 2e       	mov	r3, r26
    cf56:	a6 e7       	ldi	r26, 0x76	; 118
    cf58:	bf e0       	ldi	r27, 0x0F	; 15
    cf5a:	bc 83       	std	Y+4, r27	; 0x04
    cf5c:	ab 83       	std	Y+3, r26	; 0x03
    cf5e:	e3 e1       	ldi	r30, 0x13	; 19
    cf60:	f0 e1       	ldi	r31, 0x10	; 16
    cf62:	fa 83       	std	Y+2, r31	; 0x02
    cf64:	e9 83       	std	Y+1, r30	; 0x01
    cf66:	18 8a       	std	Y+16, r1	; 0x10
   u8 state;
   u8 t,t2;
   u8 x,y;
//   int off;
   for(u8 i=0;i<MAX_PLAYERS;i++){
      if(player_x[i] == 255)//player is being handled by a special case, dont think for this one
    cf68:	a9 85       	ldd	r26, Y+9	; 0x09
    cf6a:	ba 85       	ldd	r27, Y+10	; 0x0a
    cf6c:	0c 91       	ld	r16, X
    cf6e:	0f 3f       	cpi	r16, 0xFF	; 255
    cf70:	09 f4       	brne	.+2      	; 0xcf74 <UpdatePlayers+0x62>
    cf72:	a2 c6       	rjmp	.+3396   	; 0xdcb8 <UpdatePlayers+0xda6>
	     continue;

	  if(player_attrb2[i] & GHOST){
    cf74:	eb 81       	ldd	r30, Y+3	; 0x03
    cf76:	fc 81       	ldd	r31, Y+4	; 0x04
    cf78:	40 81       	ld	r20, Z
    cf7a:	47 ff       	sbrs	r20, 7
    cf7c:	ad c0       	rjmp	.+346    	; 0xd0d8 <UpdatePlayers+0x1c6>
	     if((gamestate & ALLOWGHOSTS) && roundtime > (60*SEC))//don't allow ghosts in over time
    cf7e:	80 91 fc 0e 	lds	r24, 0x0EFC
    cf82:	80 ff       	sbrs	r24, 0
    cf84:	99 c6       	rjmp	.+3378   	; 0xdcb8 <UpdatePlayers+0xda6>
    cf86:	80 91 c2 0f 	lds	r24, 0x0FC2
    cf8a:	90 91 c3 0f 	lds	r25, 0x0FC3
    cf8e:	81 51       	subi	r24, 0x11	; 17
    cf90:	9e 40       	sbci	r25, 0x0E	; 14
    cf92:	08 f4       	brcc	.+2      	; 0xcf96 <UpdatePlayers+0x84>
    cf94:	91 c6       	rjmp	.+3362   	; 0xdcb8 <UpdatePlayers+0xda6>
inline void UpdateGhostBomber(u8 p){
//here only left and right are used. Left will rotate around the play area in a counter-clockwise manner
//and right will be clockwise. player_x will be used as a magnitude starting at 0 in the lowest left corner 
//and ending at the lowest right corner. Easiest, fastest, and smallest way to handle this?
   
   if(--player_ftime[p] > 254){//rolled over
    cf96:	d4 01       	movw	r26, r8
    cf98:	8c 91       	ld	r24, X
    cf9a:	81 50       	subi	r24, 0x01	; 1
    cf9c:	8c 93       	st	X, r24
    cf9e:	8f 3f       	cpi	r24, 0xFF	; 255
    cfa0:	49 f4       	brne	.+18     	; 0xcfb4 <UpdatePlayers+0xa2>
     player_ftime[p] = 8;
    cfa2:	e8 e0       	ldi	r30, 0x08	; 8
    cfa4:	ec 93       	st	X, r30
	 if(++player_frame[p] > 3)
    cfa6:	d3 01       	movw	r26, r6
    cfa8:	8c 91       	ld	r24, X
    cfaa:	8f 5f       	subi	r24, 0xFF	; 255
    cfac:	8c 93       	st	X, r24
    cfae:	84 30       	cpi	r24, 0x04	; 4
    cfb0:	08 f0       	brcs	.+2      	; 0xcfb4 <UpdatePlayers+0xa2>
	    player_frame[p] = 0;
    cfb2:	1c 92       	st	X, r1
   }
   if(player_state[p] & MOVE && ((player_state[p] & LEFT && player_x[p] > 0) || (player_state[p] & RIGHT && player_x[p] < 38))){
    cfb4:	ea 89       	ldd	r30, Y+18	; 0x12
    cfb6:	fb 89       	ldd	r31, Y+19	; 0x13
    cfb8:	20 81       	ld	r18, Z
    cfba:	82 2f       	mov	r24, r18
    cfbc:	90 e0       	ldi	r25, 0x00	; 0
    cfbe:	25 ff       	sbrs	r18, 5
    cfc0:	32 c0       	rjmp	.+100    	; 0xd026 <UpdatePlayers+0x114>
    cfc2:	ac 01       	movw	r20, r24
    cfc4:	44 70       	andi	r20, 0x04	; 4
    cfc6:	50 70       	andi	r21, 0x00	; 0
    cfc8:	22 ff       	sbrs	r18, 2
    cfca:	02 c0       	rjmp	.+4      	; 0xcfd0 <UpdatePlayers+0xbe>
    cfcc:	00 23       	and	r16, r16
    cfce:	21 f4       	brne	.+8      	; 0xcfd8 <UpdatePlayers+0xc6>
    cfd0:	83 ff       	sbrs	r24, 3
    cfd2:	29 c0       	rjmp	.+82     	; 0xd026 <UpdatePlayers+0x114>
    cfd4:	06 32       	cpi	r16, 0x26	; 38
    cfd6:	38 f5       	brcc	.+78     	; 0xd026 <UpdatePlayers+0x114>
      player_offset[p] += 2;
    cfd8:	d1 01       	movw	r26, r2
    cfda:	8c 91       	ld	r24, X
    cfdc:	8e 5f       	subi	r24, 0xFE	; 254
    cfde:	8c 93       	st	X, r24
	  if(player_offset[p] > 15){
    cfe0:	80 31       	cpi	r24, 0x10	; 16
    cfe2:	08 f1       	brcs	.+66     	; 0xd026 <UpdatePlayers+0x114>
         player_offset[p] = 0;
    cfe4:	1c 92       	st	X, r1
      
	     if(player_state[p] & LEFT)
    cfe6:	45 2b       	or	r20, r21
    cfe8:	29 f0       	breq	.+10     	; 0xcff4 <UpdatePlayers+0xe2>
            --player_x[p];
    cfea:	01 50       	subi	r16, 0x01	; 1
    cfec:	e9 85       	ldd	r30, Y+9	; 0x09
    cfee:	fa 85       	ldd	r31, Y+10	; 0x0a
    cff0:	00 83       	st	Z, r16
    cff2:	04 c0       	rjmp	.+8      	; 0xcffc <UpdatePlayers+0xea>
         else
            ++player_x[p];
    cff4:	0f 5f       	subi	r16, 0xFF	; 255
    cff6:	a9 85       	ldd	r26, Y+9	; 0x09
    cff8:	ba 85       	ldd	r27, Y+10	; 0x0a
    cffa:	0c 93       	st	X, r16
         
		 if(player_x[p] == 11 ||
    cffc:	e9 85       	ldd	r30, Y+9	; 0x09
    cffe:	fa 85       	ldd	r31, Y+10	; 0x0a
    d000:	90 81       	ld	r25, Z
    d002:	89 2f       	mov	r24, r25
    d004:	8b 50       	subi	r24, 0x0B	; 11
    d006:	82 30       	cpi	r24, 0x02	; 2
    d008:	20 f0       	brcs	.+8      	; 0xd012 <UpdatePlayers+0x100>
    d00a:	9a 31       	cpi	r25, 0x1A	; 26
    d00c:	11 f0       	breq	.+4      	; 0xd012 <UpdatePlayers+0x100>
    d00e:	9b 31       	cpi	r25, 0x1B	; 27
    d010:	29 f4       	brne	.+10     	; 0xd01c <UpdatePlayers+0x10a>
		    player_x[p] == 12 ||
			player_x[p] == 26 ||
			player_x[p] == 27){
			   player_state[p] |= MOVE;
    d012:	20 62       	ori	r18, 0x20	; 32
    d014:	aa 89       	ldd	r26, Y+18	; 0x12
    d016:	bb 89       	ldd	r27, Y+19	; 0x13
    d018:	2c 93       	st	X, r18
    d01a:	4e c6       	rjmp	.+3228   	; 0xdcb8 <UpdatePlayers+0xda6>
               return;//skip BOMB
		 }else
		    player_state[p] ^= MOVE;
    d01c:	b0 e2       	ldi	r27, 0x20	; 32
    d01e:	2b 27       	eor	r18, r27
    d020:	ea 89       	ldd	r30, Y+18	; 0x12
    d022:	fb 89       	ldd	r31, Y+19	; 0x13
    d024:	20 83       	st	Z, r18
      }
	//  player_state[p] = 0;
   }
   
   if(player_offset[p])
    d026:	d1 01       	movw	r26, r2
    d028:	8c 91       	ld	r24, X
    d02a:	88 23       	and	r24, r24
    d02c:	09 f0       	breq	.+2      	; 0xd030 <UpdatePlayers+0x11e>
    d02e:	44 c6       	rjmp	.+3208   	; 0xdcb8 <UpdatePlayers+0xda6>
      return;

   if(player_state[p] & BOMB){
    d030:	ea 89       	ldd	r30, Y+18	; 0x12
    d032:	fb 89       	ldd	r31, Y+19	; 0x13
    d034:	90 81       	ld	r25, Z
    d036:	94 ff       	sbrs	r25, 4
    d038:	3f c6       	rjmp	.+3198   	; 0xdcb8 <UpdatePlayers+0xda6>
      player_state[p] ^= BOMB;
    d03a:	80 e1       	ldi	r24, 0x10	; 16
    d03c:	98 27       	eor	r25, r24
    d03e:	90 83       	st	Z, r25
    d040:	ee ee       	ldi	r30, 0xEE	; 238
    d042:	ff e0       	ldi	r31, 0x0F	; 15
    d044:	90 e0       	ldi	r25, 0x00	; 0
}

u8 player_bombs_out(u8 p){
   u8 b = 0;
   for(u8 i=0;i<MAX_BOMBS;i++)
      if(bomb_owner[i] == p)
    d046:	80 81       	ld	r24, Z
    d048:	28 89       	ldd	r18, Y+16	; 0x10
    d04a:	82 17       	cp	r24, r18
    d04c:	09 f4       	brne	.+2      	; 0xd050 <UpdatePlayers+0x13e>
	     b++;
    d04e:	9f 5f       	subi	r25, 0xFF	; 255
    d050:	31 96       	adiw	r30, 0x01	; 1
   return 4;
}

u8 player_bombs_out(u8 p){
   u8 b = 0;
   for(u8 i=0;i<MAX_BOMBS;i++)
    d052:	3f e0       	ldi	r19, 0x0F	; 15
    d054:	ee 3f       	cpi	r30, 0xFE	; 254
    d056:	f3 07       	cpc	r31, r19
    d058:	b1 f7       	brne	.-20     	; 0xd046 <UpdatePlayers+0x134>
   if(player_offset[p])
      return;

   if(player_state[p] & BOMB){
      player_state[p] ^= BOMB;
   if(!player_bombs_out(p)){
    d05a:	99 23       	and	r25, r25
    d05c:	09 f0       	breq	.+2      	; 0xd060 <UpdatePlayers+0x14e>
    d05e:	2c c6       	rjmp	.+3160   	; 0xdcb8 <UpdatePlayers+0xda6>
    d060:	0f e0       	ldi	r16, 0x0F	; 15
}

inline u8 FindOpenBomb(){

   for(u8 i=MAX_BOMBS-1;i<255;i--){
      if(bomb_owner[i] == 255)//bomb is open
    d062:	e0 2f       	mov	r30, r16
    d064:	f0 e0       	ldi	r31, 0x00	; 0
    d066:	9f 01       	movw	r18, r30
    d068:	22 51       	subi	r18, 0x12	; 18
    d06a:	30 4f       	sbci	r19, 0xF0	; 240
    d06c:	d9 01       	movw	r26, r18
    d06e:	8c 91       	ld	r24, X
    d070:	8f 3f       	cpi	r24, 0xFF	; 255
    d072:	19 f0       	breq	.+6      	; 0xd07a <UpdatePlayers+0x168>
   return pgm_read_byte(&FireSequence[bomb_timer[b]/5]);
}

inline u8 FindOpenBomb(){

   for(u8 i=MAX_BOMBS-1;i<255;i--){
    d074:	01 50       	subi	r16, 0x01	; 1
    d076:	a8 f7       	brcc	.-22     	; 0xd062 <UpdatePlayers+0x150>
    d078:	1f c6       	rjmp	.+3134   	; 0xdcb8 <UpdatePlayers+0xda6>

	  u8 b = FindOpenBomb();
	  if(b == 255)//no open bomb
		 return;
      
	  bomb_owner[b] = p;
    d07a:	48 89       	ldd	r20, Y+16	; 0x10
    d07c:	d9 01       	movw	r26, r18
    d07e:	4c 93       	st	X, r20
	  bomb_timer[b] = BOMBSTARTTIME;
    d080:	e7 55       	subi	r30, 0x57	; 87
    d082:	f0 4f       	sbci	r31, 0xF0	; 240
    d084:	50 ef       	ldi	r21, 0xF0	; 240
    d086:	50 83       	st	Z, r21

	  if(player_x[p] < 11){//left side
    d088:	a9 85       	ldd	r26, Y+9	; 0x09
    d08a:	ba 85       	ldd	r27, Y+10	; 0x0a
    d08c:	9c 91       	ld	r25, X
    d08e:	9b 30       	cpi	r25, 0x0B	; 11
    d090:	48 f4       	brcc	.+18     	; 0xd0a4 <UpdatePlayers+0x192>
		 ThrowBomb(0,20-(player_x[p]*2),RIGHT,8,b);
    d092:	6a e0       	ldi	r22, 0x0A	; 10
    d094:	70 e0       	ldi	r23, 0x00	; 0
    d096:	69 1b       	sub	r22, r25
    d098:	71 09       	sbc	r23, r1
    d09a:	66 0f       	add	r22, r22
    d09c:	77 1f       	adc	r23, r23
    d09e:	80 e0       	ldi	r24, 0x00	; 0
    d0a0:	48 e0       	ldi	r20, 0x08	; 8
    d0a2:	16 c0       	rjmp	.+44     	; 0xd0d0 <UpdatePlayers+0x1be>
	  }
	  else if(player_x[p] > 12 && player_x[p] < 26){//top
    d0a4:	89 2f       	mov	r24, r25
    d0a6:	8d 50       	subi	r24, 0x0D	; 13
    d0a8:	8d 30       	cpi	r24, 0x0D	; 13
    d0aa:	38 f4       	brcc	.+14     	; 0xd0ba <UpdatePlayers+0x1a8>
         ThrowBomb((player_x[p]-12)*2,1,DOWN,6,b);
    d0ac:	99 0f       	add	r25, r25
    d0ae:	89 2f       	mov	r24, r25
    d0b0:	88 51       	subi	r24, 0x18	; 24
    d0b2:	61 e0       	ldi	r22, 0x01	; 1
    d0b4:	42 e0       	ldi	r20, 0x02	; 2
    d0b6:	26 e0       	ldi	r18, 0x06	; 6
    d0b8:	0c c0       	rjmp	.+24     	; 0xd0d2 <UpdatePlayers+0x1c0>
	  }
	  else if(player_x[p] > 27){//right side
    d0ba:	9c 31       	cpi	r25, 0x1C	; 28
    d0bc:	08 f4       	brcc	.+2      	; 0xd0c0 <UpdatePlayers+0x1ae>
    d0be:	fc c5       	rjmp	.+3064   	; 0xdcb8 <UpdatePlayers+0xda6>
         ThrowBomb(28,(player_x[p]*2)-24,LEFT,8,b);
    d0c0:	69 2f       	mov	r22, r25
    d0c2:	70 e0       	ldi	r23, 0x00	; 0
    d0c4:	6c 50       	subi	r22, 0x0C	; 12
    d0c6:	70 40       	sbci	r23, 0x00	; 0
    d0c8:	66 0f       	add	r22, r22
    d0ca:	77 1f       	adc	r23, r23
    d0cc:	8c e1       	ldi	r24, 0x1C	; 28
    d0ce:	44 e0       	ldi	r20, 0x04	; 4
    d0d0:	28 e0       	ldi	r18, 0x08	; 8
    d0d2:	0e 94 75 4e 	call	0x9cea	; 0x9cea <ThrowBomb>
    d0d6:	f0 c5       	rjmp	.+3040   	; 0xdcb8 <UpdatePlayers+0xda6>
	        UpdateGhostBomber(i);//see above
         
		 continue;       
	  }

      state = player_state[i];
    d0d8:	ea 89       	ldd	r30, Y+18	; 0x12
    d0da:	fb 89       	ldd	r31, Y+19	; 0x13
    d0dc:	f0 81       	ld	r31, Z
    d0de:	f9 8b       	std	Y+17, r31	; 0x11
      
	  if(state == DYING){
    d0e0:	ff 3f       	cpi	r31, 0xFF	; 255
    d0e2:	09 f0       	breq	.+2      	; 0xd0e6 <UpdatePlayers+0x1d4>
    d0e4:	73 c0       	rjmp	.+230    	; 0xd1cc <UpdatePlayers+0x2ba>
	     if(!(--player_ftime[i])){
    d0e6:	d4 01       	movw	r26, r8
    d0e8:	8c 91       	ld	r24, X
    d0ea:	81 50       	subi	r24, 0x01	; 1
    d0ec:	8c 93       	st	X, r24
    d0ee:	88 23       	and	r24, r24
    d0f0:	09 f0       	breq	.+2      	; 0xd0f4 <UpdatePlayers+0x1e2>
    d0f2:	e2 c5       	rjmp	.+3012   	; 0xdcb8 <UpdatePlayers+0xda6>
		    player_ftime[i] = 14;
    d0f4:	ee e0       	ldi	r30, 0x0E	; 14
    d0f6:	ec 93       	st	X, r30
		    if((++player_frame[i]) > 3){//done with death animation
    d0f8:	d3 01       	movw	r26, r6
    d0fa:	8c 91       	ld	r24, X
    d0fc:	8f 5f       	subi	r24, 0xFF	; 255
    d0fe:	8c 93       	st	X, r24
    d100:	84 30       	cpi	r24, 0x04	; 4
    d102:	08 f4       	brcc	.+2      	; 0xd106 <UpdatePlayers+0x1f4>
    d104:	d9 c5       	rjmp	.+2994   	; 0xdcb8 <UpdatePlayers+0xda6>
			   if(player_wait[i] != 255){//his killer was saved in _wait, now see if hes a ghost and earned respawn
    d106:	af 81       	ldd	r26, Y+7	; 0x07
    d108:	b8 85       	ldd	r27, Y+8	; 0x08
    d10a:	ec 91       	ld	r30, X
    d10c:	ef 3f       	cpi	r30, 0xFF	; 255
    d10e:	31 f1       	breq	.+76     	; 0xd15c <UpdatePlayers+0x24a>
                  t = player_wait[i];
				  if(player_attrb2[t] & GHOST && roundtime > 60*SEC){//the killer was a ghost, bring him back to life           
    d110:	ae 2f       	mov	r26, r30
    d112:	b0 e0       	ldi	r27, 0x00	; 0
    d114:	ad 01       	movw	r20, r26
    d116:	4a 58       	subi	r20, 0x8A	; 138
    d118:	50 4f       	sbci	r21, 0xF0	; 240
    d11a:	fa 01       	movw	r30, r20
    d11c:	20 81       	ld	r18, Z
    d11e:	27 ff       	sbrs	r18, 7
    d120:	1d c0       	rjmp	.+58     	; 0xd15c <UpdatePlayers+0x24a>
    d122:	80 91 c2 0f 	lds	r24, 0x0FC2
    d126:	90 91 c3 0f 	lds	r25, 0x0FC3
    d12a:	81 51       	subi	r24, 0x11	; 17
    d12c:	9e 40       	sbci	r25, 0x0E	; 14
    d12e:	b0 f0       	brcs	.+44     	; 0xd15c <UpdatePlayers+0x24a>
					 player_x[t] = player_x[i];
    d130:	fd 01       	movw	r30, r26
    d132:	e9 5e       	subi	r30, 0xE9	; 233
    d134:	ff 4e       	sbci	r31, 0xEF	; 239
    d136:	00 83       	st	Z, r16
					 player_y[t] = player_y[i];
    d138:	bd 01       	movw	r22, r26
    d13a:	65 58       	subi	r22, 0x85	; 133
    d13c:	70 4f       	sbci	r23, 0xF0	; 240
    d13e:	ed 81       	ldd	r30, Y+5	; 0x05
    d140:	fe 81       	ldd	r31, Y+6	; 0x06
    d142:	80 81       	ld	r24, Z
    d144:	fb 01       	movw	r30, r22
    d146:	80 83       	st	Z, r24
					 player_state[t] = 0;
    d148:	fd 01       	movw	r30, r26
    d14a:	ea 53       	subi	r30, 0x3A	; 58
    d14c:	f0 4f       	sbci	r31, 0xF0	; 240
    d14e:	10 82       	st	Z, r1
					 player_offset[t] = 0;
    d150:	a2 50       	subi	r26, 0x02	; 2
    d152:	b0 4f       	sbci	r27, 0xF0	; 240
    d154:	1c 92       	st	X, r1
					 player_attrb2[t] ^= GHOST;
    d156:	20 58       	subi	r18, 0x80	; 128
    d158:	da 01       	movw	r26, r20
    d15a:	2c 93       	st	X, r18
			      }
			   }
			   DispersePowerups(i);//disperse his powerups around the map
    d15c:	88 89       	ldd	r24, Y+16	; 0x10
    d15e:	0e 94 cb 4c 	call	0x9996	; 0x9996 <DispersePowerups>
			   //Now determine the players position as a ghost(only player_x is used for ghost)
			   player_attrb2[i] = GHOST;//get rid of all powerups
    d162:	20 e8       	ldi	r18, 0x80	; 128
    d164:	eb 81       	ldd	r30, Y+3	; 0x03
    d166:	fc 81       	ldd	r31, Y+4	; 0x04
    d168:	20 83       	st	Z, r18
			   player_attrb[i] = player_attrb[i] & TEAM2;//save team bit
    d16a:	a9 81       	ldd	r26, Y+1	; 0x01
    d16c:	ba 81       	ldd	r27, Y+2	; 0x02
    d16e:	8c 91       	ld	r24, X
    d170:	80 72       	andi	r24, 0x20	; 32
    d172:	8c 93       	st	X, r24
			   player_state[i] = 0;
    d174:	ea 89       	ldd	r30, Y+18	; 0x12
    d176:	fb 89       	ldd	r31, Y+19	; 0x13
    d178:	10 82       	st	Z, r1
			   player_offset[i] = 0;//make sure the ghost can recieve input
    d17a:	d1 01       	movw	r26, r2
    d17c:	1c 92       	st	X, r1
			   x = player_x[i]/2; y = player_y[i]/2;
    d17e:	e9 85       	ldd	r30, Y+9	; 0x09
    d180:	fa 85       	ldd	r31, Y+10	; 0x0a
    d182:	40 81       	ld	r20, Z
    d184:	46 95       	lsr	r20
    d186:	ad 81       	ldd	r26, Y+5	; 0x05
    d188:	be 81       	ldd	r27, Y+6	; 0x06
    d18a:	5c 91       	ld	r21, X
    d18c:	56 95       	lsr	r21
			   if(x < 7){
    d18e:	47 30       	cpi	r20, 0x07	; 7
    d190:	50 f4       	brcc	.+20     	; 0xd1a6 <UpdatePlayers+0x294>
                  if(x < y)//left
    d192:	45 17       	cp	r20, r21
    d194:	18 f4       	brcc	.+6      	; 0xd19c <UpdatePlayers+0x28a>
				     player_x[i] = 11-y;
    d196:	8b e0       	ldi	r24, 0x0B	; 11
    d198:	85 1b       	sub	r24, r21
    d19a:	65 c1       	rjmp	.+714    	; 0xd466 <UpdatePlayers+0x554>
                  else//top
				     player_x[i] = 12+x;
    d19c:	44 5f       	subi	r20, 0xF4	; 244
    d19e:	e9 85       	ldd	r30, Y+9	; 0x09
    d1a0:	fa 85       	ldd	r31, Y+10	; 0x0a
    d1a2:	40 83       	st	Z, r20
    d1a4:	89 c5       	rjmp	.+2834   	; 0xdcb8 <UpdatePlayers+0xda6>
			   }
			   else{
			      if(y < 15-x)//top
    d1a6:	25 2f       	mov	r18, r21
    d1a8:	30 e0       	ldi	r19, 0x00	; 0
    d1aa:	8f e0       	ldi	r24, 0x0F	; 15
    d1ac:	90 e0       	ldi	r25, 0x00	; 0
    d1ae:	84 1b       	sub	r24, r20
    d1b0:	91 09       	sbc	r25, r1
    d1b2:	28 17       	cp	r18, r24
    d1b4:	39 07       	cpc	r19, r25
    d1b6:	2c f4       	brge	.+10     	; 0xd1c2 <UpdatePlayers+0x2b0>
                     player_x[i] = 12+x;
    d1b8:	44 5f       	subi	r20, 0xF4	; 244
    d1ba:	a9 85       	ldd	r26, Y+9	; 0x09
    d1bc:	ba 85       	ldd	r27, Y+10	; 0x0a
    d1be:	4c 93       	st	X, r20
    d1c0:	7b c5       	rjmp	.+2806   	; 0xdcb8 <UpdatePlayers+0xda6>
                  else//right
				     player_x[i] = 27+y; 
    d1c2:	55 5e       	subi	r21, 0xE5	; 229
    d1c4:	e9 85       	ldd	r30, Y+9	; 0x09
    d1c6:	fa 85       	ldd	r31, Y+10	; 0x0a
    d1c8:	50 83       	st	Z, r21
    d1ca:	76 c5       	rjmp	.+2796   	; 0xdcb8 <UpdatePlayers+0xda6>
			}
         }
		 continue;
	  }

      x = player_x[i]; y = player_y[i];
    d1cc:	ad 81       	ldd	r26, Y+5	; 0x05
    d1ce:	be 81       	ldd	r27, Y+6	; 0x06
    d1d0:	1c 91       	ld	r17, X

      //First thing, check to see if player is hit with fire against actual vram
	  if(!(gamestate & VICTORY)){
    d1d2:	80 91 fc 0e 	lds	r24, 0x0EFC
    d1d6:	86 fd       	sbrc	r24, 6
    d1d8:	39 c0       	rjmp	.+114    	; 0xd24c <UpdatePlayers+0x33a>




inline u8 GetMapTile(u8 x, u8 y){
      return (vram[(y*30)+x]-RAM_TILES_COUNT);//return (vram[122+(y*30)+x]-RAM_TILES_COUNT);
    d1da:	c1 2e       	mov	r12, r17
    d1dc:	dd 24       	eor	r13, r13
    d1de:	c6 01       	movw	r24, r12
    d1e0:	88 0f       	add	r24, r24
    d1e2:	99 1f       	adc	r25, r25
    d1e4:	56 01       	movw	r10, r12
    d1e6:	35 e0       	ldi	r19, 0x05	; 5
    d1e8:	aa 0c       	add	r10, r10
    d1ea:	bb 1c       	adc	r11, r11
    d1ec:	3a 95       	dec	r19
    d1ee:	e1 f7       	brne	.-8      	; 0xd1e8 <UpdatePlayers+0x2d6>
    d1f0:	a8 1a       	sub	r10, r24
    d1f2:	b9 0a       	sbc	r11, r25
    d1f4:	e0 2e       	mov	r14, r16
    d1f6:	ff 24       	eor	r15, r15

   return false;
}

bool IsFire(u8 t){
   if(t >= FIRE_START && t <= FIRE_END)
    d1f8:	f5 01       	movw	r30, r10
    d1fa:	e0 5e       	subi	r30, 0xE0	; 224
    d1fc:	fe 4f       	sbci	r31, 0xFE	; 254
    d1fe:	ee 0d       	add	r30, r14
    d200:	ff 1d       	adc	r31, r15
    d202:	80 81       	ld	r24, Z
    d204:	8b 54       	subi	r24, 0x4B	; 75
    d206:	84 35       	cpi	r24, 0x54	; 84
    d208:	08 f0       	brcs	.+2      	; 0xd20c <UpdatePlayers+0x2fa>
    d20a:	88 c5       	rjmp	.+2832   	; 0xdd1c <UpdatePlayers+0xe0a>
	     if(IsFire(GetMapTile(x+0,y+0)) || 
	        IsFire(GetMapTile(x+1,y+0)) || 
	        IsFire(GetMapTile(x+0,y+1)) || 
	        IsFire(GetMapTile(x+1,y+1))  ){
         
		    KillPlayer(i);
    d20c:	88 89       	ldd	r24, Y+16	; 0x10
    d20e:	0e 94 f4 64 	call	0xc9e8	; 0xc9e8 <KillPlayer>
			player_wait[i] = FindKiller(i);//keep track of who killed him
    d212:	ef 81       	ldd	r30, Y+7	; 0x07
    d214:	f8 85       	ldd	r31, Y+8	; 0x08
    d216:	56 c0       	rjmp	.+172    	; 0xd2c4 <UpdatePlayers+0x3b2>

		    continue;
	     }
		 else if((roundtime%(SEC/2))==2){//invulnerability counts down every 1/2 second
            t = ((player_attrb2[i] & 0b01100000)>>5);
    d218:	84 2f       	mov	r24, r20
    d21a:	90 e0       	ldi	r25, 0x00	; 0
    d21c:	80 76       	andi	r24, 0x60	; 96
    d21e:	90 70       	andi	r25, 0x00	; 0
    d220:	25 e0       	ldi	r18, 0x05	; 5
    d222:	95 95       	asr	r25
    d224:	87 95       	ror	r24
    d226:	2a 95       	dec	r18
    d228:	e1 f7       	brne	.-8      	; 0xd222 <UpdatePlayers+0x310>
            player_attrb2[i] |= 0b01100000;
		    player_attrb2[i] ^= 0b01100000;
    d22a:	94 2f       	mov	r25, r20
    d22c:	90 66       	ori	r25, 0x60	; 96
    d22e:	f0 e6       	ldi	r31, 0x60	; 96
    d230:	9f 27       	eor	r25, r31
    d232:	ab 81       	ldd	r26, Y+3	; 0x03
    d234:	bc 81       	ldd	r27, Y+4	; 0x04
    d236:	9c 93       	st	X, r25
		    if(t > 1){
    d238:	82 30       	cpi	r24, 0x02	; 2
    d23a:	08 f4       	brcc	.+2      	; 0xd23e <UpdatePlayers+0x32c>
    d23c:	49 c0       	rjmp	.+146    	; 0xd2d0 <UpdatePlayers+0x3be>
		       t--;
			player_attrb2[i] |= (t<<5);
    d23e:	81 50       	subi	r24, 0x01	; 1
    d240:	82 95       	swap	r24
    d242:	88 0f       	add	r24, r24
    d244:	80 7e       	andi	r24, 0xE0	; 224
    d246:	89 2b       	or	r24, r25
    d248:	8c 93       	st	X, r24
    d24a:	42 c0       	rjmp	.+132    	; 0xd2d0 <UpdatePlayers+0x3be>
		 }
         
	     }
      }
	  else{//VICTORY!
	     if(player_offset[i] != 255){//if(!player_offset[i]){//VICTORY! and has stopped moving
    d24c:	f1 01       	movw	r30, r2
    d24e:	80 81       	ld	r24, Z
    d250:	8f 3f       	cpi	r24, 0xFF	; 255
    d252:	71 f0       	breq	.+28     	; 0xd270 <UpdatePlayers+0x35e>
            player_offset[i] = 255;//first tick of victory
    d254:	2f ef       	ldi	r18, 0xFF	; 255
    d256:	20 83       	st	Z, r18
		    player_wait[i] = 0;
    d258:	af 81       	ldd	r26, Y+7	; 0x07
    d25a:	b8 85       	ldd	r27, Y+8	; 0x08
    d25c:	1c 92       	st	X, r1
		    player_ftime[i] = 14;
    d25e:	2e e0       	ldi	r18, 0x0E	; 14
    d260:	f4 01       	movw	r30, r8
    d262:	20 83       	st	Z, r18
	        player_state[i] = UP;
    d264:	e1 e0       	ldi	r30, 0x01	; 1
    d266:	aa 89       	ldd	r26, Y+18	; 0x12
    d268:	bb 89       	ldd	r27, Y+19	; 0x13
    d26a:	ec 93       	st	X, r30
		    player_frame[i] = 0;
    d26c:	d3 01       	movw	r26, r6
    d26e:	1c 92       	st	X, r1
	     }


	  //if(player_offset[i] == 255){//is in victory animation

         if(player_state[i] & UP){
    d270:	ea 89       	ldd	r30, Y+18	; 0x12
    d272:	fb 89       	ldd	r31, Y+19	; 0x13
    d274:	80 81       	ld	r24, Z
    d276:	80 ff       	sbrs	r24, 0
    d278:	12 c0       	rjmp	.+36     	; 0xd29e <UpdatePlayers+0x38c>
		    if(player_ftime[i])
    d27a:	d4 01       	movw	r26, r8
    d27c:	8c 91       	ld	r24, X
    d27e:	88 23       	and	r24, r24
    d280:	19 f0       	breq	.+6      	; 0xd288 <UpdatePlayers+0x376>
			   player_ftime[i]--;
    d282:	81 50       	subi	r24, 0x01	; 1
    d284:	8c 93       	st	X, r24
    d286:	19 c0       	rjmp	.+50     	; 0xd2ba <UpdatePlayers+0x3a8>
		    else if(++player_wait[i] > 15)
    d288:	ef 81       	ldd	r30, Y+7	; 0x07
    d28a:	f8 85       	ldd	r31, Y+8	; 0x08
    d28c:	80 81       	ld	r24, Z
    d28e:	8f 5f       	subi	r24, 0xFF	; 255
    d290:	80 83       	st	Z, r24
    d292:	80 31       	cpi	r24, 0x10	; 16
    d294:	90 f0       	brcs	.+36     	; 0xd2ba <UpdatePlayers+0x3a8>
               player_state[i] = DOWN;
    d296:	e2 e0       	ldi	r30, 0x02	; 2
    d298:	aa 89       	ldd	r26, Y+18	; 0x12
    d29a:	bb 89       	ldd	r27, Y+19	; 0x13
    d29c:	0d c0       	rjmp	.+26     	; 0xd2b8 <UpdatePlayers+0x3a6>
	     }
		 else{//down
            if(--player_wait[i] < 1){
    d29e:	af 81       	ldd	r26, Y+7	; 0x07
    d2a0:	b8 85       	ldd	r27, Y+8	; 0x08
    d2a2:	8c 91       	ld	r24, X
    d2a4:	81 50       	subi	r24, 0x01	; 1
    d2a6:	8c 93       	st	X, r24
    d2a8:	88 23       	and	r24, r24
    d2aa:	39 f4       	brne	.+14     	; 0xd2ba <UpdatePlayers+0x3a8>
			   player_state[i] = UP;
    d2ac:	21 e0       	ldi	r18, 0x01	; 1
    d2ae:	ea 89       	ldd	r30, Y+18	; 0x12
    d2b0:	fb 89       	ldd	r31, Y+19	; 0x13
    d2b2:	20 83       	st	Z, r18
			   player_ftime[i] = 14;//wait on the ground a bit
    d2b4:	ee e0       	ldi	r30, 0x0E	; 14
    d2b6:	d4 01       	movw	r26, r8
    d2b8:	ec 93       	st	X, r30
            }
		 }


		 if(player_ftime[i])
    d2ba:	d4 01       	movw	r26, r8
    d2bc:	8c 91       	ld	r24, X
    d2be:	88 23       	and	r24, r24
    d2c0:	19 f0       	breq	.+6      	; 0xd2c8 <UpdatePlayers+0x3b6>
		    player_frame[i] = 0;
    d2c2:	f3 01       	movw	r30, r6
    d2c4:	10 82       	st	Z, r1
    d2c6:	f8 c4       	rjmp	.+2544   	; 0xdcb8 <UpdatePlayers+0xda6>
         else
		    player_frame[i] = 1;
    d2c8:	e1 e0       	ldi	r30, 0x01	; 1
    d2ca:	d3 01       	movw	r26, r6
    d2cc:	ec 93       	st	X, r30
    d2ce:	f4 c4       	rjmp	.+2536   	; 0xdcb8 <UpdatePlayers+0xda6>

		 continue;
	  
      }
	  //Check to see if we are poisoned, if so do any poison actions and check for touching other players
	  if(player_attrb[i] & POISON){
    d2d0:	a9 81       	ldd	r26, Y+1	; 0x01
    d2d2:	ba 81       	ldd	r27, Y+2	; 0x02
    d2d4:	8c 91       	ld	r24, X
    d2d6:	83 ff       	sbrs	r24, 3
    d2d8:	23 c0       	rjmp	.+70     	; 0xd320 <UpdatePlayers+0x40e>
    d2da:	a3 e1       	ldi	r26, 0x13	; 19
    d2dc:	b0 e1       	ldi	r27, 0x10	; 16
    d2de:	20 e0       	ldi	r18, 0x00	; 0
    d2e0:	30 e0       	ldi	r19, 0x00	; 0
            
	     for(u8 p=0;p<MAX_PLAYERS;p++){
            if(abs(player_x[i]-player_x[p]) < 2 && abs(player_y[i]-player_y[p]) < 2)
    d2e2:	f9 01       	movw	r30, r18
    d2e4:	e9 5e       	subi	r30, 0xE9	; 233
    d2e6:	ff 4e       	sbci	r31, 0xEF	; 239
    d2e8:	80 81       	ld	r24, Z
    d2ea:	f7 01       	movw	r30, r14
    d2ec:	e8 1b       	sub	r30, r24
    d2ee:	f1 09       	sbc	r31, r1
    d2f0:	cf 01       	movw	r24, r30
    d2f2:	01 96       	adiw	r24, 0x01	; 1
    d2f4:	03 97       	sbiw	r24, 0x03	; 3
    d2f6:	70 f4       	brcc	.+28     	; 0xd314 <UpdatePlayers+0x402>
    d2f8:	f9 01       	movw	r30, r18
    d2fa:	e5 58       	subi	r30, 0x85	; 133
    d2fc:	f0 4f       	sbci	r31, 0xF0	; 240
    d2fe:	80 81       	ld	r24, Z
    d300:	a6 01       	movw	r20, r12
    d302:	48 1b       	sub	r20, r24
    d304:	51 09       	sbc	r21, r1
    d306:	ca 01       	movw	r24, r20
    d308:	01 96       	adiw	r24, 0x01	; 1
    d30a:	03 97       	sbiw	r24, 0x03	; 3
    d30c:	18 f4       	brcc	.+6      	; 0xd314 <UpdatePlayers+0x402>
		       player_attrb[p] |= POISON;
    d30e:	8c 91       	ld	r24, X
    d310:	88 60       	ori	r24, 0x08	; 8
    d312:	8c 93       	st	X, r24
    d314:	2f 5f       	subi	r18, 0xFF	; 255
    d316:	3f 4f       	sbci	r19, 0xFF	; 255
    d318:	11 96       	adiw	r26, 0x01	; 1
	  
      }
	  //Check to see if we are poisoned, if so do any poison actions and check for touching other players
	  if(player_attrb[i] & POISON){
            
	     for(u8 p=0;p<MAX_PLAYERS;p++){
    d31a:	24 30       	cpi	r18, 0x04	; 4
    d31c:	31 05       	cpc	r19, r1
    d31e:	09 f7       	brne	.-62     	; 0xd2e2 <UpdatePlayers+0x3d0>
            if(abs(player_x[i]-player_x[p]) < 2 && abs(player_y[i]-player_y[p]) < 2)
		       player_attrb[p] |= POISON;
	     }
	  }
      
	  if(state & STUNNED){
    d320:	59 89       	ldd	r21, Y+17	; 0x11
    d322:	57 ff       	sbrs	r21, 7
    d324:	1d c0       	rjmp	.+58     	; 0xd360 <UpdatePlayers+0x44e>
			if(player_ftime[i]){
    d326:	d4 01       	movw	r26, r8
    d328:	8c 91       	ld	r24, X
    d32a:	88 23       	and	r24, r24
    d32c:	19 f0       	breq	.+6      	; 0xd334 <UpdatePlayers+0x422>
			   player_ftime[i]--;
    d32e:	81 50       	subi	r24, 0x01	; 1
    d330:	8c 93       	st	X, r24
    d332:	0a c0       	rjmp	.+20     	; 0xd348 <UpdatePlayers+0x436>
            }
			else{
			   player_ftime[i] = 10;
    d334:	2a e0       	ldi	r18, 0x0A	; 10
    d336:	f4 01       	movw	r30, r8
    d338:	20 83       	st	Z, r18
			   if(++player_frame[i] > 7)
    d33a:	d3 01       	movw	r26, r6
    d33c:	8c 91       	ld	r24, X
    d33e:	8f 5f       	subi	r24, 0xFF	; 255
    d340:	8c 93       	st	X, r24
    d342:	88 30       	cpi	r24, 0x08	; 8
    d344:	08 f0       	brcs	.+2      	; 0xd348 <UpdatePlayers+0x436>
			      player_frame[i] = 0;
    d346:	1c 92       	st	X, r1
			}  
         if(player_wait[i]){
    d348:	ef 81       	ldd	r30, Y+7	; 0x07
    d34a:	f8 85       	ldd	r31, Y+8	; 0x08
    d34c:	80 81       	ld	r24, Z
    d34e:	88 23       	and	r24, r24
    d350:	11 f0       	breq	.+4      	; 0xd356 <UpdatePlayers+0x444>
		    player_wait[i]--;
    d352:	81 50       	subi	r24, 0x01	; 1
    d354:	88 c0       	rjmp	.+272    	; 0xd466 <UpdatePlayers+0x554>
			continue;
         }
		 else
		    player_state[i] ^= STUNNED;
    d356:	89 89       	ldd	r24, Y+17	; 0x11
    d358:	80 58       	subi	r24, 0x80	; 128
    d35a:	aa 89       	ldd	r26, Y+18	; 0x12
    d35c:	bb 89       	ldd	r27, Y+19	; 0x13
    d35e:	8c 93       	st	X, r24

	  }

	  if(state & BOMB){
    d360:	c9 88       	ldd	r12, Y+17	; 0x11
    d362:	c4 fe       	sbrs	r12, 4
    d364:	09 c0       	rjmp	.+18     	; 0xd378 <UpdatePlayers+0x466>
	     PlaceBomb(i);
    d366:	88 89       	ldd	r24, Y+16	; 0x10
    d368:	0e 94 82 64 	call	0xc904	; 0xc904 <PlaceBomb>
	     if(player_ftime[i] >= 4*SEC)//is in idle animation
    d36c:	f4 01       	movw	r30, r8
    d36e:	80 81       	ld	r24, Z
    d370:	80 3f       	cpi	r24, 0xF0	; 240
    d372:	10 f0       	brcs	.+4      	; 0xd378 <UpdatePlayers+0x466>
		    player_ftime[i] = 1;
    d374:	21 e0       	ldi	r18, 0x01	; 1
    d376:	20 83       	st	Z, r18
u8 GetSlot(u8 p){
   return playerslots & (3>>(p*2));
}

inline u8 player_speed(u8 p){
   if(player_attrb[p] & POISON){
    d378:	a9 81       	ldd	r26, Y+1	; 0x01
    d37a:	ba 81       	ldd	r27, Y+2	; 0x02
    d37c:	bc 91       	ld	r27, X
    d37e:	bb 87       	std	Y+11, r27	; 0x0b
    d380:	8b 2f       	mov	r24, r27
    d382:	90 e0       	ldi	r25, 0x00	; 0
    d384:	fc 01       	movw	r30, r24
    d386:	e8 70       	andi	r30, 0x08	; 8
    d388:	f0 70       	andi	r31, 0x00	; 0
    d38a:	fd 87       	std	Y+13, r31	; 0x0d
    d38c:	ec 87       	std	Y+12, r30	; 0x0c
    d38e:	b3 ff       	sbrs	r27, 3
    d390:	0a c0       	rjmp	.+20     	; 0xd3a6 <UpdatePlayers+0x494>
      if(poison_type == POISON_FAST)
    d392:	80 91 bd 0f 	lds	r24, 0x0FBD
    d396:	82 30       	cpi	r24, 0x02	; 2
    d398:	11 f4       	brne	.+4      	; 0xd39e <UpdatePlayers+0x48c>
    d39a:	57 e0       	ldi	r21, 0x07	; 7
    d39c:	08 c0       	rjmp	.+16     	; 0xd3ae <UpdatePlayers+0x49c>
	     return 7;
      else if(poison_type == POISON_SLOW)
    d39e:	81 30       	cpi	r24, 0x01	; 1
    d3a0:	11 f4       	brne	.+4      	; 0xd3a6 <UpdatePlayers+0x494>
    d3a2:	50 e0       	ldi	r21, 0x00	; 0
    d3a4:	04 c0       	rjmp	.+8      	; 0xd3ae <UpdatePlayers+0x49c>
	     return 0;
   }
   
   return player_attrb2[p] & 0b00000111;
    d3a6:	ab 81       	ldd	r26, Y+3	; 0x03
    d3a8:	bc 81       	ldd	r27, Y+4	; 0x04
    d3aa:	5c 91       	ld	r21, X
    d3ac:	57 70       	andi	r21, 0x07	; 7
    d3ae:	f4 01       	movw	r30, r8
    d3b0:	40 81       	ld	r20, Z
      if(state & GRAB)
	     GrabBomb(i);
      
	  u8 speed = player_speed(i);

	  if(state & MOVE){
    d3b2:	c5 fe       	sbrs	r12, 5
    d3b4:	6d c4       	rjmp	.+2266   	; 0xdc90 <UpdatePlayers+0xd7e>
	     if(!player_ftime[i]){
    d3b6:	44 23       	and	r20, r20
    d3b8:	51 f4       	brne	.+20     	; 0xd3ce <UpdatePlayers+0x4bc>
            player_ftime[i] = PLAYER_FRAME_TIME-(speed);
    d3ba:	88 e0       	ldi	r24, 0x08	; 8
    d3bc:	85 1b       	sub	r24, r21
    d3be:	80 83       	st	Z, r24
			if(++player_frame[i] > 7)
    d3c0:	d3 01       	movw	r26, r6
    d3c2:	8c 91       	ld	r24, X
    d3c4:	8f 5f       	subi	r24, 0xFF	; 255
    d3c6:	8c 93       	st	X, r24
    d3c8:	88 30       	cpi	r24, 0x08	; 8
    d3ca:	a0 f0       	brcs	.+40     	; 0xd3f4 <UpdatePlayers+0x4e2>
    d3cc:	0e c0       	rjmp	.+28     	; 0xd3ea <UpdatePlayers+0x4d8>
			   player_frame[i] = 0;
		 }
		 else if(player_ftime[i] > PLAYER_FRAME_TIME-(speed)){//get rid of idle ticks
    d3ce:	24 2f       	mov	r18, r20
    d3d0:	30 e0       	ldi	r19, 0x00	; 0
    d3d2:	88 e0       	ldi	r24, 0x08	; 8
    d3d4:	90 e0       	ldi	r25, 0x00	; 0
    d3d6:	85 1b       	sub	r24, r21
    d3d8:	91 09       	sbc	r25, r1
    d3da:	82 17       	cp	r24, r18
    d3dc:	93 07       	cpc	r25, r19
    d3de:	3c f4       	brge	.+14     	; 0xd3ee <UpdatePlayers+0x4dc>
		    player_ftime[i] = PLAYER_FRAME_TIME-(speed);
    d3e0:	88 e0       	ldi	r24, 0x08	; 8
    d3e2:	85 1b       	sub	r24, r21
    d3e4:	f4 01       	movw	r30, r8
    d3e6:	80 83       	st	Z, r24
		    player_frame[i] = 0;
    d3e8:	d3 01       	movw	r26, r6
    d3ea:	1c 92       	st	X, r1
    d3ec:	03 c0       	rjmp	.+6      	; 0xd3f4 <UpdatePlayers+0x4e2>
		 }
         else
		    player_ftime[i]--;
    d3ee:	41 50       	subi	r20, 0x01	; 1
    d3f0:	f4 01       	movw	r30, r8
    d3f2:	40 83       	st	Z, r20

	     if(!player_offset[i]){//just requested to move, see if it's blocked
    d3f4:	d1 01       	movw	r26, r2
    d3f6:	dc 90       	ld	r13, X
    d3f8:	dd 20       	and	r13, r13
    d3fa:	09 f0       	breq	.+2      	; 0xd3fe <UpdatePlayers+0x4ec>
    d3fc:	69 c3       	rjmp	.+1746   	; 0xdad0 <UpdatePlayers+0xbbe>

			if(state & UP){
    d3fe:	c0 fe       	sbrs	r12, 0
    d400:	b4 c0       	rjmp	.+360    	; 0xd56a <UpdatePlayers+0x658>
			   if(y < ARENA_START_Y+1){
    d402:	12 30       	cpi	r17, 0x02	; 2
    d404:	08 f4       	brcc	.+2      	; 0xd408 <UpdatePlayers+0x4f6>
    d406:	e3 c0       	rjmp	.+454    	; 0xd5ce <UpdatePlayers+0x6bc>
			      player_state[i] ^= MOVE;
				  continue;
			   }
               t = GetMapTile(x,y-1); t2 = GetMapTile(x+1,y-1);
    d408:	61 2f       	mov	r22, r17
    d40a:	61 50       	subi	r22, 0x01	; 1
    d40c:	be e1       	ldi	r27, 0x1E	; 30
    d40e:	6b 9f       	mul	r22, r27
    d410:	f0 01       	movw	r30, r0
    d412:	11 24       	eor	r1, r1
    d414:	e0 5e       	subi	r30, 0xE0	; 224
    d416:	fe 4f       	sbci	r31, 0xFE	; 254
    d418:	ee 0e       	add	r14, r30
    d41a:	ff 1e       	adc	r15, r31
    d41c:	d7 01       	movw	r26, r14
    d41e:	8c 91       	ld	r24, X
    d420:	48 2f       	mov	r20, r24
    d422:	4f 51       	subi	r20, 0x1F	; 31
      return true;
   return false;
}

bool IsBombTop(u8 t){
   if(t < BOMB_START || t > BOMB_END)
    d424:	e4 0d       	add	r30, r4
    d426:	f5 1d       	adc	r31, r5
    d428:	e0 81       	ld	r30, Z
    d42a:	98 2f       	mov	r25, r24
    d42c:	9f 59       	subi	r25, 0x9F	; 159
    d42e:	9c 30       	cpi	r25, 0x0C	; 12
    d430:	28 f4       	brcc	.+10     	; 0xd43c <UpdatePlayers+0x52a>
      return false;
   t -= BOMB_START;
   t %= 4;
   if(t < 2)
    d432:	89 2f       	mov	r24, r25
    d434:	83 70       	andi	r24, 0x03	; 3
    d436:	82 30       	cpi	r24, 0x02	; 2
    d438:	08 f4       	brcc	.+2      	; 0xd43c <UpdatePlayers+0x52a>
    d43a:	4a c3       	rjmp	.+1684   	; 0xdad0 <UpdatePlayers+0xbbe>
			   }
               t = GetMapTile(x,y-1); t2 = GetMapTile(x+1,y-1);
			   if(IsBombTop(t)){
			      
               }
			   else if((player_attrb[i] & BOOT) && IsBomb(t)){
    d43c:	bb 85       	ldd	r27, Y+11	; 0x0b
    d43e:	b7 ff       	sbrs	r27, 7
    d440:	14 c0       	rjmp	.+40     	; 0xd46a <UpdatePlayers+0x558>
      return true;
   return false;
}

bool IsBomb(u8 t){
   if(t >= BOMB_START && t <= BOMB_END)
    d442:	9c 30       	cpi	r25, 0x0C	; 12
    d444:	90 f4       	brcc	.+36     	; 0xd46a <UpdatePlayers+0x558>
               t = GetMapTile(x,y-1); t2 = GetMapTile(x+1,y-1);
			   if(IsBombTop(t)){
			      
               }
			   else if((player_attrb[i] & BOOT) && IsBomb(t)){
			      bomb_state[FindBomb(x+0,y-1,t)] = MOVE|UP;
    d446:	80 2f       	mov	r24, r16
    d448:	0e 94 85 4b 	call	0x970a	; 0x970a <FindBomb>
    d44c:	e8 2f       	mov	r30, r24
    d44e:	f0 e0       	ldi	r31, 0x00	; 0
    d450:	e2 53       	subi	r30, 0x32	; 50
    d452:	f0 4f       	sbci	r31, 0xF0	; 240
    d454:	21 e2       	ldi	r18, 0x21	; 33
    d456:	20 83       	st	Z, r18
				  player_state[i] ^= MOVE;
    d458:	aa 89       	ldd	r26, Y+18	; 0x12
    d45a:	bb 89       	ldd	r27, Y+19	; 0x13
    d45c:	8c 91       	ld	r24, X
    d45e:	b0 e2       	ldi	r27, 0x20	; 32
    d460:	8b 27       	eor	r24, r27
    d462:	ea 89       	ldd	r30, Y+18	; 0x12
    d464:	fb 89       	ldd	r31, Y+19	; 0x13
    d466:	80 83       	st	Z, r24
    d468:	27 c4       	rjmp	.+2126   	; 0xdcb8 <UpdatePlayers+0xda6>
    d46a:	2e 2f       	mov	r18, r30
    d46c:	2f 51       	subi	r18, 0x1F	; 31

   return b;
}

bool IsSolid(u8 t){
   if(t < 4)
    d46e:	44 30       	cpi	r20, 0x04	; 4
    d470:	50 f0       	brcs	.+20     	; 0xd486 <UpdatePlayers+0x574>
      return false;

   if((t >= BLOCK_START && t <= WALL_END) || (t >= BOMB_START && t <= BOMB_END) || (t >= SPECIAL_SOLID_START && t <= SPECIAL_SOLID_END) || (t >= BORDER_START))
    d472:	84 2f       	mov	r24, r20
    d474:	84 50       	subi	r24, 0x04	; 4
    d476:	88 32       	cpi	r24, 0x28	; 40
    d478:	a8 f0       	brcs	.+42     	; 0xd4a4 <UpdatePlayers+0x592>
    d47a:	9c 30       	cpi	r25, 0x0C	; 12
    d47c:	98 f0       	brcs	.+38     	; 0xd4a4 <UpdatePlayers+0x592>
    d47e:	4e 3f       	cpi	r20, 0xFE	; 254
    d480:	89 f0       	breq	.+34     	; 0xd4a4 <UpdatePlayers+0x592>
    d482:	47 3c       	cpi	r20, 0xC7	; 199
    d484:	78 f4       	brcc	.+30     	; 0xd4a4 <UpdatePlayers+0x592>

   return b;
}

bool IsSolid(u8 t){
   if(t < 4)
    d486:	24 30       	cpi	r18, 0x04	; 4
    d488:	08 f4       	brcc	.+2      	; 0xd48c <UpdatePlayers+0x57a>
    d48a:	22 c3       	rjmp	.+1604   	; 0xdad0 <UpdatePlayers+0xbbe>
      return false;

   if((t >= BLOCK_START && t <= WALL_END) || (t >= BOMB_START && t <= BOMB_END) || (t >= SPECIAL_SOLID_START && t <= SPECIAL_SOLID_END) || (t >= BORDER_START))
    d48c:	82 2f       	mov	r24, r18
    d48e:	84 50       	subi	r24, 0x04	; 4
    d490:	88 32       	cpi	r24, 0x28	; 40
    d492:	50 f0       	brcs	.+20     	; 0xd4a8 <UpdatePlayers+0x596>
    d494:	8c 57       	subi	r24, 0x7C	; 124
    d496:	8c 30       	cpi	r24, 0x0C	; 12
    d498:	38 f0       	brcs	.+14     	; 0xd4a8 <UpdatePlayers+0x596>
    d49a:	2e 3f       	cpi	r18, 0xFE	; 254
    d49c:	29 f0       	breq	.+10     	; 0xd4a8 <UpdatePlayers+0x596>
    d49e:	27 3c       	cpi	r18, 0xC7	; 199
    d4a0:	18 f4       	brcc	.+6      	; 0xd4a8 <UpdatePlayers+0x596>
    d4a2:	16 c3       	rjmp	.+1580   	; 0xdad0 <UpdatePlayers+0xbbe>

   return b;
}

bool IsSolid(u8 t){
   if(t < 4)
    d4a4:	24 30       	cpi	r18, 0x04	; 4
    d4a6:	58 f0       	brcs	.+22     	; 0xd4be <UpdatePlayers+0x5ac>
      return false;

   if((t >= BLOCK_START && t <= WALL_END) || (t >= BOMB_START && t <= BOMB_END) || (t >= SPECIAL_SOLID_START && t <= SPECIAL_SOLID_END) || (t >= BORDER_START))
    d4a8:	82 2f       	mov	r24, r18
    d4aa:	84 50       	subi	r24, 0x04	; 4
    d4ac:	88 32       	cpi	r24, 0x28	; 40
    d4ae:	d0 f1       	brcs	.+116    	; 0xd524 <UpdatePlayers+0x612>
    d4b0:	8c 57       	subi	r24, 0x7C	; 124
    d4b2:	8c 30       	cpi	r24, 0x0C	; 12
    d4b4:	b8 f1       	brcs	.+110    	; 0xd524 <UpdatePlayers+0x612>
    d4b6:	2e 3f       	cpi	r18, 0xFE	; 254
    d4b8:	a9 f1       	breq	.+106    	; 0xd524 <UpdatePlayers+0x612>
    d4ba:	27 3c       	cpi	r18, 0xC7	; 199
    d4bc:	98 f5       	brcc	.+102    	; 0xd524 <UpdatePlayers+0x612>
    d4be:	0e 5f       	subi	r16, 0xFE	; 254
    d4c0:	a0 2f       	mov	r26, r16
    d4c2:	b0 e0       	ldi	r27, 0x00	; 0
    d4c4:	fd 01       	movw	r30, r26
    d4c6:	e0 5e       	subi	r30, 0xE0	; 224
    d4c8:	fe 4f       	sbci	r31, 0xFE	; 254
    d4ca:	ea 0d       	add	r30, r10
    d4cc:	fb 1d       	adc	r31, r11
    d4ce:	e0 81       	ld	r30, Z
    d4d0:	3e 2f       	mov	r19, r30
    d4d2:	3f 51       	subi	r19, 0x1F	; 31

   return b;
}

bool IsSolid(u8 t){
   if(t < 4)
    d4d4:	34 30       	cpi	r19, 0x04	; 4
    d4d6:	58 f0       	brcs	.+22     	; 0xd4ee <UpdatePlayers+0x5dc>
      return false;

   if((t >= BLOCK_START && t <= WALL_END) || (t >= BOMB_START && t <= BOMB_END) || (t >= SPECIAL_SOLID_START && t <= SPECIAL_SOLID_END) || (t >= BORDER_START))
    d4d8:	8e 2f       	mov	r24, r30
    d4da:	83 52       	subi	r24, 0x23	; 35
    d4dc:	88 32       	cpi	r24, 0x28	; 40
    d4de:	10 f1       	brcs	.+68     	; 0xd524 <UpdatePlayers+0x612>
    d4e0:	ef 59       	subi	r30, 0x9F	; 159
    d4e2:	ec 30       	cpi	r30, 0x0C	; 12
    d4e4:	f8 f0       	brcs	.+62     	; 0xd524 <UpdatePlayers+0x612>
    d4e6:	3e 3f       	cpi	r19, 0xFE	; 254
    d4e8:	e9 f0       	breq	.+58     	; 0xd524 <UpdatePlayers+0x612>
    d4ea:	37 3c       	cpi	r19, 0xC7	; 199
    d4ec:	d8 f4       	brcc	.+54     	; 0xd524 <UpdatePlayers+0x612>
    d4ee:	a0 5e       	subi	r26, 0xE0	; 224
    d4f0:	be 4f       	sbci	r27, 0xFE	; 254
    d4f2:	6e 85       	ldd	r22, Y+14	; 0x0e
    d4f4:	7f 85       	ldd	r23, Y+15	; 0x0f
    d4f6:	a6 0f       	add	r26, r22
    d4f8:	b7 1f       	adc	r27, r23
    d4fa:	ec 91       	ld	r30, X
    d4fc:	3e 2f       	mov	r19, r30
    d4fe:	3f 51       	subi	r19, 0x1F	; 31

   return b;
}

bool IsSolid(u8 t){
   if(t < 4)
    d500:	34 30       	cpi	r19, 0x04	; 4
    d502:	58 f0       	brcs	.+22     	; 0xd51a <UpdatePlayers+0x608>
      return false;

   if((t >= BLOCK_START && t <= WALL_END) || (t >= BOMB_START && t <= BOMB_END) || (t >= SPECIAL_SOLID_START && t <= SPECIAL_SOLID_END) || (t >= BORDER_START))
    d504:	8e 2f       	mov	r24, r30
    d506:	83 52       	subi	r24, 0x23	; 35
    d508:	88 32       	cpi	r24, 0x28	; 40
    d50a:	60 f0       	brcs	.+24     	; 0xd524 <UpdatePlayers+0x612>
    d50c:	ef 59       	subi	r30, 0x9F	; 159
    d50e:	ec 30       	cpi	r30, 0x0C	; 12
    d510:	48 f0       	brcs	.+18     	; 0xd524 <UpdatePlayers+0x612>
    d512:	3e 3f       	cpi	r19, 0xFE	; 254
    d514:	39 f0       	breq	.+14     	; 0xd524 <UpdatePlayers+0x612>
    d516:	37 3c       	cpi	r19, 0xC7	; 199
    d518:	28 f4       	brcc	.+10     	; 0xd524 <UpdatePlayers+0x612>
			   }else if(IsSolid(t) || IsSolid(t2)){
			      if(IsBomb(t) || IsBomb(t2)){
                  
				  }
				  if(!IsSolid(t2) && !IsSolid(GetMapTile(x+2,y)) && !IsSolid(GetMapTile(x+2,y+1))){
                     player_state[i] ^= UP;
    d51a:	aa 89       	ldd	r26, Y+18	; 0x12
    d51c:	bb 89       	ldd	r27, Y+19	; 0x13
    d51e:	8c 91       	ld	r24, X
    d520:	b1 e0       	ldi	r27, 0x01	; 1
    d522:	bb c0       	rjmp	.+374    	; 0xd69a <UpdatePlayers+0x788>

   return b;
}

bool IsSolid(u8 t){
   if(t < 4)
    d524:	44 30       	cpi	r20, 0x04	; 4
    d526:	70 f0       	brcs	.+28     	; 0xd544 <UpdatePlayers+0x632>
      return false;

   if((t >= BLOCK_START && t <= WALL_END) || (t >= BOMB_START && t <= BOMB_END) || (t >= SPECIAL_SOLID_START && t <= SPECIAL_SOLID_END) || (t >= BORDER_START))
    d528:	84 2f       	mov	r24, r20
    d52a:	84 50       	subi	r24, 0x04	; 4
    d52c:	88 32       	cpi	r24, 0x28	; 40
    d52e:	08 f4       	brcc	.+2      	; 0xd532 <UpdatePlayers+0x620>
    d530:	93 cf       	rjmp	.-218    	; 0xd458 <UpdatePlayers+0x546>
    d532:	9c 30       	cpi	r25, 0x0C	; 12
    d534:	08 f4       	brcc	.+2      	; 0xd538 <UpdatePlayers+0x626>
    d536:	90 cf       	rjmp	.-224    	; 0xd458 <UpdatePlayers+0x546>
    d538:	4e 3f       	cpi	r20, 0xFE	; 254
    d53a:	09 f4       	brne	.+2      	; 0xd53e <UpdatePlayers+0x62c>
    d53c:	8d cf       	rjmp	.-230    	; 0xd458 <UpdatePlayers+0x546>
    d53e:	47 3c       	cpi	r20, 0xC7	; 199
    d540:	08 f0       	brcs	.+2      	; 0xd544 <UpdatePlayers+0x632>
    d542:	8a cf       	rjmp	.-236    	; 0xd458 <UpdatePlayers+0x546>

   return b;
}

bool IsSolid(u8 t){
   if(t < 4)
    d544:	24 30       	cpi	r18, 0x04	; 4
    d546:	08 f4       	brcc	.+2      	; 0xd54a <UpdatePlayers+0x638>
    d548:	87 cf       	rjmp	.-242    	; 0xd458 <UpdatePlayers+0x546>
      return false;

   if((t >= BLOCK_START && t <= WALL_END) || (t >= BOMB_START && t <= BOMB_END) || (t >= SPECIAL_SOLID_START && t <= SPECIAL_SOLID_END) || (t >= BORDER_START))
    d54a:	82 2f       	mov	r24, r18
    d54c:	84 50       	subi	r24, 0x04	; 4
    d54e:	88 32       	cpi	r24, 0x28	; 40
    d550:	08 f4       	brcc	.+2      	; 0xd554 <UpdatePlayers+0x642>
    d552:	19 c4       	rjmp	.+2098   	; 0xdd86 <UpdatePlayers+0xe74>
    d554:	8c 57       	subi	r24, 0x7C	; 124
    d556:	8c 30       	cpi	r24, 0x0C	; 12
    d558:	08 f4       	brcc	.+2      	; 0xd55c <UpdatePlayers+0x64a>
    d55a:	15 c4       	rjmp	.+2090   	; 0xdd86 <UpdatePlayers+0xe74>
    d55c:	2e 3f       	cpi	r18, 0xFE	; 254
    d55e:	09 f4       	brne	.+2      	; 0xd562 <UpdatePlayers+0x650>
    d560:	12 c4       	rjmp	.+2084   	; 0xdd86 <UpdatePlayers+0xe74>
    d562:	27 3c       	cpi	r18, 0xC7	; 199
    d564:	08 f0       	brcs	.+2      	; 0xd568 <UpdatePlayers+0x656>
    d566:	0f c4       	rjmp	.+2078   	; 0xdd86 <UpdatePlayers+0xe74>
    d568:	77 cf       	rjmp	.-274    	; 0xd458 <UpdatePlayers+0x546>
					 continue;
				  }
			   }

			}
			else if(state & DOWN){
    d56a:	c1 fe       	sbrs	r12, 1
    d56c:	ef c0       	rjmp	.+478    	; 0xd74c <UpdatePlayers+0x83a>
			   if(y > ARENA_START_Y+19){
    d56e:	15 31       	cpi	r17, 0x15	; 21
    d570:	08 f0       	brcs	.+2      	; 0xd574 <UpdatePlayers+0x662>
    d572:	72 cf       	rjmp	.-284    	; 0xd458 <UpdatePlayers+0x546>
			      player_state[i] ^= MOVE;
				  continue;
			   }
               t = GetMapTile(x,y+2); t2 = GetMapTile(x+1,y+2);
    d574:	61 2f       	mov	r22, r17
    d576:	6e 5f       	subi	r22, 0xFE	; 254
    d578:	2e e1       	ldi	r18, 0x1E	; 30
    d57a:	62 9f       	mul	r22, r18
    d57c:	f0 01       	movw	r30, r0
    d57e:	11 24       	eor	r1, r1
    d580:	e0 5e       	subi	r30, 0xE0	; 224
    d582:	fe 4f       	sbci	r31, 0xFE	; 254
    d584:	ee 0e       	add	r14, r30
    d586:	ff 1e       	adc	r15, r31
    d588:	d7 01       	movw	r26, r14
    d58a:	8c 91       	ld	r24, X
    d58c:	48 2f       	mov	r20, r24
    d58e:	4f 51       	subi	r20, 0x1F	; 31
      return true;
   return false;
}

bool IsBombBottom(u8 t){
   if(t < BOMB_START || t > BOMB_END)
    d590:	e4 0d       	add	r30, r4
    d592:	f5 1d       	adc	r31, r5
    d594:	e0 81       	ld	r30, Z
    d596:	98 2f       	mov	r25, r24
    d598:	9f 59       	subi	r25, 0x9F	; 159
    d59a:	9c 30       	cpi	r25, 0x0C	; 12
    d59c:	28 f4       	brcc	.+10     	; 0xd5a8 <UpdatePlayers+0x696>
      return false;
   t -= BOMB_START;
   t %= 4;
   if(t > 1)
    d59e:	89 2f       	mov	r24, r25
    d5a0:	83 70       	andi	r24, 0x03	; 3
    d5a2:	82 30       	cpi	r24, 0x02	; 2
    d5a4:	08 f0       	brcs	.+2      	; 0xd5a8 <UpdatePlayers+0x696>
    d5a6:	94 c2       	rjmp	.+1320   	; 0xdad0 <UpdatePlayers+0xbbe>
			   }
               t = GetMapTile(x,y+2); t2 = GetMapTile(x+1,y+2);
               if(IsBombBottom(t)){
			      
               }
			   else if((player_attrb[i] & BOOT && player_y[i] < 19) && IsBomb(t)){
    d5a8:	bb 85       	ldd	r27, Y+11	; 0x0b
    d5aa:	b7 ff       	sbrs	r27, 7
    d5ac:	19 c0       	rjmp	.+50     	; 0xd5e0 <UpdatePlayers+0x6ce>
    d5ae:	ad 81       	ldd	r26, Y+5	; 0x05
    d5b0:	be 81       	ldd	r27, Y+6	; 0x06
    d5b2:	8c 91       	ld	r24, X
    d5b4:	83 31       	cpi	r24, 0x13	; 19
    d5b6:	a0 f4       	brcc	.+40     	; 0xd5e0 <UpdatePlayers+0x6ce>
      return true;
   return false;
}

bool IsBomb(u8 t){
   if(t >= BOMB_START && t <= BOMB_END)
    d5b8:	9c 30       	cpi	r25, 0x0C	; 12
    d5ba:	90 f4       	brcc	.+36     	; 0xd5e0 <UpdatePlayers+0x6ce>
               t = GetMapTile(x,y+2); t2 = GetMapTile(x+1,y+2);
               if(IsBombBottom(t)){
			      
               }
			   else if((player_attrb[i] & BOOT && player_y[i] < 19) && IsBomb(t)){
			      bomb_state[FindBomb(x+0,y+2,t)] = MOVE|DOWN;
    d5bc:	80 2f       	mov	r24, r16
    d5be:	0e 94 85 4b 	call	0x970a	; 0x970a <FindBomb>
    d5c2:	e8 2f       	mov	r30, r24
    d5c4:	f0 e0       	ldi	r31, 0x00	; 0
    d5c6:	e2 53       	subi	r30, 0x32	; 50
    d5c8:	f0 4f       	sbci	r31, 0xF0	; 240
    d5ca:	b2 e2       	ldi	r27, 0x22	; 34
    d5cc:	b0 83       	st	Z, r27
				  player_state[i] ^= MOVE;
    d5ce:	ea 89       	ldd	r30, Y+18	; 0x12
    d5d0:	fb 89       	ldd	r31, Y+19	; 0x13
    d5d2:	80 81       	ld	r24, Z
    d5d4:	f0 e2       	ldi	r31, 0x20	; 32
    d5d6:	8f 27       	eor	r24, r31
    d5d8:	aa 89       	ldd	r26, Y+18	; 0x12
    d5da:	bb 89       	ldd	r27, Y+19	; 0x13
    d5dc:	8c 93       	st	X, r24
    d5de:	6c c3       	rjmp	.+1752   	; 0xdcb8 <UpdatePlayers+0xda6>
    d5e0:	2e 2f       	mov	r18, r30
    d5e2:	2f 51       	subi	r18, 0x1F	; 31

   return b;
}

bool IsSolid(u8 t){
   if(t < 4)
    d5e4:	44 30       	cpi	r20, 0x04	; 4
    d5e6:	50 f0       	brcs	.+20     	; 0xd5fc <UpdatePlayers+0x6ea>
      return false;

   if((t >= BLOCK_START && t <= WALL_END) || (t >= BOMB_START && t <= BOMB_END) || (t >= SPECIAL_SOLID_START && t <= SPECIAL_SOLID_END) || (t >= BORDER_START))
    d5e8:	84 2f       	mov	r24, r20
    d5ea:	84 50       	subi	r24, 0x04	; 4
    d5ec:	88 32       	cpi	r24, 0x28	; 40
    d5ee:	a8 f0       	brcs	.+42     	; 0xd61a <UpdatePlayers+0x708>
    d5f0:	9c 30       	cpi	r25, 0x0C	; 12
    d5f2:	98 f0       	brcs	.+38     	; 0xd61a <UpdatePlayers+0x708>
    d5f4:	4e 3f       	cpi	r20, 0xFE	; 254
    d5f6:	89 f0       	breq	.+34     	; 0xd61a <UpdatePlayers+0x708>
    d5f8:	47 3c       	cpi	r20, 0xC7	; 199
    d5fa:	78 f4       	brcc	.+30     	; 0xd61a <UpdatePlayers+0x708>

   return b;
}

bool IsSolid(u8 t){
   if(t < 4)
    d5fc:	24 30       	cpi	r18, 0x04	; 4
    d5fe:	08 f4       	brcc	.+2      	; 0xd602 <UpdatePlayers+0x6f0>
    d600:	67 c2       	rjmp	.+1230   	; 0xdad0 <UpdatePlayers+0xbbe>
      return false;

   if((t >= BLOCK_START && t <= WALL_END) || (t >= BOMB_START && t <= BOMB_END) || (t >= SPECIAL_SOLID_START && t <= SPECIAL_SOLID_END) || (t >= BORDER_START))
    d602:	82 2f       	mov	r24, r18
    d604:	84 50       	subi	r24, 0x04	; 4
    d606:	88 32       	cpi	r24, 0x28	; 40
    d608:	50 f0       	brcs	.+20     	; 0xd61e <UpdatePlayers+0x70c>
    d60a:	8c 57       	subi	r24, 0x7C	; 124
    d60c:	8c 30       	cpi	r24, 0x0C	; 12
    d60e:	38 f0       	brcs	.+14     	; 0xd61e <UpdatePlayers+0x70c>
    d610:	2e 3f       	cpi	r18, 0xFE	; 254
    d612:	29 f0       	breq	.+10     	; 0xd61e <UpdatePlayers+0x70c>
    d614:	27 3c       	cpi	r18, 0xC7	; 199
    d616:	18 f4       	brcc	.+6      	; 0xd61e <UpdatePlayers+0x70c>
    d618:	5b c2       	rjmp	.+1206   	; 0xdad0 <UpdatePlayers+0xbbe>

   return b;
}

bool IsSolid(u8 t){
   if(t < 4)
    d61a:	24 30       	cpi	r18, 0x04	; 4
    d61c:	58 f0       	brcs	.+22     	; 0xd634 <UpdatePlayers+0x722>
      return false;

   if((t >= BLOCK_START && t <= WALL_END) || (t >= BOMB_START && t <= BOMB_END) || (t >= SPECIAL_SOLID_START && t <= SPECIAL_SOLID_END) || (t >= BORDER_START))
    d61e:	82 2f       	mov	r24, r18
    d620:	84 50       	subi	r24, 0x04	; 4
    d622:	88 32       	cpi	r24, 0x28	; 40
    d624:	e8 f1       	brcs	.+122    	; 0xd6a0 <UpdatePlayers+0x78e>
    d626:	8c 57       	subi	r24, 0x7C	; 124
    d628:	8c 30       	cpi	r24, 0x0C	; 12
    d62a:	d0 f1       	brcs	.+116    	; 0xd6a0 <UpdatePlayers+0x78e>
    d62c:	2e 3f       	cpi	r18, 0xFE	; 254
    d62e:	c1 f1       	breq	.+112    	; 0xd6a0 <UpdatePlayers+0x78e>
    d630:	27 3c       	cpi	r18, 0xC7	; 199
    d632:	b0 f5       	brcc	.+108    	; 0xd6a0 <UpdatePlayers+0x78e>
    d634:	0e 5f       	subi	r16, 0xFE	; 254
    d636:	a0 2f       	mov	r26, r16
    d638:	b0 e0       	ldi	r27, 0x00	; 0
    d63a:	02 50       	subi	r16, 0x02	; 2
    d63c:	fd 01       	movw	r30, r26
    d63e:	e0 5e       	subi	r30, 0xE0	; 224
    d640:	fe 4f       	sbci	r31, 0xFE	; 254
    d642:	ea 0d       	add	r30, r10
    d644:	fb 1d       	adc	r31, r11
    d646:	e0 81       	ld	r30, Z
    d648:	3e 2f       	mov	r19, r30
    d64a:	3f 51       	subi	r19, 0x1F	; 31

   return b;
}

bool IsSolid(u8 t){
   if(t < 4)
    d64c:	34 30       	cpi	r19, 0x04	; 4
    d64e:	58 f0       	brcs	.+22     	; 0xd666 <UpdatePlayers+0x754>
      return false;

   if((t >= BLOCK_START && t <= WALL_END) || (t >= BOMB_START && t <= BOMB_END) || (t >= SPECIAL_SOLID_START && t <= SPECIAL_SOLID_END) || (t >= BORDER_START))
    d650:	8e 2f       	mov	r24, r30
    d652:	83 52       	subi	r24, 0x23	; 35
    d654:	88 32       	cpi	r24, 0x28	; 40
    d656:	20 f1       	brcs	.+72     	; 0xd6a0 <UpdatePlayers+0x78e>
    d658:	ef 59       	subi	r30, 0x9F	; 159
    d65a:	ec 30       	cpi	r30, 0x0C	; 12
    d65c:	08 f1       	brcs	.+66     	; 0xd6a0 <UpdatePlayers+0x78e>
    d65e:	3e 3f       	cpi	r19, 0xFE	; 254
    d660:	f9 f0       	breq	.+62     	; 0xd6a0 <UpdatePlayers+0x78e>
    d662:	37 3c       	cpi	r19, 0xC7	; 199
    d664:	e8 f4       	brcc	.+58     	; 0xd6a0 <UpdatePlayers+0x78e>
    d666:	a0 5e       	subi	r26, 0xE0	; 224
    d668:	be 4f       	sbci	r27, 0xFE	; 254
    d66a:	ee 85       	ldd	r30, Y+14	; 0x0e
    d66c:	ff 85       	ldd	r31, Y+15	; 0x0f
    d66e:	ae 0f       	add	r26, r30
    d670:	bf 1f       	adc	r27, r31
    d672:	ec 91       	ld	r30, X
    d674:	3e 2f       	mov	r19, r30
    d676:	3f 51       	subi	r19, 0x1F	; 31

   return b;
}

bool IsSolid(u8 t){
   if(t < 4)
    d678:	34 30       	cpi	r19, 0x04	; 4
    d67a:	58 f0       	brcs	.+22     	; 0xd692 <UpdatePlayers+0x780>
      return false;

   if((t >= BLOCK_START && t <= WALL_END) || (t >= BOMB_START && t <= BOMB_END) || (t >= SPECIAL_SOLID_START && t <= SPECIAL_SOLID_END) || (t >= BORDER_START))
    d67c:	8e 2f       	mov	r24, r30
    d67e:	83 52       	subi	r24, 0x23	; 35
    d680:	88 32       	cpi	r24, 0x28	; 40
    d682:	70 f0       	brcs	.+28     	; 0xd6a0 <UpdatePlayers+0x78e>
    d684:	ef 59       	subi	r30, 0x9F	; 159
    d686:	ec 30       	cpi	r30, 0x0C	; 12
    d688:	58 f0       	brcs	.+22     	; 0xd6a0 <UpdatePlayers+0x78e>
    d68a:	3e 3f       	cpi	r19, 0xFE	; 254
    d68c:	49 f0       	breq	.+18     	; 0xd6a0 <UpdatePlayers+0x78e>
    d68e:	37 3c       	cpi	r19, 0xC7	; 199
    d690:	38 f4       	brcc	.+14     	; 0xd6a0 <UpdatePlayers+0x78e>
			      bomb_state[FindBomb(x+0,y+2,t)] = MOVE|DOWN;
				  player_state[i] ^= MOVE;
				  continue;
			   }else if(IsSolid(t) || IsSolid(t2)){
				  if(!IsSolid(t2) && !IsSolid(GetMapTile(x+2,y)) && !IsSolid(GetMapTile(x+2,y+1))){
                     player_state[i] ^= DOWN;
    d692:	aa 89       	ldd	r26, Y+18	; 0x12
    d694:	bb 89       	ldd	r27, Y+19	; 0x13
    d696:	8c 91       	ld	r24, X
    d698:	b2 e0       	ldi	r27, 0x02	; 2
    d69a:	8b 27       	eor	r24, r27
					 player_state[i] |= RIGHT;
    d69c:	88 60       	ori	r24, 0x08	; 8
    d69e:	52 c0       	rjmp	.+164    	; 0xd744 <UpdatePlayers+0x832>

   return b;
}

bool IsSolid(u8 t){
   if(t < 4)
    d6a0:	44 30       	cpi	r20, 0x04	; 4
    d6a2:	70 f0       	brcs	.+28     	; 0xd6c0 <UpdatePlayers+0x7ae>
      return false;

   if((t >= BLOCK_START && t <= WALL_END) || (t >= BOMB_START && t <= BOMB_END) || (t >= SPECIAL_SOLID_START && t <= SPECIAL_SOLID_END) || (t >= BORDER_START))
    d6a4:	84 2f       	mov	r24, r20
    d6a6:	84 50       	subi	r24, 0x04	; 4
    d6a8:	88 32       	cpi	r24, 0x28	; 40
    d6aa:	08 f4       	brcc	.+2      	; 0xd6ae <UpdatePlayers+0x79c>
    d6ac:	d5 ce       	rjmp	.-598    	; 0xd458 <UpdatePlayers+0x546>
    d6ae:	9c 30       	cpi	r25, 0x0C	; 12
    d6b0:	08 f4       	brcc	.+2      	; 0xd6b4 <UpdatePlayers+0x7a2>
    d6b2:	d2 ce       	rjmp	.-604    	; 0xd458 <UpdatePlayers+0x546>
    d6b4:	4e 3f       	cpi	r20, 0xFE	; 254
    d6b6:	09 f4       	brne	.+2      	; 0xd6ba <UpdatePlayers+0x7a8>
    d6b8:	cf ce       	rjmp	.-610    	; 0xd458 <UpdatePlayers+0x546>
    d6ba:	47 3c       	cpi	r20, 0xC7	; 199
    d6bc:	08 f0       	brcs	.+2      	; 0xd6c0 <UpdatePlayers+0x7ae>
    d6be:	cc ce       	rjmp	.-616    	; 0xd458 <UpdatePlayers+0x546>

   return b;
}

bool IsSolid(u8 t){
   if(t < 4)
    d6c0:	24 30       	cpi	r18, 0x04	; 4
    d6c2:	08 f4       	brcc	.+2      	; 0xd6c6 <UpdatePlayers+0x7b4>
    d6c4:	c9 ce       	rjmp	.-622    	; 0xd458 <UpdatePlayers+0x546>
      return false;

   if((t >= BLOCK_START && t <= WALL_END) || (t >= BOMB_START && t <= BOMB_END) || (t >= SPECIAL_SOLID_START && t <= SPECIAL_SOLID_END) || (t >= BORDER_START))
    d6c6:	82 2f       	mov	r24, r18
    d6c8:	84 50       	subi	r24, 0x04	; 4
    d6ca:	88 32       	cpi	r24, 0x28	; 40
    d6cc:	08 f4       	brcc	.+2      	; 0xd6d0 <UpdatePlayers+0x7be>
    d6ce:	60 c3       	rjmp	.+1728   	; 0xdd90 <UpdatePlayers+0xe7e>
    d6d0:	8c 57       	subi	r24, 0x7C	; 124
    d6d2:	8c 30       	cpi	r24, 0x0C	; 12
    d6d4:	08 f4       	brcc	.+2      	; 0xd6d8 <UpdatePlayers+0x7c6>
    d6d6:	5c c3       	rjmp	.+1720   	; 0xdd90 <UpdatePlayers+0xe7e>
    d6d8:	2e 3f       	cpi	r18, 0xFE	; 254
    d6da:	09 f4       	brne	.+2      	; 0xd6de <UpdatePlayers+0x7cc>
    d6dc:	59 c3       	rjmp	.+1714   	; 0xdd90 <UpdatePlayers+0xe7e>
    d6de:	27 3c       	cpi	r18, 0xC7	; 199
    d6e0:	08 f0       	brcs	.+2      	; 0xd6e4 <UpdatePlayers+0x7d2>
    d6e2:	56 c3       	rjmp	.+1708   	; 0xdd90 <UpdatePlayers+0xe7e>
    d6e4:	b9 ce       	rjmp	.-654    	; 0xd458 <UpdatePlayers+0x546>
    d6e6:	8e 2f       	mov	r24, r30
    d6e8:	83 52       	subi	r24, 0x23	; 35
    d6ea:	88 32       	cpi	r24, 0x28	; 40
    d6ec:	08 f4       	brcc	.+2      	; 0xd6f0 <UpdatePlayers+0x7de>
    d6ee:	b4 ce       	rjmp	.-664    	; 0xd458 <UpdatePlayers+0x546>
    d6f0:	ef 59       	subi	r30, 0x9F	; 159
    d6f2:	ec 30       	cpi	r30, 0x0C	; 12
    d6f4:	08 f4       	brcc	.+2      	; 0xd6f8 <UpdatePlayers+0x7e6>
    d6f6:	b0 ce       	rjmp	.-672    	; 0xd458 <UpdatePlayers+0x546>
    d6f8:	9e 3f       	cpi	r25, 0xFE	; 254
    d6fa:	09 f4       	brne	.+2      	; 0xd6fe <UpdatePlayers+0x7ec>
    d6fc:	ad ce       	rjmp	.-678    	; 0xd458 <UpdatePlayers+0x546>
    d6fe:	97 3c       	cpi	r25, 0xC7	; 199
    d700:	08 f0       	brcs	.+2      	; 0xd704 <UpdatePlayers+0x7f2>
    d702:	aa ce       	rjmp	.-684    	; 0xd458 <UpdatePlayers+0x546>
    d704:	a0 5e       	subi	r26, 0xE0	; 224
    d706:	be 4f       	sbci	r27, 0xFE	; 254
    d708:	2e 85       	ldd	r18, Y+14	; 0x0e
    d70a:	3f 85       	ldd	r19, Y+15	; 0x0f
    d70c:	a2 0f       	add	r26, r18
    d70e:	b3 1f       	adc	r27, r19
    d710:	ec 91       	ld	r30, X
    d712:	9e 2f       	mov	r25, r30
    d714:	9f 51       	subi	r25, 0x1F	; 31

   return b;
}

bool IsSolid(u8 t){
   if(t < 4)
    d716:	94 30       	cpi	r25, 0x04	; 4
    d718:	78 f0       	brcs	.+30     	; 0xd738 <UpdatePlayers+0x826>
      return false;

   if((t >= BLOCK_START && t <= WALL_END) || (t >= BOMB_START && t <= BOMB_END) || (t >= SPECIAL_SOLID_START && t <= SPECIAL_SOLID_END) || (t >= BORDER_START))
    d71a:	8e 2f       	mov	r24, r30
    d71c:	83 52       	subi	r24, 0x23	; 35
    d71e:	88 32       	cpi	r24, 0x28	; 40
    d720:	08 f4       	brcc	.+2      	; 0xd724 <UpdatePlayers+0x812>
    d722:	9a ce       	rjmp	.-716    	; 0xd458 <UpdatePlayers+0x546>
    d724:	ef 59       	subi	r30, 0x9F	; 159
    d726:	ec 30       	cpi	r30, 0x0C	; 12
    d728:	08 f4       	brcc	.+2      	; 0xd72c <UpdatePlayers+0x81a>
    d72a:	96 ce       	rjmp	.-724    	; 0xd458 <UpdatePlayers+0x546>
    d72c:	9e 3f       	cpi	r25, 0xFE	; 254
    d72e:	09 f4       	brne	.+2      	; 0xd732 <UpdatePlayers+0x820>
    d730:	93 ce       	rjmp	.-730    	; 0xd458 <UpdatePlayers+0x546>
    d732:	97 3c       	cpi	r25, 0xC7	; 199
    d734:	08 f0       	brcs	.+2      	; 0xd738 <UpdatePlayers+0x826>
    d736:	90 ce       	rjmp	.-736    	; 0xd458 <UpdatePlayers+0x546>
				  if(!IsSolid(t2) && !IsSolid(GetMapTile(x+2,y)) && !IsSolid(GetMapTile(x+2,y+1))){
                     player_state[i] ^= DOWN;
					 player_state[i] |= RIGHT;
                  }
				  else if(!IsSolid(t) && IsSolid(t2) && !IsSolid(GetMapTile(x-1,y)) && !IsSolid(GetMapTile(x-1,y+1))){
                     player_state[i] ^= DOWN;
    d738:	aa 89       	ldd	r26, Y+18	; 0x12
    d73a:	bb 89       	ldd	r27, Y+19	; 0x13
    d73c:	8c 91       	ld	r24, X
    d73e:	b2 e0       	ldi	r27, 0x02	; 2
    d740:	8b 27       	eor	r24, r27
					 player_state[i] |= LEFT;
    d742:	84 60       	ori	r24, 0x04	; 4
    d744:	ea 89       	ldd	r30, Y+18	; 0x12
    d746:	fb 89       	ldd	r31, Y+19	; 0x13
    d748:	80 83       	st	Z, r24
    d74a:	c2 c1       	rjmp	.+900    	; 0xdad0 <UpdatePlayers+0xbbe>
				     continue;
			      }
			   }

			}
			else if(state & LEFT){
    d74c:	c2 fe       	sbrs	r12, 2
    d74e:	dd c0       	rjmp	.+442    	; 0xd90a <UpdatePlayers+0x9f8>
			   if(x < ARENA_START_X+1){
    d750:	03 30       	cpi	r16, 0x03	; 3
    d752:	08 f4       	brcc	.+2      	; 0xd756 <UpdatePlayers+0x844>
    d754:	81 ce       	rjmp	.-766    	; 0xd458 <UpdatePlayers+0x546>
			      player_state[i] ^= MOVE;
				  continue;
			   }
               t = GetMapTile(x-1,y); t2 = GetMapTile(x-1,y+1);
    d756:	90 2f       	mov	r25, r16
    d758:	91 50       	subi	r25, 0x01	; 1
    d75a:	e9 2f       	mov	r30, r25
    d75c:	f0 e0       	ldi	r31, 0x00	; 0
    d75e:	e0 5e       	subi	r30, 0xE0	; 224
    d760:	fe 4f       	sbci	r31, 0xFE	; 254
    d762:	d5 01       	movw	r26, r10
    d764:	ae 0f       	add	r26, r30
    d766:	bf 1f       	adc	r27, r31
    d768:	8c 91       	ld	r24, X
    d76a:	48 2f       	mov	r20, r24
    d76c:	4f 51       	subi	r20, 0x1F	; 31
      return true;
   return false;
}

bool IsBombLeftSide(u8 t){
   if(t < BOMB_START || t > BOMB_END)
    d76e:	2e 85       	ldd	r18, Y+14	; 0x0e
    d770:	3f 85       	ldd	r19, Y+15	; 0x0f
    d772:	e2 0f       	add	r30, r18
    d774:	f3 1f       	adc	r31, r19
    d776:	20 81       	ld	r18, Z
    d778:	a8 2f       	mov	r26, r24
    d77a:	af 59       	subi	r26, 0x9F	; 159
    d77c:	ac 30       	cpi	r26, 0x0C	; 12
    d77e:	38 f4       	brcc	.+14     	; 0xd78e <UpdatePlayers+0x87c>
      return false;
   t -= BOMB_START;
   t %= 4;
    d780:	8a 2f       	mov	r24, r26
    d782:	83 70       	andi	r24, 0x03	; 3
   if(t == 0 || t == 2)
    d784:	09 f4       	brne	.+2      	; 0xd788 <UpdatePlayers+0x876>
    d786:	a4 c1       	rjmp	.+840    	; 0xdad0 <UpdatePlayers+0xbbe>
    d788:	82 30       	cpi	r24, 0x02	; 2
    d78a:	09 f4       	brne	.+2      	; 0xd78e <UpdatePlayers+0x87c>
    d78c:	a1 c1       	rjmp	.+834    	; 0xdad0 <UpdatePlayers+0xbbe>
			   }
               t = GetMapTile(x-1,y); t2 = GetMapTile(x-1,y+1);
               if(IsBombLeftSide(t)){
			      
               }
			   else if((player_attrb[i] & BOOT) && IsBomb(t)){
    d78e:	3b 85       	ldd	r19, Y+11	; 0x0b
    d790:	37 ff       	sbrs	r19, 7
    d792:	0c c0       	rjmp	.+24     	; 0xd7ac <UpdatePlayers+0x89a>
      return true;
   return false;
}

bool IsBomb(u8 t){
   if(t >= BOMB_START && t <= BOMB_END)
    d794:	ac 30       	cpi	r26, 0x0C	; 12
    d796:	50 f4       	brcc	.+20     	; 0xd7ac <UpdatePlayers+0x89a>
               t = GetMapTile(x-1,y); t2 = GetMapTile(x-1,y+1);
               if(IsBombLeftSide(t)){
			      
               }
			   else if((player_attrb[i] & BOOT) && IsBomb(t)){
			      bomb_state[FindBomb(x-1,y+0,t)] = MOVE|LEFT;
    d798:	89 2f       	mov	r24, r25
    d79a:	61 2f       	mov	r22, r17
    d79c:	0e 94 85 4b 	call	0x970a	; 0x970a <FindBomb>
    d7a0:	e8 2f       	mov	r30, r24
    d7a2:	f0 e0       	ldi	r31, 0x00	; 0
    d7a4:	e2 53       	subi	r30, 0x32	; 50
    d7a6:	f0 4f       	sbci	r31, 0xF0	; 240
    d7a8:	44 e2       	ldi	r20, 0x24	; 36
    d7aa:	dd c0       	rjmp	.+442    	; 0xd966 <UpdatePlayers+0xa54>
    d7ac:	92 2f       	mov	r25, r18
    d7ae:	9f 51       	subi	r25, 0x1F	; 31

   return b;
}

bool IsSolid(u8 t){
   if(t < 4)
    d7b0:	44 30       	cpi	r20, 0x04	; 4
    d7b2:	50 f0       	brcs	.+20     	; 0xd7c8 <UpdatePlayers+0x8b6>
      return false;

   if((t >= BLOCK_START && t <= WALL_END) || (t >= BOMB_START && t <= BOMB_END) || (t >= SPECIAL_SOLID_START && t <= SPECIAL_SOLID_END) || (t >= BORDER_START))
    d7b4:	84 2f       	mov	r24, r20
    d7b6:	84 50       	subi	r24, 0x04	; 4
    d7b8:	88 32       	cpi	r24, 0x28	; 40
    d7ba:	a8 f0       	brcs	.+42     	; 0xd7e6 <UpdatePlayers+0x8d4>
    d7bc:	ac 30       	cpi	r26, 0x0C	; 12
    d7be:	98 f0       	brcs	.+38     	; 0xd7e6 <UpdatePlayers+0x8d4>
    d7c0:	4e 3f       	cpi	r20, 0xFE	; 254
    d7c2:	89 f0       	breq	.+34     	; 0xd7e6 <UpdatePlayers+0x8d4>
    d7c4:	47 3c       	cpi	r20, 0xC7	; 199
    d7c6:	78 f4       	brcc	.+30     	; 0xd7e6 <UpdatePlayers+0x8d4>

   return b;
}

bool IsSolid(u8 t){
   if(t < 4)
    d7c8:	94 30       	cpi	r25, 0x04	; 4
    d7ca:	08 f4       	brcc	.+2      	; 0xd7ce <UpdatePlayers+0x8bc>
    d7cc:	81 c1       	rjmp	.+770    	; 0xdad0 <UpdatePlayers+0xbbe>
      return false;

   if((t >= BLOCK_START && t <= WALL_END) || (t >= BOMB_START && t <= BOMB_END) || (t >= SPECIAL_SOLID_START && t <= SPECIAL_SOLID_END) || (t >= BORDER_START))
    d7ce:	89 2f       	mov	r24, r25
    d7d0:	84 50       	subi	r24, 0x04	; 4
    d7d2:	88 32       	cpi	r24, 0x28	; 40
    d7d4:	50 f0       	brcs	.+20     	; 0xd7ea <UpdatePlayers+0x8d8>
    d7d6:	8c 57       	subi	r24, 0x7C	; 124
    d7d8:	8c 30       	cpi	r24, 0x0C	; 12
    d7da:	38 f0       	brcs	.+14     	; 0xd7ea <UpdatePlayers+0x8d8>
    d7dc:	9e 3f       	cpi	r25, 0xFE	; 254
    d7de:	29 f0       	breq	.+10     	; 0xd7ea <UpdatePlayers+0x8d8>
    d7e0:	97 3c       	cpi	r25, 0xC7	; 199
    d7e2:	18 f4       	brcc	.+6      	; 0xd7ea <UpdatePlayers+0x8d8>
    d7e4:	75 c1       	rjmp	.+746    	; 0xdad0 <UpdatePlayers+0xbbe>

   return b;
}

bool IsSolid(u8 t){
   if(t < 4)
    d7e6:	94 30       	cpi	r25, 0x04	; 4
    d7e8:	58 f0       	brcs	.+22     	; 0xd800 <UpdatePlayers+0x8ee>
      return false;

   if((t >= BLOCK_START && t <= WALL_END) || (t >= BOMB_START && t <= BOMB_END) || (t >= SPECIAL_SOLID_START && t <= SPECIAL_SOLID_END) || (t >= BORDER_START))
    d7ea:	89 2f       	mov	r24, r25
    d7ec:	84 50       	subi	r24, 0x04	; 4
    d7ee:	88 32       	cpi	r24, 0x28	; 40
    d7f0:	e0 f1       	brcs	.+120    	; 0xd86a <UpdatePlayers+0x958>
    d7f2:	8c 57       	subi	r24, 0x7C	; 124
    d7f4:	8c 30       	cpi	r24, 0x0C	; 12
    d7f6:	c8 f1       	brcs	.+114    	; 0xd86a <UpdatePlayers+0x958>
    d7f8:	9e 3f       	cpi	r25, 0xFE	; 254
    d7fa:	b9 f1       	breq	.+110    	; 0xd86a <UpdatePlayers+0x958>
    d7fc:	97 3c       	cpi	r25, 0xC7	; 199
    d7fe:	a8 f5       	brcc	.+106    	; 0xd86a <UpdatePlayers+0x958>
    d800:	1e 5f       	subi	r17, 0xFE	; 254
    d802:	fe e1       	ldi	r31, 0x1E	; 30
    d804:	1f 9f       	mul	r17, r31
    d806:	b0 01       	movw	r22, r0
    d808:	11 24       	eor	r1, r1
    d80a:	12 50       	subi	r17, 0x02	; 2
    d80c:	fb 01       	movw	r30, r22
    d80e:	e0 5e       	subi	r30, 0xE0	; 224
    d810:	fe 4f       	sbci	r31, 0xFE	; 254
    d812:	ee 0d       	add	r30, r14
    d814:	ff 1d       	adc	r31, r15
    d816:	e0 81       	ld	r30, Z
    d818:	2e 2f       	mov	r18, r30
    d81a:	2f 51       	subi	r18, 0x1F	; 31

   return b;
}

bool IsSolid(u8 t){
   if(t < 4)
    d81c:	24 30       	cpi	r18, 0x04	; 4
    d81e:	58 f0       	brcs	.+22     	; 0xd836 <UpdatePlayers+0x924>
      return false;

   if((t >= BLOCK_START && t <= WALL_END) || (t >= BOMB_START && t <= BOMB_END) || (t >= SPECIAL_SOLID_START && t <= SPECIAL_SOLID_END) || (t >= BORDER_START))
    d820:	8e 2f       	mov	r24, r30
    d822:	83 52       	subi	r24, 0x23	; 35
    d824:	88 32       	cpi	r24, 0x28	; 40
    d826:	08 f1       	brcs	.+66     	; 0xd86a <UpdatePlayers+0x958>
    d828:	ef 59       	subi	r30, 0x9F	; 159
    d82a:	ec 30       	cpi	r30, 0x0C	; 12
    d82c:	f0 f0       	brcs	.+60     	; 0xd86a <UpdatePlayers+0x958>
    d82e:	2e 3f       	cpi	r18, 0xFE	; 254
    d830:	e1 f0       	breq	.+56     	; 0xd86a <UpdatePlayers+0x958>
    d832:	27 3c       	cpi	r18, 0xC7	; 199
    d834:	d0 f4       	brcc	.+52     	; 0xd86a <UpdatePlayers+0x958>
    d836:	fb 01       	movw	r30, r22
    d838:	e0 5e       	subi	r30, 0xE0	; 224
    d83a:	fe 4f       	sbci	r31, 0xFE	; 254
    d83c:	e4 0d       	add	r30, r4
    d83e:	f5 1d       	adc	r31, r5
    d840:	e0 81       	ld	r30, Z
    d842:	2e 2f       	mov	r18, r30
    d844:	2f 51       	subi	r18, 0x1F	; 31

   return b;
}

bool IsSolid(u8 t){
   if(t < 4)
    d846:	24 30       	cpi	r18, 0x04	; 4
    d848:	58 f0       	brcs	.+22     	; 0xd860 <UpdatePlayers+0x94e>
      return false;

   if((t >= BLOCK_START && t <= WALL_END) || (t >= BOMB_START && t <= BOMB_END) || (t >= SPECIAL_SOLID_START && t <= SPECIAL_SOLID_END) || (t >= BORDER_START))
    d84a:	8e 2f       	mov	r24, r30
    d84c:	83 52       	subi	r24, 0x23	; 35
    d84e:	88 32       	cpi	r24, 0x28	; 40
    d850:	60 f0       	brcs	.+24     	; 0xd86a <UpdatePlayers+0x958>
    d852:	ef 59       	subi	r30, 0x9F	; 159
    d854:	ec 30       	cpi	r30, 0x0C	; 12
    d856:	48 f0       	brcs	.+18     	; 0xd86a <UpdatePlayers+0x958>
    d858:	2e 3f       	cpi	r18, 0xFE	; 254
    d85a:	39 f0       	breq	.+14     	; 0xd86a <UpdatePlayers+0x958>
    d85c:	27 3c       	cpi	r18, 0xC7	; 199
    d85e:	28 f4       	brcc	.+10     	; 0xd86a <UpdatePlayers+0x958>
			      bomb_state[FindBomb(x-1,y+0,t)] = MOVE|LEFT;
				  player_state[i] ^= MOVE;
				  continue;
			   }else if(IsSolid(t) || IsSolid(t2)){
				  if(!IsSolid(t2) && !IsSolid(GetMapTile(x,y+2)) && !IsSolid(GetMapTile(x+1,y+2))){
                     player_state[i] ^= LEFT;
    d860:	aa 89       	ldd	r26, Y+18	; 0x12
    d862:	bb 89       	ldd	r27, Y+19	; 0x13
    d864:	8c 91       	ld	r24, X
    d866:	b4 e0       	ldi	r27, 0x04	; 4
    d868:	de c0       	rjmp	.+444    	; 0xda26 <UpdatePlayers+0xb14>

   return b;
}

bool IsSolid(u8 t){
   if(t < 4)
    d86a:	44 30       	cpi	r20, 0x04	; 4
    d86c:	70 f0       	brcs	.+28     	; 0xd88a <UpdatePlayers+0x978>
      return false;

   if((t >= BLOCK_START && t <= WALL_END) || (t >= BOMB_START && t <= BOMB_END) || (t >= SPECIAL_SOLID_START && t <= SPECIAL_SOLID_END) || (t >= BORDER_START))
    d86e:	84 2f       	mov	r24, r20
    d870:	84 50       	subi	r24, 0x04	; 4
    d872:	88 32       	cpi	r24, 0x28	; 40
    d874:	08 f4       	brcc	.+2      	; 0xd878 <UpdatePlayers+0x966>
    d876:	f0 cd       	rjmp	.-1056   	; 0xd458 <UpdatePlayers+0x546>
    d878:	ac 30       	cpi	r26, 0x0C	; 12
    d87a:	08 f4       	brcc	.+2      	; 0xd87e <UpdatePlayers+0x96c>
    d87c:	ed cd       	rjmp	.-1062   	; 0xd458 <UpdatePlayers+0x546>
    d87e:	4e 3f       	cpi	r20, 0xFE	; 254
    d880:	09 f4       	brne	.+2      	; 0xd884 <UpdatePlayers+0x972>
    d882:	ea cd       	rjmp	.-1068   	; 0xd458 <UpdatePlayers+0x546>
    d884:	47 3c       	cpi	r20, 0xC7	; 199
    d886:	08 f0       	brcs	.+2      	; 0xd88a <UpdatePlayers+0x978>
    d888:	e7 cd       	rjmp	.-1074   	; 0xd458 <UpdatePlayers+0x546>

   return b;
}

bool IsSolid(u8 t){
   if(t < 4)
    d88a:	94 30       	cpi	r25, 0x04	; 4
    d88c:	08 f4       	brcc	.+2      	; 0xd890 <UpdatePlayers+0x97e>
    d88e:	e4 cd       	rjmp	.-1080   	; 0xd458 <UpdatePlayers+0x546>
      return false;

   if((t >= BLOCK_START && t <= WALL_END) || (t >= BOMB_START && t <= BOMB_END) || (t >= SPECIAL_SOLID_START && t <= SPECIAL_SOLID_END) || (t >= BORDER_START))
    d890:	89 2f       	mov	r24, r25
    d892:	84 50       	subi	r24, 0x04	; 4
    d894:	88 32       	cpi	r24, 0x28	; 40
    d896:	08 f4       	brcc	.+2      	; 0xd89a <UpdatePlayers+0x988>
    d898:	8a c2       	rjmp	.+1300   	; 0xddae <UpdatePlayers+0xe9c>
    d89a:	8c 57       	subi	r24, 0x7C	; 124
    d89c:	8c 30       	cpi	r24, 0x0C	; 12
    d89e:	08 f4       	brcc	.+2      	; 0xd8a2 <UpdatePlayers+0x990>
    d8a0:	86 c2       	rjmp	.+1292   	; 0xddae <UpdatePlayers+0xe9c>
    d8a2:	9e 3f       	cpi	r25, 0xFE	; 254
    d8a4:	09 f4       	brne	.+2      	; 0xd8a8 <UpdatePlayers+0x996>
    d8a6:	83 c2       	rjmp	.+1286   	; 0xddae <UpdatePlayers+0xe9c>
    d8a8:	97 3c       	cpi	r25, 0xC7	; 199
    d8aa:	08 f0       	brcs	.+2      	; 0xd8ae <UpdatePlayers+0x99c>
    d8ac:	80 c2       	rjmp	.+1280   	; 0xddae <UpdatePlayers+0xe9c>
    d8ae:	d4 cd       	rjmp	.-1112   	; 0xd458 <UpdatePlayers+0x546>
    d8b0:	8e 2f       	mov	r24, r30
    d8b2:	83 52       	subi	r24, 0x23	; 35
    d8b4:	88 32       	cpi	r24, 0x28	; 40
    d8b6:	08 f4       	brcc	.+2      	; 0xd8ba <UpdatePlayers+0x9a8>
    d8b8:	cf cd       	rjmp	.-1122   	; 0xd458 <UpdatePlayers+0x546>
    d8ba:	ef 59       	subi	r30, 0x9F	; 159
    d8bc:	ec 30       	cpi	r30, 0x0C	; 12
    d8be:	08 f4       	brcc	.+2      	; 0xd8c2 <UpdatePlayers+0x9b0>
    d8c0:	cb cd       	rjmp	.-1130   	; 0xd458 <UpdatePlayers+0x546>
    d8c2:	9e 3f       	cpi	r25, 0xFE	; 254
    d8c4:	09 f4       	brne	.+2      	; 0xd8c8 <UpdatePlayers+0x9b6>
    d8c6:	c8 cd       	rjmp	.-1136   	; 0xd458 <UpdatePlayers+0x546>
    d8c8:	97 3c       	cpi	r25, 0xC7	; 199
    d8ca:	08 f0       	brcs	.+2      	; 0xd8ce <UpdatePlayers+0x9bc>
    d8cc:	c5 cd       	rjmp	.-1142   	; 0xd458 <UpdatePlayers+0x546>
    d8ce:	fb 01       	movw	r30, r22
    d8d0:	e0 5e       	subi	r30, 0xE0	; 224
    d8d2:	fe 4f       	sbci	r31, 0xFE	; 254
    d8d4:	e4 0d       	add	r30, r4
    d8d6:	f5 1d       	adc	r31, r5
    d8d8:	e0 81       	ld	r30, Z
    d8da:	9e 2f       	mov	r25, r30
    d8dc:	9f 51       	subi	r25, 0x1F	; 31

   return b;
}

bool IsSolid(u8 t){
   if(t < 4)
    d8de:	94 30       	cpi	r25, 0x04	; 4
    d8e0:	78 f0       	brcs	.+30     	; 0xd900 <UpdatePlayers+0x9ee>
      return false;

   if((t >= BLOCK_START && t <= WALL_END) || (t >= BOMB_START && t <= BOMB_END) || (t >= SPECIAL_SOLID_START && t <= SPECIAL_SOLID_END) || (t >= BORDER_START))
    d8e2:	8e 2f       	mov	r24, r30
    d8e4:	83 52       	subi	r24, 0x23	; 35
    d8e6:	88 32       	cpi	r24, 0x28	; 40
    d8e8:	08 f4       	brcc	.+2      	; 0xd8ec <UpdatePlayers+0x9da>
    d8ea:	b6 cd       	rjmp	.-1172   	; 0xd458 <UpdatePlayers+0x546>
    d8ec:	ef 59       	subi	r30, 0x9F	; 159
    d8ee:	ec 30       	cpi	r30, 0x0C	; 12
    d8f0:	08 f4       	brcc	.+2      	; 0xd8f4 <UpdatePlayers+0x9e2>
    d8f2:	b2 cd       	rjmp	.-1180   	; 0xd458 <UpdatePlayers+0x546>
    d8f4:	9e 3f       	cpi	r25, 0xFE	; 254
    d8f6:	09 f4       	brne	.+2      	; 0xd8fa <UpdatePlayers+0x9e8>
    d8f8:	af cd       	rjmp	.-1186   	; 0xd458 <UpdatePlayers+0x546>
    d8fa:	97 3c       	cpi	r25, 0xC7	; 199
    d8fc:	08 f0       	brcs	.+2      	; 0xd900 <UpdatePlayers+0x9ee>
    d8fe:	ac cd       	rjmp	.-1192   	; 0xd458 <UpdatePlayers+0x546>
				  if(!IsSolid(t2) && !IsSolid(GetMapTile(x,y+2)) && !IsSolid(GetMapTile(x+1,y+2))){
                     player_state[i] ^= LEFT;
					 player_state[i] |= DOWN;
                  }
				  else if(!IsSolid(t) && IsSolid(t2) && !IsSolid(GetMapTile(x,y-1)) && !IsSolid(GetMapTile(x+1,y-1))){
                     player_state[i] ^= LEFT;
    d900:	aa 89       	ldd	r26, Y+18	; 0x12
    d902:	bb 89       	ldd	r27, Y+19	; 0x13
    d904:	8c 91       	ld	r24, X
    d906:	b4 e0       	ldi	r27, 0x04	; 4
    d908:	e0 c0       	rjmp	.+448    	; 0xdaca <UpdatePlayers+0xbb8>
			      }
			   }

			}
			else{// if(state & RIGHT){
			   if(x > 25){
    d90a:	0a 31       	cpi	r16, 0x1A	; 26
    d90c:	08 f0       	brcs	.+2      	; 0xd910 <UpdatePlayers+0x9fe>
    d90e:	a4 cd       	rjmp	.-1208   	; 0xd458 <UpdatePlayers+0x546>
			      player_state[i] ^= MOVE;
				  continue;
			   }
               t = GetMapTile(x+2,y); t2 = GetMapTile(x+2,y+1);
    d910:	90 2f       	mov	r25, r16
    d912:	9e 5f       	subi	r25, 0xFE	; 254
    d914:	e9 2f       	mov	r30, r25
    d916:	f0 e0       	ldi	r31, 0x00	; 0
    d918:	e0 5e       	subi	r30, 0xE0	; 224
    d91a:	fe 4f       	sbci	r31, 0xFE	; 254
    d91c:	d5 01       	movw	r26, r10
    d91e:	ae 0f       	add	r26, r30
    d920:	bf 1f       	adc	r27, r31
    d922:	8c 91       	ld	r24, X
    d924:	48 2f       	mov	r20, r24
    d926:	4f 51       	subi	r20, 0x1F	; 31
      return true;
   return false;
}

bool IsBombRightSide(u8 t){
   if(t < BOMB_START || t > BOMB_END)
    d928:	2e 85       	ldd	r18, Y+14	; 0x0e
    d92a:	3f 85       	ldd	r19, Y+15	; 0x0f
    d92c:	e2 0f       	add	r30, r18
    d92e:	f3 1f       	adc	r31, r19
    d930:	20 81       	ld	r18, Z
    d932:	a8 2f       	mov	r26, r24
    d934:	af 59       	subi	r26, 0x9F	; 159
    d936:	ac 30       	cpi	r26, 0x0C	; 12
    d938:	40 f4       	brcc	.+16     	; 0xd94a <UpdatePlayers+0xa38>
      return false;
   t -= BOMB_START;
   t %= 4;
    d93a:	8a 2f       	mov	r24, r26
    d93c:	83 70       	andi	r24, 0x03	; 3
   if(t == 1 || t == 3)
    d93e:	81 30       	cpi	r24, 0x01	; 1
    d940:	09 f4       	brne	.+2      	; 0xd944 <UpdatePlayers+0xa32>
    d942:	c6 c0       	rjmp	.+396    	; 0xdad0 <UpdatePlayers+0xbbe>
    d944:	83 30       	cpi	r24, 0x03	; 3
    d946:	09 f4       	brne	.+2      	; 0xd94a <UpdatePlayers+0xa38>
    d948:	c3 c0       	rjmp	.+390    	; 0xdad0 <UpdatePlayers+0xbbe>
			   }
               t = GetMapTile(x+2,y); t2 = GetMapTile(x+2,y+1);
			   if(IsBombRightSide(t)){
			      
               }
			   else if((player_attrb[i] & BOOT) && IsBomb(t)){
    d94a:	3b 85       	ldd	r19, Y+11	; 0x0b
    d94c:	37 ff       	sbrs	r19, 7
    d94e:	0d c0       	rjmp	.+26     	; 0xd96a <UpdatePlayers+0xa58>
      return true;
   return false;
}

bool IsBomb(u8 t){
   if(t >= BOMB_START && t <= BOMB_END)
    d950:	ac 30       	cpi	r26, 0x0C	; 12
    d952:	58 f4       	brcc	.+22     	; 0xd96a <UpdatePlayers+0xa58>
               t = GetMapTile(x+2,y); t2 = GetMapTile(x+2,y+1);
			   if(IsBombRightSide(t)){
			      
               }
			   else if((player_attrb[i] & BOOT) && IsBomb(t)){
			      bomb_state[FindBomb(x+2,y+0,t)] = MOVE|RIGHT;
    d954:	89 2f       	mov	r24, r25
    d956:	61 2f       	mov	r22, r17
    d958:	0e 94 85 4b 	call	0x970a	; 0x970a <FindBomb>
    d95c:	e8 2f       	mov	r30, r24
    d95e:	f0 e0       	ldi	r31, 0x00	; 0
    d960:	e2 53       	subi	r30, 0x32	; 50
    d962:	f0 4f       	sbci	r31, 0xF0	; 240
    d964:	48 e2       	ldi	r20, 0x28	; 40
    d966:	40 83       	st	Z, r20
    d968:	77 cd       	rjmp	.-1298   	; 0xd458 <UpdatePlayers+0x546>
    d96a:	92 2f       	mov	r25, r18
    d96c:	9f 51       	subi	r25, 0x1F	; 31

   return b;
}

bool IsSolid(u8 t){
   if(t < 4)
    d96e:	44 30       	cpi	r20, 0x04	; 4
    d970:	50 f0       	brcs	.+20     	; 0xd986 <UpdatePlayers+0xa74>
      return false;

   if((t >= BLOCK_START && t <= WALL_END) || (t >= BOMB_START && t <= BOMB_END) || (t >= SPECIAL_SOLID_START && t <= SPECIAL_SOLID_END) || (t >= BORDER_START))
    d972:	84 2f       	mov	r24, r20
    d974:	84 50       	subi	r24, 0x04	; 4
    d976:	88 32       	cpi	r24, 0x28	; 40
    d978:	a8 f0       	brcs	.+42     	; 0xd9a4 <UpdatePlayers+0xa92>
    d97a:	ac 30       	cpi	r26, 0x0C	; 12
    d97c:	98 f0       	brcs	.+38     	; 0xd9a4 <UpdatePlayers+0xa92>
    d97e:	4e 3f       	cpi	r20, 0xFE	; 254
    d980:	89 f0       	breq	.+34     	; 0xd9a4 <UpdatePlayers+0xa92>
    d982:	47 3c       	cpi	r20, 0xC7	; 199
    d984:	78 f4       	brcc	.+30     	; 0xd9a4 <UpdatePlayers+0xa92>

   return b;
}

bool IsSolid(u8 t){
   if(t < 4)
    d986:	94 30       	cpi	r25, 0x04	; 4
    d988:	08 f4       	brcc	.+2      	; 0xd98c <UpdatePlayers+0xa7a>
    d98a:	a2 c0       	rjmp	.+324    	; 0xdad0 <UpdatePlayers+0xbbe>
      return false;

   if((t >= BLOCK_START && t <= WALL_END) || (t >= BOMB_START && t <= BOMB_END) || (t >= SPECIAL_SOLID_START && t <= SPECIAL_SOLID_END) || (t >= BORDER_START))
    d98c:	89 2f       	mov	r24, r25
    d98e:	84 50       	subi	r24, 0x04	; 4
    d990:	88 32       	cpi	r24, 0x28	; 40
    d992:	50 f0       	brcs	.+20     	; 0xd9a8 <UpdatePlayers+0xa96>
    d994:	8c 57       	subi	r24, 0x7C	; 124
    d996:	8c 30       	cpi	r24, 0x0C	; 12
    d998:	38 f0       	brcs	.+14     	; 0xd9a8 <UpdatePlayers+0xa96>
    d99a:	9e 3f       	cpi	r25, 0xFE	; 254
    d99c:	29 f0       	breq	.+10     	; 0xd9a8 <UpdatePlayers+0xa96>
    d99e:	97 3c       	cpi	r25, 0xC7	; 199
    d9a0:	18 f4       	brcc	.+6      	; 0xd9a8 <UpdatePlayers+0xa96>
    d9a2:	96 c0       	rjmp	.+300    	; 0xdad0 <UpdatePlayers+0xbbe>

   return b;
}

bool IsSolid(u8 t){
   if(t < 4)
    d9a4:	94 30       	cpi	r25, 0x04	; 4
    d9a6:	58 f0       	brcs	.+22     	; 0xd9be <UpdatePlayers+0xaac>
      return false;

   if((t >= BLOCK_START && t <= WALL_END) || (t >= BOMB_START && t <= BOMB_END) || (t >= SPECIAL_SOLID_START && t <= SPECIAL_SOLID_END) || (t >= BORDER_START))
    d9a8:	89 2f       	mov	r24, r25
    d9aa:	84 50       	subi	r24, 0x04	; 4
    d9ac:	88 32       	cpi	r24, 0x28	; 40
    d9ae:	f0 f1       	brcs	.+124    	; 0xda2c <UpdatePlayers+0xb1a>
    d9b0:	8c 57       	subi	r24, 0x7C	; 124
    d9b2:	8c 30       	cpi	r24, 0x0C	; 12
    d9b4:	d8 f1       	brcs	.+118    	; 0xda2c <UpdatePlayers+0xb1a>
    d9b6:	9e 3f       	cpi	r25, 0xFE	; 254
    d9b8:	c9 f1       	breq	.+114    	; 0xda2c <UpdatePlayers+0xb1a>
    d9ba:	97 3c       	cpi	r25, 0xC7	; 199
    d9bc:	b8 f5       	brcc	.+110    	; 0xda2c <UpdatePlayers+0xb1a>
    d9be:	1e 5f       	subi	r17, 0xFE	; 254
    d9c0:	fe e1       	ldi	r31, 0x1E	; 30
    d9c2:	1f 9f       	mul	r17, r31
    d9c4:	b0 01       	movw	r22, r0
    d9c6:	11 24       	eor	r1, r1
    d9c8:	12 50       	subi	r17, 0x02	; 2
    d9ca:	fb 01       	movw	r30, r22
    d9cc:	e0 5e       	subi	r30, 0xE0	; 224
    d9ce:	fe 4f       	sbci	r31, 0xFE	; 254
    d9d0:	ee 0d       	add	r30, r14
    d9d2:	ff 1d       	adc	r31, r15
    d9d4:	e0 81       	ld	r30, Z
    d9d6:	2e 2f       	mov	r18, r30
    d9d8:	2f 51       	subi	r18, 0x1F	; 31

   return b;
}

bool IsSolid(u8 t){
   if(t < 4)
    d9da:	24 30       	cpi	r18, 0x04	; 4
    d9dc:	58 f0       	brcs	.+22     	; 0xd9f4 <UpdatePlayers+0xae2>
      return false;

   if((t >= BLOCK_START && t <= WALL_END) || (t >= BOMB_START && t <= BOMB_END) || (t >= SPECIAL_SOLID_START && t <= SPECIAL_SOLID_END) || (t >= BORDER_START))
    d9de:	8e 2f       	mov	r24, r30
    d9e0:	83 52       	subi	r24, 0x23	; 35
    d9e2:	88 32       	cpi	r24, 0x28	; 40
    d9e4:	18 f1       	brcs	.+70     	; 0xda2c <UpdatePlayers+0xb1a>
    d9e6:	ef 59       	subi	r30, 0x9F	; 159
    d9e8:	ec 30       	cpi	r30, 0x0C	; 12
    d9ea:	00 f1       	brcs	.+64     	; 0xda2c <UpdatePlayers+0xb1a>
    d9ec:	2e 3f       	cpi	r18, 0xFE	; 254
    d9ee:	f1 f0       	breq	.+60     	; 0xda2c <UpdatePlayers+0xb1a>
    d9f0:	27 3c       	cpi	r18, 0xC7	; 199
    d9f2:	e0 f4       	brcc	.+56     	; 0xda2c <UpdatePlayers+0xb1a>
    d9f4:	fb 01       	movw	r30, r22
    d9f6:	e0 5e       	subi	r30, 0xE0	; 224
    d9f8:	fe 4f       	sbci	r31, 0xFE	; 254
    d9fa:	e4 0d       	add	r30, r4
    d9fc:	f5 1d       	adc	r31, r5
    d9fe:	e0 81       	ld	r30, Z
    da00:	2e 2f       	mov	r18, r30
    da02:	2f 51       	subi	r18, 0x1F	; 31

   return b;
}

bool IsSolid(u8 t){
   if(t < 4)
    da04:	24 30       	cpi	r18, 0x04	; 4
    da06:	58 f0       	brcs	.+22     	; 0xda1e <UpdatePlayers+0xb0c>
      return false;

   if((t >= BLOCK_START && t <= WALL_END) || (t >= BOMB_START && t <= BOMB_END) || (t >= SPECIAL_SOLID_START && t <= SPECIAL_SOLID_END) || (t >= BORDER_START))
    da08:	8e 2f       	mov	r24, r30
    da0a:	83 52       	subi	r24, 0x23	; 35
    da0c:	88 32       	cpi	r24, 0x28	; 40
    da0e:	70 f0       	brcs	.+28     	; 0xda2c <UpdatePlayers+0xb1a>
    da10:	ef 59       	subi	r30, 0x9F	; 159
    da12:	ec 30       	cpi	r30, 0x0C	; 12
    da14:	58 f0       	brcs	.+22     	; 0xda2c <UpdatePlayers+0xb1a>
    da16:	2e 3f       	cpi	r18, 0xFE	; 254
    da18:	49 f0       	breq	.+18     	; 0xda2c <UpdatePlayers+0xb1a>
    da1a:	27 3c       	cpi	r18, 0xC7	; 199
    da1c:	38 f4       	brcc	.+14     	; 0xda2c <UpdatePlayers+0xb1a>
			      bomb_state[FindBomb(x+2,y+0,t)] = MOVE|RIGHT;
				  player_state[i] ^= MOVE;
				  continue;
			   }else if(IsSolid(t) || IsSolid(t2)){
				  if(!IsSolid(t2) && !IsSolid(GetMapTile(x,y+2)) && !IsSolid(GetMapTile(x+1,y+2))){
                     player_state[i] ^= RIGHT;
    da1e:	aa 89       	ldd	r26, Y+18	; 0x12
    da20:	bb 89       	ldd	r27, Y+19	; 0x13
    da22:	8c 91       	ld	r24, X
    da24:	b8 e0       	ldi	r27, 0x08	; 8
    da26:	8b 27       	eor	r24, r27
					 player_state[i] |= DOWN;
    da28:	82 60       	ori	r24, 0x02	; 2
    da2a:	8c ce       	rjmp	.-744    	; 0xd744 <UpdatePlayers+0x832>

   return b;
}

bool IsSolid(u8 t){
   if(t < 4)
    da2c:	44 30       	cpi	r20, 0x04	; 4
    da2e:	70 f0       	brcs	.+28     	; 0xda4c <UpdatePlayers+0xb3a>
      return false;

   if((t >= BLOCK_START && t <= WALL_END) || (t >= BOMB_START && t <= BOMB_END) || (t >= SPECIAL_SOLID_START && t <= SPECIAL_SOLID_END) || (t >= BORDER_START))
    da30:	84 2f       	mov	r24, r20
    da32:	84 50       	subi	r24, 0x04	; 4
    da34:	88 32       	cpi	r24, 0x28	; 40
    da36:	08 f4       	brcc	.+2      	; 0xda3a <UpdatePlayers+0xb28>
    da38:	0f cd       	rjmp	.-1506   	; 0xd458 <UpdatePlayers+0x546>
    da3a:	ac 30       	cpi	r26, 0x0C	; 12
    da3c:	08 f4       	brcc	.+2      	; 0xda40 <UpdatePlayers+0xb2e>
    da3e:	0c cd       	rjmp	.-1512   	; 0xd458 <UpdatePlayers+0x546>
    da40:	4e 3f       	cpi	r20, 0xFE	; 254
    da42:	09 f4       	brne	.+2      	; 0xda46 <UpdatePlayers+0xb34>
    da44:	09 cd       	rjmp	.-1518   	; 0xd458 <UpdatePlayers+0x546>
    da46:	47 3c       	cpi	r20, 0xC7	; 199
    da48:	08 f0       	brcs	.+2      	; 0xda4c <UpdatePlayers+0xb3a>
    da4a:	06 cd       	rjmp	.-1524   	; 0xd458 <UpdatePlayers+0x546>

   return b;
}

bool IsSolid(u8 t){
   if(t < 4)
    da4c:	94 30       	cpi	r25, 0x04	; 4
    da4e:	08 f4       	brcc	.+2      	; 0xda52 <UpdatePlayers+0xb40>
    da50:	03 cd       	rjmp	.-1530   	; 0xd458 <UpdatePlayers+0x546>
      return false;

   if((t >= BLOCK_START && t <= WALL_END) || (t >= BOMB_START && t <= BOMB_END) || (t >= SPECIAL_SOLID_START && t <= SPECIAL_SOLID_END) || (t >= BORDER_START))
    da52:	89 2f       	mov	r24, r25
    da54:	84 50       	subi	r24, 0x04	; 4
    da56:	88 32       	cpi	r24, 0x28	; 40
    da58:	08 f4       	brcc	.+2      	; 0xda5c <UpdatePlayers+0xb4a>
    da5a:	ba c1       	rjmp	.+884    	; 0xddd0 <UpdatePlayers+0xebe>
    da5c:	8c 57       	subi	r24, 0x7C	; 124
    da5e:	8c 30       	cpi	r24, 0x0C	; 12
    da60:	08 f4       	brcc	.+2      	; 0xda64 <UpdatePlayers+0xb52>
    da62:	b6 c1       	rjmp	.+876    	; 0xddd0 <UpdatePlayers+0xebe>
    da64:	9e 3f       	cpi	r25, 0xFE	; 254
    da66:	09 f4       	brne	.+2      	; 0xda6a <UpdatePlayers+0xb58>
    da68:	b3 c1       	rjmp	.+870    	; 0xddd0 <UpdatePlayers+0xebe>
    da6a:	97 3c       	cpi	r25, 0xC7	; 199
    da6c:	08 f0       	brcs	.+2      	; 0xda70 <UpdatePlayers+0xb5e>
    da6e:	b0 c1       	rjmp	.+864    	; 0xddd0 <UpdatePlayers+0xebe>
    da70:	f3 cc       	rjmp	.-1562   	; 0xd458 <UpdatePlayers+0x546>
    da72:	8e 2f       	mov	r24, r30
    da74:	83 52       	subi	r24, 0x23	; 35
    da76:	88 32       	cpi	r24, 0x28	; 40
    da78:	08 f4       	brcc	.+2      	; 0xda7c <UpdatePlayers+0xb6a>
    da7a:	ee cc       	rjmp	.-1572   	; 0xd458 <UpdatePlayers+0x546>
    da7c:	ef 59       	subi	r30, 0x9F	; 159
    da7e:	ec 30       	cpi	r30, 0x0C	; 12
    da80:	08 f4       	brcc	.+2      	; 0xda84 <UpdatePlayers+0xb72>
    da82:	ea cc       	rjmp	.-1580   	; 0xd458 <UpdatePlayers+0x546>
    da84:	9e 3f       	cpi	r25, 0xFE	; 254
    da86:	09 f4       	brne	.+2      	; 0xda8a <UpdatePlayers+0xb78>
    da88:	e7 cc       	rjmp	.-1586   	; 0xd458 <UpdatePlayers+0x546>
    da8a:	97 3c       	cpi	r25, 0xC7	; 199
    da8c:	08 f0       	brcs	.+2      	; 0xda90 <UpdatePlayers+0xb7e>
    da8e:	e4 cc       	rjmp	.-1592   	; 0xd458 <UpdatePlayers+0x546>
    da90:	fb 01       	movw	r30, r22
    da92:	e0 5e       	subi	r30, 0xE0	; 224
    da94:	fe 4f       	sbci	r31, 0xFE	; 254
    da96:	e4 0d       	add	r30, r4
    da98:	f5 1d       	adc	r31, r5
    da9a:	e0 81       	ld	r30, Z
    da9c:	9e 2f       	mov	r25, r30
    da9e:	9f 51       	subi	r25, 0x1F	; 31

   return b;
}

bool IsSolid(u8 t){
   if(t < 4)
    daa0:	94 30       	cpi	r25, 0x04	; 4
    daa2:	78 f0       	brcs	.+30     	; 0xdac2 <UpdatePlayers+0xbb0>
      return false;

   if((t >= BLOCK_START && t <= WALL_END) || (t >= BOMB_START && t <= BOMB_END) || (t >= SPECIAL_SOLID_START && t <= SPECIAL_SOLID_END) || (t >= BORDER_START))
    daa4:	8e 2f       	mov	r24, r30
    daa6:	83 52       	subi	r24, 0x23	; 35
    daa8:	88 32       	cpi	r24, 0x28	; 40
    daaa:	08 f4       	brcc	.+2      	; 0xdaae <UpdatePlayers+0xb9c>
    daac:	d5 cc       	rjmp	.-1622   	; 0xd458 <UpdatePlayers+0x546>
    daae:	ef 59       	subi	r30, 0x9F	; 159
    dab0:	ec 30       	cpi	r30, 0x0C	; 12
    dab2:	08 f4       	brcc	.+2      	; 0xdab6 <UpdatePlayers+0xba4>
    dab4:	d1 cc       	rjmp	.-1630   	; 0xd458 <UpdatePlayers+0x546>
    dab6:	9e 3f       	cpi	r25, 0xFE	; 254
    dab8:	09 f4       	brne	.+2      	; 0xdabc <UpdatePlayers+0xbaa>
    daba:	ce cc       	rjmp	.-1636   	; 0xd458 <UpdatePlayers+0x546>
    dabc:	97 3c       	cpi	r25, 0xC7	; 199
    dabe:	08 f0       	brcs	.+2      	; 0xdac2 <UpdatePlayers+0xbb0>
    dac0:	cb cc       	rjmp	.-1642   	; 0xd458 <UpdatePlayers+0x546>
				  if(!IsSolid(t2) && !IsSolid(GetMapTile(x,y+2)) && !IsSolid(GetMapTile(x+1,y+2))){
                     player_state[i] ^= RIGHT;
					 player_state[i] |= DOWN;
                  }
				  else if(!IsSolid(t) && IsSolid(t2) && !IsSolid(GetMapTile(x,y-1)) && !IsSolid(GetMapTile(x+1,y-1))){
                     player_state[i] ^= RIGHT;
    dac2:	aa 89       	ldd	r26, Y+18	; 0x12
    dac4:	bb 89       	ldd	r27, Y+19	; 0x13
    dac6:	8c 91       	ld	r24, X
    dac8:	b8 e0       	ldi	r27, 0x08	; 8
    daca:	8b 27       	eor	r24, r27
					 player_state[i] |= UP;
    dacc:	81 60       	ori	r24, 0x01	; 1
    dace:	3a ce       	rjmp	.-908    	; 0xd744 <UpdatePlayers+0x832>


///////////////////////SPEEDS AREN'T RIGHT, HALF SPEED IS PROBABLY NORMAL SPEED, ETC.    
         ///!!!!!!!!TODO!!!!!!check if we are on a conveyor belt and adjust speed according to direction

	     if(speed == 0 && blip != 2/*(blink || blip)*/){//quarter speed(not totally smooth movement)
    dad0:	55 23       	and	r21, r21
    dad2:	31 f4       	brne	.+12     	; 0xdae0 <UpdatePlayers+0xbce>
    dad4:	80 91 03 01 	lds	r24, 0x0103
    dad8:	82 30       	cpi	r24, 0x02	; 2
    dada:	09 f0       	breq	.+2      	; 0xdade <UpdatePlayers+0xbcc>
    dadc:	ed c0       	rjmp	.+474    	; 0xdcb8 <UpdatePlayers+0xda6>
    dade:	22 c0       	rjmp	.+68     	; 0xdb24 <UpdatePlayers+0xc12>
            continue;//only move every 3rd tick
		 }
         if(speed == 1 && (gamestate & BLINK)){//half speed
    dae0:	51 30       	cpi	r21, 0x01	; 1
    dae2:	29 f4       	brne	.+10     	; 0xdaee <UpdatePlayers+0xbdc>
    dae4:	80 91 fc 0e 	lds	r24, 0x0EFC
    dae8:	80 fd       	sbrc	r24, 0
    daea:	e6 c0       	rjmp	.+460    	; 0xdcb8 <UpdatePlayers+0xda6>
    daec:	1b c0       	rjmp	.+54     	; 0xdb24 <UpdatePlayers+0xc12>
            continue;//wait 1 tick every other
		 }
		 if(speed == 2 && blip == 2){//3/4 speed
    daee:	52 30       	cpi	r21, 0x02	; 2
    daf0:	29 f4       	brne	.+10     	; 0xdafc <UpdatePlayers+0xbea>
    daf2:	80 91 03 01 	lds	r24, 0x0103
    daf6:	82 30       	cpi	r24, 0x02	; 2
    daf8:	a9 f4       	brne	.+42     	; 0xdb24 <UpdatePlayers+0xc12>
    dafa:	de c0       	rjmp	.+444    	; 0xdcb8 <UpdatePlayers+0xda6>
            continue;//wait 1 tick every 3rd tick
		 }
		 else if(speed == 3){
    dafc:	53 30       	cpi	r21, 0x03	; 3
    dafe:	a9 f0       	breq	.+42     	; 0xdb2a <UpdatePlayers+0xc18>
         
		 }
		 else if(speed == 4 && blip){//1 1/4 speed(not totally smooth movement)
    db00:	54 30       	cpi	r21, 0x04	; 4
    db02:	41 f0       	breq	.+16     	; 0xdb14 <UpdatePlayers+0xc02>
            player_offset[i]++;//extra offset every 3rd tick
		 }
		 else if(speed == 5 && (gamestate & BLINK)){//1 1/2 speed
    db04:	55 30       	cpi	r21, 0x05	; 5
    db06:	71 f0       	breq	.+28     	; 0xdb24 <UpdatePlayers+0xc12>
            player_offset[i]++;//extra offset every other tick
         }
		 else if(speed == 6 && ((gamestate & BLINK) || blip)){//1 3/4 speed(not totally smooth)
    db08:	56 30       	cpi	r21, 0x06	; 6
    db0a:	61 f4       	brne	.+24     	; 0xdb24 <UpdatePlayers+0xc12>
    db0c:	80 91 fc 0e 	lds	r24, 0x0EFC
    db10:	80 fd       	sbrc	r24, 0
    db12:	04 c0       	rjmp	.+8      	; 0xdb1c <UpdatePlayers+0xc0a>
    db14:	80 91 03 01 	lds	r24, 0x0103
    db18:	88 23       	and	r24, r24
    db1a:	21 f0       	breq	.+8      	; 0xdb24 <UpdatePlayers+0xc12>
		    player_offset[i]++;//extra offset every other and every 3rd tick
    db1c:	d3 94       	inc	r13
    db1e:	d1 01       	movw	r26, r2
    db20:	dc 92       	st	X, r13
    db22:	03 c0       	rjmp	.+6      	; 0xdb2a <UpdatePlayers+0xc18>
		 } 
         else{//double speed
            player_offset[i]++;//extra offset every tick
    db24:	d3 94       	inc	r13
    db26:	f1 01       	movw	r30, r2
    db28:	d0 82       	st	Z, r13
		 }



         if(player_offset[i] % 2)
    db2a:	d1 01       	movw	r26, r2
    db2c:	8c 91       	ld	r24, X
    db2e:	80 ff       	sbrs	r24, 0
    db30:	02 c0       	rjmp	.+4      	; 0xdb36 <UpdatePlayers+0xc24>
            player_offset[i]++;
    db32:	8f 5f       	subi	r24, 0xFF	; 255
    db34:	8c 93       	st	X, r24

         if(++player_offset[i] > 7){
    db36:	f1 01       	movw	r30, r2
    db38:	80 81       	ld	r24, Z
    db3a:	8f 5f       	subi	r24, 0xFF	; 255
    db3c:	80 83       	st	Z, r24
    db3e:	88 30       	cpi	r24, 0x08	; 8
    db40:	08 f4       	brcc	.+2      	; 0xdb44 <UpdatePlayers+0xc32>
    db42:	ba c0       	rjmp	.+372    	; 0xdcb8 <UpdatePlayers+0xda6>
            player_offset[i] = 0;
    db44:	10 82       	st	Z, r1
            player_state[i] ^= MOVE;
    db46:	aa 89       	ldd	r26, Y+18	; 0x12
    db48:	bb 89       	ldd	r27, Y+19	; 0x13
    db4a:	8c 91       	ld	r24, X
    db4c:	b0 e2       	ldi	r27, 0x20	; 32
    db4e:	8b 27       	eor	r24, r27
    db50:	ea 89       	ldd	r30, Y+18	; 0x12
    db52:	fb 89       	ldd	r31, Y+19	; 0x13
    db54:	80 83       	st	Z, r24

	        if(state & UP)        {player_y[i]--;}
    db56:	c0 fe       	sbrs	r12, 0
    db58:	04 c0       	rjmp	.+8      	; 0xdb62 <UpdatePlayers+0xc50>
    db5a:	ad 81       	ldd	r26, Y+5	; 0x05
    db5c:	be 81       	ldd	r27, Y+6	; 0x06
    db5e:	8c 91       	ld	r24, X
    db60:	0c c0       	rjmp	.+24     	; 0xdb7a <UpdatePlayers+0xc68>
	        else if(state & DOWN) {player_y[i]++;} 
    db62:	c1 fe       	sbrs	r12, 1
    db64:	05 c0       	rjmp	.+10     	; 0xdb70 <UpdatePlayers+0xc5e>
    db66:	ed 81       	ldd	r30, Y+5	; 0x05
    db68:	fe 81       	ldd	r31, Y+6	; 0x06
    db6a:	80 81       	ld	r24, Z
    db6c:	8f 5f       	subi	r24, 0xFF	; 255
    db6e:	0b c0       	rjmp	.+22     	; 0xdb86 <UpdatePlayers+0xc74>
    db70:	a9 85       	ldd	r26, Y+9	; 0x09
    db72:	ba 85       	ldd	r27, Y+10	; 0x0a
    db74:	8c 91       	ld	r24, X
            else if(state & LEFT) {player_x[i]--;}
    db76:	c2 fe       	sbrs	r12, 2
    db78:	03 c0       	rjmp	.+6      	; 0xdb80 <UpdatePlayers+0xc6e>
    db7a:	81 50       	subi	r24, 0x01	; 1
    db7c:	8c 93       	st	X, r24
    db7e:	04 c0       	rjmp	.+8      	; 0xdb88 <UpdatePlayers+0xc76>
	        else                  {player_x[i]++;}
    db80:	8f 5f       	subi	r24, 0xFF	; 255
    db82:	e9 85       	ldd	r30, Y+9	; 0x09
    db84:	fa 85       	ldd	r31, Y+10	; 0x0a
    db86:	80 83       	st	Z, r24

            if(player_x[i] & 1 || !(player_y[i] & 1))//not tile aligned, can't interact with special tiles
    db88:	a9 85       	ldd	r26, Y+9	; 0x09
    db8a:	ba 85       	ldd	r27, Y+10	; 0x0a
    db8c:	8c 91       	ld	r24, X
    db8e:	48 2f       	mov	r20, r24
    db90:	50 e0       	ldi	r21, 0x00	; 0
    db92:	80 fd       	sbrc	r24, 0
    db94:	91 c0       	rjmp	.+290    	; 0xdcb8 <UpdatePlayers+0xda6>
    db96:	ed 81       	ldd	r30, Y+5	; 0x05
    db98:	fe 81       	ldd	r31, Y+6	; 0x06
    db9a:	80 81       	ld	r24, Z
    db9c:	90 e0       	ldi	r25, 0x00	; 0
    db9e:	80 ff       	sbrs	r24, 0
    dba0:	8b c0       	rjmp	.+278    	; 0xdcb8 <UpdatePlayers+0xda6>
    dba2:	9c 01       	movw	r18, r24
    dba4:	05 e0       	ldi	r16, 0x05	; 5
    dba6:	22 0f       	add	r18, r18
    dba8:	33 1f       	adc	r19, r19
    dbaa:	0a 95       	dec	r16
    dbac:	e1 f7       	brne	.-8      	; 0xdba6 <UpdatePlayers+0xc94>
    dbae:	88 0f       	add	r24, r24
    dbb0:	99 1f       	adc	r25, r25
    dbb2:	28 1b       	sub	r18, r24
    dbb4:	39 0b       	sbc	r19, r25
    dbb6:	24 0f       	add	r18, r20
    dbb8:	35 1f       	adc	r19, r21
    dbba:	f9 01       	movw	r30, r18
    dbbc:	e0 5e       	subi	r30, 0xE0	; 224
    dbbe:	fe 4f       	sbci	r31, 0xFE	; 254
    dbc0:	80 81       	ld	r24, Z
    dbc2:	08 2f       	mov	r16, r24
    dbc4:	0f 51       	subi	r16, 0x1F	; 31
			//Now check for special tiles
			u8 t = GetMapTile(player_x[i],player_y[i]);
			//if(t > POWERUP_START+11)
			//   t -= 12;//adjust for flash

			if(t >= POWERUP_START && t <= POWERUP_START+20){
    dbc6:	86 5b       	subi	r24, 0xB6	; 182
    dbc8:	85 31       	cpi	r24, 0x15	; 21
    dbca:	08 f0       	brcs	.+2      	; 0xdbce <UpdatePlayers+0xcbc>
    dbcc:	75 c0       	rjmp	.+234    	; 0xdcb8 <UpdatePlayers+0xda6>
			   if(player_attrb[i] & POISON)
    dbce:	4c 85       	ldd	r20, Y+12	; 0x0c
    dbd0:	5d 85       	ldd	r21, Y+13	; 0x0d
    dbd2:	45 2b       	or	r20, r21
    dbd4:	31 f0       	breq	.+12     	; 0xdbe2 <UpdatePlayers+0xcd0>
			      player_attrb[i] ^= POISON;
    dbd6:	5b 85       	ldd	r21, Y+11	; 0x0b
    dbd8:	68 e0       	ldi	r22, 0x08	; 8
    dbda:	56 27       	eor	r21, r22
    dbdc:	a9 81       	ldd	r26, Y+1	; 0x01
    dbde:	ba 81       	ldd	r27, Y+2	; 0x02
    dbe0:	5c 93       	st	X, r21

void SetMapTile(u8 x, u8 y, u8 t){
   int off = (y*30)+x;//((y<<1)*30)+(x<<1);
   t+=RAM_TILES_COUNT;//t = (t<<2)+RAM_TILES_COUNT;//t = (tileset*(NUMTILES*4)) + (t*4) + RAM_TILES_COUNT;
   
   vram[off+ 0] = t++;
    dbe2:	f9 01       	movw	r30, r18
    dbe4:	e0 5e       	subi	r30, 0xE0	; 224
    dbe6:	fe 4f       	sbci	r31, 0xFE	; 254
    dbe8:	bf e1       	ldi	r27, 0x1F	; 31
    dbea:	b0 83       	st	Z, r27
   vram[off+ 1] = t++;
    dbec:	20 e2       	ldi	r18, 0x20	; 32
    dbee:	21 83       	std	Z+1, r18	; 0x01
   vram[off+30] = t++;
    dbf0:	31 e2       	ldi	r19, 0x21	; 33
    dbf2:	36 8f       	std	Z+30, r19	; 0x1e
   vram[off+31] = t;
    dbf4:	42 e2       	ldi	r20, 0x22	; 34
    dbf6:	47 8f       	std	Z+31, r20	; 0x1f
               RestoreMapTile(player_x[i],player_y[i]);
			   TriggerFx(POWERPICKUPSFX,POWERPICKUPSFXVOL,true);  
    dbf8:	85 e0       	ldi	r24, 0x05	; 5
    dbfa:	6f ef       	ldi	r22, 0xFF	; 255
    dbfc:	41 e0       	ldi	r20, 0x01	; 1
    dbfe:	0e 94 df 48 	call	0x91be	; 0x91be <TriggerFx>
			   if(t == POWERUP_START+0){//speed
    dc02:	07 39       	cpi	r16, 0x97	; 151
    dc04:	59 f4       	brne	.+22     	; 0xdc1c <UpdatePlayers+0xd0a>
                  if((player_attrb2[i] & 0b00000111) < 7)
    dc06:	ab 81       	ldd	r26, Y+3	; 0x03
    dc08:	bc 81       	ldd	r27, Y+4	; 0x04
    dc0a:	9c 91       	ld	r25, X
    dc0c:	89 2f       	mov	r24, r25
    dc0e:	87 70       	andi	r24, 0x07	; 7
    dc10:	87 30       	cpi	r24, 0x07	; 7
    dc12:	09 f4       	brne	.+2      	; 0xdc16 <UpdatePlayers+0xd04>
    dc14:	51 c0       	rjmp	.+162    	; 0xdcb8 <UpdatePlayers+0xda6>
				     player_attrb2[i]++;     
    dc16:	9f 5f       	subi	r25, 0xFF	; 255
    dc18:	9c 93       	st	X, r25
    dc1a:	4e c0       	rjmp	.+156    	; 0xdcb8 <UpdatePlayers+0xda6>
			   }
			   else if(t == POWERUP_START+4){//fire
    dc1c:	0b 39       	cpi	r16, 0x9B	; 155
    dc1e:	59 f4       	brne	.+22     	; 0xdc36 <UpdatePlayers+0xd24>
                  if((player_attrb[i] & 0b00000111) < 7)
    dc20:	e9 81       	ldd	r30, Y+1	; 0x01
    dc22:	fa 81       	ldd	r31, Y+2	; 0x02
    dc24:	90 81       	ld	r25, Z
    dc26:	89 2f       	mov	r24, r25
    dc28:	87 70       	andi	r24, 0x07	; 7
    dc2a:	87 30       	cpi	r24, 0x07	; 7
    dc2c:	09 f4       	brne	.+2      	; 0xdc30 <UpdatePlayers+0xd1e>
    dc2e:	44 c0       	rjmp	.+136    	; 0xdcb8 <UpdatePlayers+0xda6>
				     player_attrb[i]++;
    dc30:	9f 5f       	subi	r25, 0xFF	; 255
    dc32:	90 83       	st	Z, r25
    dc34:	41 c0       	rjmp	.+130    	; 0xdcb8 <UpdatePlayers+0xda6>
			   }
			   else if(t == POWERUP_START+8){//bomb
    dc36:	0f 39       	cpi	r16, 0x9F	; 159
    dc38:	b1 f4       	brne	.+44     	; 0xdc66 <UpdatePlayers+0xd54>
                  t=((player_attrb2[i] & 0b00011100)>>2);
    dc3a:	ab 81       	ldd	r26, Y+3	; 0x03
    dc3c:	bc 81       	ldd	r27, Y+4	; 0x04
    dc3e:	2c 91       	ld	r18, X
    dc40:	82 2f       	mov	r24, r18
    dc42:	90 e0       	ldi	r25, 0x00	; 0
    dc44:	8c 71       	andi	r24, 0x1C	; 28
    dc46:	90 70       	andi	r25, 0x00	; 0
    dc48:	95 95       	asr	r25
    dc4a:	87 95       	ror	r24
    dc4c:	95 95       	asr	r25
    dc4e:	87 95       	ror	r24
				  if(t < 7){
    dc50:	87 30       	cpi	r24, 0x07	; 7
    dc52:	91 f1       	breq	.+100    	; 0xdcb8 <UpdatePlayers+0xda6>
				     player_attrb2[i] |= 0b00011100;
					 player_attrb2[i] ^= 0b00011100;
    dc54:	2c 61       	ori	r18, 0x1C	; 28
    dc56:	bc e1       	ldi	r27, 0x1C	; 28
    dc58:	2b 27       	eor	r18, r27
					 player_attrb2[i] |= (t<<2);
    dc5a:	88 0f       	add	r24, r24
    dc5c:	88 0f       	add	r24, r24
    dc5e:	82 2b       	or	r24, r18
    dc60:	eb 81       	ldd	r30, Y+3	; 0x03
    dc62:	fc 81       	ldd	r31, Y+4	; 0x04
    dc64:	00 cc       	rjmp	.-2048   	; 0xd466 <UpdatePlayers+0x554>
                  }
			   }
			   else if(t == POWERUP_START+12){//kick
    dc66:	03 3a       	cpi	r16, 0xA3	; 163
    dc68:	29 f4       	brne	.+10     	; 0xdc74 <UpdatePlayers+0xd62>
                  player_attrb[i] |= 0b10000000;
    dc6a:	a9 81       	ldd	r26, Y+1	; 0x01
    dc6c:	ba 81       	ldd	r27, Y+2	; 0x02
    dc6e:	8c 91       	ld	r24, X
    dc70:	80 68       	ori	r24, 0x80	; 128
    dc72:	b4 cc       	rjmp	.-1688   	; 0xd5dc <UpdatePlayers+0x6ca>
			   }
			   else if(t == POWERUP_START+16){//glove
    dc74:	07 3a       	cpi	r16, 0xA7	; 167
    dc76:	29 f4       	brne	.+10     	; 0xdc82 <UpdatePlayers+0xd70>
                  player_attrb[i] |= GLOVE;
    dc78:	e9 81       	ldd	r30, Y+1	; 0x01
    dc7a:	fa 81       	ldd	r31, Y+2	; 0x02
    dc7c:	80 81       	ld	r24, Z
    dc7e:	80 64       	ori	r24, 0x40	; 64
    dc80:	f2 cb       	rjmp	.-2076   	; 0xd466 <UpdatePlayers+0x554>
			   }
			   else if(t == POWERUP_START+20){//poison
    dc82:	0b 3a       	cpi	r16, 0xAB	; 171
    dc84:	c9 f4       	brne	.+50     	; 0xdcb8 <UpdatePlayers+0xda6>
                  player_attrb[i] |= POISON;
    dc86:	a9 81       	ldd	r26, Y+1	; 0x01
    dc88:	ba 81       	ldd	r27, Y+2	; 0x02
    dc8a:	8c 91       	ld	r24, X
    dc8c:	88 60       	ori	r24, 0x08	; 8
    dc8e:	a6 cc       	rjmp	.-1716   	; 0xd5dc <UpdatePlayers+0x6ca>
			   }
            }
		 }
	  }
	  else{//not moving
		 if(++player_ftime[i] < 4*SEC){//hasn't been sitting idle long enough...
    dc90:	24 2f       	mov	r18, r20
    dc92:	2f 5f       	subi	r18, 0xFF	; 255
    dc94:	f4 01       	movw	r30, r8
    dc96:	20 83       	st	Z, r18
    dc98:	20 3f       	cpi	r18, 0xF0	; 240
    dc9a:	10 f4       	brcc	.+4      	; 0xdca0 <UpdatePlayers+0xd8e>
            player_frame[i] = 0;
    dc9c:	d3 01       	movw	r26, r6
    dc9e:	0b c0       	rjmp	.+22     	; 0xdcb6 <UpdatePlayers+0xda4>
			continue;
		 }
		 
		 if(player_ftime[i] > 246){
    dca0:	27 3f       	cpi	r18, 0xF7	; 247
    dca2:	50 f0       	brcs	.+20     	; 0xdcb8 <UpdatePlayers+0xda6>
            player_ftime[i] = 4*SEC;//keep him above idle threshhold
    dca4:	20 ef       	ldi	r18, 0xF0	; 240
    dca6:	f4 01       	movw	r30, r8
    dca8:	20 83       	st	Z, r18
			if(++player_frame[i] >= NUMIDLEFRAMES)
    dcaa:	d3 01       	movw	r26, r6
    dcac:	8c 91       	ld	r24, X
    dcae:	8f 5f       	subi	r24, 0xFF	; 255
    dcb0:	8c 93       	st	X, r24
    dcb2:	84 33       	cpi	r24, 0x34	; 52
    dcb4:	08 f0       	brcs	.+2      	; 0xdcb8 <UpdatePlayers+0xda6>
			   player_frame[i] = 0;
    dcb6:	1c 92       	st	X, r1

   u8 state;
   u8 t,t2;
   u8 x,y;
//   int off;
   for(u8 i=0;i<MAX_PLAYERS;i++){
    dcb8:	b8 89       	ldd	r27, Y+16	; 0x10
    dcba:	bf 5f       	subi	r27, 0xFF	; 255
    dcbc:	b8 8b       	std	Y+16, r27	; 0x10
    dcbe:	e9 85       	ldd	r30, Y+9	; 0x09
    dcc0:	fa 85       	ldd	r31, Y+10	; 0x0a
    dcc2:	31 96       	adiw	r30, 0x01	; 1
    dcc4:	fa 87       	std	Y+10, r31	; 0x0a
    dcc6:	e9 87       	std	Y+9, r30	; 0x09
    dcc8:	08 94       	sec
    dcca:	81 1c       	adc	r8, r1
    dccc:	91 1c       	adc	r9, r1
    dcce:	08 94       	sec
    dcd0:	61 1c       	adc	r6, r1
    dcd2:	71 1c       	adc	r7, r1
    dcd4:	2f 81       	ldd	r18, Y+7	; 0x07
    dcd6:	38 85       	ldd	r19, Y+8	; 0x08
    dcd8:	2f 5f       	subi	r18, 0xFF	; 255
    dcda:	3f 4f       	sbci	r19, 0xFF	; 255
    dcdc:	38 87       	std	Y+8, r19	; 0x08
    dcde:	2f 83       	std	Y+7, r18	; 0x07
    dce0:	4a 89       	ldd	r20, Y+18	; 0x12
    dce2:	5b 89       	ldd	r21, Y+19	; 0x13
    dce4:	4f 5f       	subi	r20, 0xFF	; 255
    dce6:	5f 4f       	sbci	r21, 0xFF	; 255
    dce8:	5b 8b       	std	Y+19, r21	; 0x13
    dcea:	4a 8b       	std	Y+18, r20	; 0x12
    dcec:	6d 81       	ldd	r22, Y+5	; 0x05
    dcee:	7e 81       	ldd	r23, Y+6	; 0x06
    dcf0:	6f 5f       	subi	r22, 0xFF	; 255
    dcf2:	7f 4f       	sbci	r23, 0xFF	; 255
    dcf4:	7e 83       	std	Y+6, r23	; 0x06
    dcf6:	6d 83       	std	Y+5, r22	; 0x05
    dcf8:	08 94       	sec
    dcfa:	21 1c       	adc	r2, r1
    dcfc:	31 1c       	adc	r3, r1
    dcfe:	8b 81       	ldd	r24, Y+3	; 0x03
    dd00:	9c 81       	ldd	r25, Y+4	; 0x04
    dd02:	01 96       	adiw	r24, 0x01	; 1
    dd04:	9c 83       	std	Y+4, r25	; 0x04
    dd06:	8b 83       	std	Y+3, r24	; 0x03
    dd08:	a9 81       	ldd	r26, Y+1	; 0x01
    dd0a:	ba 81       	ldd	r27, Y+2	; 0x02
    dd0c:	11 96       	adiw	r26, 0x01	; 1
    dd0e:	ba 83       	std	Y+2, r27	; 0x02
    dd10:	a9 83       	std	Y+1, r26	; 0x01
    dd12:	b8 89       	ldd	r27, Y+16	; 0x10
    dd14:	b4 30       	cpi	r27, 0x04	; 4
    dd16:	09 f0       	breq	.+2      	; 0xdd1a <UpdatePlayers+0xe08>
    dd18:	27 c9       	rjmp	.-3506   	; 0xcf68 <UpdatePlayers+0x56>
    dd1a:	6b c0       	rjmp	.+214    	; 0xddf2 <UpdatePlayers+0xee0>




inline u8 GetMapTile(u8 x, u8 y){
      return (vram[(y*30)+x]-RAM_TILES_COUNT);//return (vram[122+(y*30)+x]-RAM_TILES_COUNT);
    dd1c:	0f 5f       	subi	r16, 0xFF	; 255
    dd1e:	40 2e       	mov	r4, r16
    dd20:	55 24       	eor	r5, r5
    dd22:	01 50       	subi	r16, 0x01	; 1

   return false;
}

bool IsFire(u8 t){
   if(t >= FIRE_START && t <= FIRE_END)
    dd24:	f2 01       	movw	r30, r4
    dd26:	e0 5e       	subi	r30, 0xE0	; 224
    dd28:	fe 4f       	sbci	r31, 0xFE	; 254
    dd2a:	ea 0d       	add	r30, r10
    dd2c:	fb 1d       	adc	r31, r11
    dd2e:	80 81       	ld	r24, Z
    dd30:	8b 54       	subi	r24, 0x4B	; 75
    dd32:	84 35       	cpi	r24, 0x54	; 84
    dd34:	08 f4       	brcc	.+2      	; 0xdd38 <UpdatePlayers+0xe26>
    dd36:	6a ca       	rjmp	.-2860   	; 0xd20c <UpdatePlayers+0x2fa>
    dd38:	1f 5f       	subi	r17, 0xFF	; 255
    dd3a:	fe e1       	ldi	r31, 0x1E	; 30
    dd3c:	1f 9f       	mul	r17, r31
    dd3e:	f0 01       	movw	r30, r0
    dd40:	11 24       	eor	r1, r1
    dd42:	ff 87       	std	Y+15, r31	; 0x0f
    dd44:	ee 87       	std	Y+14, r30	; 0x0e
    dd46:	11 50       	subi	r17, 0x01	; 1
    dd48:	9f 01       	movw	r18, r30
    dd4a:	20 5e       	subi	r18, 0xE0	; 224
    dd4c:	3e 4f       	sbci	r19, 0xFE	; 254
    dd4e:	f9 01       	movw	r30, r18
    dd50:	ee 0d       	add	r30, r14
    dd52:	ff 1d       	adc	r31, r15
    dd54:	80 81       	ld	r24, Z
    dd56:	8b 54       	subi	r24, 0x4B	; 75
    dd58:	84 35       	cpi	r24, 0x54	; 84
    dd5a:	08 f4       	brcc	.+2      	; 0xdd5e <UpdatePlayers+0xe4c>
    dd5c:	57 ca       	rjmp	.-2898   	; 0xd20c <UpdatePlayers+0x2fa>
		    KillPlayer(i);
			player_wait[i] = FindKiller(i);//keep track of who killed him

		    continue;
	     }
		 else if((roundtime%(SEC/2))==2){//invulnerability counts down every 1/2 second
    dd5e:	f9 01       	movw	r30, r18
    dd60:	e4 0d       	add	r30, r4
    dd62:	f5 1d       	adc	r31, r5
    dd64:	80 81       	ld	r24, Z
    dd66:	8b 54       	subi	r24, 0x4B	; 75
    dd68:	84 35       	cpi	r24, 0x54	; 84
    dd6a:	08 f4       	brcc	.+2      	; 0xdd6e <UpdatePlayers+0xe5c>
    dd6c:	4f ca       	rjmp	.-2914   	; 0xd20c <UpdatePlayers+0x2fa>
    dd6e:	80 91 c2 0f 	lds	r24, 0x0FC2
    dd72:	90 91 c3 0f 	lds	r25, 0x0FC3
    dd76:	6e e1       	ldi	r22, 0x1E	; 30
    dd78:	70 e0       	ldi	r23, 0x00	; 0
    dd7a:	0e 94 82 70 	call	0xe104	; 0xe104 <__udivmodhi4>
    dd7e:	02 97       	sbiw	r24, 0x02	; 2
    dd80:	09 f0       	breq	.+2      	; 0xdd84 <UpdatePlayers+0xe72>
    dd82:	a6 ca       	rjmp	.-2740   	; 0xd2d0 <UpdatePlayers+0x3be>
    dd84:	49 ca       	rjmp	.-2926   	; 0xd218 <UpdatePlayers+0x306>
				  if(!IsSolid(t2) && !IsSolid(GetMapTile(x+2,y)) && !IsSolid(GetMapTile(x+2,y+1))){
                     player_state[i] ^= UP;
					 player_state[i] |= RIGHT;
                  }
				  else if(!IsSolid(t) && IsSolid(t2) ){
                     player_state[i] ^= UP;
    dd86:	aa 89       	ldd	r26, Y+18	; 0x12
    dd88:	bb 89       	ldd	r27, Y+19	; 0x13
    dd8a:	8c 91       	ld	r24, X
    dd8c:	b1 e0       	ldi	r27, 0x01	; 1
    dd8e:	d8 cc       	rjmp	.-1616   	; 0xd740 <UpdatePlayers+0x82e>
    dd90:	01 50       	subi	r16, 0x01	; 1
    dd92:	a0 2f       	mov	r26, r16
    dd94:	b0 e0       	ldi	r27, 0x00	; 0
    dd96:	fd 01       	movw	r30, r26
    dd98:	e0 5e       	subi	r30, 0xE0	; 224
    dd9a:	fe 4f       	sbci	r31, 0xFE	; 254
    dd9c:	ea 0d       	add	r30, r10
    dd9e:	fb 1d       	adc	r31, r11
    dda0:	e0 81       	ld	r30, Z
    dda2:	9e 2f       	mov	r25, r30
    dda4:	9f 51       	subi	r25, 0x1F	; 31

   return b;
}

bool IsSolid(u8 t){
   if(t < 4)
    dda6:	94 30       	cpi	r25, 0x04	; 4
    dda8:	08 f4       	brcc	.+2      	; 0xddac <UpdatePlayers+0xe9a>
    ddaa:	ac cc       	rjmp	.-1704   	; 0xd704 <UpdatePlayers+0x7f2>
    ddac:	9c cc       	rjmp	.-1736   	; 0xd6e6 <UpdatePlayers+0x7d4>
    ddae:	11 50       	subi	r17, 0x01	; 1
    ddb0:	fe e1       	ldi	r31, 0x1E	; 30
    ddb2:	1f 9f       	mul	r17, r31
    ddb4:	b0 01       	movw	r22, r0
    ddb6:	11 24       	eor	r1, r1
    ddb8:	fb 01       	movw	r30, r22
    ddba:	e0 5e       	subi	r30, 0xE0	; 224
    ddbc:	fe 4f       	sbci	r31, 0xFE	; 254
    ddbe:	ee 0d       	add	r30, r14
    ddc0:	ff 1d       	adc	r31, r15
    ddc2:	e0 81       	ld	r30, Z
    ddc4:	9e 2f       	mov	r25, r30
    ddc6:	9f 51       	subi	r25, 0x1F	; 31
    ddc8:	94 30       	cpi	r25, 0x04	; 4
    ddca:	08 f4       	brcc	.+2      	; 0xddce <UpdatePlayers+0xebc>
    ddcc:	80 cd       	rjmp	.-1280   	; 0xd8ce <UpdatePlayers+0x9bc>
    ddce:	70 cd       	rjmp	.-1312   	; 0xd8b0 <UpdatePlayers+0x99e>
    ddd0:	11 50       	subi	r17, 0x01	; 1
    ddd2:	2e e1       	ldi	r18, 0x1E	; 30
    ddd4:	12 9f       	mul	r17, r18
    ddd6:	b0 01       	movw	r22, r0
    ddd8:	11 24       	eor	r1, r1
    ddda:	fb 01       	movw	r30, r22
    dddc:	e0 5e       	subi	r30, 0xE0	; 224
    ddde:	fe 4f       	sbci	r31, 0xFE	; 254
    dde0:	ee 0d       	add	r30, r14
    dde2:	ff 1d       	adc	r31, r15
    dde4:	e0 81       	ld	r30, Z
    dde6:	9e 2f       	mov	r25, r30
    dde8:	9f 51       	subi	r25, 0x1F	; 31
    ddea:	94 30       	cpi	r25, 0x04	; 4
    ddec:	08 f4       	brcc	.+2      	; 0xddf0 <UpdatePlayers+0xede>
    ddee:	50 ce       	rjmp	.-864    	; 0xda90 <UpdatePlayers+0xb7e>
    ddf0:	40 ce       	rjmp	.-896    	; 0xda72 <UpdatePlayers+0xb60>
         //TODO

		 //Check to see how long the player has been idle
	 }
   }//for each player
}
    ddf2:	63 96       	adiw	r28, 0x13	; 19
    ddf4:	e2 e1       	ldi	r30, 0x12	; 18
    ddf6:	0c 94 c5 70 	jmp	0xe18a	; 0xe18a <__epilogue_restores__>

0000ddfa <Logic>:
}




void Logic(){
    ddfa:	ef 92       	push	r14
    ddfc:	ff 92       	push	r15
    ddfe:	0f 93       	push	r16
    de00:	1f 93       	push	r17
    de02:	cf 93       	push	r28
    de04:	df 93       	push	r29

   if(gamestate & STARTMATCH){
    de06:	80 91 fc 0e 	lds	r24, 0x0EFC
    de0a:	84 ff       	sbrs	r24, 4
    de0c:	0a c0       	rjmp	.+20     	; 0xde22 <Logic+0x28>
void SetTileSet(){
   SetTileTable(MapTiles);
    de0e:	8e e5       	ldi	r24, 0x5E	; 94
    de10:	94 e0       	ldi	r25, 0x04	; 4
    de12:	0e 94 93 44 	call	0x8926	; 0x8926 <SetTileTable>
void Logic(){

   if(gamestate & STARTMATCH){
   //Just came from map select menu
      SetTileSet();
      StartMatch();
    de16:	0e 94 fd 51 	call	0xa3fa	; 0xa3fa <StartMatch>
	  WaitVsync(1);
    de1a:	81 e0       	ldi	r24, 0x01	; 1
    de1c:	90 e0       	ldi	r25, 0x00	; 0
    de1e:	0e 94 a3 4a 	call	0x9546	; 0x9546 <WaitVsync>
   }

   if(gamestate & BOT_THOUGHT)
    de22:	80 91 fc 0e 	lds	r24, 0x0EFC
    de26:	87 ff       	sbrs	r24, 7
    de28:	03 c0       	rjmp	.+6      	; 0xde30 <Logic+0x36>
      gamestate ^= BOT_THOUGHT;
    de2a:	80 58       	subi	r24, 0x80	; 128
    de2c:	80 93 fc 0e 	sts	0x0EFC, r24
    de30:	90 91 04 01 	lds	r25, 0x0104
    de34:	89 2f       	mov	r24, r25
    de36:	86 95       	lsr	r24
    de38:	86 95       	lsr	r24
    de3a:	29 2f       	mov	r18, r25
    de3c:	26 95       	lsr	r18
    de3e:	26 95       	lsr	r18
    de40:	26 95       	lsr	r18
    de42:	82 27       	eor	r24, r18
    de44:	89 27       	eor	r24, r25
    de46:	29 2f       	mov	r18, r25
    de48:	22 95       	swap	r18
    de4a:	2f 70       	andi	r18, 0x0F	; 15
    de4c:	82 27       	eor	r24, r18
    de4e:	87 95       	ror	r24
    de50:	88 27       	eor	r24, r24
    de52:	87 95       	ror	r24
    de54:	96 95       	lsr	r25
    de56:	89 2b       	or	r24, r25
    de58:	80 93 04 01 	sts	0x0104, r24
   
   prand();
   timecost = 0;//cpu time cost counter
    de5c:	10 92 a1 0f 	sts	0x0FA1, r1

   UpdatePlayers();
    de60:	0e 94 89 67 	call	0xcf12	; 0xcf12 <UpdatePlayers>
   UpdateBombs();
    de64:	0e 94 0b 5d 	call	0xba16	; 0xba16 <UpdateBombs>
    de68:	ff 24       	eor	r15, r15
    de6a:	80 91 76 0f 	lds	r24, 0x0F76
    de6e:	87 fd       	sbrc	r24, 7
    de70:	02 c0       	rjmp	.+4      	; 0xde76 <Logic+0x7c>
    de72:	ff 24       	eor	r15, r15
    de74:	f3 94       	inc	r15

   u8 numplayers = 0;

   for(u8 i=0;i<MAX_PLAYERS;i++){
      if(!(player_attrb2[i] & GHOST))
    de76:	80 91 77 0f 	lds	r24, 0x0F77
    de7a:	87 ff       	sbrs	r24, 7
	     numplayers++;
    de7c:	f3 94       	inc	r15
   UpdateBombs();

   u8 numplayers = 0;

   for(u8 i=0;i<MAX_PLAYERS;i++){
      if(!(player_attrb2[i] & GHOST))
    de7e:	80 91 78 0f 	lds	r24, 0x0F78
    de82:	87 ff       	sbrs	r24, 7
	     numplayers++;
    de84:	f3 94       	inc	r15
   UpdateBombs();

   u8 numplayers = 0;

   for(u8 i=0;i<MAX_PLAYERS;i++){
      if(!(player_attrb2[i] & GHOST))
    de86:	80 91 79 0f 	lds	r24, 0x0F79
    de8a:	87 ff       	sbrs	r24, 7
	     numplayers++;
    de8c:	f3 94       	inc	r15
   }
   
   if(numplayers < 2 || ((gameoptions & USETEAM) && numplayers < 3)){//someone wins or draw
    de8e:	21 e0       	ldi	r18, 0x01	; 1
    de90:	2f 15       	cp	r18, r15
    de92:	40 f4       	brcc	.+16     	; 0xdea4 <Logic+0xaa>
    de94:	80 91 01 01 	lds	r24, 0x0101
    de98:	85 ff       	sbrs	r24, 5
    de9a:	4d c0       	rjmp	.+154    	; 0xdf36 <Logic+0x13c>
    de9c:	82 e0       	ldi	r24, 0x02	; 2
    de9e:	f8 16       	cp	r15, r24
    dea0:	09 f0       	breq	.+2      	; 0xdea4 <Logic+0xaa>
    dea2:	49 c0       	rjmp	.+146    	; 0xdf36 <Logic+0x13c>
      if(!(gamestate & VICTORY)){//first victory tick
    dea4:	80 91 fc 0e 	lds	r24, 0x0EFC
    dea8:	86 fd       	sbrc	r24, 6
    deaa:	08 c0       	rjmp	.+16     	; 0xdebc <Logic+0xc2>
         gamestate |= VICTORY;
    deac:	80 64       	ori	r24, 0x40	; 64
    deae:	80 93 fc 0e 	sts	0x0EFC, r24
         TriggerFx(VICTORY_FX,255,true);
    deb2:	86 e0       	ldi	r24, 0x06	; 6
    deb4:	6f ef       	ldi	r22, 0xFF	; 255
    deb6:	41 e0       	ldi	r20, 0x01	; 1
    deb8:	0e 94 df 48 	call	0x91be	; 0x91be <TriggerFx>
	     
	  }
      

	  RoundFade();
    debc:	0e 94 3c 57 	call	0xae78	; 0xae78 <RoundFade>
	  if(fadeStep == 0){//kernel done fading
    dec0:	80 91 75 0f 	lds	r24, 0x0F75
    dec4:	88 23       	and	r24, r24
    dec6:	09 f0       	breq	.+2      	; 0xdeca <Logic+0xd0>
    dec8:	b9 c0       	rjmp	.+370    	; 0xe03c <Logic+0x242>
    deca:	30 91 c5 0f 	lds	r19, 0x0FC5
    dece:	e6 e7       	ldi	r30, 0x76	; 118
    ded0:	ff e0       	ldi	r31, 0x0F	; 15
    ded2:	40 e0       	ldi	r20, 0x00	; 0
    ded4:	50 e0       	ldi	r21, 0x00	; 0
      return 13;
   return (player_attrb[p] & 0b00000111)+3;
}

void SetScore(u8 p, u8 s){//0-3
   score |= (s<<(p*2));
    ded6:	63 e0       	ldi	r22, 0x03	; 3
    ded8:	70 e0       	ldi	r23, 0x00	; 0

	  RoundFade();
	  if(fadeStep == 0){//kernel done fading
         
		 for(u8 i=0;i<MAX_PLAYERS;i++)
		    if(!(player_attrb2[i] & GHOST))
    deda:	80 81       	ld	r24, Z
    dedc:	87 fd       	sbrc	r24, 7
    dede:	11 c0       	rjmp	.+34     	; 0xdf02 <Logic+0x108>
      return 13;
   return (player_attrb[p] & 0b00000111)+3;
}

void SetScore(u8 p, u8 s){//0-3
   score |= (s<<(p*2));
    dee0:	cb 01       	movw	r24, r22
    dee2:	04 2e       	mov	r0, r20
    dee4:	02 c0       	rjmp	.+4      	; 0xdeea <Logic+0xf0>
    dee6:	95 95       	asr	r25
    dee8:	87 95       	ror	r24
    deea:	0a 94       	dec	r0
    deec:	e2 f7       	brpl	.-8      	; 0xdee6 <Logic+0xec>
    deee:	83 23       	and	r24, r19
    def0:	8f 5f       	subi	r24, 0xFF	; 255
    def2:	90 e0       	ldi	r25, 0x00	; 0
    def4:	04 2e       	mov	r0, r20
    def6:	02 c0       	rjmp	.+4      	; 0xdefc <Logic+0x102>
    def8:	88 0f       	add	r24, r24
    defa:	99 1f       	adc	r25, r25
    defc:	0a 94       	dec	r0
    defe:	e2 f7       	brpl	.-8      	; 0xdef8 <Logic+0xfe>
    df00:	38 2b       	or	r19, r24
    df02:	31 96       	adiw	r30, 0x01	; 1
    df04:	4e 5f       	subi	r20, 0xFE	; 254
    df06:	5f 4f       	sbci	r21, 0xFF	; 255
      

	  RoundFade();
	  if(fadeStep == 0){//kernel done fading
         
		 for(u8 i=0;i<MAX_PLAYERS;i++)
    df08:	2f e0       	ldi	r18, 0x0F	; 15
    df0a:	ea 37       	cpi	r30, 0x7A	; 122
    df0c:	f2 07       	cpc	r31, r18
    df0e:	29 f7       	brne	.-54     	; 0xdeda <Logic+0xe0>
    df10:	30 93 c5 0f 	sts	0x0FC5, r19
		    if(!(player_attrb2[i] & GHOST))
			   SetScore(i,GetScore(i)+1);		 

		 StopSong();
    df14:	0e 94 95 45 	call	0x8b2a	; 0x8b2a <StopSong>
		 WaitVsync(8);
    df18:	88 e0       	ldi	r24, 0x08	; 8
    df1a:	90 e0       	ldi	r25, 0x00	; 0
    df1c:	0e 94 a3 4a 	call	0x9546	; 0x9546 <WaitVsync>
		 SetMasterVolume(NORMAL_VOL);
    df20:	80 e8       	ldi	r24, 0x80	; 128
    df22:	0e 94 cf 45 	call	0x8b9e	; 0x8b9e <SetMasterVolume>
		 FadeIn(2,false);
    df26:	82 e0       	ldi	r24, 0x02	; 2
    df28:	60 e0       	ldi	r22, 0x00	; 0
    df2a:	0e 94 4e 4a 	call	0x949c	; 0x949c <FadeIn>
		 guistate = GVICTORYMENU;
    df2e:	80 e8       	ldi	r24, 0x80	; 128
    df30:	80 93 0e 10 	sts	0x100E, r24
    df34:	83 c0       	rjmp	.+262    	; 0xe03c <Logic+0x242>
		 return;
	  }
   }
   else{
      if(!(roundtime%SEC)){//poison type could change every second
    df36:	e0 91 c2 0f 	lds	r30, 0x0FC2
    df3a:	f0 91 c3 0f 	lds	r31, 0x0FC3
    df3e:	cf 01       	movw	r24, r30
    df40:	6c e3       	ldi	r22, 0x3C	; 60
    df42:	70 e0       	ldi	r23, 0x00	; 0
    df44:	0e 94 82 70 	call	0xe104	; 0xe104 <__udivmodhi4>
    df48:	89 2b       	or	r24, r25
    df4a:	89 f5       	brne	.+98     	; 0xdfae <Logic+0x1b4>
    df4c:	80 91 04 01 	lds	r24, 0x0104
    df50:	28 2f       	mov	r18, r24
    df52:	26 95       	lsr	r18
    df54:	26 95       	lsr	r18
    df56:	98 2f       	mov	r25, r24
    df58:	96 95       	lsr	r25
    df5a:	96 95       	lsr	r25
    df5c:	96 95       	lsr	r25
    df5e:	29 27       	eor	r18, r25
    df60:	28 27       	eor	r18, r24
    df62:	98 2f       	mov	r25, r24
    df64:	92 95       	swap	r25
    df66:	9f 70       	andi	r25, 0x0F	; 15
    df68:	29 27       	eor	r18, r25
    df6a:	27 95       	ror	r18
    df6c:	22 27       	eor	r18, r18
    df6e:	27 95       	ror	r18
    df70:	86 95       	lsr	r24
    df72:	28 2b       	or	r18, r24
    df74:	20 93 04 01 	sts	0x0104, r18
         if(prand() > POISON_CHANGE_CHANCE)
    df78:	29 3c       	cpi	r18, 0xC9	; 201
    df7a:	c8 f0       	brcs	.+50     	; 0xdfae <Logic+0x1b4>
    df7c:	82 2f       	mov	r24, r18
    df7e:	86 95       	lsr	r24
    df80:	86 95       	lsr	r24
    df82:	92 2f       	mov	r25, r18
    df84:	96 95       	lsr	r25
    df86:	96 95       	lsr	r25
    df88:	96 95       	lsr	r25
    df8a:	89 27       	eor	r24, r25
    df8c:	82 27       	eor	r24, r18
    df8e:	92 2f       	mov	r25, r18
    df90:	92 95       	swap	r25
    df92:	9f 70       	andi	r25, 0x0F	; 15
    df94:	89 27       	eor	r24, r25
    df96:	87 95       	ror	r24
    df98:	88 27       	eor	r24, r24
    df9a:	87 95       	ror	r24
    df9c:	26 95       	lsr	r18
    df9e:	82 2b       	or	r24, r18
    dfa0:	80 93 04 01 	sts	0x0104, r24
		    poison_type = prand()%POISON_NUM_TYPES;
    dfa4:	66 e0       	ldi	r22, 0x06	; 6
    dfa6:	0e 94 76 70 	call	0xe0ec	; 0xe0ec <__udivmodqi4>
    dfaa:	90 93 bd 0f 	sts	0x0FBD, r25
	  }

      if(roundtime < 60*SEC){//hurry up!
    dfae:	8e e0       	ldi	r24, 0x0E	; 14
    dfb0:	e0 31       	cpi	r30, 0x10	; 16
    dfb2:	f8 07       	cpc	r31, r24
    dfb4:	50 f4       	brcc	.+20     	; 0xdfca <Logic+0x1d0>
         if(roundtime == (60*SEC)-1){
    dfb6:	ef 50       	subi	r30, 0x0F	; 15
    dfb8:	fe 40       	sbci	r31, 0x0E	; 14
    dfba:	29 f4       	brne	.+10     	; 0xdfc6 <Logic+0x1cc>
		    TriggerFx(HURRY_FX,255,true);
    dfbc:	87 e0       	ldi	r24, 0x07	; 7
    dfbe:	6f ef       	ldi	r22, 0xFF	; 255
    dfc0:	41 e0       	ldi	r20, 0x01	; 1
    dfc2:	0e 94 df 48 	call	0x91be	; 0x91be <TriggerFx>
            //first tick of quick time
		 }
		 DropBlocks();
    dfc6:	0e 94 93 66 	call	0xcd26	; 0xcd26 <DropBlocks>
      }
   
      if(!roundtime){//time up
    dfca:	80 91 c2 0f 	lds	r24, 0x0FC2
    dfce:	90 91 c3 0f 	lds	r25, 0x0FC3
    dfd2:	00 97       	sbiw	r24, 0x00	; 0
    dfd4:	51 f5       	brne	.+84     	; 0xe02a <Logic+0x230>
    dfd6:	06 ec       	ldi	r16, 0xC6	; 198
    dfd8:	1f e0       	ldi	r17, 0x0F	; 15
    dfda:	c0 e0       	ldi	r28, 0x00	; 0
    dfdc:	d0 e0       	ldi	r29, 0x00	; 0
         for(u8 i=0;i<numplayers;i++){
	        if(player_state[i] == DYING || player_attrb2[i] & GHOST)
		       continue;

	        if(!player_offset[i] && player_state[i] & MOVE){//wait until player isn't moving, then prevent further movement(avoid flicker at end of match)
		       player_state[i] ^= MOVE;
    dfde:	80 e2       	ldi	r24, 0x20	; 32
    dfe0:	e8 2e       	mov	r14, r24
            //first tick of quick time
		 }
		 DropBlocks();
      }
   
      if(!roundtime){//time up
    dfe2:	2c 2f       	mov	r18, r28
         for(u8 i=0;i<numplayers;i++){
	        if(player_state[i] == DYING || player_attrb2[i] & GHOST)
    dfe4:	f8 01       	movw	r30, r16
    dfe6:	90 81       	ld	r25, Z
    dfe8:	9f 3f       	cpi	r25, 0xFF	; 255
    dfea:	c9 f0       	breq	.+50     	; 0xe01e <Logic+0x224>
    dfec:	fe 01       	movw	r30, r28
    dfee:	ea 58       	subi	r30, 0x8A	; 138
    dff0:	f0 4f       	sbci	r31, 0xF0	; 240
    dff2:	80 81       	ld	r24, Z
    dff4:	87 fd       	sbrc	r24, 7
    dff6:	13 c0       	rjmp	.+38     	; 0xe01e <Logic+0x224>
		       continue;

	        if(!player_offset[i] && player_state[i] & MOVE){//wait until player isn't moving, then prevent further movement(avoid flicker at end of match)
    dff8:	fe 01       	movw	r30, r28
    dffa:	e2 50       	subi	r30, 0x02	; 2
    dffc:	f0 4f       	sbci	r31, 0xF0	; 240
    dffe:	80 81       	ld	r24, Z
    e000:	88 23       	and	r24, r24
    e002:	51 f4       	brne	.+20     	; 0xe018 <Logic+0x21e>
    e004:	95 ff       	sbrs	r25, 5
    e006:	08 c0       	rjmp	.+16     	; 0xe018 <Logic+0x21e>
		       player_state[i] ^= MOVE;
    e008:	9e 25       	eor	r25, r14
    e00a:	f8 01       	movw	r30, r16
    e00c:	90 83       	st	Z, r25
		       player_frame[i] = 0;
    e00e:	fe 01       	movw	r30, r28
    e010:	e7 54       	subi	r30, 0x47	; 71
    e012:	f0 4f       	sbci	r31, 0xF0	; 240
    e014:	10 82       	st	Z, r1
    e016:	03 c0       	rjmp	.+6      	; 0xe01e <Logic+0x224>
	      
		    }
		    else
		       KillPlayer(i);
    e018:	82 2f       	mov	r24, r18
    e01a:	0e 94 f4 64 	call	0xc9e8	; 0xc9e8 <KillPlayer>
    e01e:	21 96       	adiw	r28, 0x01	; 1
    e020:	0f 5f       	subi	r16, 0xFF	; 255
    e022:	1f 4f       	sbci	r17, 0xFF	; 255
		 }
		 DropBlocks();
      }
   
      if(!roundtime){//time up
         for(u8 i=0;i<numplayers;i++){
    e024:	cf 15       	cp	r28, r15
    e026:	e8 f2       	brcs	.-70     	; 0xdfe2 <Logic+0x1e8>
    e028:	09 c0       	rjmp	.+18     	; 0xe03c <Logic+0x242>
		    else
		       KillPlayer(i);
	     }

      }
      else if(roundtime < 65535)//time left and not infinite time
    e02a:	ff ef       	ldi	r31, 0xFF	; 255
    e02c:	8f 3f       	cpi	r24, 0xFF	; 255
    e02e:	9f 07       	cpc	r25, r31
    e030:	29 f0       	breq	.+10     	; 0xe03c <Logic+0x242>
         roundtime--;
    e032:	01 97       	sbiw	r24, 0x01	; 1
    e034:	90 93 c3 0f 	sts	0x0FC3, r25
    e038:	80 93 c2 0f 	sts	0x0FC2, r24
      }

      FlashPowerUps();

   }
    e03c:	cd b7       	in	r28, 0x3d	; 61
    e03e:	de b7       	in	r29, 0x3e	; 62
    e040:	e6 e0       	ldi	r30, 0x06	; 6
    e042:	0c 94 d1 70 	jmp	0xe1a2	; 0xe1a2 <__epilogue_restores__+0x18>

0000e046 <main>:
#include "logic.h"
#include "gui.h"
#include "render.h"

inline void EngineInit(){
   InitMusicPlayer(patches);
    e046:	8a ea       	ldi	r24, 0xAA	; 170
    e048:	94 e6       	ldi	r25, 0x64	; 100
    e04a:	0e 94 53 45 	call	0x8aa6	; 0x8aa6 <InitMusicPlayer>
   SetSpritesTileTable(GameSprites);
    e04e:	85 ee       	ldi	r24, 0xE5	; 229
    e050:	9f e3       	ldi	r25, 0x3F	; 63
    e052:	0e 94 80 44 	call	0x8900	; 0x8900 <SetSpritesTileTable>
   level = 0;
    e056:	10 92 fd 0e 	sts	0x0EFD, r1
void SetTileSet(){
   SetTileTable(MapTiles);
    e05a:	8e e5       	ldi	r24, 0x5E	; 94
    e05c:	94 e0       	ldi	r25, 0x04	; 4
    e05e:	0e 94 93 44 	call	0x8926	; 0x8926 <SetTileTable>
    e062:	e2 ed       	ldi	r30, 0xD2	; 210
    e064:	f3 e0       	ldi	r31, 0x03	; 3
u8 GetNumRoundBits();
void SetNumRoundBits(u8 t);

void HideSprites(u8 start, u8 end){
    for(u8 i=start;i<end;i++)
	   sprites[i].x = SCREEN_TILES_H*TILE_WIDTH;
    e066:	80 ef       	ldi	r24, 0xF0	; 240
    e068:	80 83       	st	Z, r24
    e06a:	35 96       	adiw	r30, 0x05	; 5
void SetRoundTimeBits(u8 t);
u8 GetNumRoundBits();
void SetNumRoundBits(u8 t);

void HideSprites(u8 start, u8 end){
    for(u8 i=start;i<end;i++)
    e06c:	94 e0       	ldi	r25, 0x04	; 4
    e06e:	ed 36       	cpi	r30, 0x6D	; 109
    e070:	f9 07       	cpc	r31, r25
    e072:	d1 f7       	brne	.-12     	; 0xe068 <main+0x22>
   SetTileSet();
   HideSprites(0,MAX_SPRITES);
   SetMasterVolume(NORMAL_VOL);
    e074:	80 e8       	ldi	r24, 0x80	; 128
    e076:	0e 94 cf 45 	call	0x8b9e	; 0x8b9e <SetMasterVolume>
   numplayers = 3;
    e07a:	83 e0       	ldi	r24, 0x03	; 3
    e07c:	80 93 a7 0f 	sts	0x0FA7, r24
u8 GetScore(u8 p){
   return score & (3>>(p*2));
}

void SetSlot(u8 p, u8 s){//0-2
   playerslots |= (s<<(p*2));
    e080:	80 91 2b 10 	lds	r24, 0x102B
    e084:	84 65       	ori	r24, 0x54	; 84
    e086:	80 93 2b 10 	sts	0x102B, r24
   SetSlot(0,0);
   SetSlot(1,1);
   SetSlot(2,1);
   SetSlot(3,1);

   FadeIn(1,false);
    e08a:	81 e0       	ldi	r24, 0x01	; 1
    e08c:	60 e0       	ldi	r22, 0x00	; 0
    e08e:	0e 94 4e 4a 	call	0x949c	; 0x949c <FadeIn>
   //Intro();


StartSong(StageSong);
    e092:	89 e7       	ldi	r24, 0x79	; 121
    e094:	95 e6       	ldi	r25, 0x65	; 101
    e096:	0e 94 6e 45 	call	0x8adc	; 0x8adc <StartSong>
    e09a:	e0 e2       	ldi	r30, 0x20	; 32
    e09c:	f1 e0       	ldi	r31, 0x01	; 1
u8 f=32;



for(int i=0;i<VRAM_TILES_V*VRAM_TILES_H;i++)
vram[i] = RAM_TILES_COUNT+15;
    e09e:	8e e2       	ldi	r24, 0x2E	; 46
    e0a0:	81 93       	st	Z+, r24

u8 f=32;



for(int i=0;i<VRAM_TILES_V*VRAM_TILES_H;i++)
    e0a2:	93 e0       	ldi	r25, 0x03	; 3
    e0a4:	e2 3d       	cpi	r30, 0xD2	; 210
    e0a6:	f9 07       	cpc	r31, r25
    e0a8:	d9 f7       	brne	.-10     	; 0xe0a0 <main+0x5a>

  WaitVsync(15);

  }

  guistate = GMAINMENU;
    e0aa:	81 e0       	ldi	r24, 0x01	; 1
    e0ac:	80 93 0e 10 	sts	0x100E, r24
  gamestate = STARTMATCH;
    e0b0:	80 e1       	ldi	r24, 0x10	; 16
    e0b2:	80 93 fc 0e 	sts	0x0EFC, r24
  prng = 7;
    e0b6:	87 e0       	ldi	r24, 0x07	; 7
    e0b8:	80 93 04 01 	sts	0x0104, r24
		// beep();
		 WaitVsync(1);
		 continue;
	  }
   */
      Input();
    e0bc:	0e 94 13 5c 	call	0xb826	; 0xb826 <Input>
      Gui();
    e0c0:	0e 94 f9 5b 	call	0xb7f2	; 0xb7f2 <Gui>
      if(!gamestate)
    e0c4:	80 91 fc 0e 	lds	r24, 0x0EFC
    e0c8:	88 23       	and	r24, r24
    e0ca:	c1 f3       	breq	.-16     	; 0xe0bc <main+0x76>
         continue;
      Logic();
    e0cc:	0e 94 fd 6e 	call	0xddfa	; 0xddfa <Logic>
      Render();
    e0d0:	0e 94 a8 52 	call	0xa550	; 0xa550 <Render>
      LevelSpecial();
    e0d4:	0e 94 22 65 	call	0xca44	; 0xca44 <LevelSpecial>
	  tick_tracker |= TICK_ENDED;
    e0d8:	80 91 02 01 	lds	r24, 0x0102
    e0dc:	81 60       	ori	r24, 0x01	; 1
    e0de:	80 93 02 01 	sts	0x0102, r24
	  WaitVsync(1);
    e0e2:	81 e0       	ldi	r24, 0x01	; 1
    e0e4:	90 e0       	ldi	r25, 0x00	; 0
    e0e6:	0e 94 a3 4a 	call	0x9546	; 0x9546 <WaitVsync>
    e0ea:	e8 cf       	rjmp	.-48     	; 0xe0bc <main+0x76>

0000e0ec <__udivmodqi4>:
    e0ec:	99 1b       	sub	r25, r25
    e0ee:	79 e0       	ldi	r23, 0x09	; 9
    e0f0:	04 c0       	rjmp	.+8      	; 0xe0fa <__udivmodqi4_ep>

0000e0f2 <__udivmodqi4_loop>:
    e0f2:	99 1f       	adc	r25, r25
    e0f4:	96 17       	cp	r25, r22
    e0f6:	08 f0       	brcs	.+2      	; 0xe0fa <__udivmodqi4_ep>
    e0f8:	96 1b       	sub	r25, r22

0000e0fa <__udivmodqi4_ep>:
    e0fa:	88 1f       	adc	r24, r24
    e0fc:	7a 95       	dec	r23
    e0fe:	c9 f7       	brne	.-14     	; 0xe0f2 <__udivmodqi4_loop>
    e100:	80 95       	com	r24
    e102:	08 95       	ret

0000e104 <__udivmodhi4>:
    e104:	aa 1b       	sub	r26, r26
    e106:	bb 1b       	sub	r27, r27
    e108:	51 e1       	ldi	r21, 0x11	; 17
    e10a:	07 c0       	rjmp	.+14     	; 0xe11a <__udivmodhi4_ep>

0000e10c <__udivmodhi4_loop>:
    e10c:	aa 1f       	adc	r26, r26
    e10e:	bb 1f       	adc	r27, r27
    e110:	a6 17       	cp	r26, r22
    e112:	b7 07       	cpc	r27, r23
    e114:	10 f0       	brcs	.+4      	; 0xe11a <__udivmodhi4_ep>
    e116:	a6 1b       	sub	r26, r22
    e118:	b7 0b       	sbc	r27, r23

0000e11a <__udivmodhi4_ep>:
    e11a:	88 1f       	adc	r24, r24
    e11c:	99 1f       	adc	r25, r25
    e11e:	5a 95       	dec	r21
    e120:	a9 f7       	brne	.-22     	; 0xe10c <__udivmodhi4_loop>
    e122:	80 95       	com	r24
    e124:	90 95       	com	r25
    e126:	bc 01       	movw	r22, r24
    e128:	cd 01       	movw	r24, r26
    e12a:	08 95       	ret

0000e12c <__divmodhi4>:
    e12c:	97 fb       	bst	r25, 7
    e12e:	09 2e       	mov	r0, r25
    e130:	07 26       	eor	r0, r23
    e132:	0a d0       	rcall	.+20     	; 0xe148 <__divmodhi4_neg1>
    e134:	77 fd       	sbrc	r23, 7
    e136:	04 d0       	rcall	.+8      	; 0xe140 <__divmodhi4_neg2>
    e138:	e5 df       	rcall	.-54     	; 0xe104 <__udivmodhi4>
    e13a:	06 d0       	rcall	.+12     	; 0xe148 <__divmodhi4_neg1>
    e13c:	00 20       	and	r0, r0
    e13e:	1a f4       	brpl	.+6      	; 0xe146 <__divmodhi4_exit>

0000e140 <__divmodhi4_neg2>:
    e140:	70 95       	com	r23
    e142:	61 95       	neg	r22
    e144:	7f 4f       	sbci	r23, 0xFF	; 255

0000e146 <__divmodhi4_exit>:
    e146:	08 95       	ret

0000e148 <__divmodhi4_neg1>:
    e148:	f6 f7       	brtc	.-4      	; 0xe146 <__divmodhi4_exit>
    e14a:	90 95       	com	r25
    e14c:	81 95       	neg	r24
    e14e:	9f 4f       	sbci	r25, 0xFF	; 255
    e150:	08 95       	ret

0000e152 <__prologue_saves__>:
    e152:	2f 92       	push	r2
    e154:	3f 92       	push	r3
    e156:	4f 92       	push	r4
    e158:	5f 92       	push	r5
    e15a:	6f 92       	push	r6
    e15c:	7f 92       	push	r7
    e15e:	8f 92       	push	r8
    e160:	9f 92       	push	r9
    e162:	af 92       	push	r10
    e164:	bf 92       	push	r11
    e166:	cf 92       	push	r12
    e168:	df 92       	push	r13
    e16a:	ef 92       	push	r14
    e16c:	ff 92       	push	r15
    e16e:	0f 93       	push	r16
    e170:	1f 93       	push	r17
    e172:	cf 93       	push	r28
    e174:	df 93       	push	r29
    e176:	cd b7       	in	r28, 0x3d	; 61
    e178:	de b7       	in	r29, 0x3e	; 62
    e17a:	ca 1b       	sub	r28, r26
    e17c:	db 0b       	sbc	r29, r27
    e17e:	0f b6       	in	r0, 0x3f	; 63
    e180:	f8 94       	cli
    e182:	de bf       	out	0x3e, r29	; 62
    e184:	0f be       	out	0x3f, r0	; 63
    e186:	cd bf       	out	0x3d, r28	; 61
    e188:	09 94       	ijmp

0000e18a <__epilogue_restores__>:
    e18a:	2a 88       	ldd	r2, Y+18	; 0x12
    e18c:	39 88       	ldd	r3, Y+17	; 0x11
    e18e:	48 88       	ldd	r4, Y+16	; 0x10
    e190:	5f 84       	ldd	r5, Y+15	; 0x0f
    e192:	6e 84       	ldd	r6, Y+14	; 0x0e
    e194:	7d 84       	ldd	r7, Y+13	; 0x0d
    e196:	8c 84       	ldd	r8, Y+12	; 0x0c
    e198:	9b 84       	ldd	r9, Y+11	; 0x0b
    e19a:	aa 84       	ldd	r10, Y+10	; 0x0a
    e19c:	b9 84       	ldd	r11, Y+9	; 0x09
    e19e:	c8 84       	ldd	r12, Y+8	; 0x08
    e1a0:	df 80       	ldd	r13, Y+7	; 0x07
    e1a2:	ee 80       	ldd	r14, Y+6	; 0x06
    e1a4:	fd 80       	ldd	r15, Y+5	; 0x05
    e1a6:	0c 81       	ldd	r16, Y+4	; 0x04
    e1a8:	1b 81       	ldd	r17, Y+3	; 0x03
    e1aa:	aa 81       	ldd	r26, Y+2	; 0x02
    e1ac:	b9 81       	ldd	r27, Y+1	; 0x01
    e1ae:	ce 0f       	add	r28, r30
    e1b0:	d1 1d       	adc	r29, r1
    e1b2:	0f b6       	in	r0, 0x3f	; 63
    e1b4:	f8 94       	cli
    e1b6:	de bf       	out	0x3e, r29	; 62
    e1b8:	0f be       	out	0x3f, r0	; 63
    e1ba:	cd bf       	out	0x3d, r28	; 61
    e1bc:	ed 01       	movw	r28, r26
    e1be:	08 95       	ret

0000e1c0 <_exit>:
    e1c0:	f8 94       	cli

0000e1c2 <__stop_program>:
    e1c2:	ff cf       	rjmp	.-2      	; 0xe1c2 <__stop_program>
