
BLOCKBOY.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000090c0  000091c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000090c0  00000000  00000000  00000100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000cff  00800120  00800120  000091e0  2**5
                  ALLOC
  3 .debug_aranges 000004a8  00000000  00000000  000091d0  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000ade  00000000  00000000  00009678  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003b5a  00000000  00000000  0000a156  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000bfe  00000000  00000000  0000dcb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002c7c  00000000  00000000  0000e8ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000640  00000000  00000000  0001152c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000eb4  00000000  00000000  00011b6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000020a9  00000000  00000000  00012a20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000005c0  00000000  00000000  00014ad0  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
}

/**
 * Performs a software reset
 */
void SoftReset(void){        
       0:	0c 94 ad 33 	jmp	0x675a	; 0x675a <__ctors_end>

}

#if MUSIC_ENGINE == MIDI

	void StartSong(const char *song){
       4:	0c 94 17 34 	jmp	0x682e	; 0x682e <__bad_interrupt>
			//vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
			*ram_tiles_restore[i].addr=ram_tiles_restore[i].tileIndex;
		}	
	}

	void SetUserRamTilesCount(u8 count){
       8:	0c 94 17 34 	jmp	0x682e	; 0x682e <__bad_interrupt>
}

uint8_t UzenetConnect(){
	WaitVsync(60);
	return 0;
}
       c:	0c 94 17 34 	jmp	0x682e	; 0x682e <__bad_interrupt>
      10:	0c 94 17 34 	jmp	0x682e	; 0x682e <__bad_interrupt>
      14:	0c 94 17 34 	jmp	0x682e	; 0x682e <__bad_interrupt>
      18:	0c 94 17 34 	jmp	0x682e	; 0x682e <__bad_interrupt>
      1c:	0c 94 17 34 	jmp	0x682e	; 0x682e <__bad_interrupt>
      20:	0c 94 a9 38 	jmp	0x7152	; 0x7152 <__vector_8>
      24:	0c 94 17 34 	jmp	0x682e	; 0x682e <__bad_interrupt>
      28:	0c 94 17 34 	jmp	0x682e	; 0x682e <__bad_interrupt>
      2c:	0c 94 17 34 	jmp	0x682e	; 0x682e <__bad_interrupt>
      30:	0c 94 17 34 	jmp	0x682e	; 0x682e <__bad_interrupt>
      34:	0c 94 80 36 	jmp	0x6d00	; 0x6d00 <__vector_13>
      38:	0c 94 c0 36 	jmp	0x6d80	; 0x6d80 <__vector_14>
      3c:	0c 94 17 34 	jmp	0x682e	; 0x682e <__bad_interrupt>
      40:	0c 94 17 34 	jmp	0x682e	; 0x682e <__bad_interrupt>
      44:	0c 94 17 34 	jmp	0x682e	; 0x682e <__bad_interrupt>
      48:	0c 94 17 34 	jmp	0x682e	; 0x682e <__bad_interrupt>
      4c:	0c 94 17 34 	jmp	0x682e	; 0x682e <__bad_interrupt>
      50:	0c 94 17 34 	jmp	0x682e	; 0x682e <__bad_interrupt>
      54:	0c 94 17 34 	jmp	0x682e	; 0x682e <__bad_interrupt>
      58:	0c 94 17 34 	jmp	0x682e	; 0x682e <__bad_interrupt>
      5c:	0c 94 17 34 	jmp	0x682e	; 0x682e <__bad_interrupt>
      60:	0c 94 17 34 	jmp	0x682e	; 0x682e <__bad_interrupt>
      64:	0c 94 17 34 	jmp	0x682e	; 0x682e <__bad_interrupt>
      68:	0c 94 17 34 	jmp	0x682e	; 0x682e <__bad_interrupt>
      6c:	0c 94 17 34 	jmp	0x682e	; 0x682e <__bad_interrupt>

00000070 <eeprom_format_table>:
      70:	5a 55 01 20 01 01 00 38 08 00 00 00 00 00 00 00     ZU. ...8........
	...

00000090 <io_table>:
      90:	81 00 45 00 27 ff 24 ff 2a 90 2b 1c 21 0c 22 fb     ..E.'.$.*.+.!.".
      a0:	85 00 84 00 89 03 88 8d 81 09 6f 02 44 42 47 00     ..........o.DBG.
      b0:	45 01 b0 83 b3 00 b1 01 25 11 8a 4f 8b 03           E.......%..O..

000000be <patchCommands>:
      be:	a2 39 a5 39 ae 39 b3 39 bb 39 c4 39 c9 39 ce 39     .9.9.9.9.9.9.9.9
      ce:	d1 39 e3 39 e6 39 e9 39 2a 3a 2d 3a 30 3a           .9.9.9.9*:-:0:

000000dc <fader>:
      dc:	00 40 88 91 d2 e4 ad b5 b6 be bf ff                 .@..........

000000e8 <rom_tiles>:
      e8:	06 57 57 57 57 57 57 57 06 04 04 04 04 04 04 06     .WWWWWWW........
      f8:	06 04 04 06 06 06 06 06 06 04 ff ff ff ff ff ff     ................
     108:	06 04 ff ff ff ff ff ff 06 04 ff ff 57 04 06 06     ............W...
     118:	06 04 ff ff 57 06 06 06 06 06 ff ff 06 06 06 06     ....W...........
     128:	57 57 57 57 57 57 57 57 06 04 04 04 04 04 04 57     WWWWWWWW.......W
     138:	06 06 06 06 06 04 04 57 ff ff ff ff ff ff 04 57     .......W.......W
     148:	ff ff ff ff ff ff 04 57 06 06 04 04 ff ff 04 57     .......W.......W
     158:	06 06 06 04 ff ff 04 57 06 06 06 06 ff ff 06 57     .......W.......W
     168:	06 06 ff ff 06 06 06 06 06 04 ff ff 57 06 06 06     ............W...
     178:	06 04 ff ff 57 04 06 06 06 04 ff ff ff ff ff ff     ....W...........
     188:	06 04 ff ff ff ff ff ff 06 04 02 02 02 02 02 06     ................
     198:	06 04 04 04 04 04 04 06 06 06 06 06 06 06 06 06     ................
     1a8:	06 06 06 06 ff ff 06 57 06 06 06 05 ff ff 04 57     .......W.......W
     1b8:	06 06 04 05 ff ff 04 57 ff ff ff ff ff ff 04 57     .......W.......W
     1c8:	ff ff ff ff ff ff 04 57 06 02 02 02 02 05 04 57     .......W.......W
     1d8:	06 04 04 04 04 04 04 57 06 06 06 06 06 06 06 57     .......W.......W
     1e8:	69 bc bc bc bc bc bc bc 69 10 10 10 10 10 10 69     i.......i......i
     1f8:	69 10 10 69 69 69 69 69 69 10 bb 10 69 69 69 69     i..iiiiii...iiii
     208:	69 10 bb bb 10 69 69 ff 69 10 bb bb bb 10 72 ff     i....ii.i.....r.
     218:	69 10 bb bb bb 72 ff ff 69 69 69 69 69 72 ff ff     i....r..iiiiir..
     228:	bc bc bc bc bc bc bc bc 69 10 10 10 10 10 10 bc     ........i.......
     238:	69 69 69 69 69 10 10 bc 69 69 69 69 10 61 10 bc     iiiii...iiii.a..
     248:	ff 69 69 10 61 61 10 bc ff 72 10 61 61 61 10 bc     .ii.aa...r.aaa..
     258:	ff ff 72 61 61 61 10 bc ff ff 72 69 69 69 69 bc     ..raaa....riiii.
     268:	69 69 69 69 69 ff ff ff 69 10 bb bb ff ff ff ff     iiiii...i.......
     278:	69 10 bb ff ff ff ff ff 69 10 ff ff ff ff ff ff     i.......i.......
     288:	69 10 bb 10 10 10 10 69 69 10 10 10 10 10 10 69     i......ii......i
     298:	69 10 10 10 10 10 10 69 69 69 69 69 69 69 69 69     i......iiiiiiiii
     2a8:	ff ff ff 69 69 69 69 bc ff ff ff ff 61 61 10 bc     ...iiii.....aa..
     2b8:	ff ff ff ff ff 61 10 bc ff ff ff ff ff ff 10 bc     .....a..........
     2c8:	69 10 10 10 10 61 10 bc 69 10 10 10 10 10 10 bc     i....a..i.......
     2d8:	69 10 10 10 10 10 10 bc 69 69 69 69 69 69 69 bc     i.......iiiiiii.
     2e8:	89 e3 e3 e3 e3 e3 e3 e3 89 49 49 49 49 49 49 89     .........IIIIII.
     2f8:	89 49 49 89 89 89 89 ff 89 49 e3 49 89 ff ff ff     .II......I.I....
     308:	89 49 e3 e3 ff ff ff ff 89 49 e3 ff ff ff 92 89     .I.......I......
     318:	89 49 e3 ff ff 92 49 89 89 89 ff ff ff 89 89 89     .I....I.........
     328:	e3 e3 e3 e3 e3 e3 e3 e3 89 49 49 49 49 49 49 e3     .........IIIIII.
     338:	ff 89 89 89 89 49 49 e3 ff ff ff 89 49 91 49 e3     .....II.....I.I.
     348:	ff ff ff ff 49 91 49 e3 89 92 ff ff ff 91 49 e3     ....I.I.......I.
     358:	89 92 92 ff ff 91 49 e3 89 89 89 ff ff ff 89 e3     ......I.........
     368:	89 89 ff ff ff 89 89 89 89 49 e3 ff ff 49 49 89     .........I...II.
     378:	89 49 e3 ff ff ff 49 89 89 49 e3 e3 ff ff ff ff     .I....I..I......
     388:	89 49 e3 49 49 ff ff ff 89 49 49 49 49 49 49 ff     .I.II....IIIIII.
     398:	89 49 49 49 49 49 49 89 89 89 89 89 89 89 89 89     .IIIIII.........
     3a8:	89 89 89 ff ff ff 89 e3 89 49 49 ff ff 91 49 e3     .........II...I.
     3b8:	89 49 ff ff ff 91 49 e3 ff ff ff ff 91 91 49 e3     .I....I.......I.
     3c8:	ff ff ff 49 49 91 49 e3 ff 49 49 49 49 49 49 e3     ...II.I..IIIIII.
     3d8:	89 49 49 49 49 49 49 e3 89 89 89 89 89 89 89 e3     .IIIIII.........
     3e8:	3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 4b 4b 4b 4b 4b 4b     ??????????KKKKKK
     3f8:	3f 4b 4b 06 9d 9d 9d 9d 3f 4b 06 06 06 9d 9d 9d     ?KK.....?K......
     408:	3f 4b 95 06 06 06 9d 9d 3f 4b 95 95 06 06 06 9d     ?K......?K......
     418:	3f 4b 95 95 95 06 06 06 3f 4b 95 95 95 95 06 06     ?K......?K......
     428:	3f 3f 3f 3f 3f 3f 3f 3f 4b 4b 4b 4b 4b 4b 3f 3f     ????????KKKKKK??
     438:	9d 9d 9d 9d 06 4a 4a 3f 9d 9d 9d 06 06 06 4a 3f     .....JJ?......J?
     448:	9d 9d 06 06 06 95 4a 3f 9d 06 06 06 95 95 4a 3f     ......J?......J?
     458:	06 06 06 95 95 95 4a 36 06 06 95 95 95 95 4a 36     ......J6......J6
     468:	3f 4b 95 95 95 95 06 06 3f 4b 95 95 95 06 06 06     ?K......?K......
     478:	3f 4b 95 95 06 06 06 4a 3f 4b 95 06 06 06 4a 4a     ?K.....J?K....JJ
     488:	36 4b 06 06 06 4a 4a 4a 36 36 4a 06 4a 4a 4a 4a     6K...JJJ66J.JJJJ
     498:	36 36 36 4a 4a 4a 4a 4a 1b 1b 1b 1b 1b 1b 1b 1b     666JJJJJ........
     4a8:	06 06 95 95 95 95 4a 36 06 06 06 95 95 95 4a 36     ......J6......J6
     4b8:	4a 06 06 06 95 95 4a 36 4a 4a 06 06 06 95 4a 36     J.....J6JJ....J6
     4c8:	4a 4a 4a 06 06 06 4a 36 4a 4a 4a 4a 06 4a 36 36     JJJ...J6JJJJ.J66
     4d8:	4a 4a 4a 4a 4a 36 36 36 1b 1b 1b 1b 1b 1b 1b 1b     JJJJJ666........
     4e8:	3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 4b 4b 4b 4b 4b 4b     ??????????KKKKKK
     4f8:	3f 4b 4b 9d 9d 9d 9d 9d 3f 4b 95 9d 9d 3f 36 9d     ?KK.....?K...?6.
     508:	3f 4b 95 1f 36 9d 9d 3f 3f 4b 1f 06 1f 9d 04 57     ?K..6..??K.....W
     518:	3f 4b 95 1f 95 95 04 57 3f 4b 95 95 95 95 04 57     ?K.....W?K.....W
     528:	3f 3f 3f 3f 3f 3f 3f 3f 4b 4b 4b 4b 4b 4b 3f 3f     ????????KKKKKK??
     538:	9d 9d 9d 9d 9d 4a 4a 3f 9d 9d 9d 9d 9d 95 4a 3f     .....JJ?......J?
     548:	06 9d 9d 9d 95 95 4a 3f 06 04 9d 95 95 95 4a 3f     ......J?......J?
     558:	06 04 95 95 95 95 4a 36 06 04 95 95 95 95 4a 36     ......J6......J6
     568:	3f 4b 95 95 95 95 04 57 3f 4b 95 95 95 95 04 57     ?K.....W?K.....W
     578:	3f 4b 95 95 95 4a 04 57 3f 4b 95 95 4a 4a 04 57     ?K...J.W?K..JJ.W
     588:	36 4b 95 4a 4a 4a 04 57 36 36 4a 4a 4a 4a 04 57     6K.JJJ.W66JJJJ.W
     598:	36 36 36 4a 4a 4a 4a 57 1b 1b 1b 1b 1b 1b 1b 1b     666JJJJW........
     5a8:	06 04 95 95 95 95 4a 36 06 04 95 95 95 95 4a 36     ......J6......J6
     5b8:	06 04 4a 95 95 95 4a 36 06 04 4a 4a 95 95 4a 36     ..J...J6..JJ..J6
     5c8:	06 04 4a 4a 4a 95 4a 36 06 04 4a 4a 4a 4a 36 36     ..JJJ.J6..JJJJ66
     5d8:	06 4a 4a 4a 4a 36 36 36 1b 1b 1b 1b 1b 1b 1b 1b     .JJJJ666........
     5e8:	3f 3f 3f 3f 3f 3f 4b 4b 3f 3f 4b 4b 4b 4b ff 3f     ??????KK??KKKK.?
     5f8:	3f 4b 4b 9d 9d 4b ff 3f 3f 4b 9d 9d 9d 4b ff 3f     ?KK..K.??K...K.?
     608:	3f 4b 9d 9d 9d 4b ff 3f 3f 4b 4b 4b 4b ff ff ff     ?K...K.??KKKK...
     618:	4b ff ff ff ff ff ff 36 3f 4b 3f 3f 3f ff ff 36     K......6?K???..6
     628:	3f 3f 3f 3f 3f 3f 3f 3f 4b 4b 4b 4b 4b 4b 3f 3f     ????????KKKKKK??
     638:	4b 9d 9d 9d 9d 4b 4a 3f 4b 9d 9d 9d 4b 3f 4b 3f     K....KJ?K...K?K?
     648:	ff 4b 4b 4b 3f 36 4b 3f 3f 3f 3f 3f 3f 36 4b 3f     .KKK?6K??????6K?
     658:	36 36 3f 36 36 4b 4a 36 36 3f 3f 36 4b 95 4a 36     66?66KJ66??6K.J6
     668:	3f 4b 4b 3f 3f 3f ff 3f 3f 4b 95 4b 3f 3f 3f ff     ?KK???.??K.K???.
     678:	3f 4b 95 95 4b 3f 3f 3f 3f 4b 95 4b 3f 3f 3f 3f     ?K..K????K.K????
     688:	36 4b 4a 4b 3f 3f 3f 3f 36 36 4b 3f 3f 3f 4a 4a     6KJK????66K???JJ
     698:	36 36 4b 3f 3f 4a 4a 4a 1b 1b 1b 4b 4b 1b 1b 1b     66K??JJJ...KK...
     6a8:	3f 3f 36 4b 95 95 4a 36 36 3f 36 36 4b 95 4a 36     ??6K..J66?66K.J6
     6b8:	3f 36 3f 3f 36 4b 4b 36 3f 36 36 36 3f 36 36 4b     ?6??6KK6?666?66K
     6c8:	4a 4a 4a 4a 36 3f 36 4b 4a 4a 4a 4a 4a 4a 4b 36     JJJJ6?6KJJJJJJK6
     6d8:	4a 4a 4a 4a 4a 36 36 36 1b 1b 1b 1b 1b 1b 1b 1b     JJJJJ666........
     6e8:	3f 3f 3f 3f 3f 3f 3f 4b 3f 3f 4b 4b 4b 4b 4b ff     ???????K??KKKKK.
     6f8:	3f 4b 4b 9d 9d 9d 4b ff 3f 4b 9d 9d 9d 9d 4b ff     ?KK...K.?K....K.
     708:	4b ff 4b 4b 9d 4b ff ff 4b 3f ff ff 4b 4b ff ff     K.KK.K..K?..KK..
     718:	3f 4b 3f 3f ff ff ff 3f 3f 4b 4b 3f 3f ff ff 3f     ?K??...??KK??..?
     728:	4b 3f 3f 3f 3f 3f 3f 3f 3f 4b 4b 4b 4b 4b 3f 3f     K????????KKKKK??
     738:	3f 4b 9d 9d 9d 4a 4a 3f 3f 4b 9d 9d 9d 9d 4b 3f     ?K...JJ??K....K?
     748:	3f 3f 4b 9d 4b 4b 3f 4b 3f 3f 4b 4b 3f 3f 36 4b     ??K.KK?K??KK??6K
     758:	36 3f 3f 3f 36 36 4b 36 36 3f 3f 3f 36 4b 4a 36     6???66K66???6KJ6
     768:	3f 4b 95 4b 3f 3f 3f ff 3f 4b 95 95 4b 3f 3f ff     ?K.K???.?K..K??.
     778:	3f 4b 95 4b 3f 3f 3f 3f 3f 4b 4b 3f 3f 3f 3f 3f     ?K.K?????KK?????
     788:	36 4b 3f 3f 3f 3f 3f 4a 36 4b 3f 3f 3f 4a 4a 4a     6K?????J6K???JJJ
     798:	36 4b 4b 4a 4a 4a 4a 4a 1b 1b 1b 1b 1b 1b 1b 1b     6KKJJJJJ........
     7a8:	3f 36 36 36 4b 95 4a 36 3f 36 36 4b 95 95 4a 36     ?666K.J6?66K..J6
     7b8:	36 3f 36 36 4b 95 4a 36 36 36 3f 36 36 4b 4a 36     6?66K.J666?66KJ6
     7c8:	4a 36 36 3f 36 36 4b 36 4a 4a 4a 36 3f 3f 4b 36     J66?66K6JJJ6??K6
     7d8:	4a 4a 4a 4a 4a 4b 36 36 1b 1b 1b 1b 1b 1b 1b 1b     JJJJJK66........
     7e8:	3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 4b 4b 4b 4b 4b 4b     ??????????KKKKKK
     7f8:	3f 4b 4b 9d 9d 9d 9d 4b 3f 4b ff 4b 9d 9d 9d 4b     ?KK....K?K.K...K
     808:	3f 4b 3f ff 4b 4b 4b ff 3f 4b 3f 3f ff ff ff ff     ?K?.KKK.?K??....
     818:	3f 4b 4b 3f 3f ff 3f 36 3f 4b 95 4b 3f ff 3f 36     ?KK??.?6?K.K?.?6
     828:	4b 4b 3f 3f 3f 3f 3f 3f ff 3f 4b 4b 4b 4b 3f 3f     KK??????.?KKKK??
     838:	ff 3f 4b 9d 9d 4a 4a 3f ff 3f 4b 9d 9d 95 4a 3f     .?K..JJ?.?K...J?
     848:	ff 3f 4b 9d 95 95 4a 3f 3f 3f 3f 4b 4b 4b 4b 3f     .?K...J????KKKK?
     858:	36 3f 3f 3f 3f 3f 3f 4b 36 36 3f 3f 3f 36 4b 36     6??????K66???6K6
     868:	3f 4b 95 95 4b 3f ff 3f 3f 4b 95 4b 3f 3f 3f ff     ?K..K?.??K.K???.
     878:	3f 4b 4b 3f 3f 3f 3f 3f 4b 3f 3f 3f 3f 3f 3f 3f     ?KK?????K???????
     888:	4b 3f 3f 3f 4a 4a 4a 4a 36 4b 4a 4a 4a 4a 4a 4a     K???JJJJ6KJJJJJJ
     898:	36 36 36 4a 4a 4a 4a 4a 1b 1b 1b 1b 1b 1b 1b 1b     666JJJJJ........
     8a8:	3f 3f 36 36 36 4b 4a 36 3f 3f 36 36 4b 95 4a 36     ??666KJ6??66K.J6
     8b8:	3f 3f 36 4b 4a 95 4a 36 3f 3f 36 36 4b 4a 4a 36     ??6KJ.J6??66KJJ6
     8c8:	36 36 3f 36 4b 4a 4a 36 4a 4a 36 36 36 4b 36 36     66?6KJJ6JJ666K66
     8d8:	4a 4a 4a 3f 36 4b 36 36 1b 1b 1b 4b 4b 1b 1b 1b     JJJ?6K66...KK...
     8e8:	3f 3f 3f 3f 3f 3f 4b 4b 3f 3f 52 52 52 5b 5b 5b     ??????KK??RRR[[[
     8f8:	3f 4b 52 00 00 ad ad ad 3f 4b 00 00 00 00 ff ff     ?KR.....?K......
     908:	3f 4b 00 00 00 00 00 ff 3f 4b 00 00 ff ff 00 ff     ?K......?K......
     918:	4b ff 00 00 00 00 00 ff 3f 4b ff 00 00 00 ff 00     K.......?K......
     928:	3f 3f 3f 3f 3f 3f 3f 3f 5b 5b 5b 52 52 52 3f 3f     ????????[[[RRR??
     938:	ad ad ad 00 00 52 4a 3f ff ff 00 00 00 00 4b 3f     .....RJ?......K?
     948:	ff 00 00 00 00 00 4b 3f ff 00 00 ff ff 00 4b 3f     ......K?......K?
     958:	ff 00 00 00 00 00 4a 36 00 ff 00 00 00 ff 4a 36     ......J6......J6
     968:	3f 4b ff ff ff ff ff ff 3f 4b 00 00 52 ff 52 ff     ?K......?K..R.R.
     978:	3f 4b ad 52 00 00 00 00 3f 4b 52 ad 5b ff 52 ff     ?K.R....?KR.[.R.
     988:	36 4b 52 52 52 ad ad ad 36 36 00 52 52 52 52 52     6KRRR...66.RRRRR
     998:	36 36 4b 3f 3f 4a 4a 4a 1b 1b 1b 4b 4b 1b 1b 1b     66K??JJJ...KK...
     9a8:	ff ff ff ff ff ff 4a 36 ff 52 ff 52 00 00 4a 36     ......J6.R.R..J6
     9b8:	00 00 00 00 52 ad 4b 36 ff 52 ff 5b ad 52 36 4b     ....R.K6.R.[.R6K
     9c8:	ad ad ad 52 52 52 36 4b 52 52 52 52 52 00 4b 36     ...RRR6KRRRRR.K6
     9d8:	4a 4a 4a 4a 4a 36 36 36 1b 1b 1b 1b 1b 1b 1b 1b     JJJJJ666........
	...
     a28:	03 54 0c 82 82 82 82 82 56 82 82 89 89 89 89 89     .T......V.......
     a38:	0c 82 89 d1 d1 d1 d1 d1 82 89 d1 89 ff ff ff ff     ................
     a48:	82 89 d1 ff 89 89 89 89 82 89 d1 ff 89 89 ff e3     ................
     a58:	82 89 d1 ff 89 ff ff 89 82 89 d1 ff 89 e3 89 82     ................
     a68:	82 82 82 82 82 0c 54 03 89 89 89 89 89 82 82 56     ......T........V
     a78:	d1 d1 d1 d1 d1 89 82 0c ff ff ff ff 89 d1 89 82     ................
     a88:	89 89 89 89 ff d1 89 82 e3 ff 89 89 ff d1 89 82     ................
     a98:	89 ff ff 89 ff d1 89 82 82 89 e3 89 ff d1 89 82     ................
     aa8:	82 89 e3 89 ff d1 89 82 82 89 e3 89 ff d1 ff 89     ................
     ab8:	82 89 e3 89 ff 89 d1 d1 82 89 e3 89 d1 ff ff ff     ................
     ac8:	82 89 e3 89 89 89 89 89 00 82 89 e3 e3 e3 e3 e3     ................
     ad8:	00 82 82 89 89 89 89 89 00 00 00 82 82 82 82 82     ................
     ae8:	82 89 d1 ff 89 e3 89 82 89 ff d1 ff 89 e3 89 82     ................
     af8:	d1 d1 89 ff 89 e3 89 82 ff ff ff d1 89 e3 89 82     ................
     b08:	89 89 89 89 89 e3 89 82 e3 e3 e3 e3 e3 89 82 00     ................
     b18:	89 89 89 89 89 82 82 00 82 82 82 82 82 00 00 00     ................
     b28:	82 89 d1 ff 89 e3 89 82 82 89 d1 ff 89 e3 89 82     ................
     b38:	82 89 d1 ff 89 e3 89 82 82 89 d1 ff 89 e3 89 82     ................
     b48:	82 89 d1 ff 89 e3 89 82 82 89 d1 ff 89 e3 89 82     ................
     b58:	82 89 d1 ff 89 e3 89 82 82 89 d1 ff 89 e3 89 82     ................
     b68:	82 89 e3 89 ff d1 89 82 82 89 e3 89 ff d1 89 82     ................
     b78:	82 89 e3 89 ff d1 89 82 82 89 e3 89 ff d1 89 82     ................
     b88:	82 89 e3 89 ff d1 89 82 82 89 e3 89 ff d1 89 82     ................
     b98:	82 89 e3 89 ff d1 89 82 82 89 e3 89 ff d1 89 82     ................
     ba8:	82 82 82 82 82 82 82 82 89 89 89 89 89 89 89 89     ................
     bb8:	d1 d1 d1 d1 d1 d1 d1 d1 ff ff ff ff ff ff ff ff     ................
     bc8:	89 89 89 89 89 89 89 89 e3 e3 e3 e3 e3 e3 e3 e3     ................
     bd8:	89 89 89 89 89 89 89 89 82 82 82 82 82 82 82 82     ................
     be8:	02 0b 13 54 54 54 03 03 55 0b 09 0b 0a 0b 02 0c     ...TTT..U.......
     bf8:	02 5d 54 0b 54 02 0c 0c 0c 0b 0c 0b 54 0b 0d 0d     .]T.T.......T...
     c08:	0c 0b 0b 0a 0a 0b 56 55 54 0c 0b 54 5d 66 0b 54     ......VUT..T]f.T
     c18:	0b 54 0b 0b 14 54 01 0b 54 0b 55 53 54 53 09 09     .T...T..T.USTS..
     c28:	0d 02 0a 5d 01 01 01 01 0c 55 0a 0a 0b 02 01 01     ...].....U......
     c38:	0b 0c 0b 13 54 02 02 01 55 0b 02 54 0b 03 03 02     ....T...U..T....
     c48:	0a 0b 0b 0a 0a 02 02 02 0a 55 0a 53 01 02 04 03     .........U.S....
     c58:	53 55 0b 0b 0a 02 03 03 54 02 0b 0a 0a 03 03 03     SU......T.......
     c68:	54 55 0b 0b 54 01 53 0a 0b 0b 55 5d 13 53 5c 53     TU..T.S...U].S\S
     c78:	0b 54 0a 53 0a 53 53 54 54 0a 53 53 0b 14 5c 0a     .T.S.SSTT.SS..\.
     c88:	55 0b 0b 0a 0c 0b 54 54 02 0b 0b 55 0c 02 54 54     U.....TT...U..TT
     c98:	0b 0b 02 54 03 0c 54 0a 0c 0d 55 02 0b 0a 53 0b     ...T..T...U...S.
     ca8:	0b 0b 5e 0a 0b 0d 03 02 0b 02 0c 0b 0b 03 0d 02     ..^.............
     cb8:	01 56 0d 0c 0b 0b 0c 02 55 0d 0c 03 0b 55 0b 0b     .V......U....U..
     cc8:	0c 03 55 02 0c 0b 02 03 4d 0b 02 02 55 0b 02 0b     ..U.....M...U...
     cd8:	0b 0c 02 0b 14 0b 0c 03 0b 0b 02 03 0b 02 02 02     ................
     ce8:	02 03 0d 03 02 0c 0b 0b 0b 0c 02 0c 0b 0b 55 54     ..............UT
     cf8:	0c 0c 0d 04 0c 02 0b 54 02 55 0d 0c 0b 55 54 0b     .......T.U...UT.
     d08:	0b 02 0d 55 02 0d 0b 0a 56 02 02 02 0c 55 0b 0a     ...U....V....U..
     d18:	0b 0b 14 0c 0c 54 54 0a 0c 02 4c 0b 0b 54 0b 54     .....TT...L..T.T
     d28:	0b 0b 03 03 03 03 03 01 02 03 0c 0c 03 0b 03 0c     ................
     d38:	5d 55 03 03 0c 0c 0b 54 54 0b 0c 0b 0b 0b 02 0a     ]U.....TT.......
     d48:	54 54 03 56 54 02 0a 0b 56 02 0c 0c 02 0a 0a 0a     TT.VT...V.......
     d58:	0a 0c 0d 02 0a 53 0a 01 55 02 03 0b 0a 53 09 01     .....S..U....S..
     d68:	0b 53 0b 0a 02 0b 0a 0b 01 0a 53 53 03 0a 0a 5d     .S........SS...]
     d78:	0a 54 0a 0a 02 01 53 53 01 01 0a 0a 0b 0b 0a 02     .T....SS........
     d88:	0a 0b 0b 5c 0b 0a 0a 0a 0a 0b 0b 0a 0b 0b 0a 01     ...\............
     d98:	02 0b 0b 0b 0a 0b 0a 0b 02 0a 0a 01 13 53 0a 0a     .............S..
     da8:	0b 02 0c 0a 0a 53 02 02 55 0e 02 0a 53 54 01 0b     .....S..U...ST..
     db8:	0b 02 03 0a 0a 01 0b 0c 02 02 0c 01 01 02 0b 02     ................
     dc8:	03 03 03 02 02 0c 02 03 0d 0c 0c 0b 02 0b 01 02     ................
     dd8:	0b 03 02 03 0a 0a 0a 54 02 03 02 03 01 0b 0b 0a     .......T........
     de8:	00 00 00 00 40 80 80 80 00 00 00 40 80 c8 c8 c8     ....@......@....
     df8:	00 00 40 80 d1 e0 e0 e0 00 40 80 d1 f0 00 00 00     ..@......@......
     e08:	40 80 d1 f0 00 00 00 00 80 c8 e0 00 00 00 f0 f0     @...............
     e18:	80 c8 e0 00 00 00 e0 00 80 c8 e0 00 00 00 00 00     ................
     e28:	80 80 40 00 00 00 00 00 c8 c8 80 40 00 00 00 00     ..@........@....
     e38:	e0 e0 d1 80 40 00 00 00 00 00 f0 d1 80 40 00 00     ....@........@..
     e48:	00 00 00 f0 d1 80 40 00 00 00 00 00 e0 c8 80 00     ......@.........
     e58:	00 00 00 00 e0 c8 80 00 00 00 00 00 e0 c8 80 00     ................
     e68:	00 00 00 00 00 00 80 80 00 00 00 00 00 80 c8 c8     ................
     e78:	00 00 00 00 80 c8 e0 e0 00 00 00 80 c8 e0 00 00     ................
     e88:	00 00 80 c8 e0 00 00 00 00 80 c8 e0 00 00 00 00     ................
     e98:	00 80 c8 e0 00 00 00 00 00 00 80 c8 e0 e0 00 00     ................
     ea8:	80 00 00 00 00 00 00 00 c8 80 00 00 00 00 00 00     ................
     eb8:	e0 c8 80 00 00 00 00 00 00 e0 c8 80 00 00 00 00     ................
     ec8:	00 e0 c8 80 00 00 00 00 00 e0 c8 80 00 00 00 00     ................
     ed8:	00 e0 c8 80 00 00 00 00 00 e0 c8 80 00 00 00 00     ................
     ee8:	00 00 00 00 80 80 80 80 00 00 00 80 c8 c8 c8 c8     ................
     ef8:	00 00 80 c8 e0 e0 e0 e0 00 80 c8 e0 00 00 00 00     ................
     f08:	80 c8 e0 00 00 00 00 00 80 c8 e0 00 00 00 f0 f0     ................
     f18:	00 80 c8 e0 e0 f0 f0 f0 00 80 c8 e0 00 00 00 00     ................
     f28:	80 80 40 00 00 00 00 00 c8 c8 80 40 00 00 00 00     ..@........@....
     f38:	e0 e0 d1 80 40 00 00 00 00 00 f0 d1 80 40 00 00     ....@........@..
     f48:	00 00 00 f0 d1 80 40 00 f0 00 00 00 e0 c8 80 00     ......@.........
     f58:	f0 00 00 00 e0 c8 80 00 00 00 00 f0 d1 80 40 00     ..............@.
     f68:	00 00 00 80 80 80 80 80 00 00 80 c8 c8 c8 c8 c8     ................
     f78:	00 80 c8 e0 e0 e0 e0 e0 80 c8 e0 00 00 00 00 00     ................
     f88:	80 c8 e0 00 00 00 00 00 40 80 d1 f0 f0 f0 f0 f0     ........@.......
     f98:	00 40 80 d1 d1 e0 00 00 00 00 80 c8 c8 e0 00 00     .@..............
     fa8:	80 80 80 80 00 00 00 00 c8 c8 c8 c8 80 00 00 00     ................
     fb8:	e0 e0 e0 e0 c8 80 00 00 00 00 00 00 e0 c8 80 00     ................
     fc8:	00 00 00 00 e0 c8 80 00 f0 00 00 00 e0 c8 80 00     ................
     fd8:	00 00 00 f0 d1 80 40 00 00 00 00 e0 c8 80 00 00     ......@.........
     fe8:	00 00 00 80 80 80 00 00 00 00 80 c8 c8 c8 80 40     ...............@
     ff8:	00 80 c8 e0 e0 e0 c8 80 80 c8 e0 00 00 00 e0 d1     ................
    1008:	80 c8 e0 00 00 00 e0 d1 80 c8 e0 00 00 00 e0 d1     ................
    1018:	80 c8 e0 00 00 00 f0 f0 80 c8 e0 00 00 00 00 00     ................
    1028:	40 80 80 40 00 00 00 00 80 c8 c8 80 40 00 00 00     @..@........@...
    1038:	d1 e0 e0 d1 80 40 00 00 f0 00 00 f0 d1 80 40 00     .....@........@.
    1048:	f0 00 00 f0 d1 80 40 00 f0 00 00 f0 d1 80 40 00     ......@.......@.
    1058:	f0 00 00 f0 d1 80 40 00 00 00 00 00 e0 c8 80 00     ......@.........
    1068:	00 00 00 80 80 80 80 80 00 00 80 c8 c8 c8 c8 c8     ................
    1078:	00 80 c8 e0 e0 e0 e0 e0 80 c8 e0 00 00 00 00 00     ................
    1088:	80 c8 e0 00 00 00 00 00 80 c8 e0 00 00 00 f0 f0     ................
    1098:	80 c8 e0 00 00 00 f0 f0 80 c8 e0 00 00 00 00 00     ................
    10a8:	80 80 80 80 00 00 00 00 c8 c8 c8 c8 80 00 00 00     ................
    10b8:	e0 e0 e0 e0 c8 80 00 00 00 00 00 00 e0 c8 80 00     ................
    10c8:	00 00 00 00 e0 c8 80 00 f0 f0 f0 f0 d1 80 40 00     ..............@.
    10d8:	f0 f0 e0 d1 80 40 00 00 00 00 00 e0 c8 80 00 00     .....@..........
    10e8:	00 00 00 00 40 80 80 80 00 00 00 40 80 c8 c8 c8     ....@......@....
    10f8:	00 00 40 80 d1 e0 e0 e0 00 40 80 d1 f0 00 00 00     ..@......@......
    1108:	40 80 d1 f0 00 00 00 00 80 c8 e0 00 00 00 f0 f0     @...............
    1118:	80 c8 e0 00 00 00 f0 f0 80 c8 e0 00 00 00 00 00     ................
    1128:	00 00 00 80 80 80 80 80 00 00 80 c8 c8 c8 c8 c8     ................
    1138:	00 80 c8 e0 e0 e0 e0 e0 80 c8 e0 00 00 00 00 00     ................
    1148:	80 c8 e0 00 00 00 00 00 40 80 d1 f0 f0 f0 f0 f0     ........@.......
    1158:	00 40 80 d1 d1 d1 d1 f0 00 00 40 80 80 d1 f0 00     .@........@.....
    1168:	80 80 80 80 00 00 00 00 c8 c8 c8 c8 80 00 00 00     ................
    1178:	e0 e0 e0 e0 c8 80 00 00 00 00 00 00 e0 c8 80 00     ................
    1188:	00 00 00 00 e0 c8 80 00 f0 00 00 00 e0 c8 80 00     ................
    1198:	00 00 00 e0 c8 80 00 00 00 00 e0 c8 80 00 00 00     ................
    11a8:	00 00 00 00 40 80 80 80 00 00 00 40 80 c8 c8 c8     ....@......@....
    11b8:	00 00 40 80 d1 e0 e0 e0 00 40 80 d1 f0 00 00 00     ..@......@......
    11c8:	40 80 d1 f0 00 00 00 00 80 c8 e0 00 00 00 f0 f0     @...............
    11d8:	80 c8 e0 00 00 00 f0 f0 00 80 c8 e0 00 00 00 00     ................
    11e8:	80 80 40 00 00 00 00 00 c8 c8 80 40 00 00 00 00     ..@........@....
    11f8:	e0 e0 d1 80 40 00 00 00 00 00 f0 d1 80 40 00 00     ....@........@..
    1208:	00 00 00 f0 d1 80 40 00 f0 00 00 00 e0 c8 80 00     ......@.........
    1218:	f0 00 00 00 e0 c8 80 00 00 00 00 e0 c8 80 00 00     ................
    1228:	00 00 00 00 40 80 80 80 00 00 00 40 80 c8 c8 c8     ....@......@....
    1238:	00 00 40 80 d1 e0 e0 e0 00 40 80 d1 f0 00 00 00     ..@......@......
    1248:	40 80 d1 f0 00 00 00 00 80 c8 e0 00 00 00 f0 f0     @...............
    1258:	80 c8 e0 00 00 00 f0 f0 40 80 d1 f0 00 00 00 00     ........@.......
    1268:	80 80 40 00 00 00 00 00 c8 c8 80 40 00 00 00 00     ..@........@....
    1278:	e0 e0 d1 80 40 00 00 00 00 00 f0 d1 80 40 00 00     ....@........@..
    1288:	00 00 00 f0 d1 80 40 00 f0 00 00 00 e0 c8 80 00     ......@.........
    1298:	f0 00 00 00 e0 c8 80 00 00 00 00 00 e0 c8 80 00     ................
    12a8:	80 c8 e0 00 00 00 00 00 80 c8 e0 00 00 00 00 f0     ................
    12b8:	80 c8 e0 00 00 00 00 00 00 80 c8 e0 00 00 00 00     ................
    12c8:	00 00 80 c8 e0 f0 f0 f0 00 00 00 80 c8 d1 d1 d1     ................
    12d8:	00 00 00 00 80 80 80 80 00 00 00 00 00 40 40 40     .............@@@
    12e8:	f0 00 00 00 e0 c8 80 00 e0 00 00 00 e0 c8 80 00     ................
    12f8:	00 00 00 00 e0 c8 80 00 00 00 00 e0 c8 80 00 00     ................
    1308:	f0 f0 e0 c8 80 00 00 00 d1 d1 c8 80 00 00 00 00     ................
    1318:	80 80 80 00 00 00 00 00 40 40 00 00 00 00 00 00     ........@@......
    1328:	00 00 00 80 c8 e0 00 00 00 00 80 c8 e0 e0 00 00     ................
    1338:	00 80 c8 e0 00 00 00 00 00 80 c8 e0 00 00 00 00     ................
    1348:	00 40 80 d1 f0 f0 f0 f0 00 00 40 80 d1 d1 d1 d1     .@........@.....
    1358:	00 00 00 40 80 80 80 80 00 00 00 00 40 40 40 40     ...@........@@@@
    1368:	00 e0 c8 80 00 00 00 00 00 e0 e0 c8 80 00 00 00     ................
    1378:	00 00 00 e0 c8 80 00 00 00 00 00 e0 c8 80 00 00     ................
    1388:	f0 f0 f0 d1 80 40 00 00 d1 d1 d1 80 40 00 00 00     .....@......@...
    1398:	80 80 80 40 00 00 00 00 40 40 40 00 00 00 00 00     ...@....@@@.....
    13a8:	80 c8 e0 00 00 00 00 00 80 c8 e0 00 00 00 e0 e0     ................
    13b8:	80 c8 e0 00 00 00 00 00 80 c8 e0 00 00 00 00 00     ................
    13c8:	40 80 d1 f0 f0 f0 f0 f0 00 40 80 d1 d1 d1 d1 d1     @........@......
    13d8:	00 00 40 80 80 80 80 80 00 00 00 40 40 40 40 40     ..@........@@@@@
    13e8:	00 00 f0 d1 80 40 00 00 e0 e0 e0 e0 c8 80 00 00     .....@..........
    13f8:	00 00 00 00 e0 c8 80 00 00 00 00 00 e0 c8 80 00     ................
    1408:	f0 f0 f0 f0 d1 80 40 00 d1 d1 d1 d1 80 40 00 00     ......@......@..
    1418:	80 80 80 80 40 00 00 00 40 40 40 40 00 00 00 00     ....@...@@@@....
    1428:	00 80 c8 e0 e0 d1 f0 f0 80 c8 e0 00 00 f0 e0 e0     ................
    1438:	80 c8 e0 00 00 00 00 00 40 80 d1 f0 00 00 00 00     ........@.......
    1448:	00 40 80 d1 f0 f0 f0 f0 00 00 40 80 d1 d1 d1 d1     .@........@.....
    1458:	00 00 00 40 80 80 80 80 00 00 00 00 40 40 40 40     ...@........@@@@
    1468:	80 c8 e0 00 00 00 00 00 00 80 c8 e0 e0 e0 e0 e0     ................
    1478:	00 00 80 c8 c8 c8 c8 d1 00 00 00 80 80 80 80 d1     ................
    1488:	00 00 00 00 00 00 80 c8 00 00 00 00 00 00 00 80     ................
	...
    14ac:	e0 c8 80 00 f0 00 00 f0 d1 80 40 00 f0 00 00 f0     ..........@.....
    14bc:	d1 80 40 00 f0 00 00 f0 d1 80 40 00 e0 f0 f0 e0     ..@.......@.....
    14cc:	c8 80 00 00 c8 d1 d1 c8 80 00 00 00 80 80 80 80     ................
    14dc:	00 00 00 00 00 40 40 00 00 00 00 00 80 c8 e0 00     .....@@.........
    14ec:	00 00 00 00 00 80 c8 e0 e0 e0 e0 e0 80 c8 e0 00     ................
    14fc:	00 00 00 00 80 c8 e0 00 00 00 00 00 40 80 d1 f0     ............@...
    150c:	f0 f0 f0 f0 00 40 80 d1 d1 d1 d1 d1 00 00 40 80     .....@........@.
    151c:	80 80 80 80 00 00 00 40 40 40 40 40 00 00 00 00     .......@@@@@....
    152c:	e0 c8 80 00 e0 00 00 00 e0 c8 80 00 00 00 00 00     ................
    153c:	e0 c8 80 00 00 00 00 e0 c8 80 00 00 f0 f0 e0 c8     ................
    154c:	80 00 00 00 d1 d1 c8 80 00 00 00 00 80 80 80 00     ................
    155c:	00 00 00 00 40 40 00 00 00 00 00 00 80 c8 e0 00     ....@@..........
    156c:	00 00 00 00 80 c8 e0 00 00 00 e0 e0 80 c8 e0 00     ................
    157c:	00 00 00 00 00 80 c8 e0 00 00 00 00 00 00 80 c8     ................
    158c:	e0 f0 f0 f0 00 00 00 80 c8 d1 d1 d1 00 00 00 00     ................
    159c:	80 80 80 80 00 00 00 00 00 40 40 40 00 00 00 80     .........@@@....
    15ac:	c8 e0 00 00 00 00 00 80 c8 e0 00 00 00 00 00 80     ................
    15bc:	c8 e0 00 00 00 00 00 80 c8 e0 00 00 00 00 00 40     ...............@
    15cc:	80 d1 f0 f0 00 00 00 00 40 80 d1 d1 00 00 00 00     ........@.......
    15dc:	00 40 80 80 00 00 00 00 00 00 40 40 00 e0 c8 80     .@........@@....
    15ec:	00 00 00 00 00 e0 c8 80 00 00 00 00 00 e0 c8 80     ................
    15fc:	00 00 00 00 00 e0 c8 80 00 00 00 00 f0 d1 80 40     ...............@
    160c:	00 00 00 00 d1 80 40 00 00 00 00 00 80 40 00 00     ......@......@..
    161c:	00 00 00 00 40 00 00 00 00 00 00 00 40 80 d1 f0     ....@.......@...
    162c:	00 00 00 00 80 c8 e0 00 00 00 e0 e0 80 c8 e0 00     ................
    163c:	00 00 00 00 00 80 c8 e0 00 00 00 00 00 00 80 c8     ................
    164c:	e0 f0 f0 f0 00 00 00 80 c8 d1 d1 d1 00 00 00 00     ................
    165c:	80 80 80 80 00 00 00 00 00 40 40 40 00 00 00 f0     .........@@@....
    166c:	d1 80 40 00 e0 00 00 00 e0 c8 80 00 00 00 00 00     ..@.............
    167c:	e0 c8 80 00 00 00 00 e0 c8 80 00 00 f0 f0 e0 c8     ................
    168c:	80 00 00 00 d1 d1 c8 80 00 00 00 00 80 80 80 00     ................
    169c:	00 00 00 00 40 40 00 00 00 00 00 00 00 40 80 d1     ....@@.......@..
    16ac:	f0 00 00 00 00 80 c8 e0 e0 e0 e0 e0 80 c8 e0 00     ................
    16bc:	00 00 00 00 80 c8 e0 00 00 00 00 00 40 80 d1 f0     ............@...
    16cc:	f0 f0 f0 f0 00 40 80 d1 d1 d1 d1 d1 00 00 40 80     .....@........@.
    16dc:	80 80 80 80 00 00 00 40 40 40 40 40 00 00 00 00     .......@@@@@....
    16ec:	40 80 80 80 00 00 00 40 80 c8 c8 c8 00 00 40 80     @......@......@.
    16fc:	d1 e0 e0 e0 00 40 80 d1 f0 00 00 00 40 80 d1 f0     .....@......@...
    170c:	00 00 00 00 80 c8 e0 00 00 00 f0 f0 80 c8 e0 00     ................
    171c:	00 00 e0 d1 80 c8 e0 00 00 00 e0 c8 80 80 80 80     ................
    172c:	00 00 00 00 c8 c8 c8 c8 80 00 00 00 e0 e0 e0 e0     ................
    173c:	c8 80 00 00 00 00 00 00 e0 c8 80 00 00 00 00 00     ................
    174c:	e0 c8 80 00 f0 f0 f0 f0 d1 80 40 00 d1 d1 d1 d1     ..........@.....
    175c:	80 40 00 00 80 80 80 80 40 00 00 00 00 00 00 80     .@......@.......
    176c:	80 80 80 80 00 00 80 c8 c8 c8 c8 c8 00 80 c8 e0     ................
    177c:	e0 e0 e0 e0 80 c8 e0 00 00 00 00 00 80 c8 e0 00     ................
    178c:	00 00 00 00 80 c8 e0 00 00 00 f0 f0 80 c8 e0 00     ................
    179c:	00 00 e0 d1 80 c8 e0 00 00 00 e0 c8 80 80 40 00     ..............@.
    17ac:	00 00 00 00 c8 c8 80 40 00 00 00 00 e0 e0 d1 80     .......@........
    17bc:	40 00 00 00 00 00 f0 d1 80 40 00 00 00 00 00 f0     @........@......
    17cc:	d1 80 40 00 f0 00 00 00 e0 c8 80 00 e0 00 00 00     ..@.............
    17dc:	e0 c8 80 00 e0 00 00 00 e0 c8 80 00 80 80 80 80     ................
    17ec:	00 00 00 00 c8 c8 c8 c8 80 00 00 00 e0 e0 e0 e0     ................
    17fc:	c8 80 00 00 00 00 00 00 e0 c8 80 00 00 00 00 00     ................
    180c:	e0 c8 80 00 f0 f0 f0 f0 d1 80 40 00 f0 f0 f0 d1     ..........@.....
    181c:	80 40 00 00 00 00 00 e0 c8 80 00 00 00 00 00 00     .@..............
    182c:	40 80 80 80 00 00 00 40 80 c8 c8 c8 00 00 40 80     @......@......@.
    183c:	d1 e0 e0 e0 00 40 80 d1 f0 00 00 00 40 80 d1 f0     .....@......@...
    184c:	00 00 00 00 80 c8 e0 00 00 00 f0 f0 80 c8 e0 00     ................
    185c:	00 00 e0 e0 80 c8 e0 00 00 00 e0 f0 80 80 80 80     ................
    186c:	00 00 00 00 c8 c8 c8 c8 80 00 00 00 e0 e0 e0 e0     ................
    187c:	c8 80 00 00 00 00 00 00 e0 c8 80 00 00 00 00 00     ................
    188c:	e0 c8 80 00 f0 f0 f0 f0 d1 80 40 00 f0 f0 f0 f0     ..........@.....
    189c:	d1 80 40 00 00 00 00 00 e0 c8 80 00 00 00 00 80     ..@.............
    18ac:	80 80 00 00 00 00 80 c8 c8 c8 80 00 00 80 c8 e0     ................
    18bc:	e0 e0 c8 80 80 c8 e0 00 00 00 e0 c8 80 c8 e0 00     ................
    18cc:	00 00 e0 c8 80 c8 e0 00 00 00 e0 d1 80 c8 e0 00     ................
    18dc:	00 00 f0 f0 80 c8 e0 00 00 00 00 00 00 80 80 80     ................
    18ec:	00 00 00 00 80 c8 c8 c8 80 00 00 00 c8 e0 e0 e0     ................
    18fc:	c8 80 00 00 e0 00 00 00 e0 c8 80 00 e0 00 00 00     ................
    190c:	e0 c8 80 00 e0 00 00 00 e0 c8 80 00 f0 00 00 00     ................
    191c:	e0 c8 80 00 00 00 00 00 e0 c8 80 00 00 00 00 40     ...............@
    192c:	80 80 80 80 00 00 40 80 c8 c8 c8 c8 00 40 80 d1     ......@......@..
    193c:	e0 e0 e0 e0 40 80 d1 f0 00 00 00 00 40 80 d1 f0     ....@.......@...
    194c:	00 00 00 00 00 80 c8 e0 f0 f0 00 00 00 00 80 c8     ................
    195c:	d1 e0 00 00 00 00 00 80 c8 e0 00 00 80 80 80 40     ...............@
    196c:	00 00 00 00 c8 c8 c8 80 40 00 00 00 e0 e0 e0 d1     ........@.......
    197c:	80 40 00 00 00 00 00 f0 d1 80 40 00 00 00 00 f0     .@........@.....
    198c:	d1 80 40 00 00 f0 f0 e0 c8 80 00 00 00 e0 d1 c8     ..@.............
    199c:	80 00 00 00 00 e0 c8 80 00 00 00 00 00 00 00 00     ................
	...
    19bc:	00 00 00 80 00 00 00 00 00 00 80 c8 00 00 00 00     ................
    19cc:	00 00 80 c8 00 00 00 40 40 40 80 c8 00 00 40 80     .......@@@....@.
    19dc:	80 80 80 c8 00 40 80 d1 d1 d1 80 c8 00 80 80 80     .....@..........
    19ec:	00 00 00 00 80 c8 c8 c8 80 00 00 00 c8 e0 e0 e0     ................
    19fc:	c8 80 00 00 e0 00 00 00 e0 c8 80 00 e0 00 00 00     ................
    1a0c:	e0 c8 80 00 e0 00 00 00 e0 c8 80 00 e0 00 00 00     ................
    1a1c:	e0 c8 80 00 e0 00 00 00 e0 c8 80 00 80 c8 e0 00     ................
    1a2c:	00 00 00 00 80 c8 e0 00 00 00 e0 e0 80 c8 e0 00     ................
    1a3c:	00 00 e0 c8 80 c8 e0 00 00 00 e0 c8 40 80 d1 f0     ............@...
    1a4c:	f0 f0 d1 80 00 40 80 d1 d1 d1 80 40 00 00 40 80     .....@.....@..@.
    1a5c:	80 80 40 00 00 00 00 40 40 40 00 00 00 00 00 00     ..@....@@@......
    1a6c:	e0 c8 80 00 e0 00 00 00 e0 c8 80 00 e0 00 00 00     ................
    1a7c:	e0 c8 80 00 e0 00 00 00 e0 c8 80 00 d1 f0 f0 f0     ................
    1a8c:	d1 80 40 00 80 d1 d1 d1 80 40 00 00 40 80 80 80     ..@......@..@...
    1a9c:	40 00 00 00 00 40 40 40 00 00 00 00 80 c8 e0 00     @....@@@........
    1aac:	00 00 e0 c8 80 c8 e0 00 00 00 e0 e0 80 c8 e0 00     ................
    1abc:	00 00 00 00 00 80 c8 e0 00 00 00 00 00 00 80 c8     ................
    1acc:	e0 f0 f0 f0 00 00 00 80 c8 d1 d1 d1 00 00 00 00     ................
    1adc:	80 80 80 80 00 00 00 00 00 40 40 40 c8 c8 c8 c8     .........@@@....
    1aec:	80 00 00 00 e0 e0 e0 e0 c8 80 00 00 00 00 00 00     ................
    1afc:	e0 c8 80 00 00 00 00 00 e0 c8 80 00 f0 f0 f0 f0     ................
    1b0c:	d1 80 40 00 d1 d1 d1 d1 80 40 00 00 80 80 80 80     ..@......@......
    1b1c:	40 00 00 00 40 40 40 40 00 00 00 00 80 c8 e0 00     @...@@@@........
    1b2c:	00 00 e0 c8 80 c8 e0 00 00 00 e0 e0 80 c8 e0 00     ................
    1b3c:	00 00 00 00 80 c8 e0 00 00 00 00 00 40 80 d1 f0     ............@...
    1b4c:	f0 f0 f0 f0 00 40 80 d1 d1 d1 d1 d1 00 00 40 80     .....@........@.
    1b5c:	80 80 80 80 00 00 00 40 40 40 40 40 e0 00 00 00     .......@@@@@....
    1b6c:	e0 c8 80 00 e0 00 00 00 e0 c8 80 00 00 00 00 00     ................
    1b7c:	e0 c8 80 00 00 00 00 e0 c8 80 00 00 f0 f0 e0 c8     ................
    1b8c:	80 00 00 00 d1 d1 c8 80 00 00 00 00 80 80 80 00     ................
    1b9c:	00 00 00 00 40 40 00 00 00 00 00 00 00 00 00 e0     ....@@..........
    1bac:	c8 80 00 00 e0 e0 e0 e0 c8 80 00 00 00 00 00 00     ................
    1bbc:	e0 c8 80 00 00 00 00 00 e0 c8 80 00 f0 f0 f0 f0     ................
    1bcc:	d1 80 40 00 d1 d1 d1 d1 80 40 00 00 80 80 80 80     ..@......@......
    1bdc:	40 00 00 00 40 40 40 40 00 00 00 00 00 00 00 e0     @...@@@@........
    1bec:	c8 80 00 00 e0 e0 e0 c8 80 00 00 00 c8 c8 c8 80     ................
    1bfc:	00 00 00 00 80 80 80 00 00 00 00 00 40 00 00 00     ............@...
	...
    1c28:	80 c8 e0 00 00 00 e0 f0 80 c8 e0 00 00 00 e0 e0     ................
    1c38:	80 c8 e0 00 00 00 00 00 00 80 c8 e0 00 00 00 00     ................
    1c48:	00 00 80 c8 e0 f0 f0 f0 00 00 00 80 c8 d1 d1 d1     ................
    1c58:	00 00 00 00 80 80 80 80 00 00 00 00 00 40 40 40     .............@@@
    1c68:	00 00 00 00 e0 c8 80 00 e0 00 00 00 e0 c8 80 00     ................
    1c78:	00 00 00 00 e0 c8 80 00 00 00 00 00 e0 c8 80 00     ................
    1c88:	f0 f0 f0 f0 d1 80 40 00 d1 d1 d1 d1 80 40 00 00     ......@......@..
    1c98:	80 80 80 80 40 00 00 00 40 40 40 40 00 00 00 00     ....@...@@@@....
    1ca8:	00 00 40 80 c8 e0 00 00 00 40 80 d1 e0 e0 00 00     ..@......@......
    1cb8:	40 80 d1 f0 00 00 00 00 40 80 d1 f0 00 00 00 00     @.......@.......
    1cc8:	00 80 c8 e0 f0 f0 f0 f0 00 00 80 c8 d1 d1 d1 d1     ................
    1cd8:	00 00 00 80 80 80 80 80 00 00 00 00 40 40 40 40     ............@@@@
    1ce8:	00 e0 c8 80 40 00 00 00 00 e0 e0 d1 80 40 00 00     ....@........@..
    1cf8:	00 00 00 f0 d1 80 40 00 00 00 00 f0 d1 80 40 00     ......@.......@.
    1d08:	f0 f0 f0 e0 c8 80 00 00 d1 d1 d1 c8 80 00 00 00     ................
    1d18:	80 80 80 80 00 00 00 00 40 40 40 00 00 00 00 00     ........@@@.....
    1d28:	40 80 d1 f0 f0 f0 d1 c8 80 c8 e0 00 00 00 e0 e0     @...............
    1d38:	80 c8 e0 00 00 00 00 00 00 80 c8 e0 00 00 00 00     ................
    1d48:	00 00 80 c8 e0 f0 f0 f0 00 00 00 80 c8 d1 d1 d1     ................
    1d58:	00 00 00 00 80 80 80 80 00 00 00 00 00 40 40 40     .............@@@
    1d68:	00 00 00 80 80 80 00 00 00 00 80 c8 c8 c8 80 00     ................
    1d78:	00 80 c8 e0 e0 e0 c8 80 80 c8 e0 00 00 00 e0 c8     ................
    1d88:	80 c8 e0 00 00 00 e0 e0 80 c8 e0 00 00 00 e0 00     ................
    1d98:	80 c8 e0 00 00 00 00 00 80 c8 e0 00 00 00 00 00     ................
    1da8:	00 80 80 80 00 00 00 00 80 c8 c8 c8 80 00 00 00     ................
    1db8:	c8 e0 e0 e0 c8 80 00 00 e0 00 00 00 e0 c8 80 00     ................
    1dc8:	00 00 00 f0 d1 80 40 00 00 00 f0 d1 80 40 00 00     ......@......@..
    1dd8:	00 f0 d1 80 40 00 00 00 f0 d1 80 40 00 00 00 00     ....@......@....
    1de8:	00 00 00 80 80 80 00 00 00 00 80 c8 c8 c8 80 00     ................
    1df8:	00 80 c8 e0 e0 e0 c8 80 80 c8 e0 00 00 00 e0 c8     ................
    1e08:	80 c8 e0 00 00 00 e0 c8 80 c8 e0 00 00 00 e0 c8     ................
    1e18:	80 c8 e0 00 00 00 e0 c8 80 c8 e0 00 00 00 e0 c8     ................
	...
    1e40:	80 00 00 00 00 00 00 00 80 00 00 00 00 00 00 00     ................
    1e50:	80 00 00 00 00 00 00 00 80 00 00 00 00 00 00 00     ................
    1e60:	80 80 80 80 00 00 00 00 00 00 00 80 80 80 00 00     ................
    1e70:	00 00 80 c8 c8 c8 80 00 00 80 c8 e0 e0 e0 c8 80     ................
    1e80:	80 c8 e0 00 00 00 e0 c8 80 c8 e0 00 00 00 00 e0     ................
    1e90:	80 c8 e0 00 00 00 00 00 80 c8 e0 00 00 00 00 00     ................
    1ea0:	80 c8 e0 00 00 00 f0 00 00 80 80 80 00 00 00 00     ................
    1eb0:	80 c8 c8 c8 80 00 00 00 c8 e0 e0 e0 c8 80 00 00     ................
    1ec0:	e0 00 00 00 e0 c8 80 00 00 00 00 00 e0 c8 80 00     ................
    1ed0:	00 00 00 00 e0 c8 80 00 00 00 00 00 e0 c8 80 00     ................
    1ee0:	f0 00 00 00 e0 c8 80 00 00 80 80 80 00 00 00 00     ................
    1ef0:	80 c8 c8 c8 80 00 00 00 c8 e0 e0 e0 c8 80 00 00     ................
    1f00:	e0 00 00 00 e0 c8 80 00 e0 00 00 00 e0 c8 80 00     ................
    1f10:	e0 00 00 00 e0 c8 80 00 00 00 00 00 e0 c8 80 00     ................
    1f20:	00 00 00 00 e0 c8 80 00 80 80 80 00 00 00 00 00     ................
    1f30:	c8 c8 c8 80 00 00 00 00 e0 e0 e0 c8 80 00 00 00     ................
    1f40:	00 00 00 e0 c8 80 00 00 00 00 00 00 e0 c8 80 00     ................
    1f50:	f0 00 00 00 e0 c8 80 00 f0 f0 e0 e0 c8 80 00 00     ................
    1f60:	00 00 00 e0 c8 80 00 00 00 00 00 80 80 80 80 80     ................
    1f70:	00 00 80 c8 c8 c8 c8 c8 00 80 c8 e0 e0 e0 e0 e0     ................
    1f80:	80 c8 e0 00 00 00 00 00 80 c8 e0 00 00 00 00 00     ................
    1f90:	40 80 d1 f0 f0 f0 00 00 00 40 80 d1 d1 e0 00 00     @........@......
    1fa0:	00 00 40 80 c8 e0 00 00 80 80 80 80 00 00 00 00     ..@.............
    1fb0:	c8 c8 c8 c8 80 00 00 00 e0 e0 e0 e0 c8 80 00 00     ................
    1fc0:	00 00 00 00 e0 c8 80 00 00 00 00 00 e0 c8 80 00     ................
    1fd0:	00 f0 f0 f0 d1 80 40 00 00 e0 d1 d1 80 40 00 00     ......@......@..
    1fe0:	00 e0 c8 80 40 00 00 00 80 c8 e0 00 00 00 00 00     ....@...........
    1ff0:	80 c8 e0 00 00 00 f0 00 80 c8 e0 00 00 00 e0 f0     ................
    2000:	80 c8 e0 00 00 00 e0 d1 40 80 d1 f0 f0 f0 d1 80     ........@.......
    2010:	00 40 80 d1 d1 d1 80 40 00 00 40 80 80 80 40 00     .@.....@..@...@.
    2020:	00 00 00 40 40 40 00 00 00 e0 c8 80 00 00 00 00     ...@@@..........
    2030:	00 00 e0 c8 80 00 00 00 00 00 00 e0 c8 80 00 00     ................
    2040:	f0 00 00 00 e0 c8 80 00 d1 f0 f0 f0 d1 80 40 00     ..............@.
    2050:	80 d1 d1 d1 80 40 00 00 40 80 80 80 40 00 00 00     .....@..@...@...
    2060:	00 40 40 40 00 00 00 00 80 c8 e0 00 00 00 e0 f0     .@@@............
    2070:	80 c8 e0 00 00 00 e0 d1 80 c8 e0 00 00 00 e0 c8     ................
    2080:	80 c8 e0 00 00 00 e0 c8 40 80 d1 f0 f0 f0 d1 80     ........@.......
    2090:	00 40 80 d1 d1 d1 80 40 00 00 40 80 80 80 40 00     .@.....@..@...@.
    20a0:	00 00 00 40 40 40 00 00 e0 00 00 00 e0 c8 80 00     ...@@@..........
    20b0:	e0 00 00 00 e0 c8 80 00 e0 00 00 00 e0 c8 80 00     ................
    20c0:	e0 00 00 00 e0 c8 80 00 d1 f0 f0 f0 d1 80 40 00     ..............@.
    20d0:	80 d1 d1 d1 80 40 00 00 40 80 80 80 40 00 00 00     .....@..@...@...
    20e0:	00 40 40 40 00 00 00 00 00 00 00 00 e0 c8 80 00     .@@@............
    20f0:	f0 00 00 00 e0 c8 80 00 e0 00 00 00 e0 c8 80 00     ................
    2100:	e0 00 00 00 e0 c8 80 00 d1 f0 f0 f0 d1 80 40 00     ..............@.
    2110:	80 d1 d1 d1 80 40 00 00 40 80 80 80 40 00 00 00     .....@..@...@...
    2120:	00 40 40 40 00 00 00 00 00 00 f0 d1 80 40 00 00     .@@@.........@..
    2130:	e0 e0 d1 80 40 00 00 00 c8 c8 80 40 00 00 00 00     ....@......@....
    2140:	80 80 40 00 00 00 00 00 40 00 00 00 00 00 00 00     ..@.....@.......
	...
    2168:	80 c8 e0 00 00 00 e0 e0 80 c8 e0 00 00 00 e0 f0     ................
    2178:	80 c8 e0 00 00 00 00 00 00 80 c8 e0 00 00 00 00     ................
    2188:	00 00 80 c8 e0 f0 f0 f0 00 00 00 80 c8 d1 d1 d1     ................
    2198:	00 00 00 00 80 80 80 80 00 00 00 00 00 40 40 40     .............@@@
    21a8:	f0 00 00 00 e0 c8 80 00 00 00 00 00 e0 c8 80 00     ................
    21b8:	00 00 00 00 e0 c8 80 00 00 00 00 00 e0 c8 80 00     ................
    21c8:	f0 f0 f0 f0 d1 80 40 00 d1 d1 d1 d1 80 40 00 00     ......@......@..
    21d8:	80 80 80 80 40 00 00 00 40 40 40 40 00 00 00 00     ....@...@@@@....
    21e8:	00 00 f0 d1 80 40 00 00 00 00 e0 c8 80 00 00 00     .....@..........
    21f8:	00 00 00 e0 c8 80 00 00 f0 00 00 00 e0 c8 80 00     ................
    2208:	d1 f0 f0 f0 d1 80 40 00 80 d1 d1 d1 80 40 00 00     ......@......@..
    2218:	40 80 80 80 40 00 00 00 00 40 40 40 00 00 00 00     @...@....@@@....
    2228:	00 40 80 d1 f0 00 00 00 40 80 d1 f0 f0 f0 e0 e0     .@......@.......
    2238:	80 c8 e0 00 00 00 00 00 40 80 d1 f0 00 00 00 00     ........@.......
    2248:	00 40 80 d1 f0 f0 f0 f0 00 00 40 80 d1 d1 d1 d1     .@........@.....
    2258:	00 00 00 40 80 80 80 80 00 00 00 00 40 40 40 40     ...@........@@@@
    2268:	00 00 00 80 80 80 00 00 00 00 80 c8 c8 c8 80 00     ................
    2278:	00 80 c8 e0 e0 e0 c8 80 80 c8 e0 00 00 00 e0 c8     ................
    2288:	80 c8 e0 00 00 00 e0 c8 80 c8 e0 00 00 00 e0 c8     ................
    2298:	80 c8 e0 00 00 00 e0 e0 80 c8 e0 00 00 00 e0 00     ................
    22a8:	00 00 00 80 80 00 00 00 00 00 80 c8 c8 80 00 00     ................
    22b8:	00 80 c8 e0 e0 c8 80 00 80 c8 e0 00 00 e0 c8 80     ................
    22c8:	80 c8 e0 00 00 00 e0 c8 40 80 d1 f0 00 00 00 e0     ........@.......
    22d8:	00 40 80 d1 f0 00 00 00 00 00 40 80 d1 f0 00 00     .@........@.....
    22e8:	00 00 80 80 00 00 00 00 00 80 c8 c8 80 00 00 00     ................
    22f8:	80 c8 e0 e0 c8 80 00 00 c8 e0 00 00 e0 c8 80 00     ................
    2308:	e0 00 00 00 e0 c8 80 00 00 00 00 f0 d1 80 40 00     ..............@.
    2318:	00 00 f0 d1 80 40 00 00 00 f0 d1 80 40 00 00 00     .....@......@...
    2328:	00 00 00 80 80 40 00 00 00 00 80 c8 c8 80 40 00     .....@........@.
    2338:	00 80 c8 e0 e0 d1 80 40 80 c8 e0 00 00 f0 d1 80     .......@........
    2348:	80 c8 e0 00 00 00 f0 d1 00 80 c8 e0 00 00 00 f0     ................
    2358:	00 00 80 c8 e0 00 00 00 00 00 00 80 c8 e0 00 00     ................
    2368:	00 40 80 80 00 00 00 00 40 80 c8 c8 80 00 00 00     .@......@.......
    2378:	80 d1 e0 e0 c8 80 00 00 d1 f0 00 00 e0 c8 80 00     ................
    2388:	f0 00 00 00 e0 c8 80 00 00 00 00 e0 c8 80 00 00     ................
    2398:	00 00 e0 c8 80 00 00 00 00 e0 c8 80 00 00 00 00     ................
    23a8:	00 00 00 80 80 80 80 80 00 00 80 c8 c8 c8 c8 c8     ................
    23b8:	00 80 c8 e0 e0 e0 e0 e0 80 c8 e0 00 00 00 00 00     ................
    23c8:	80 c8 e0 00 00 00 00 00 40 80 d1 f0 f0 f0 f0 f0     ........@.......
    23d8:	00 40 80 d1 d1 d1 e0 00 00 00 40 80 c8 e0 00 00     .@........@.....
    23e8:	80 80 80 80 00 00 00 00 c8 c8 c8 c8 80 00 00 00     ................
    23f8:	e0 e0 e0 e0 c8 80 00 00 00 00 00 00 e0 c8 80 00     ................
    2408:	00 00 00 00 e0 c8 80 00 00 00 00 f0 d1 80 40 00     ..............@.
    2418:	00 00 f0 d1 80 40 00 00 00 f0 d1 80 40 00 00 00     .....@......@...
    2428:	00 00 00 00 00 00 80 80 00 00 00 00 00 80 c8 c8     ................
    2438:	00 00 00 00 80 c8 e0 e0 00 00 00 80 c8 e0 00 00     ................
    2448:	00 00 00 80 c8 e0 00 00 00 00 00 80 c8 e0 00 00     ................
    2458:	00 00 00 80 c8 e0 00 00 00 00 00 80 c8 e0 00 00     ................
    2468:	00 00 00 00 00 00 40 80 00 00 00 00 00 40 80 c8     ......@......@..
    2478:	00 00 00 00 40 80 d1 e0 00 00 00 40 80 d1 f0 00     ....@......@....
    2488:	00 00 40 80 d1 f0 00 00 00 00 40 80 d1 f0 00 00     ..@.......@.....
    2498:	00 00 40 80 d1 f0 00 00 00 00 40 80 d1 f0 00 00     ..@.......@.....
    24a8:	80 80 00 00 00 00 00 00 c8 c8 80 00 00 00 00 00     ................
    24b8:	e0 e0 c8 80 00 00 00 00 00 00 e0 c8 80 00 00 00     ................
    24c8:	00 00 e0 c8 80 00 00 00 f0 f0 d1 80 40 00 00 00     ............@...
    24d8:	f0 d1 80 40 00 00 00 00 f0 d1 80 40 00 00 00 00     ...@.......@....
    24e8:	00 00 00 00 80 80 80 80 00 00 00 80 c8 c8 c8 c8     ................
    24f8:	00 00 80 c8 e0 e0 e0 e0 00 80 c8 e0 00 00 00 00     ................
    2508:	80 c8 e0 00 00 00 00 00 80 c8 e0 00 00 00 f0 f0     ................
    2518:	00 80 c8 e0 e0 e0 e0 f0 00 00 80 c8 c8 e0 00 00     ................
    2528:	00 00 00 00 00 80 80 80 00 00 00 00 80 c8 c8 c8     ................
    2538:	00 00 00 80 c8 e0 e0 e0 00 00 80 c8 e0 00 00 00     ................
    2548:	00 00 80 c8 e0 00 00 00 00 00 40 80 d1 f0 f0 00     ..........@.....
    2558:	00 00 00 40 80 d1 f0 00 00 00 00 40 80 d1 f0 00     ...@.......@....
    2568:	40 00 00 00 00 00 00 00 80 40 00 00 00 00 00 00     @........@......
    2578:	d1 80 40 00 00 00 00 00 f0 d1 80 40 00 00 00 00     ..@........@....
    2588:	00 f0 d1 80 40 00 00 00 00 f0 d1 80 40 00 00 00     ....@.......@...
    2598:	00 f0 d1 80 40 00 00 00 00 f0 d1 80 40 00 00 00     ....@.......@...
    25a8:	80 c8 e0 00 00 00 e0 c8 40 80 d1 f0 00 00 00 e0     ........@.......
    25b8:	00 40 80 d1 f0 00 00 00 00 00 40 80 d1 f0 00 00     .@........@.....
    25c8:	00 00 00 40 80 d1 f0 f0 00 00 00 00 40 80 d1 d1     ...@........@...
    25d8:	00 00 00 00 00 40 80 80 00 00 00 00 00 00 40 40     .....@........@@
    25e8:	e0 00 00 00 e0 c8 80 00 00 00 00 f0 d1 80 40 00     ..............@.
    25f8:	00 00 f0 d1 80 40 00 00 00 f0 d1 80 40 00 00 00     .....@......@...
    2608:	f0 d1 80 40 00 00 00 00 d1 80 40 00 00 00 00 00     ...@......@.....
    2618:	80 40 00 00 00 00 00 00 40 00 00 00 00 00 00 00     .@......@.......
    2628:	80 c8 e0 00 00 00 00 00 80 c8 e0 00 00 00 00 00     ................
    2638:	80 c8 e0 00 00 00 00 f0 80 c8 e0 00 00 00 f0 d1     ................
    2648:	40 80 d1 f0 f0 f0 d1 80 00 40 80 d1 d1 d1 80 40     @........@.....@
    2658:	00 00 40 80 80 80 40 00 00 00 00 40 40 40 00 00     ..@...@....@@@..
    2668:	00 00 00 00 e0 c8 80 00 00 00 00 00 e0 c8 80 00     ................
    2678:	00 00 00 00 e0 c8 80 00 f0 00 00 00 e0 c8 80 00     ................
    2688:	d1 f0 f0 f0 d1 80 40 00 80 d1 d1 d1 80 40 00 00     ......@......@..
    2698:	40 80 80 80 40 00 00 00 00 40 40 40 00 00 00 00     @...@....@@@....
    26a8:	00 00 80 c8 e0 00 00 00 00 80 c8 e0 00 00 00 f0     ................
    26b8:	80 c8 e0 00 00 00 f0 d1 80 c8 e0 00 00 f0 d1 80     ................
    26c8:	40 80 d1 f0 f0 d1 80 40 00 40 80 d1 d1 80 40 00     @......@.@....@.
    26d8:	00 00 40 80 80 40 00 00 00 00 00 40 40 00 00 00     ..@..@.....@@...
    26e8:	00 00 e0 c8 80 00 00 00 00 00 00 e0 c8 80 00 00     ................
    26f8:	f0 00 00 00 e0 c8 80 00 d1 f0 00 00 e0 c8 80 00     ................
    2708:	80 d1 f0 f0 d1 80 40 00 40 80 d1 d1 80 40 00 00     ......@.@....@..
    2718:	00 40 80 80 40 00 00 00 00 00 40 40 00 00 00 00     .@..@.....@@....
    2728:	00 00 80 c8 e0 00 00 00 00 80 c8 e0 00 00 00 f0     ................
    2738:	80 c8 e0 00 00 00 00 00 80 c8 e0 00 00 00 00 00     ................
    2748:	40 80 d1 f0 f0 f0 f0 f0 00 40 80 d1 d1 d1 d1 d1     @........@......
    2758:	00 00 40 80 80 80 80 80 00 00 00 40 40 40 40 40     ..@........@@@@@
    2768:	f0 d1 c8 c8 80 00 00 00 e0 e0 e0 e0 c8 80 00 00     ................
    2778:	00 00 00 00 e0 c8 80 00 00 00 00 00 e0 c8 80 00     ................
    2788:	f0 f0 f0 f0 d1 80 40 00 d1 d1 d1 d1 80 40 00 00     ......@......@..
    2798:	80 80 80 80 40 00 00 00 40 40 40 40 00 00 00 00     ....@...@@@@....
    27a8:	00 00 00 80 c8 e0 e0 e0 00 00 00 80 c8 e0 00 00     ................
    27b8:	00 00 00 80 c8 e0 00 00 00 00 00 80 c8 e0 00 00     ................
    27c8:	00 00 00 40 80 d1 f0 f0 00 00 00 00 40 80 d1 d1     ...@........@...
    27d8:	00 00 00 00 00 40 80 80 00 00 00 00 00 00 40 40     .....@........@@
    27e8:	e0 e0 c8 80 00 00 00 00 00 e0 c8 80 00 00 00 00     ................
    27f8:	00 e0 c8 80 00 00 00 00 00 e0 c8 80 00 00 00 00     ................
    2808:	f0 d1 80 40 00 00 00 00 d1 80 40 00 00 00 00 00     ...@......@.....
    2818:	80 40 00 00 00 00 00 00 40 00 00 00 00 00 00 00     .@......@.......
    2828:	00 00 40 80 d1 f0 00 00 00 00 40 80 d1 f0 00 00     ..@.......@.....
    2838:	00 00 40 80 d1 f0 00 00 00 00 00 80 c8 e0 00 00     ..@.............
    2848:	00 00 00 00 80 c8 e0 f0 00 00 00 00 00 80 c8 d1     ................
    2858:	00 00 00 00 00 00 80 80 00 00 00 00 00 00 00 40     ...............@
    2868:	f0 d1 80 40 00 00 00 00 f0 e0 c8 80 00 00 00 00     ...@............
    2878:	00 00 e0 c8 80 00 00 00 00 00 e0 c8 80 00 00 00     ................
    2888:	f0 f0 d1 80 40 00 00 00 d1 d1 80 40 00 00 00 00     ....@......@....
    2898:	80 80 40 00 00 00 00 00 40 40 00 00 00 00 00 00     ..@.....@@......
    28a8:	00 00 40 80 d1 f0 00 00 00 00 40 80 d1 f0 e0 e0     ..@.......@.....
    28b8:	00 00 40 80 d1 f0 00 00 00 00 40 80 d1 f0 00 00     ..@.......@.....
    28c8:	00 00 00 80 c8 e0 f0 f0 00 00 00 00 80 c8 d1 d1     ................
    28d8:	00 00 00 00 00 80 80 80 00 00 00 00 00 00 40 40     ..............@@
    28e8:	00 00 f0 d1 80 40 00 00 f0 e0 d1 80 40 00 00 00     .....@......@...
    28f8:	f0 d1 80 40 00 00 00 00 f0 d1 80 40 00 00 00 00     ...@.......@....
    2908:	e0 c8 80 00 00 00 00 00 c8 80 00 00 00 00 00 00     ................
    2918:	80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2928:	00 00 00 40 80 d1 f0 00 00 00 00 80 c8 e0 f0 00     ...@............
    2938:	00 00 80 c8 e0 00 00 00 00 00 80 c8 e0 00 00 00     ................
    2948:	00 00 40 80 d1 f0 f0 f0 00 00 00 40 80 d1 d1 d1     ..@........@....
    2958:	00 00 00 00 40 80 80 80 00 00 00 00 00 40 40 40     ....@........@@@
    2968:	00 f0 d1 80 40 00 00 00 00 f0 d1 80 40 00 00 00     ....@.......@...
    2978:	00 f0 d1 80 40 00 00 00 00 e0 c8 80 00 00 00 00     ....@...........
    2988:	e0 c8 80 00 00 00 00 00 c8 80 00 00 00 00 00 00     ................
    2998:	80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................

000029a8 <font_sprites>:
    29a8:	00 00 00 00 40 80 80 80 00 00 00 40 80 c8 c8 c8     ....@......@....
    29b8:	00 00 40 80 d1 e0 e0 e0 00 40 80 d1 f0 00 00 00     ..@......@......
    29c8:	40 80 d1 f0 00 00 00 00 80 c8 e0 00 00 00 f0 f0     @...............
    29d8:	80 c8 e0 00 00 00 e0 00 80 c8 e0 00 00 00 00 00     ................
    29e8:	80 80 40 00 00 00 00 00 c8 c8 80 40 00 00 00 00     ..@........@....
    29f8:	e0 e0 d1 80 40 00 00 00 00 00 f0 d1 80 40 00 00     ....@........@..
    2a08:	00 00 00 f0 d1 80 40 00 00 00 00 00 e0 c8 80 00     ......@.........
    2a18:	00 00 00 00 e0 c8 80 00 00 00 00 00 e0 c8 80 00     ................
    2a28:	00 00 00 00 00 00 80 80 00 00 00 00 00 80 c8 c8     ................
    2a38:	00 00 00 00 80 c8 e0 e0 00 00 00 80 c8 e0 00 00     ................
    2a48:	00 00 80 c8 e0 00 00 00 00 80 c8 e0 00 00 00 00     ................
    2a58:	00 80 c8 e0 00 00 00 00 00 00 80 c8 e0 e0 00 00     ................
    2a68:	80 00 00 00 00 00 00 00 c8 80 00 00 00 00 00 00     ................
    2a78:	e0 c8 80 00 00 00 00 00 00 e0 c8 80 00 00 00 00     ................
    2a88:	00 e0 c8 80 00 00 00 00 00 e0 c8 80 00 00 00 00     ................
    2a98:	00 e0 c8 80 00 00 00 00 00 e0 c8 80 00 00 00 00     ................
    2aa8:	00 00 00 00 80 80 80 80 00 00 00 80 c8 c8 c8 c8     ................
    2ab8:	00 00 80 c8 e0 e0 e0 e0 00 80 c8 e0 00 00 00 00     ................
    2ac8:	80 c8 e0 00 00 00 00 00 80 c8 e0 00 00 00 f0 f0     ................
    2ad8:	00 80 c8 e0 e0 f0 f0 f0 00 80 c8 e0 00 00 00 00     ................
    2ae8:	80 80 40 00 00 00 00 00 c8 c8 80 40 00 00 00 00     ..@........@....
    2af8:	e0 e0 d1 80 40 00 00 00 00 00 f0 d1 80 40 00 00     ....@........@..
    2b08:	00 00 00 f0 d1 80 40 00 f0 00 00 00 e0 c8 80 00     ......@.........
    2b18:	f0 00 00 00 e0 c8 80 00 00 00 00 f0 d1 80 40 00     ..............@.
    2b28:	00 00 00 80 80 80 80 80 00 00 80 c8 c8 c8 c8 c8     ................
    2b38:	00 80 c8 e0 e0 e0 e0 e0 80 c8 e0 00 00 00 00 00     ................
    2b48:	80 c8 e0 00 00 00 00 00 40 80 d1 f0 f0 f0 f0 f0     ........@.......
    2b58:	00 40 80 d1 d1 e0 00 00 00 00 80 c8 c8 e0 00 00     .@..............
    2b68:	80 80 80 80 00 00 00 00 c8 c8 c8 c8 80 00 00 00     ................
    2b78:	e0 e0 e0 e0 c8 80 00 00 00 00 00 00 e0 c8 80 00     ................
    2b88:	00 00 00 00 e0 c8 80 00 f0 00 00 00 e0 c8 80 00     ................
    2b98:	00 00 00 f0 d1 80 40 00 00 00 00 e0 c8 80 00 00     ......@.........
    2ba8:	00 00 00 80 80 80 00 00 00 00 80 c8 c8 c8 80 40     ...............@
    2bb8:	00 80 c8 e0 e0 e0 c8 80 80 c8 e0 00 00 00 e0 d1     ................
    2bc8:	80 c8 e0 00 00 00 e0 d1 80 c8 e0 00 00 00 e0 d1     ................
    2bd8:	80 c8 e0 00 00 00 f0 f0 80 c8 e0 00 00 00 00 00     ................
    2be8:	40 80 80 40 00 00 00 00 80 c8 c8 80 40 00 00 00     @..@........@...
    2bf8:	d1 e0 e0 d1 80 40 00 00 f0 00 00 f0 d1 80 40 00     .....@........@.
    2c08:	f0 00 00 f0 d1 80 40 00 f0 00 00 f0 d1 80 40 00     ......@.......@.
    2c18:	f0 00 00 f0 d1 80 40 00 00 00 00 00 e0 c8 80 00     ......@.........
    2c28:	00 00 00 80 80 80 80 80 00 00 80 c8 c8 c8 c8 c8     ................
    2c38:	00 80 c8 e0 e0 e0 e0 e0 80 c8 e0 00 00 00 00 00     ................
    2c48:	80 c8 e0 00 00 00 00 00 80 c8 e0 00 00 00 f0 f0     ................
    2c58:	80 c8 e0 00 00 00 f0 f0 80 c8 e0 00 00 00 00 00     ................
    2c68:	80 80 80 80 00 00 00 00 c8 c8 c8 c8 80 00 00 00     ................
    2c78:	e0 e0 e0 e0 c8 80 00 00 00 00 00 00 e0 c8 80 00     ................
    2c88:	00 00 00 00 e0 c8 80 00 f0 f0 f0 f0 d1 80 40 00     ..............@.
    2c98:	f0 f0 e0 d1 80 40 00 00 00 00 00 e0 c8 80 00 00     .....@..........
    2ca8:	00 00 00 00 40 80 80 80 00 00 00 40 80 c8 c8 c8     ....@......@....
    2cb8:	00 00 40 80 d1 e0 e0 e0 00 40 80 d1 f0 00 00 00     ..@......@......
    2cc8:	40 80 d1 f0 00 00 00 00 80 c8 e0 00 00 00 f0 f0     @...............
    2cd8:	80 c8 e0 00 00 00 f0 f0 80 c8 e0 00 00 00 00 00     ................
    2ce8:	00 00 00 80 80 80 80 80 00 00 80 c8 c8 c8 c8 c8     ................
    2cf8:	00 80 c8 e0 e0 e0 e0 e0 80 c8 e0 00 00 00 00 00     ................
    2d08:	80 c8 e0 00 00 00 00 00 40 80 d1 f0 f0 f0 f0 f0     ........@.......
    2d18:	00 40 80 d1 d1 d1 d1 f0 00 00 40 80 80 d1 f0 00     .@........@.....
    2d28:	80 80 80 80 00 00 00 00 c8 c8 c8 c8 80 00 00 00     ................
    2d38:	e0 e0 e0 e0 c8 80 00 00 00 00 00 00 e0 c8 80 00     ................
    2d48:	00 00 00 00 e0 c8 80 00 f0 00 00 00 e0 c8 80 00     ................
    2d58:	00 00 00 e0 c8 80 00 00 00 00 e0 c8 80 00 00 00     ................
    2d68:	00 00 00 00 40 80 80 80 00 00 00 40 80 c8 c8 c8     ....@......@....
    2d78:	00 00 40 80 d1 e0 e0 e0 00 40 80 d1 f0 00 00 00     ..@......@......
    2d88:	40 80 d1 f0 00 00 00 00 80 c8 e0 00 00 00 f0 f0     @...............
    2d98:	80 c8 e0 00 00 00 f0 f0 00 80 c8 e0 00 00 00 00     ................
    2da8:	80 80 40 00 00 00 00 00 c8 c8 80 40 00 00 00 00     ..@........@....
    2db8:	e0 e0 d1 80 40 00 00 00 00 00 f0 d1 80 40 00 00     ....@........@..
    2dc8:	00 00 00 f0 d1 80 40 00 f0 00 00 00 e0 c8 80 00     ......@.........
    2dd8:	f0 00 00 00 e0 c8 80 00 00 00 00 e0 c8 80 00 00     ................
    2de8:	00 00 00 00 40 80 80 80 00 00 00 40 80 c8 c8 c8     ....@......@....
    2df8:	00 00 40 80 d1 e0 e0 e0 00 40 80 d1 f0 00 00 00     ..@......@......
    2e08:	40 80 d1 f0 00 00 00 00 80 c8 e0 00 00 00 f0 f0     @...............
    2e18:	80 c8 e0 00 00 00 f0 f0 40 80 d1 f0 00 00 00 00     ........@.......
    2e28:	80 80 40 00 00 00 00 00 c8 c8 80 40 00 00 00 00     ..@........@....
    2e38:	e0 e0 d1 80 40 00 00 00 00 00 f0 d1 80 40 00 00     ....@........@..
    2e48:	00 00 00 f0 d1 80 40 00 f0 00 00 00 e0 c8 80 00     ......@.........
    2e58:	f0 00 00 00 e0 c8 80 00 00 00 00 00 e0 c8 80 00     ................
    2e68:	80 c8 e0 00 00 00 00 00 80 c8 e0 00 00 00 00 f0     ................
    2e78:	80 c8 e0 00 00 00 00 00 00 80 c8 e0 00 00 00 00     ................
    2e88:	00 00 80 c8 e0 f0 f0 f0 00 00 00 80 c8 d1 d1 d1     ................
    2e98:	00 00 00 00 80 80 80 80 00 00 00 00 00 40 40 40     .............@@@
    2ea8:	f0 00 00 00 e0 c8 80 00 e0 00 00 00 e0 c8 80 00     ................
    2eb8:	00 00 00 00 e0 c8 80 00 00 00 00 e0 c8 80 00 00     ................
    2ec8:	f0 f0 e0 c8 80 00 00 00 d1 d1 c8 80 00 00 00 00     ................
    2ed8:	80 80 80 00 00 00 00 00 40 40 00 00 00 00 00 00     ........@@......
    2ee8:	00 00 00 80 c8 e0 00 00 00 00 80 c8 e0 e0 00 00     ................
    2ef8:	00 80 c8 e0 00 00 00 00 00 80 c8 e0 00 00 00 00     ................
    2f08:	00 40 80 d1 f0 f0 f0 f0 00 00 40 80 d1 d1 d1 d1     .@........@.....
    2f18:	00 00 00 40 80 80 80 80 00 00 00 00 40 40 40 40     ...@........@@@@
    2f28:	00 e0 c8 80 00 00 00 00 00 e0 e0 c8 80 00 00 00     ................
    2f38:	00 00 00 e0 c8 80 00 00 00 00 00 e0 c8 80 00 00     ................
    2f48:	f0 f0 f0 d1 80 40 00 00 d1 d1 d1 80 40 00 00 00     .....@......@...
    2f58:	80 80 80 40 00 00 00 00 40 40 40 00 00 00 00 00     ...@....@@@.....
    2f68:	80 c8 e0 00 00 00 00 00 80 c8 e0 00 00 00 e0 e0     ................
    2f78:	80 c8 e0 00 00 00 00 00 80 c8 e0 00 00 00 00 00     ................
    2f88:	40 80 d1 f0 f0 f0 f0 f0 00 40 80 d1 d1 d1 d1 d1     @........@......
    2f98:	00 00 40 80 80 80 80 80 00 00 00 40 40 40 40 40     ..@........@@@@@
    2fa8:	00 00 f0 d1 80 40 00 00 e0 e0 e0 e0 c8 80 00 00     .....@..........
    2fb8:	00 00 00 00 e0 c8 80 00 00 00 00 00 e0 c8 80 00     ................
    2fc8:	f0 f0 f0 f0 d1 80 40 00 d1 d1 d1 d1 80 40 00 00     ......@......@..
    2fd8:	80 80 80 80 40 00 00 00 40 40 40 40 00 00 00 00     ....@...@@@@....
    2fe8:	00 80 c8 e0 e0 d1 f0 f0 80 c8 e0 00 00 f0 e0 e0     ................
    2ff8:	80 c8 e0 00 00 00 00 00 40 80 d1 f0 00 00 00 00     ........@.......
    3008:	00 40 80 d1 f0 f0 f0 f0 00 00 40 80 d1 d1 d1 d1     .@........@.....
    3018:	00 00 00 40 80 80 80 80 00 00 00 00 40 40 40 40     ...@........@@@@
    3028:	80 c8 e0 00 00 00 00 00 00 80 c8 e0 e0 e0 e0 e0     ................
    3038:	00 00 80 c8 c8 c8 c8 d1 00 00 00 80 80 80 80 d1     ................
    3048:	00 00 00 00 00 00 80 c8 00 00 00 00 00 00 00 80     ................
	...
    306c:	e0 c8 80 00 f0 00 00 f0 d1 80 40 00 f0 00 00 f0     ..........@.....
    307c:	d1 80 40 00 f0 00 00 f0 d1 80 40 00 e0 f0 f0 e0     ..@.......@.....
    308c:	c8 80 00 00 c8 d1 d1 c8 80 00 00 00 80 80 80 80     ................
    309c:	00 00 00 00 00 40 40 00 00 00 00 00 80 c8 e0 00     .....@@.........
    30ac:	00 00 00 00 00 80 c8 e0 e0 e0 e0 e0 80 c8 e0 00     ................
    30bc:	00 00 00 00 80 c8 e0 00 00 00 00 00 40 80 d1 f0     ............@...
    30cc:	f0 f0 f0 f0 00 40 80 d1 d1 d1 d1 d1 00 00 40 80     .....@........@.
    30dc:	80 80 80 80 00 00 00 40 40 40 40 40 00 00 00 00     .......@@@@@....
    30ec:	e0 c8 80 00 e0 00 00 00 e0 c8 80 00 00 00 00 00     ................
    30fc:	e0 c8 80 00 00 00 00 e0 c8 80 00 00 f0 f0 e0 c8     ................
    310c:	80 00 00 00 d1 d1 c8 80 00 00 00 00 80 80 80 00     ................
    311c:	00 00 00 00 40 40 00 00 00 00 00 00 80 c8 e0 00     ....@@..........
    312c:	00 00 00 00 80 c8 e0 00 00 00 e0 e0 80 c8 e0 00     ................
    313c:	00 00 00 00 00 80 c8 e0 00 00 00 00 00 00 80 c8     ................
    314c:	e0 f0 f0 f0 00 00 00 80 c8 d1 d1 d1 00 00 00 00     ................
    315c:	80 80 80 80 00 00 00 00 00 40 40 40 00 00 00 80     .........@@@....
    316c:	c8 e0 00 00 00 00 00 80 c8 e0 00 00 00 00 00 80     ................
    317c:	c8 e0 00 00 00 00 00 80 c8 e0 00 00 00 00 00 40     ...............@
    318c:	80 d1 f0 f0 00 00 00 00 40 80 d1 d1 00 00 00 00     ........@.......
    319c:	00 40 80 80 00 00 00 00 00 00 40 40 00 e0 c8 80     .@........@@....
    31ac:	00 00 00 00 00 e0 c8 80 00 00 00 00 00 e0 c8 80     ................
    31bc:	00 00 00 00 00 e0 c8 80 00 00 00 00 f0 d1 80 40     ...............@
    31cc:	00 00 00 00 d1 80 40 00 00 00 00 00 80 40 00 00     ......@......@..
    31dc:	00 00 00 00 40 00 00 00 00 00 00 00 40 80 d1 f0     ....@.......@...
    31ec:	00 00 00 00 80 c8 e0 00 00 00 e0 e0 80 c8 e0 00     ................
    31fc:	00 00 00 00 00 80 c8 e0 00 00 00 00 00 00 80 c8     ................
    320c:	e0 f0 f0 f0 00 00 00 80 c8 d1 d1 d1 00 00 00 00     ................
    321c:	80 80 80 80 00 00 00 00 00 40 40 40 00 00 00 f0     .........@@@....
    322c:	d1 80 40 00 e0 00 00 00 e0 c8 80 00 00 00 00 00     ..@.............
    323c:	e0 c8 80 00 00 00 00 e0 c8 80 00 00 f0 f0 e0 c8     ................
    324c:	80 00 00 00 d1 d1 c8 80 00 00 00 00 80 80 80 00     ................
    325c:	00 00 00 00 40 40 00 00 00 00 00 00 00 40 80 d1     ....@@.......@..
    326c:	f0 00 00 00 00 80 c8 e0 e0 e0 e0 e0 80 c8 e0 00     ................
    327c:	00 00 00 00 80 c8 e0 00 00 00 00 00 40 80 d1 f0     ............@...
    328c:	f0 f0 f0 f0 00 40 80 d1 d1 d1 d1 d1 00 00 40 80     .....@........@.
    329c:	80 80 80 80 00 00 00 40 40 40 40 40 00 00 00 00     .......@@@@@....
    32ac:	40 80 80 80 00 00 00 40 80 c8 c8 c8 00 00 40 80     @......@......@.
    32bc:	d1 e0 e0 e0 00 40 80 d1 f0 00 00 00 40 80 d1 f0     .....@......@...
    32cc:	00 00 00 00 80 c8 e0 00 00 00 f0 f0 80 c8 e0 00     ................
    32dc:	00 00 e0 d1 80 c8 e0 00 00 00 e0 c8 80 80 80 80     ................
    32ec:	00 00 00 00 c8 c8 c8 c8 80 00 00 00 e0 e0 e0 e0     ................
    32fc:	c8 80 00 00 00 00 00 00 e0 c8 80 00 00 00 00 00     ................
    330c:	e0 c8 80 00 f0 f0 f0 f0 d1 80 40 00 d1 d1 d1 d1     ..........@.....
    331c:	80 40 00 00 80 80 80 80 40 00 00 00 00 00 00 80     .@......@.......
    332c:	80 80 80 80 00 00 80 c8 c8 c8 c8 c8 00 80 c8 e0     ................
    333c:	e0 e0 e0 e0 80 c8 e0 00 00 00 00 00 80 c8 e0 00     ................
    334c:	00 00 00 00 80 c8 e0 00 00 00 f0 f0 80 c8 e0 00     ................
    335c:	00 00 e0 d1 80 c8 e0 00 00 00 e0 c8 80 80 40 00     ..............@.
    336c:	00 00 00 00 c8 c8 80 40 00 00 00 00 e0 e0 d1 80     .......@........
    337c:	40 00 00 00 00 00 f0 d1 80 40 00 00 00 00 00 f0     @........@......
    338c:	d1 80 40 00 f0 00 00 00 e0 c8 80 00 e0 00 00 00     ..@.............
    339c:	e0 c8 80 00 e0 00 00 00 e0 c8 80 00 80 80 80 80     ................
    33ac:	00 00 00 00 c8 c8 c8 c8 80 00 00 00 e0 e0 e0 e0     ................
    33bc:	c8 80 00 00 00 00 00 00 e0 c8 80 00 00 00 00 00     ................
    33cc:	e0 c8 80 00 f0 f0 f0 f0 d1 80 40 00 f0 f0 f0 d1     ..........@.....
    33dc:	80 40 00 00 00 00 00 e0 c8 80 00 00 00 00 00 00     .@..............
    33ec:	40 80 80 80 00 00 00 40 80 c8 c8 c8 00 00 40 80     @......@......@.
    33fc:	d1 e0 e0 e0 00 40 80 d1 f0 00 00 00 40 80 d1 f0     .....@......@...
    340c:	00 00 00 00 80 c8 e0 00 00 00 f0 f0 80 c8 e0 00     ................
    341c:	00 00 e0 e0 80 c8 e0 00 00 00 e0 f0 80 80 80 80     ................
    342c:	00 00 00 00 c8 c8 c8 c8 80 00 00 00 e0 e0 e0 e0     ................
    343c:	c8 80 00 00 00 00 00 00 e0 c8 80 00 00 00 00 00     ................
    344c:	e0 c8 80 00 f0 f0 f0 f0 d1 80 40 00 f0 f0 f0 f0     ..........@.....
    345c:	d1 80 40 00 00 00 00 00 e0 c8 80 00 00 00 00 80     ..@.............
    346c:	80 80 00 00 00 00 80 c8 c8 c8 80 00 00 80 c8 e0     ................
    347c:	e0 e0 c8 80 80 c8 e0 00 00 00 e0 c8 80 c8 e0 00     ................
    348c:	00 00 e0 c8 80 c8 e0 00 00 00 e0 d1 80 c8 e0 00     ................
    349c:	00 00 f0 f0 80 c8 e0 00 00 00 00 00 00 80 80 80     ................
    34ac:	00 00 00 00 80 c8 c8 c8 80 00 00 00 c8 e0 e0 e0     ................
    34bc:	c8 80 00 00 e0 00 00 00 e0 c8 80 00 e0 00 00 00     ................
    34cc:	e0 c8 80 00 e0 00 00 00 e0 c8 80 00 f0 00 00 00     ................
    34dc:	e0 c8 80 00 00 00 00 00 e0 c8 80 00 00 00 00 40     ...............@
    34ec:	80 80 80 80 00 00 40 80 c8 c8 c8 c8 00 40 80 d1     ......@......@..
    34fc:	e0 e0 e0 e0 40 80 d1 f0 00 00 00 00 40 80 d1 f0     ....@.......@...
    350c:	00 00 00 00 00 80 c8 e0 f0 f0 00 00 00 00 80 c8     ................
    351c:	d1 e0 00 00 00 00 00 80 c8 e0 00 00 80 80 80 40     ...............@
    352c:	00 00 00 00 c8 c8 c8 80 40 00 00 00 e0 e0 e0 d1     ........@.......
    353c:	80 40 00 00 00 00 00 f0 d1 80 40 00 00 00 00 f0     .@........@.....
    354c:	d1 80 40 00 00 f0 f0 e0 c8 80 00 00 00 e0 d1 c8     ..@.............
    355c:	80 00 00 00 00 e0 c8 80 00 00 00 00 00 00 00 00     ................
	...
    357c:	00 00 00 80 00 00 00 00 00 00 80 c8 00 00 00 00     ................
    358c:	00 00 80 c8 00 00 00 40 40 40 80 c8 00 00 40 80     .......@@@....@.
    359c:	80 80 80 c8 00 40 80 d1 d1 d1 80 c8 00 80 80 80     .....@..........
    35ac:	00 00 00 00 80 c8 c8 c8 80 00 00 00 c8 e0 e0 e0     ................
    35bc:	c8 80 00 00 e0 00 00 00 e0 c8 80 00 e0 00 00 00     ................
    35cc:	e0 c8 80 00 e0 00 00 00 e0 c8 80 00 e0 00 00 00     ................
    35dc:	e0 c8 80 00 e0 00 00 00 e0 c8 80 00 80 c8 e0 00     ................
    35ec:	00 00 00 00 80 c8 e0 00 00 00 e0 e0 80 c8 e0 00     ................
    35fc:	00 00 e0 c8 80 c8 e0 00 00 00 e0 c8 40 80 d1 f0     ............@...
    360c:	f0 f0 d1 80 00 40 80 d1 d1 d1 80 40 00 00 40 80     .....@.....@..@.
    361c:	80 80 40 00 00 00 00 40 40 40 00 00 00 00 00 00     ..@....@@@......
    362c:	e0 c8 80 00 e0 00 00 00 e0 c8 80 00 e0 00 00 00     ................
    363c:	e0 c8 80 00 e0 00 00 00 e0 c8 80 00 d1 f0 f0 f0     ................
    364c:	d1 80 40 00 80 d1 d1 d1 80 40 00 00 40 80 80 80     ..@......@..@...
    365c:	40 00 00 00 00 40 40 40 00 00 00 00 80 c8 e0 00     @....@@@........
    366c:	00 00 e0 c8 80 c8 e0 00 00 00 e0 e0 80 c8 e0 00     ................
    367c:	00 00 00 00 00 80 c8 e0 00 00 00 00 00 00 80 c8     ................
    368c:	e0 f0 f0 f0 00 00 00 80 c8 d1 d1 d1 00 00 00 00     ................
    369c:	80 80 80 80 00 00 00 00 00 40 40 40 c8 c8 c8 c8     .........@@@....
    36ac:	80 00 00 00 e0 e0 e0 e0 c8 80 00 00 00 00 00 00     ................
    36bc:	e0 c8 80 00 00 00 00 00 e0 c8 80 00 f0 f0 f0 f0     ................
    36cc:	d1 80 40 00 d1 d1 d1 d1 80 40 00 00 80 80 80 80     ..@......@......
    36dc:	40 00 00 00 40 40 40 40 00 00 00 00 80 c8 e0 00     @...@@@@........
    36ec:	00 00 e0 c8 80 c8 e0 00 00 00 e0 e0 80 c8 e0 00     ................
    36fc:	00 00 00 00 80 c8 e0 00 00 00 00 00 40 80 d1 f0     ............@...
    370c:	f0 f0 f0 f0 00 40 80 d1 d1 d1 d1 d1 00 00 40 80     .....@........@.
    371c:	80 80 80 80 00 00 00 40 40 40 40 40 e0 00 00 00     .......@@@@@....
    372c:	e0 c8 80 00 e0 00 00 00 e0 c8 80 00 00 00 00 00     ................
    373c:	e0 c8 80 00 00 00 00 e0 c8 80 00 00 f0 f0 e0 c8     ................
    374c:	80 00 00 00 d1 d1 c8 80 00 00 00 00 80 80 80 00     ................
    375c:	00 00 00 00 40 40 00 00 00 00 00 00 00 00 00 e0     ....@@..........
    376c:	c8 80 00 00 e0 e0 e0 e0 c8 80 00 00 00 00 00 00     ................
    377c:	e0 c8 80 00 00 00 00 00 e0 c8 80 00 f0 f0 f0 f0     ................
    378c:	d1 80 40 00 d1 d1 d1 d1 80 40 00 00 80 80 80 80     ..@......@......
    379c:	40 00 00 00 40 40 40 40 00 00 00 00 00 00 00 e0     @...@@@@........
    37ac:	c8 80 00 00 e0 e0 e0 c8 80 00 00 00 c8 c8 c8 80     ................
    37bc:	00 00 00 00 80 80 80 00 00 00 00 00 40 00 00 00     ............@...
	...
    37e8:	80 c8 e0 00 00 00 e0 f0 80 c8 e0 00 00 00 e0 e0     ................
    37f8:	80 c8 e0 00 00 00 00 00 00 80 c8 e0 00 00 00 00     ................
    3808:	00 00 80 c8 e0 f0 f0 f0 00 00 00 80 c8 d1 d1 d1     ................
    3818:	00 00 00 00 80 80 80 80 00 00 00 00 00 40 40 40     .............@@@
    3828:	00 00 00 00 e0 c8 80 00 e0 00 00 00 e0 c8 80 00     ................
    3838:	00 00 00 00 e0 c8 80 00 00 00 00 00 e0 c8 80 00     ................
    3848:	f0 f0 f0 f0 d1 80 40 00 d1 d1 d1 d1 80 40 00 00     ......@......@..
    3858:	80 80 80 80 40 00 00 00 40 40 40 40 00 00 00 00     ....@...@@@@....
    3868:	00 00 40 80 c8 e0 00 00 00 40 80 d1 e0 e0 00 00     ..@......@......
    3878:	40 80 d1 f0 00 00 00 00 40 80 d1 f0 00 00 00 00     @.......@.......
    3888:	00 80 c8 e0 f0 f0 f0 f0 00 00 80 c8 d1 d1 d1 d1     ................
    3898:	00 00 00 80 80 80 80 80 00 00 00 00 40 40 40 40     ............@@@@
    38a8:	00 e0 c8 80 40 00 00 00 00 e0 e0 d1 80 40 00 00     ....@........@..
    38b8:	00 00 00 f0 d1 80 40 00 00 00 00 f0 d1 80 40 00     ......@.......@.
    38c8:	f0 f0 f0 e0 c8 80 00 00 d1 d1 d1 c8 80 00 00 00     ................
    38d8:	80 80 80 80 00 00 00 00 40 40 40 00 00 00 00 00     ........@@@.....
    38e8:	40 80 d1 f0 f0 f0 d1 c8 80 c8 e0 00 00 00 e0 e0     @...............
    38f8:	80 c8 e0 00 00 00 00 00 00 80 c8 e0 00 00 00 00     ................
    3908:	00 00 80 c8 e0 f0 f0 f0 00 00 00 80 c8 d1 d1 d1     ................
    3918:	00 00 00 00 80 80 80 80 00 00 00 00 00 40 40 40     .............@@@
    3928:	00 00 00 80 80 80 00 00 00 00 80 c8 c8 c8 80 00     ................
    3938:	00 80 c8 e0 e0 e0 c8 80 80 c8 e0 00 00 00 e0 c8     ................
    3948:	80 c8 e0 00 00 00 e0 e0 80 c8 e0 00 00 00 e0 00     ................
    3958:	80 c8 e0 00 00 00 00 00 80 c8 e0 00 00 00 00 00     ................
    3968:	00 80 80 80 00 00 00 00 80 c8 c8 c8 80 00 00 00     ................
    3978:	c8 e0 e0 e0 c8 80 00 00 e0 00 00 00 e0 c8 80 00     ................
    3988:	00 00 00 f0 d1 80 40 00 00 00 f0 d1 80 40 00 00     ......@......@..
    3998:	00 f0 d1 80 40 00 00 00 f0 d1 80 40 00 00 00 00     ....@......@....
    39a8:	00 00 00 80 80 80 00 00 00 00 80 c8 c8 c8 80 00     ................
    39b8:	00 80 c8 e0 e0 e0 c8 80 80 c8 e0 00 00 00 e0 c8     ................
    39c8:	80 c8 e0 00 00 00 e0 c8 80 c8 e0 00 00 00 e0 c8     ................
    39d8:	80 c8 e0 00 00 00 e0 c8 80 c8 e0 00 00 00 e0 c8     ................
	...
    3a00:	80 00 00 00 00 00 00 00 80 00 00 00 00 00 00 00     ................
    3a10:	80 00 00 00 00 00 00 00 80 00 00 00 00 00 00 00     ................
    3a20:	80 80 80 80 00 00 00 00 00 00 00 80 80 80 00 00     ................
    3a30:	00 00 80 c8 c8 c8 80 00 00 80 c8 e0 e0 e0 c8 80     ................
    3a40:	80 c8 e0 00 00 00 e0 c8 80 c8 e0 00 00 00 00 e0     ................
    3a50:	80 c8 e0 00 00 00 00 00 80 c8 e0 00 00 00 00 00     ................
    3a60:	80 c8 e0 00 00 00 f0 00 00 80 80 80 00 00 00 00     ................
    3a70:	80 c8 c8 c8 80 00 00 00 c8 e0 e0 e0 c8 80 00 00     ................
    3a80:	e0 00 00 00 e0 c8 80 00 00 00 00 00 e0 c8 80 00     ................
    3a90:	00 00 00 00 e0 c8 80 00 00 00 00 00 e0 c8 80 00     ................
    3aa0:	f0 00 00 00 e0 c8 80 00 00 80 80 80 00 00 00 00     ................
    3ab0:	80 c8 c8 c8 80 00 00 00 c8 e0 e0 e0 c8 80 00 00     ................
    3ac0:	e0 00 00 00 e0 c8 80 00 e0 00 00 00 e0 c8 80 00     ................
    3ad0:	e0 00 00 00 e0 c8 80 00 00 00 00 00 e0 c8 80 00     ................
    3ae0:	00 00 00 00 e0 c8 80 00 80 80 80 00 00 00 00 00     ................
    3af0:	c8 c8 c8 80 00 00 00 00 e0 e0 e0 c8 80 00 00 00     ................
    3b00:	00 00 00 e0 c8 80 00 00 00 00 00 00 e0 c8 80 00     ................
    3b10:	f0 00 00 00 e0 c8 80 00 f0 f0 e0 e0 c8 80 00 00     ................
    3b20:	00 00 00 e0 c8 80 00 00 00 00 00 80 80 80 80 80     ................
    3b30:	00 00 80 c8 c8 c8 c8 c8 00 80 c8 e0 e0 e0 e0 e0     ................
    3b40:	80 c8 e0 00 00 00 00 00 80 c8 e0 00 00 00 00 00     ................
    3b50:	40 80 d1 f0 f0 f0 00 00 00 40 80 d1 d1 e0 00 00     @........@......
    3b60:	00 00 40 80 c8 e0 00 00 80 80 80 80 00 00 00 00     ..@.............
    3b70:	c8 c8 c8 c8 80 00 00 00 e0 e0 e0 e0 c8 80 00 00     ................
    3b80:	00 00 00 00 e0 c8 80 00 00 00 00 00 e0 c8 80 00     ................
    3b90:	00 f0 f0 f0 d1 80 40 00 00 e0 d1 d1 80 40 00 00     ......@......@..
    3ba0:	00 e0 c8 80 40 00 00 00 80 c8 e0 00 00 00 00 00     ....@...........
    3bb0:	80 c8 e0 00 00 00 f0 00 80 c8 e0 00 00 00 e0 f0     ................
    3bc0:	80 c8 e0 00 00 00 e0 d1 40 80 d1 f0 f0 f0 d1 80     ........@.......
    3bd0:	00 40 80 d1 d1 d1 80 40 00 00 40 80 80 80 40 00     .@.....@..@...@.
    3be0:	00 00 00 40 40 40 00 00 00 e0 c8 80 00 00 00 00     ...@@@..........
    3bf0:	00 00 e0 c8 80 00 00 00 00 00 00 e0 c8 80 00 00     ................
    3c00:	f0 00 00 00 e0 c8 80 00 d1 f0 f0 f0 d1 80 40 00     ..............@.
    3c10:	80 d1 d1 d1 80 40 00 00 40 80 80 80 40 00 00 00     .....@..@...@...
    3c20:	00 40 40 40 00 00 00 00 80 c8 e0 00 00 00 e0 f0     .@@@............
    3c30:	80 c8 e0 00 00 00 e0 d1 80 c8 e0 00 00 00 e0 c8     ................
    3c40:	80 c8 e0 00 00 00 e0 c8 40 80 d1 f0 f0 f0 d1 80     ........@.......
    3c50:	00 40 80 d1 d1 d1 80 40 00 00 40 80 80 80 40 00     .@.....@..@...@.
    3c60:	00 00 00 40 40 40 00 00 e0 00 00 00 e0 c8 80 00     ...@@@..........
    3c70:	e0 00 00 00 e0 c8 80 00 e0 00 00 00 e0 c8 80 00     ................
    3c80:	e0 00 00 00 e0 c8 80 00 d1 f0 f0 f0 d1 80 40 00     ..............@.
    3c90:	80 d1 d1 d1 80 40 00 00 40 80 80 80 40 00 00 00     .....@..@...@...
    3ca0:	00 40 40 40 00 00 00 00 00 00 00 00 e0 c8 80 00     .@@@............
    3cb0:	f0 00 00 00 e0 c8 80 00 e0 00 00 00 e0 c8 80 00     ................
    3cc0:	e0 00 00 00 e0 c8 80 00 d1 f0 f0 f0 d1 80 40 00     ..............@.
    3cd0:	80 d1 d1 d1 80 40 00 00 40 80 80 80 40 00 00 00     .....@..@...@...
    3ce0:	00 40 40 40 00 00 00 00 00 00 f0 d1 80 40 00 00     .@@@.........@..
    3cf0:	e0 e0 d1 80 40 00 00 00 c8 c8 80 40 00 00 00 00     ....@......@....
    3d00:	80 80 40 00 00 00 00 00 40 00 00 00 00 00 00 00     ..@.....@.......
	...
    3d28:	80 c8 e0 00 00 00 e0 e0 80 c8 e0 00 00 00 e0 f0     ................
    3d38:	80 c8 e0 00 00 00 00 00 00 80 c8 e0 00 00 00 00     ................
    3d48:	00 00 80 c8 e0 f0 f0 f0 00 00 00 80 c8 d1 d1 d1     ................
    3d58:	00 00 00 00 80 80 80 80 00 00 00 00 00 40 40 40     .............@@@
    3d68:	f0 00 00 00 e0 c8 80 00 00 00 00 00 e0 c8 80 00     ................
    3d78:	00 00 00 00 e0 c8 80 00 00 00 00 00 e0 c8 80 00     ................
    3d88:	f0 f0 f0 f0 d1 80 40 00 d1 d1 d1 d1 80 40 00 00     ......@......@..
    3d98:	80 80 80 80 40 00 00 00 40 40 40 40 00 00 00 00     ....@...@@@@....
    3da8:	00 00 f0 d1 80 40 00 00 00 00 e0 c8 80 00 00 00     .....@..........
    3db8:	00 00 00 e0 c8 80 00 00 f0 00 00 00 e0 c8 80 00     ................
    3dc8:	d1 f0 f0 f0 d1 80 40 00 80 d1 d1 d1 80 40 00 00     ......@......@..
    3dd8:	40 80 80 80 40 00 00 00 00 40 40 40 00 00 00 00     @...@....@@@....
    3de8:	00 40 80 d1 f0 00 00 00 40 80 d1 f0 f0 f0 e0 e0     .@......@.......
    3df8:	80 c8 e0 00 00 00 00 00 40 80 d1 f0 00 00 00 00     ........@.......
    3e08:	00 40 80 d1 f0 f0 f0 f0 00 00 40 80 d1 d1 d1 d1     .@........@.....
    3e18:	00 00 00 40 80 80 80 80 00 00 00 00 40 40 40 40     ...@........@@@@
    3e28:	00 00 00 80 80 80 00 00 00 00 80 c8 c8 c8 80 00     ................
    3e38:	00 80 c8 e0 e0 e0 c8 80 80 c8 e0 00 00 00 e0 c8     ................
    3e48:	80 c8 e0 00 00 00 e0 c8 80 c8 e0 00 00 00 e0 c8     ................
    3e58:	80 c8 e0 00 00 00 e0 e0 80 c8 e0 00 00 00 e0 00     ................
    3e68:	00 00 00 80 80 00 00 00 00 00 80 c8 c8 80 00 00     ................
    3e78:	00 80 c8 e0 e0 c8 80 00 80 c8 e0 00 00 e0 c8 80     ................
    3e88:	80 c8 e0 00 00 00 e0 c8 40 80 d1 f0 00 00 00 e0     ........@.......
    3e98:	00 40 80 d1 f0 00 00 00 00 00 40 80 d1 f0 00 00     .@........@.....
    3ea8:	00 00 80 80 00 00 00 00 00 80 c8 c8 80 00 00 00     ................
    3eb8:	80 c8 e0 e0 c8 80 00 00 c8 e0 00 00 e0 c8 80 00     ................
    3ec8:	e0 00 00 00 e0 c8 80 00 00 00 00 f0 d1 80 40 00     ..............@.
    3ed8:	00 00 f0 d1 80 40 00 00 00 f0 d1 80 40 00 00 00     .....@......@...
    3ee8:	00 00 00 80 80 40 00 00 00 00 80 c8 c8 80 40 00     .....@........@.
    3ef8:	00 80 c8 e0 e0 d1 80 40 80 c8 e0 00 00 f0 d1 80     .......@........
    3f08:	80 c8 e0 00 00 00 f0 d1 00 80 c8 e0 00 00 00 f0     ................
    3f18:	00 00 80 c8 e0 00 00 00 00 00 00 80 c8 e0 00 00     ................
    3f28:	00 40 80 80 00 00 00 00 40 80 c8 c8 80 00 00 00     .@......@.......
    3f38:	80 d1 e0 e0 c8 80 00 00 d1 f0 00 00 e0 c8 80 00     ................
    3f48:	f0 00 00 00 e0 c8 80 00 00 00 00 e0 c8 80 00 00     ................
    3f58:	00 00 e0 c8 80 00 00 00 00 e0 c8 80 00 00 00 00     ................
    3f68:	00 00 00 80 80 80 80 80 00 00 80 c8 c8 c8 c8 c8     ................
    3f78:	00 80 c8 e0 e0 e0 e0 e0 80 c8 e0 00 00 00 00 00     ................
    3f88:	80 c8 e0 00 00 00 00 00 40 80 d1 f0 f0 f0 f0 f0     ........@.......
    3f98:	00 40 80 d1 d1 d1 e0 00 00 00 40 80 c8 e0 00 00     .@........@.....
    3fa8:	80 80 80 80 00 00 00 00 c8 c8 c8 c8 80 00 00 00     ................
    3fb8:	e0 e0 e0 e0 c8 80 00 00 00 00 00 00 e0 c8 80 00     ................
    3fc8:	00 00 00 00 e0 c8 80 00 00 00 00 f0 d1 80 40 00     ..............@.
    3fd8:	00 00 f0 d1 80 40 00 00 00 f0 d1 80 40 00 00 00     .....@......@...
    3fe8:	00 00 00 00 00 00 80 80 00 00 00 00 00 80 c8 c8     ................
    3ff8:	00 00 00 00 80 c8 e0 e0 00 00 00 80 c8 e0 00 00     ................
    4008:	00 00 00 80 c8 e0 00 00 00 00 00 80 c8 e0 00 00     ................
    4018:	00 00 00 80 c8 e0 00 00 00 00 00 80 c8 e0 00 00     ................
    4028:	00 00 00 00 00 00 40 80 00 00 00 00 00 40 80 c8     ......@......@..
    4038:	00 00 00 00 40 80 d1 e0 00 00 00 40 80 d1 f0 00     ....@......@....
    4048:	00 00 40 80 d1 f0 00 00 00 00 40 80 d1 f0 00 00     ..@.......@.....
    4058:	00 00 40 80 d1 f0 00 00 00 00 40 80 d1 f0 00 00     ..@.......@.....
    4068:	80 80 00 00 00 00 00 00 c8 c8 80 00 00 00 00 00     ................
    4078:	e0 e0 c8 80 00 00 00 00 00 00 e0 c8 80 00 00 00     ................
    4088:	00 00 e0 c8 80 00 00 00 f0 f0 d1 80 40 00 00 00     ............@...
    4098:	f0 d1 80 40 00 00 00 00 f0 d1 80 40 00 00 00 00     ...@.......@....
    40a8:	00 00 00 00 80 80 80 80 00 00 00 80 c8 c8 c8 c8     ................
    40b8:	00 00 80 c8 e0 e0 e0 e0 00 80 c8 e0 00 00 00 00     ................
    40c8:	80 c8 e0 00 00 00 00 00 80 c8 e0 00 00 00 f0 f0     ................
    40d8:	00 80 c8 e0 e0 e0 e0 f0 00 00 80 c8 c8 e0 00 00     ................
    40e8:	00 00 00 00 00 80 80 80 00 00 00 00 80 c8 c8 c8     ................
    40f8:	00 00 00 80 c8 e0 e0 e0 00 00 80 c8 e0 00 00 00     ................
    4108:	00 00 80 c8 e0 00 00 00 00 00 40 80 d1 f0 f0 00     ..........@.....
    4118:	00 00 00 40 80 d1 f0 00 00 00 00 40 80 d1 f0 00     ...@.......@....
    4128:	40 00 00 00 00 00 00 00 80 40 00 00 00 00 00 00     @........@......
    4138:	d1 80 40 00 00 00 00 00 f0 d1 80 40 00 00 00 00     ..@........@....
    4148:	00 f0 d1 80 40 00 00 00 00 f0 d1 80 40 00 00 00     ....@.......@...
    4158:	00 f0 d1 80 40 00 00 00 00 f0 d1 80 40 00 00 00     ....@.......@...
    4168:	80 c8 e0 00 00 00 e0 c8 40 80 d1 f0 00 00 00 e0     ........@.......
    4178:	00 40 80 d1 f0 00 00 00 00 00 40 80 d1 f0 00 00     .@........@.....
    4188:	00 00 00 40 80 d1 f0 f0 00 00 00 00 40 80 d1 d1     ...@........@...
    4198:	00 00 00 00 00 40 80 80 00 00 00 00 00 00 40 40     .....@........@@
    41a8:	e0 00 00 00 e0 c8 80 00 00 00 00 f0 d1 80 40 00     ..............@.
    41b8:	00 00 f0 d1 80 40 00 00 00 f0 d1 80 40 00 00 00     .....@......@...
    41c8:	f0 d1 80 40 00 00 00 00 d1 80 40 00 00 00 00 00     ...@......@.....
    41d8:	80 40 00 00 00 00 00 00 40 00 00 00 00 00 00 00     .@......@.......
    41e8:	80 c8 e0 00 00 00 00 00 80 c8 e0 00 00 00 00 00     ................
    41f8:	80 c8 e0 00 00 00 00 f0 80 c8 e0 00 00 00 f0 d1     ................
    4208:	40 80 d1 f0 f0 f0 d1 80 00 40 80 d1 d1 d1 80 40     @........@.....@
    4218:	00 00 40 80 80 80 40 00 00 00 00 40 40 40 00 00     ..@...@....@@@..
    4228:	00 00 00 00 e0 c8 80 00 00 00 00 00 e0 c8 80 00     ................
    4238:	00 00 00 00 e0 c8 80 00 f0 00 00 00 e0 c8 80 00     ................
    4248:	d1 f0 f0 f0 d1 80 40 00 80 d1 d1 d1 80 40 00 00     ......@......@..
    4258:	40 80 80 80 40 00 00 00 00 40 40 40 00 00 00 00     @...@....@@@....
    4268:	00 00 80 c8 e0 00 00 00 00 80 c8 e0 00 00 00 f0     ................
    4278:	80 c8 e0 00 00 00 f0 d1 80 c8 e0 00 00 f0 d1 80     ................
    4288:	40 80 d1 f0 f0 d1 80 40 00 40 80 d1 d1 80 40 00     @......@.@....@.
    4298:	00 00 40 80 80 40 00 00 00 00 00 40 40 00 00 00     ..@..@.....@@...
    42a8:	00 00 e0 c8 80 00 00 00 00 00 00 e0 c8 80 00 00     ................
    42b8:	f0 00 00 00 e0 c8 80 00 d1 f0 00 00 e0 c8 80 00     ................
    42c8:	80 d1 f0 f0 d1 80 40 00 40 80 d1 d1 80 40 00 00     ......@.@....@..
    42d8:	00 40 80 80 40 00 00 00 00 00 40 40 00 00 00 00     .@..@.....@@....
    42e8:	00 00 80 c8 e0 00 00 00 00 80 c8 e0 00 00 00 f0     ................
    42f8:	80 c8 e0 00 00 00 00 00 80 c8 e0 00 00 00 00 00     ................
    4308:	40 80 d1 f0 f0 f0 f0 f0 00 40 80 d1 d1 d1 d1 d1     @........@......
    4318:	00 00 40 80 80 80 80 80 00 00 00 40 40 40 40 40     ..@........@@@@@
    4328:	f0 d1 c8 c8 80 00 00 00 e0 e0 e0 e0 c8 80 00 00     ................
    4338:	00 00 00 00 e0 c8 80 00 00 00 00 00 e0 c8 80 00     ................
    4348:	f0 f0 f0 f0 d1 80 40 00 d1 d1 d1 d1 80 40 00 00     ......@......@..
    4358:	80 80 80 80 40 00 00 00 40 40 40 40 00 00 00 00     ....@...@@@@....
    4368:	00 00 00 80 c8 e0 e0 e0 00 00 00 80 c8 e0 00 00     ................
    4378:	00 00 00 80 c8 e0 00 00 00 00 00 80 c8 e0 00 00     ................
    4388:	00 00 00 40 80 d1 f0 f0 00 00 00 00 40 80 d1 d1     ...@........@...
    4398:	00 00 00 00 00 40 80 80 00 00 00 00 00 00 40 40     .....@........@@
    43a8:	e0 e0 c8 80 00 00 00 00 00 e0 c8 80 00 00 00 00     ................
    43b8:	00 e0 c8 80 00 00 00 00 00 e0 c8 80 00 00 00 00     ................
    43c8:	f0 d1 80 40 00 00 00 00 d1 80 40 00 00 00 00 00     ...@......@.....
    43d8:	80 40 00 00 00 00 00 00 40 00 00 00 00 00 00 00     .@......@.......
    43e8:	00 00 40 80 d1 f0 00 00 00 00 40 80 d1 f0 00 00     ..@.......@.....
    43f8:	00 00 40 80 d1 f0 00 00 00 00 00 80 c8 e0 00 00     ..@.............
    4408:	00 00 00 00 80 c8 e0 f0 00 00 00 00 00 80 c8 d1     ................
    4418:	00 00 00 00 00 00 80 80 00 00 00 00 00 00 00 40     ...............@
    4428:	f0 d1 80 40 00 00 00 00 f0 e0 c8 80 00 00 00 00     ...@............
    4438:	00 00 e0 c8 80 00 00 00 00 00 e0 c8 80 00 00 00     ................
    4448:	f0 f0 d1 80 40 00 00 00 d1 d1 80 40 00 00 00 00     ....@......@....
    4458:	80 80 40 00 00 00 00 00 40 40 00 00 00 00 00 00     ..@.....@@......
    4468:	00 00 40 80 d1 f0 00 00 00 00 40 80 d1 f0 e0 e0     ..@.......@.....
    4478:	00 00 40 80 d1 f0 00 00 00 00 40 80 d1 f0 00 00     ..@.......@.....
    4488:	00 00 00 80 c8 e0 f0 f0 00 00 00 00 80 c8 d1 d1     ................
    4498:	00 00 00 00 00 80 80 80 00 00 00 00 00 00 40 40     ..............@@
    44a8:	00 00 f0 d1 80 40 00 00 f0 e0 d1 80 40 00 00 00     .....@......@...
    44b8:	f0 d1 80 40 00 00 00 00 f0 d1 80 40 00 00 00 00     ...@.......@....
    44c8:	e0 c8 80 00 00 00 00 00 c8 80 00 00 00 00 00 00     ................
    44d8:	80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    44e8:	00 00 00 40 80 d1 f0 00 00 00 00 80 c8 e0 f0 00     ...@............
    44f8:	00 00 80 c8 e0 00 00 00 00 00 80 c8 e0 00 00 00     ................
    4508:	00 00 40 80 d1 f0 f0 f0 00 00 00 40 80 d1 d1 d1     ..@........@....
    4518:	00 00 00 00 40 80 80 80 00 00 00 00 00 40 40 40     ....@........@@@
    4528:	00 f0 d1 80 40 00 00 00 00 f0 d1 80 40 00 00 00     ....@.......@...
    4538:	00 f0 d1 80 40 00 00 00 00 e0 c8 80 00 00 00 00     ....@...........
    4548:	e0 c8 80 00 00 00 00 00 c8 80 00 00 00 00 00 00     ................
    4558:	80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................

00004568 <big_font_maps>:
    4568:	52 53 65 66 54 55 67 68 56 57 69 6a 58 59 6b 66     RSefTUghVWijXYkf
    4578:	5a 5b 6c 6d 5c 5d 6e 6f 5e 5d 70 6f 5f 60 71 72     Z[lm\]no^]po_`qr
    4588:	61 62 73 74 63 64 75 6f 5e 64 83 84 5c 62 69 74     abstcduo^d..\bit
    4598:	76 77 85 86 78 79 87 88 5c 7a 69 89 5c 7a 83 8a     vw..xy..\zi.\z..
    45a8:	7b 7c 8b 8c 7d 7e 83 84 7f 80 8d 8e 81 82 8f 88     {|..}~..........
    45b8:	90 91 9a 9b 92 93 87 86 94 95 9c 9d 94 96 9c 9e     ................
    45c8:	76 79 85 88 5c 57 83 9f 76 79 a0 a1 5c 57 9a a2     vy..\W..vy..\W..
    45d8:	63 97 a3 6f 98 99 71 72 92 82 85 88 92 82 b1 b2     c..o..qr........
    45e8:	a4 82 b3 b4 a5 a6 b5 b6 a7 a8 71 72 a9 aa b7 b8     ..........qr....
    45f8:	ab 55 b9 ba ac ad bb bc ae 57 bd be af b0 bf c0     .U.......W......

00004608 <patch00>:
    4608:	00 02 04 00 03 0c 00 07 43 00 0a cb 00 09 9e 03     ........C.......
    4618:	00 ff 03 00 fe 03 00 f9 03 00 f3 0b 05 00 00 ff     ................

00004628 <patch01>:
    4628:	00 02 05 00 07 48 00 00 08 01 06 00 00 00 f9 00     .....H..........
    4638:	ff                                                  .

00004639 <patch02>:
    4639:	00 02 03 00 07 0a 01 00 07 00 0a df 00 09 aa 07     ................
    4649:	00 ff 13 00 fc 00 06 00 03 00 f6 04 00 f4 00 ff     ................

00004659 <patch03>:
    4659:	00 ff                                               ..

0000465b <patch04>:
    465b:	00 01 12 00 07 2e 00 00 fc 01 01 17 01 01 12 01     ................
    466b:	00 f4 00 ff                                         ....

0000466f <patch05>:
    466f:	00 01 02 00 07 22 00 00 ff 01 01 01 01 01 02 02     ....."..........
    467f:	01 01 05 00 fe 40 ff                                .....@.

00004686 <patch06>:
    4686:	00 01 05 00 07 20 00 00 f8 02 01 07 02 01 03 01     ..... ..........
    4696:	01 01 02 00 f4 00 ff                                .......

0000469d <patch07>:
    469d:	00 ff                                               ..

0000469f <patch08>:
    469f:	00 02 04 00 03 0c 00 07 43 00 0a cb 00 09 9e 03     ........C.......
    46af:	00 ff 03 00 fe 03 00 f9 03 00 f3 0b 05 00 00 ff     ................

000046bf <patch09>:
    46bf:	00 02 05 00 07 48 00 00 08 01 06 00 00 00 f9 00     .....H..........
    46cf:	ff                                                  .

000046d0 <patch10>:
    46d0:	00 02 03 00 07 0a 01 00 07 00 0a df 00 09 aa 07     ................
    46e0:	00 ff 13 00 fc 00 06 00 03 00 f6 04 00 f4 00 ff     ................

000046f0 <patch11>:
    46f0:	00 ff                                               ..

000046f2 <patch12>:
    46f2:	00 01 12 00 07 2e 00 00 fc 01 01 17 01 01 12 01     ................
    4702:	00 f4 00 ff                                         ....

00004706 <patch13>:
    4706:	00 01 02 00 07 22 00 00 ff 01 01 01 01 01 02 02     ....."..........
    4716:	01 01 05 00 fe 40 ff                                .....@.

0000471d <patch14>:
    471d:	00 01 05 00 07 20 00 00 f8 02 01 07 02 01 03 01     ..... ..........
    472d:	01 01 02 00 f4 00 ff                                .......

00004734 <patch15>:
    4734:	00 01 01 00 07 90 00 00 e2 00 ff                    ...........

0000473f <patch16>:
    473f:	00 02 02 00 07 46 00 0a b4 00 09 63 03 00 ff 03     .....F.....c....
    474f:	00 fe 03 00 f9 03 00 f3 00 ff                       ..........

00004759 <patch17>:
    4759:	00 02 04 00 07 3e 00 00 08 00 00 f9 00 ff           .....>........

00004767 <patch18>:
    4767:	00 02 03 00 07 1b 03 00 ff 03 00 fe 03 00 f9 03     ................
    4777:	00 f3 0b 05 00 00 ff                                .......

0000477e <patch19>:
    477e:	00 ff                                               ..

00004780 <patch20>:
    4780:	00 ff                                               ..

00004782 <patch21>:
    4782:	00 ff                                               ..

00004784 <patch22>:
    4784:	00 ff                                               ..

00004786 <patch23>:
    4786:	00 ff                                               ..

00004788 <patch24>:
    4788:	00 02 04 00 07 43 00 00 ff 04 00 fe 07 00 f9 06     .....C..........
    4798:	00 f3 0b 05 00 00 ff                                .......

0000479f <patch25>:
    479f:	00 02 04 00 0a df 00 09 de 00 07 49 00 00 03 02     ...........I....
    47af:	00 ff 0c 00 fe 00 ff                                .......

000047b6 <patch26>:
    47b6:	00 02 04 00 07 32 00 0a f4 00 09 aa 00 00 ff 0c     .....2..........
    47c6:	00 fe 08 00 fd 04 00 fc 00 ff                       ..........

000047d0 <patch27>:
    47d0:	00 01 12 00 07 2e 00 00 fc 01 01 17 01 01 12 01     ................
    47e0:	00 f4 00 ff                                         ....

000047e4 <patch28>:
    47e4:	00 01 02 00 07 22 00 00 ff 01 01 01 01 01 02 02     ....."..........
    47f4:	01 01 05 00 fe 40 ff                                .....@.

000047fb <patch29>:
    47fb:	00 01 01 00 07 22 00 00 ff 01 01 01 01 01 02 02     ....."..........
    480b:	01 01 05 00 fe 40 ff                                .....@.

00004812 <patch30>:
    4812:	00 01 05 00 07 20 00 00 f8 02 01 07 02 01 03 01     ..... ..........
    4822:	01 01 02 00 f4 00 ff                                .......

00004829 <patch31>:
    4829:	00 ff                                               ..

0000482b <patch32>:
    482b:	00 07 3c 00 08 1d 02 08 21 01 08 25 02 08 27 03     ..<.....!..%..'.
    483b:	08 2d 00 00 fd 04 08 30 02 08 34 00 00 f3 01 08     .-.....0..4.....
    484b:	3c 00 ff                                            <..

0000484e <patch33>:
    484e:	00 07 4a 00 08 45 01 08 3e 02 08 3a 00 00 fd 01     ..J..E..>..:....
    485e:	08 37 03 08 2f 00 00 f9 01 08 28 02 08 24 01 08     .7../.....(..$..
    486e:	21 00 ff                                            !..

00004871 <patch34>:
    4871:	00 07 24 00 08 22 02 08 27 01 08 35 02 08 3b 03     ..$.."..'..5..;.
    4881:	08 42 00 00 fd 04 08 4a 02 08 4f 00 00 f3 01 08     .B.....J..O.....
    4891:	50 00 ff                                            P..

00004894 <patch35>:
    4894:	00 07 4a 00 08 45 01 08 3e 02 08 3a 00 00 f7 01     ..J..E..>..:....
    48a4:	08 37 03 08 2f 00 ff                                .7../..

000048ab <patch36>:
    48ab:	00 02 00 00 08 28 00 07 be 00 0c e0 00 0b e2 0f     .....(..........
    48bb:	00 ff b4 ff                                         ....

000048bf <patch37>:
    48bf:	00 07 00 00 02 03 00 08 27 01 07 50 00 0c e0 00     ........'..P....
    48cf:	0b e2 00 00 ff b4 ff                                .......

000048d6 <patches>:
    48d6:	00 00 00 08 46 00 00 00 00 00 00 00 28 46 00 00     ....F.......(F..
    48e6:	00 00 00 00 00 39 46 00 00 00 00 00 00 00 59 46     .....9F.......YF
    48f6:	00 00 00 00 01 00 00 5b 46 00 00 00 00 01 00 00     .......[F.......
    4906:	6f 46 00 00 00 00 01 00 00 86 46 00 00 00 00 01     oF........F.....
    4916:	00 00 9d 46 00 00 00 00 00 00 00 9f 46 00 00 00     ...F........F...
    4926:	00 00 00 00 bf 46 00 00 00 00 00 00 00 d0 46 00     .....F........F.
    4936:	00 00 00 00 00 00 f0 46 00 00 00 00 01 00 00 f2     .......F........
    4946:	46 00 00 00 00 01 00 00 06 47 00 00 00 00 01 00     F........G......
    4956:	00 1d 47 00 00 00 00 01 00 00 34 47 00 00 00 00     ..G.......4G....
    4966:	00 00 00 3f 47 00 00 00 00 00 00 00 59 47 00 00     ...?G.......YG..
    4976:	00 00 00 00 00 67 47 00 00 00 00 00 00 00 7e 47     .....gG.......~G
    4986:	00 00 00 00 01 00 00 80 47 00 00 00 00 01 00 00     ........G.......
    4996:	82 47 00 00 00 00 01 00 00 84 47 00 00 00 00 01     .G........G.....
    49a6:	00 00 86 47 00 00 00 00 00 00 00 88 47 00 00 00     ...G........G...
    49b6:	00 00 00 00 9f 47 00 00 00 00 00 00 00 b6 47 00     .....G........G.
    49c6:	00 00 00 00 00 00 d0 47 00 00 00 00 01 00 00 e4     .......G........
    49d6:	47 00 00 00 00 01 00 00 fb 47 00 00 00 00 01 00     G........G......
    49e6:	00 12 48 00 00 00 00 01 00 00 29 48 00 00 00 00     ..H.......)H....
    49f6:	02 00 81 2b 48 00 00 00 01 02 00 80 4e 48 00 00     ...+H.......NH..
    4a06:	00 01 02 00 81 71 48 00 00 00 01 02 00 80 94 48     .....qH........H
    4a16:	00 00 00 01 00 00 7e ab 48 00 00 00 01 02 00 80     ......~.H.......
    4a26:	bf 48 00 00 00 01                                   .H....

00004a2c <Song1>:
    4a2c:	00 c0 00 00 c1 01 00 c2 02 00 c3 02 00 90 23 40     ..............#@
    4a3c:	00 b2 07 7f 00 93 04 40 00 ff 06 01 53 0f 90 23     .......@....S..#
    4a4c:	40 0f 27 40 00 93 06 40 07 90 23 40 0f 23 40 08     @.'@...@..#@.#@.
    4a5c:	27 40 00 93 04 40 1e 92 2f 40 00 93 06 40 1e 90     '@...@../@...@..
    4a6c:	21 40 00 91 21 40 00 93 04 40 07 91 20 40 08 90     !@..!@...@.. @..
    4a7c:	21 40 00 91 21 40 0f 90 26 40 00 93 06 40 07 90     !@..!@..&@...@..
    4a8c:	21 40 0f 21 40 08 26 40 00 93 04 40 1e 92 2d 40     !@.!@.&@...@..-@
    4a9c:	00 93 06 40 1e 90 1e 40 00 91 1e 40 00 93 04 40     ...@...@...@...@
    4aac:	07 91 1d 40 08 90 1e 40 00 91 1e 40 0f 90 23 40     ...@...@...@..#@
    4abc:	00 93 06 40 07 90 1e 40 0f 1e 40 08 23 40 00 93     ...@...@..@.#@..
    4acc:	04 40 1e 92 2a 40 00 93 06 40 1e 90 21 40 00 91     .@..*@...@..!@..
    4adc:	21 40 00 93 04 40 07 91 20 40 08 90 21 40 00 91     !@...@.. @..!@..
    4aec:	21 40 00 93 04 40 07 04 40 08 90 26 40 00 91 26     !@...@..@..&@..&
    4afc:	40 00 93 06 40 07 90 21 40 00 91 21 40 08 90 23     @...@..!@..!@..#
    4b0c:	40 00 91 23 40 0f 90 23 40 00 91 23 40 00 93 04     @..#@..#@..#@...
    4b1c:	40 0f 90 2a 40 00 91 2a 40 00 93 04 40 07 04 40     @..*@..*@...@..@
    4b2c:	08 90 23 40 00 91 23 40 00 93 05 40 0f 90 2b 40     ..#@..#@...@..+@
    4b3c:	00 91 2b 40 0f 90 23 40 00 91 23 40 07 22 40 08     ..+@..#@..#@."@.
    4b4c:	90 23 40 00 91 23 40 0f 90 27 40 00 93 06 40 07     .#@..#@..'@...@.
    4b5c:	90 23 40 0f 23 40 08 27 40 00 93 04 40 1e 92 2f     .#@.#@.'@...@../
    4b6c:	40 00 93 06 40 1e 90 21 40 00 91 21 40 00 93 04     @...@..!@..!@...
    4b7c:	40 07 91 20 40 08 90 21 40 00 91 21 40 0f 90 26     @.. @..!@..!@..&
    4b8c:	40 00 93 06 40 07 90 21 40 0f 21 40 08 26 40 00     @...@..!@.!@.&@.
    4b9c:	93 04 40 1e 92 2d 40 00 93 06 40 1e 90 1e 40 00     ..@..-@...@...@.
    4bac:	91 1e 40 00 93 04 40 07 91 1d 40 08 90 1e 40 00     ..@...@...@...@.
    4bbc:	91 1e 40 0f 90 23 40 00 93 06 40 07 90 1e 40 0f     ..@..#@...@...@.
    4bcc:	1e 40 08 23 40 00 93 04 40 1e 92 2a 40 00 93 06     .@.#@...@..*@...
    4bdc:	40 1e 90 21 40 00 91 21 40 00 93 04 40 07 91 20     @..!@..!@...@.. 
    4bec:	40 08 90 21 40 00 91 21 40 00 93 04 40 07 04 40     @..!@..!@...@..@
    4bfc:	08 90 26 40 00 91 26 40 00 93 06 40 07 90 21 40     ..&@..&@...@..!@
    4c0c:	00 91 21 40 08 90 23 40 00 91 23 40 0f 90 23 40     ..!@..#@..#@..#@
    4c1c:	00 91 23 40 00 93 04 40 0f 90 2a 40 00 91 2a 40     ..#@...@..*@..*@
    4c2c:	00 93 04 40 07 90 23 40 00 91 23 40 00 93 04 40     ...@..#@..#@...@
    4c3c:	08 05 40 0f 90 23 40 00 91 23 40 0f 90 2a 40 00     ..@..#@..#@..*@.
    4c4c:	91 2a 40 00 92 2a 40 0f 90 23 40 00 91 23 40 00     .*@..*@..#@..#@.
    4c5c:	92 23 40 0f 90 2a 40 00 91 2a 40 00 92 2a 40 00     .#@..*@..*@..*@.
    4c6c:	93 06 40 0f 90 2b 40 00 91 2b 40 00 92 2b 40 00     ..@..+@..+@..+@.
    4c7c:	93 04 40 07 90 2a 40 00 91 2a 40 00 92 2a 40 08     ..@..*@..*@..*@.
    4c8c:	93 04 40 0f 90 23 40 00 91 23 40 00 92 23 40 00     ..@..#@..#@..#@.
    4c9c:	93 06 40 16 06 40 08 90 21 40 00 91 21 40 00 92     ..@..@..!@..!@..
    4cac:	21 40 00 93 04 40 07 04 40 08 90 28 40 00 91 28     !@...@..@..(@..(
    4cbc:	40 00 92 28 40 00 93 04 40 07 04 40 08 90 21 40     @..(@...@..@..!@
    4ccc:	00 91 21 40 00 92 21 40 00 93 06 40 0f 90 28 40     ..!@..!@...@..(@
    4cdc:	00 91 28 40 00 92 28 40 00 93 06 40 0f 90 29 40     ..(@..(@...@..)@
    4cec:	00 91 29 40 00 92 29 40 00 93 04 40 07 90 28 40     ..)@..)@...@..(@
    4cfc:	00 91 28 40 00 92 28 40 08 93 04 40 07 06 40 08     ..(@..(@...@..@.
    4d0c:	90 21 40 00 91 21 40 00 92 21 40 07 93 06 40 08     .!@..!@..!@...@.
    4d1c:	06 40 0f 90 1e 40 00 91 1e 40 00 92 1e 40 00 93     .@...@...@...@..
    4d2c:	04 40 0f 90 25 40 00 91 25 40 00 92 25 40 00 93     .@..%@..%@..%@..
    4d3c:	04 40 07 04 40 08 90 1e 40 00 91 1e 40 00 92 1e     .@..@...@...@...
    4d4c:	40 00 93 04 40 07 04 40 08 90 25 40 00 91 25 40     @...@..@..%@..%@
    4d5c:	00 92 25 40 00 93 06 40 0f 90 26 40 00 91 26 40     ..%@...@..&@..&@
    4d6c:	00 92 26 40 00 93 04 40 07 90 25 40 00 91 25 40     ..&@...@..%@..%@
    4d7c:	00 92 25 40 08 93 04 40 0f 90 1e 40 00 91 1e 40     ..%@...@...@...@
    4d8c:	00 92 1e 40 00 93 06 40 16 06 40 08 90 21 40 00     ...@...@..@..!@.
    4d9c:	91 21 40 00 92 21 40 00 93 04 40 07 04 40 08 90     .!@..!@...@..@..
    4dac:	28 40 00 91 28 40 00 92 28 40 00 93 04 40 07 04     (@..(@..(@...@..
    4dbc:	40 08 90 21 40 00 91 21 40 00 92 21 40 00 93 06     @..!@..!@..!@...
    4dcc:	40 0f 90 28 40 00 91 28 40 00 92 28 40 00 93 06     @..(@..(@..(@...
    4ddc:	40 0f 90 29 40 00 91 29 40 00 92 29 40 00 93 04     @..)@..)@..)@...
    4dec:	40 07 90 28 40 00 91 28 40 00 92 28 40 08 90 2b     @..(@..(@..(@..+
    4dfc:	40 00 91 2b 40 00 92 2b 40 00 93 04 40 07 90 2a     @..+@..+@...@..*
    4e0c:	40 00 91 2a 40 00 92 2a 40 00 93 06 40 08 90 2d     @..*@..*@...@..-
    4e1c:	40 00 91 2d 40 00 92 2d 40 07 90 2b 40 00 91 2b     @..-@..-@..+@..+
    4e2c:	40 00 92 2b 40 00 93 06 40 08 90 2a 40 00 91 2a     @..+@...@..*@..*
    4e3c:	40 00 92 2a 40 00 93 06 40 0f 90 23 40 00 91 23     @..*@...@..#@..#
    4e4c:	40 00 92 23 40 00 93 05 40 0f 90 2a 40 00 91 2a     @..#@...@..*@..*
    4e5c:	40 00 92 2a 40 0f 90 23 40 00 91 23 40 00 92 23     @..*@..#@..#@..#
    4e6c:	40 0f 90 2a 40 00 91 2a 40 00 92 2a 40 00 93 06     @..*@..*@..*@...
    4e7c:	40 0f 90 2b 40 00 91 2b 40 00 92 2b 40 00 93 04     @..+@..+@..+@...
    4e8c:	40 07 90 2a 40 00 91 2a 40 00 92 2a 40 08 93 04     @..*@..*@..*@...
    4e9c:	40 0f 90 23 40 00 91 23 40 00 92 23 40 00 93 06     @..#@..#@..#@...
    4eac:	40 16 06 40 08 90 21 40 00 91 21 40 00 92 21 40     @..@..!@..!@..!@
    4ebc:	00 93 04 40 07 04 40 08 90 28 40 00 91 28 40 00     ...@..@..(@..(@.
    4ecc:	92 28 40 00 93 04 40 07 04 40 08 90 21 40 00 91     .(@...@..@..!@..
    4edc:	21 40 00 92 21 40 00 93 06 40 0f 90 28 40 00 91     !@..!@...@..(@..
    4eec:	28 40 00 92 28 40 00 93 06 40 0f 90 29 40 00 91     (@..(@...@..)@..
    4efc:	29 40 00 92 29 40 00 93 04 40 07 90 28 40 00 91     )@..)@...@..(@..
    4f0c:	28 40 00 92 28 40 08 93 04 40 07 06 40 08 90 21     (@..(@...@..@..!
    4f1c:	40 00 91 21 40 00 92 21 40 07 93 06 40 08 06 40     @..!@..!@...@..@
    4f2c:	0f 90 1e 40 00 91 1e 40 00 92 1e 40 00 93 04 40     ...@...@...@...@
    4f3c:	0f 90 25 40 00 91 25 40 00 92 25 40 00 93 04 40     ..%@..%@..%@...@
    4f4c:	07 04 40 08 90 1e 40 00 91 1e 40 00 92 1e 40 00     ..@...@...@...@.
    4f5c:	93 04 40 07 04 40 08 90 25 40 00 91 25 40 00 92     ..@..@..%@..%@..
    4f6c:	25 40 00 93 06 40 0f 90 26 40 00 91 26 40 00 92     %@...@..&@..&@..
    4f7c:	26 40 00 93 04 40 07 90 25 40 00 91 25 40 00 92     &@...@..%@..%@..
    4f8c:	25 40 08 93 04 40 0f 90 1e 40 00 91 1e 40 00 92     %@...@...@...@..
    4f9c:	1e 40 00 93 06 40 16 06 40 08 90 21 40 00 91 21     .@...@..@..!@..!
    4fac:	40 00 92 21 40 00 93 04 40 07 04 40 08 90 28 40     @..!@...@..@..(@
    4fbc:	00 91 28 40 00 92 28 40 00 93 04 40 07 04 40 08     ..(@..(@...@..@.
    4fcc:	90 21 40 00 91 21 40 00 92 21 40 00 93 06 40 0f     .!@..!@..!@...@.
    4fdc:	90 28 40 00 91 28 40 00 92 28 40 00 93 06 40 0f     .(@..(@..(@...@.
    4fec:	90 29 40 00 91 29 40 00 92 29 40 00 93 04 40 07     .)@..)@..)@...@.
    4ffc:	90 28 40 00 91 28 40 00 92 28 40 08 90 2b 40 00     .(@..(@..(@..+@.
    500c:	91 2b 40 00 92 2b 40 00 93 04 40 07 90 2a 40 00     .+@..+@...@..*@.
    501c:	91 2a 40 00 92 2a 40 00 93 06 40 08 90 2d 40 00     .*@..*@...@..-@.
    502c:	91 2d 40 00 92 2d 40 07 90 2b 40 00 91 2b 40 00     .-@..-@..+@..+@.
    503c:	92 2b 40 00 93 06 40 08 90 2a 40 00 91 2a 40 00     .+@...@..*@..*@.
    504c:	92 2a 40 00 93 06 40 0f 90 2a 40 00 91 2a 40 00     .*@...@..*@..*@.
    505c:	92 23 40 00 93 05 40 0f 90 2f 40 00 91 23 40 07     .#@...@../@..#@.
    506c:	22 40 08 90 2f 40 00 91 23 40 0f 90 33 40 00 93     "@../@..#@..3@..
    507c:	06 40 07 90 2f 40 0f 2f 40 08 33 40 00 93 04 40     .@../@./@.3@...@
    508c:	1e 92 2f 40 00 93 06 40 1e 90 2d 40 00 91 21 40     ../@...@..-@..!@
    509c:	00 93 04 40 07 91 20 40 08 90 2d 40 00 91 21 40     ...@.. @..-@..!@
    50ac:	0f 90 32 40 00 93 06 40 07 90 2d 40 0f 2d 40 08     ..2@...@..-@.-@.
    50bc:	32 40 00 93 04 40 1e 92 2d 40 00 93 06 40 1e 90     2@...@..-@...@..
    50cc:	2a 40 00 91 1e 40 00 93 04 40 07 91 1d 40 08 90     *@...@...@...@..
    50dc:	2a 40 00 91 1e 40 0f 90 2f 40 00 93 06 40 07 90     *@...@../@...@..
    50ec:	2a 40 0f 2a 40 08 2f 40 00 93 04 40 1e 92 2a 40     *@.*@./@...@..*@
    50fc:	00 93 06 40 1e 90 2d 40 00 91 21 40 00 93 04 40     ...@..-@..!@...@
    510c:	07 91 20 40 08 90 2d 40 00 91 21 40 00 93 04 40     .. @..-@..!@...@
    511c:	07 04 40 08 90 32 40 00 91 26 40 00 93 06 40 07     ..@..2@..&@...@.
    512c:	90 2d 40 00 91 21 40 08 90 2f 40 00 91 23 40 0f     .-@..!@../@..#@.
    513c:	90 2f 40 00 91 23 40 00 93 04 40 0f 90 36 40 00     ./@..#@...@..6@.
    514c:	91 2a 40 00 93 04 40 07 04 40 08 90 2f 40 00 91     .*@...@..@../@..
    515c:	23 40 00 93 05 40 0f 90 37 40 00 91 2b 40 0f 90     #@...@..7@..+@..
    516c:	2f 40 00 91 23 40 07 22 40 08 90 2f 40 00 91 23     /@..#@."@../@..#
    517c:	40 0f 90 33 40 00 93 06 40 07 90 2f 40 0f 2f 40     @..3@...@../@./@
    518c:	08 33 40 00 93 04 40 1e 92 2f 40 00 93 06 40 1e     .3@...@../@...@.
    519c:	90 2d 40 00 91 21 40 00 93 04 40 07 91 20 40 08     .-@..!@...@.. @.
    51ac:	90 2d 40 00 91 21 40 0f 90 32 40 00 93 06 40 07     .-@..!@..2@...@.
    51bc:	90 2d 40 0f 2d 40 08 32 40 00 93 04 40 1e 92 2d     .-@.-@.2@...@..-
    51cc:	40 00 93 06 40 1e 90 2a 40 00 91 1e 40 00 93 04     @...@..*@...@...
    51dc:	40 07 91 1d 40 08 90 2a 40 00 91 1e 40 0f 90 2f     @...@..*@...@../
    51ec:	40 00 93 06 40 07 90 2a 40 0f 2a 40 08 2f 40 00     @...@..*@.*@./@.
    51fc:	93 04 40 1e 92 2a 40 00 93 06 40 1e 90 2d 40 00     ..@..*@...@..-@.
    520c:	91 21 40 00 93 04 40 07 91 20 40 08 90 2d 40 00     .!@...@.. @..-@.
    521c:	91 21 40 00 93 04 40 07 04 40 08 90 32 40 00 91     .!@...@..@..2@..
    522c:	26 40 00 93 06 40 07 90 2d 40 00 91 21 40 08 90     &@...@..-@..!@..
    523c:	2f 40 00 91 23 40 0f 90 2f 40 00 91 23 40 00 93     /@..#@../@..#@..
    524c:	04 40 0f 90 36 40 00 91 2a 40 00 93 04 40 07 90     .@..6@..*@...@..
    525c:	2f 40 00 91 23 40 00 93 04 40 08 05 40 0f 90 2f     /@..#@...@..@../
    526c:	40 00 91 23 40 0f 90 36 40 00 91 2a 40 00 92 2a     @..#@..6@..*@..*
    527c:	40 0f 90 2f 40 00 91 23 40 00 92 23 40 0f 90 36     @../@..#@..#@..6
    528c:	40 00 91 2a 40 00 92 2a 40 00 93 06 40 0f 90 37     @..*@..*@...@..7
    529c:	40 00 91 2b 40 00 92 2b 40 00 93 04 40 07 90 36     @..+@..+@...@..6
    52ac:	40 00 91 2a 40 00 92 2a 40 08 93 04 40 0f 90 2f     @..*@..*@...@../
    52bc:	40 00 91 23 40 00 92 23 40 00 93 06 40 16 06 40     @..#@..#@...@..@
    52cc:	08 90 2d 40 00 91 21 40 00 92 21 40 00 93 04 40     ..-@..!@..!@...@
    52dc:	07 04 40 08 90 34 40 00 91 28 40 00 92 28 40 00     ..@..4@..(@..(@.
    52ec:	93 04 40 07 04 40 08 90 2d 40 00 91 21 40 00 92     ..@..@..-@..!@..
    52fc:	21 40 00 93 06 40 0f 90 34 40 00 91 28 40 00 92     !@...@..4@..(@..
    530c:	28 40 00 93 06 40 0f 90 35 40 00 91 29 40 00 92     (@...@..5@..)@..
    531c:	29 40 00 93 04 40 07 90 34 40 00 91 28 40 00 92     )@...@..4@..(@..
    532c:	28 40 08 93 04 40 07 06 40 08 90 2d 40 00 91 21     (@...@..@..-@..!
    533c:	40 00 92 21 40 07 93 06 40 08 06 40 0f 90 2a 40     @..!@...@..@..*@
    534c:	00 91 1e 40 00 92 1e 40 00 93 04 40 0f 90 31 40     ...@...@...@..1@
    535c:	00 91 25 40 00 92 25 40 00 93 04 40 07 04 40 08     ..%@..%@...@..@.
    536c:	90 2a 40 00 91 1e 40 00 92 1e 40 00 93 04 40 07     .*@...@...@...@.
    537c:	04 40 08 90 31 40 00 91 25 40 00 92 25 40 00 93     .@..1@..%@..%@..
    538c:	06 40 0f 90 32 40 00 91 26 40 00 92 26 40 00 93     .@..2@..&@..&@..
    539c:	04 40 07 90 31 40 00 91 25 40 00 92 25 40 08 93     .@..1@..%@..%@..
    53ac:	04 40 0f 90 2a 40 00 91 1e 40 00 92 1e 40 00 93     .@..*@...@...@..
    53bc:	06 40 16 06 40 08 90 2d 40 00 91 21 40 00 92 21     .@..@..-@..!@..!
    53cc:	40 00 93 04 40 07 04 40 08 90 34 40 00 91 28 40     @...@..@..4@..(@
    53dc:	00 92 28 40 00 93 04 40 07 04 40 08 90 2d 40 00     ..(@...@..@..-@.
    53ec:	91 21 40 00 92 21 40 00 93 06 40 0f 90 34 40 00     .!@..!@...@..4@.
    53fc:	91 28 40 00 92 28 40 00 93 06 40 0f 90 35 40 00     .(@..(@...@..5@.
    540c:	91 29 40 00 92 29 40 00 93 04 40 07 90 34 40 00     .)@..)@...@..4@.
    541c:	91 28 40 00 92 28 40 08 90 37 40 00 91 2b 40 00     .(@..(@..7@..+@.
    542c:	92 2b 40 00 93 04 40 07 90 36 40 00 91 2a 40 00     .+@...@..6@..*@.
    543c:	92 2a 40 00 93 06 40 08 90 39 40 00 91 2d 40 00     .*@...@..9@..-@.
    544c:	92 2d 40 07 90 37 40 00 91 2b 40 00 92 2b 40 00     .-@..7@..+@..+@.
    545c:	93 06 40 08 90 36 40 00 91 2a 40 00 92 2a 40 00     ..@..6@..*@..*@.
    546c:	93 06 40 0f 90 2f 40 00 91 23 40 00 92 23 40 00     ..@../@..#@..#@.
    547c:	93 05 40 0f 90 36 40 00 91 2a 40 00 92 2a 40 0f     ..@..6@..*@..*@.
    548c:	90 2f 40 00 91 23 40 00 92 23 40 0f 90 36 40 00     ./@..#@..#@..6@.
    549c:	91 2a 40 00 92 2a 40 00 93 06 40 0f 90 37 40 00     .*@..*@...@..7@.
    54ac:	91 2b 40 00 92 2b 40 00 93 04 40 07 90 36 40 00     .+@..+@...@..6@.
    54bc:	91 2a 40 00 92 2a 40 08 93 04 40 0f 90 2f 40 00     .*@..*@...@../@.
    54cc:	91 23 40 00 92 23 40 00 93 06 40 16 06 40 08 90     .#@..#@...@..@..
    54dc:	2d 40 00 91 21 40 00 92 21 40 00 93 04 40 07 04     -@..!@..!@...@..
    54ec:	40 08 90 34 40 00 91 28 40 00 92 28 40 00 93 04     @..4@..(@..(@...
    54fc:	40 07 04 40 08 90 2d 40 00 91 21 40 00 92 21 40     @..@..-@..!@..!@
    550c:	00 93 06 40 0f 90 34 40 00 91 28 40 00 92 28 40     ...@..4@..(@..(@
    551c:	00 93 06 40 0f 90 35 40 00 91 29 40 00 92 29 40     ...@..5@..)@..)@
    552c:	00 93 04 40 07 90 34 40 00 91 28 40 00 92 28 40     ...@..4@..(@..(@
    553c:	08 93 04 40 07 06 40 08 90 2d 40 00 91 21 40 00     ...@..@..-@..!@.
    554c:	92 21 40 07 93 06 40 08 06 40 0f 90 2a 40 00 91     .!@...@..@..*@..
    555c:	1e 40 00 92 1e 40 00 93 04 40 0f 90 31 40 00 91     .@...@...@..1@..
    556c:	25 40 00 92 25 40 00 93 04 40 07 04 40 08 90 2a     %@..%@...@..@..*
    557c:	40 00 91 1e 40 00 92 1e 40 00 93 04 40 07 04 40     @...@...@...@..@
    558c:	08 90 31 40 00 91 25 40 00 92 25 40 00 93 06 40     ..1@..%@..%@...@
    559c:	0f 90 32 40 00 91 26 40 00 92 26 40 00 93 04 40     ..2@..&@..&@...@
    55ac:	07 90 31 40 00 91 25 40 00 92 25 40 08 93 04 40     ..1@..%@..%@...@
    55bc:	0f 90 2a 40 00 91 1e 40 00 92 1e 40 00 93 06 40     ..*@...@...@...@
    55cc:	16 06 40 08 90 2d 40 00 91 21 40 00 92 21 40 00     ..@..-@..!@..!@.
    55dc:	93 04 40 07 04 40 08 90 34 40 00 91 28 40 00 92     ..@..@..4@..(@..
    55ec:	28 40 00 93 04 40 07 04 40 08 90 2d 40 00 91 21     (@...@..@..-@..!
    55fc:	40 00 92 21 40 00 93 06 40 0f 90 34 40 00 91 28     @..!@...@..4@..(
    560c:	40 00 92 28 40 00 93 06 40 0f 90 35 40 00 91 29     @..(@...@..5@..)
    561c:	40 00 92 29 40 00 93 04 40 07 90 34 40 00 91 28     @..)@...@..4@..(
    562c:	40 00 92 28 40 08 90 37 40 00 91 2b 40 00 92 2b     @..(@..7@..+@..+
    563c:	40 00 93 04 40 07 90 36 40 00 91 2a 40 00 92 2a     @...@..6@..*@..*
    564c:	40 00 93 06 40 08 90 39 40 00 91 2d 40 00 92 2d     @...@..9@..-@..-
    565c:	40 07 90 37 40 00 91 2b 40 00 92 2b 40 00 93 06     @..7@..+@..+@...
    566c:	40 08 90 36 40 00 91 2a 40 00 92 2a 40 00 93 06     @..6@..*@..*@...
    567c:	40 0f 90 36 40 00 91 2a 40 00 92 23 40 00 93 05     @..6@..*@..#@...
    568c:	40 0f ff 06 01 45 00 ff 2f 00                       @....E../.

00005696 <Song2>:
    5696:	00 c0 08 00 c1 09 00 c2 0a 00 c3 0b 00 b0 07 76     ...............v
    56a6:	00 90 2e 40 00 91 22 40 00 b2 07 7f 00 92 2e 40     ...@.."@.......@
    56b6:	00 93 0c 40 00 ff 06 01 53 0f 90 2e 40 00 92 2e     ...@....S...@...
    56c6:	40 0f 90 2e 40 00 91 26 40 00 92 2e 40 00 93 0e     @...@..&@...@...
    56d6:	40 0f 90 2c 40 00 91 26 40 00 92 2c 40 0f 90 2e     @..,@..&@..,@...
    56e6:	40 00 91 22 40 00 92 2e 40 00 93 0c 40 1a 90 34     @.."@...@...@..4
    56f6:	40 00 92 35 40 04 90 35 40 00 91 26 40 00 92 35     @..5@..5@..&@..5
    5706:	40 00 93 0e 40 1e 90 2e 40 00 91 22 40 00 92 2e     @...@...@.."@...
    5716:	40 00 93 0c 40 0f 90 2e 40 00 92 2e 40 0f 90 2e     @...@...@...@...
    5726:	40 00 91 26 40 00 92 2e 40 00 93 0e 40 0f 90 2c     @..&@...@...@..,
    5736:	40 00 91 26 40 00 92 2c 40 0f 90 2e 40 00 91 22     @..&@..,@...@.."
    5746:	40 00 92 2e 40 00 93 0c 40 1a 90 35 40 00 92 32     @...@...@..5@..2
    5756:	40 04 90 32 40 00 91 26 40 00 92 32 40 00 93 0e     @..2@..&@..2@...
    5766:	40 1e 90 2e 40 00 91 22 40 00 92 2e 40 00 93 0c     @...@.."@...@...
    5776:	40 0f 90 2e 40 00 92 2e 40 0f 90 2e 40 00 91 26     @...@...@...@..&
    5786:	40 00 92 2e 40 00 93 0e 40 0f 90 2c 40 00 91 26     @...@...@..,@..&
    5796:	40 00 92 2c 40 0f 90 2e 40 00 91 22 40 00 92 2e     @..,@...@.."@...
    57a6:	40 00 93 0c 40 1a 90 34 40 00 92 35 40 04 90 35     @...@..4@..5@..5
    57b6:	40 00 91 26 40 00 92 35 40 00 93 0e 40 1e 90 35     @..&@..5@...@..5
    57c6:	40 00 91 29 40 00 92 35 40 00 93 0e 40 0f 90 33     @..)@..5@...@..3
    57d6:	40 00 91 27 40 00 92 33 40 0f 90 32 40 00 91 26     @..'@..3@..2@..&
    57e6:	40 00 92 32 40 00 93 0c 40 0f 90 30 40 00 91 24     @..2@...@..0@..$
    57f6:	40 00 92 30 40 0f 90 2e 40 00 91 22 40 00 92 2e     @..0@...@.."@...
    5806:	40 00 93 0e 40 1a 91 15 40 04 90 34 40 00 92 35     @...@...@..4@..5
    5816:	40 00 93 0c 40 03 90 35 40 00 92 35 40 04 90 34     @...@..5@..5@..4
    5826:	40 00 92 34 40 04 90 35 40 00 92 35 40 04 90 34     @..4@..5@..5@..4
    5836:	40 00 92 35 40 00 93 0c 40 03 90 35 40 00 92 35     @..5@...@..5@..5
    5846:	40 0c 90 2e 40 00 91 22 40 00 92 2e 40 00 93 0c     @...@.."@...@...
    5856:	40 0f 90 2e 40 00 92 2e 40 0f 90 2e 40 00 91 26     @...@...@...@..&
    5866:	40 00 92 2e 40 00 93 0e 40 0f 90 2c 40 00 91 26     @...@...@..,@..&
    5876:	40 00 92 2c 40 0f 90 2e 40 00 91 22 40 00 92 2e     @..,@...@.."@...
    5886:	40 00 93 0c 40 1a 90 34 40 00 92 35 40 04 90 35     @...@..4@..5@..5
    5896:	40 00 91 26 40 00 92 35 40 00 93 0e 40 1e 90 2e     @..&@..5@...@...
    58a6:	40 00 91 22 40 00 92 2e 40 00 93 0c 40 0f 90 2e     @.."@...@...@...
    58b6:	40 00 92 2e 40 0f 90 2e 40 00 91 26 40 00 92 2e     @...@...@..&@...
    58c6:	40 00 93 0e 40 0f 90 2c 40 00 91 26 40 00 92 2c     @...@..,@..&@..,
    58d6:	40 0f 90 2e 40 00 91 22 40 00 92 2e 40 00 93 0c     @...@.."@...@...
    58e6:	40 1a 90 35 40 00 92 32 40 04 90 32 40 00 91 26     @..5@..2@..2@..&
    58f6:	40 00 92 32 40 00 93 0e 40 1e 90 2e 40 00 91 22     @..2@...@...@.."
    5906:	40 00 92 2e 40 00 93 0c 40 0f 90 2e 40 00 92 2e     @...@...@...@...
    5916:	40 0f 90 2e 40 00 91 26 40 00 92 2e 40 00 93 0e     @...@..&@...@...
    5926:	40 0f 90 2c 40 00 91 26 40 00 92 2c 40 0f 90 2e     @..,@..&@..,@...
    5936:	40 00 91 22 40 00 92 2e 40 00 93 0c 40 1a 90 34     @.."@...@...@..4
    5946:	40 00 92 35 40 04 90 35 40 00 91 26 40 00 92 35     @..5@..5@..&@..5
    5956:	40 00 93 0e 40 1e 90 35 40 00 91 29 40 00 92 35     @...@..5@..)@..5
    5966:	40 00 93 0d 40 0f 90 33 40 00 91 27 40 00 92 33     @...@..3@..'@..3
    5976:	40 0f 90 32 40 00 91 26 40 00 92 32 40 00 93 0c     @..2@..&@..2@...
    5986:	40 07 0c 40 08 90 30 40 00 91 24 40 00 92 30 40     @..@..0@..$@..0@
    5996:	00 93 0e 40 07 0c 40 08 90 2e 40 00 91 22 40 00     ...@..@...@.."@.
    59a6:	92 2e 40 0f 93 0e 40 0f 90 34 40 00 91 18 40 00     ..@...@..4@...@.
    59b6:	92 35 40 03 90 35 40 00 92 35 40 04 90 34 40 00     .5@..5@..5@..4@.
    59c6:	92 34 40 04 90 35 40 00 92 35 40 04 90 34 40 00     .4@..5@..5@..4@.
    59d6:	92 35 40 00 93 0e 40 03 90 35 40 00 92 35 40 0c     .5@...@..5@..5@.
    59e6:	90 2e 40 00 91 22 40 00 92 2e 40 00 93 0c 40 0f     ..@.."@...@...@.
    59f6:	90 2e 40 00 91 22 40 00 92 2e 40 00 93 0c 40 07     ..@.."@...@...@.
    5a06:	0c 40 08 90 30 40 00 91 26 40 00 92 30 40 00 93     .@..0@..&@..0@..
    5a16:	0e 40 0f 90 32 40 00 92 32 40 0f 90 35 40 00 91     .@..2@..2@..5@..
    5a26:	22 40 00 92 35 40 00 93 0c 40 0f 90 33 40 00 91     "@..5@...@..3@..
    5a36:	22 40 00 92 33 40 00 93 0c 40 07 0c 40 08 90 32     "@..3@...@..@..2
    5a46:	40 00 91 29 40 00 92 32 40 00 93 0e 40 1e 90 2e     @..)@..2@...@...
    5a56:	40 00 91 22 40 00 92 2e 40 00 93 0c 40 0f 90 2e     @.."@...@...@...
    5a66:	40 00 91 22 40 00 92 2e 40 00 93 0c 40 07 0c 40     @.."@...@...@..@
    5a76:	08 90 30 40 00 91 26 40 00 92 30 40 00 93 0e 40     ..0@..&@..0@...@
    5a86:	0f 90 32 40 00 91 22 40 00 92 32 40 0f 90 30 40     ..2@.."@..2@..0@
    5a96:	00 91 29 40 00 92 30 40 00 93 0e 40 07 0c 40 08     ..)@..0@...@..@.
    5aa6:	90 33 40 00 91 27 40 00 92 33 40 00 93 0c 40 07     .3@..'@..3@...@.
    5ab6:	0c 40 08 90 30 40 00 91 26 40 00 92 30 40 00 93     .@..0@..&@..0@..
    5ac6:	0e 40 07 0c 40 08 90 35 40 00 92 35 40 00 93 0c     .@..@..5@..5@...
    5ad6:	40 07 0c 40 08 90 2e 40 00 91 22 40 00 92 2e 40     @..@...@.."@...@
    5ae6:	00 93 0c 40 0f 90 2e 40 00 91 22 40 00 92 2e 40     ...@...@.."@...@
    5af6:	00 93 0c 40 07 0c 40 08 90 30 40 00 91 26 40 00     ...@..@..0@..&@.
    5b06:	92 30 40 00 93 0e 40 0f 90 32 40 00 92 32 40 0f     .0@...@..2@..2@.
    5b16:	90 35 40 00 91 22 40 00 92 35 40 00 93 0c 40 0f     .5@.."@..5@...@.
    5b26:	90 33 40 00 91 22 40 00 92 33 40 00 93 0c 40 07     .3@.."@..3@...@.
    5b36:	0c 40 08 90 32 40 00 91 29 40 00 92 32 40 00 93     .@..2@..)@..2@..
    5b46:	0e 40 1e 90 35 40 00 91 29 40 00 92 35 40 00 93     .@..5@..)@..5@..
    5b56:	0c 40 07 90 2e 40 00 92 2e 40 08 90 33 40 00 91     .@...@...@..3@..
    5b66:	27 40 00 92 33 40 00 93 0c 40 07 90 2e 40 00 92     '@..3@...@...@..
    5b76:	2e 40 00 93 0c 40 08 90 32 40 00 91 26 40 00 92     .@...@..2@..&@..
    5b86:	32 40 00 93 0d 40 07 90 2e 40 00 92 2e 40 08 91     2@...@...@...@..
    5b96:	24 40 07 90 2e 40 00 92 2e 40 08 91 22 40 00 93     $@...@...@.."@..
    5ba6:	0c 40 07 90 2e 40 00 92 2e 40 00 93 0c 40 08 90     .@...@...@...@..
    5bb6:	2e 40 00 92 2e 40 00 93 0c 40 07 0c 40 08 90 34     .@...@...@..@..4
    5bc6:	40 00 91 29 40 00 92 35 40 00 93 0d 40 03 90 35     @..)@..5@...@..5
    5bd6:	40 00 92 35 40 04 91 29 40 04 90 34 40 00 92 34     @..5@..)@..4@..4
    5be6:	40 04 90 35 40 00 91 29 40 00 92 35 40 07 90 34     @..5@..)@..5@..4
    5bf6:	40 00 92 34 40 04 90 35 40 00 92 35 40 04 90 35     @..4@..5@..5@..5
    5c06:	40 00 91 22 40 00 92 35 40 00 93 0c 40 0f 90 33     @.."@..5@...@..3
    5c16:	40 00 91 22 40 00 92 33 40 00 93 0c 40 07 90 32     @.."@..3@...@..2
    5c26:	40 00 91 22 40 00 92 32 40 00 93 0c 40 08 90 35     @.."@..2@...@..5
    5c36:	40 00 91 26 40 00 92 35 40 00 93 0e 40 0f 90 35     @..&@..5@...@..5
    5c46:	40 00 91 22 40 00 92 35 40 00 93 0e 40 0f 90 32     @.."@..5@...@..2
    5c56:	40 00 91 24 40 00 92 32 40 00 93 0c 40 0f 90 35     @..$@..2@...@..5
    5c66:	40 00 91 22 40 00 92 35 40 00 93 0c 40 07 0c 40     @.."@..5@...@..@
    5c76:	08 90 37 40 00 91 29 40 00 92 37 40 00 93 0e 40     ..7@..)@..7@...@
    5c86:	0f 0e 40 0b 90 34 40 00 92 34 40 04 90 35 40 00     ..@..4@..4@..5@.
    5c96:	91 22 40 00 92 35 40 00 93 0c 40 0f 90 33 40 00     ."@..5@...@..3@.
    5ca6:	91 22 40 00 92 33 40 00 93 0c 40 07 90 32 40 00     ."@..3@...@..2@.
    5cb6:	91 22 40 00 92 32 40 00 93 0c 40 08 90 35 40 00     ."@..2@...@..5@.
    5cc6:	91 26 40 00 92 35 40 00 93 0e 40 0f 90 35 40 00     .&@..5@...@..5@.
    5cd6:	91 22 40 00 92 35 40 00 93 0e 40 0f 90 37 40 00     ."@..5@...@..7@.
    5ce6:	91 29 40 00 92 37 40 00 93 0e 40 0f 90 35 40 00     .)@..7@...@..5@.
    5cf6:	91 27 40 00 92 35 40 0f 90 32 40 00 91 26 40 00     .'@..5@..2@..&@.
    5d06:	92 32 40 00 93 0c 40 0f 0c 40 0b 90 32 40 00 92     .2@...@..@..2@..
    5d16:	32 40 04 90 35 40 00 91 22 40 00 92 35 40 00 93     2@..5@.."@..5@..
    5d26:	0c 40 0f 90 33 40 00 91 22 40 00 92 33 40 00 93     .@..3@.."@..3@..
    5d36:	0c 40 07 90 32 40 00 91 22 40 00 92 32 40 00 93     .@..2@.."@..2@..
    5d46:	0c 40 08 90 35 40 00 91 26 40 00 92 35 40 00 93     .@..5@..&@..5@..
    5d56:	0e 40 0f 90 35 40 00 91 22 40 00 92 35 40 00 93     .@..5@.."@..5@..
    5d66:	0e 40 0f 90 32 40 00 91 24 40 00 92 32 40 00 93     .@..2@..$@..2@..
    5d76:	0c 40 0f 90 35 40 00 91 22 40 00 92 35 40 00 93     .@..5@.."@..5@..
    5d86:	0c 40 07 0c 40 08 90 37 40 00 91 29 40 00 92 37     .@..@..7@..)@..7
    5d96:	40 00 93 0e 40 0f 0e 40 0b 90 34 40 00 92 34 40     @...@..@..4@..4@
    5da6:	04 90 35 40 00 91 22 40 00 92 35 40 00 93 0c 40     ..5@.."@..5@...@
    5db6:	0f 90 33 40 00 91 22 40 00 92 33 40 00 93 0c 40     ..3@.."@..3@...@
    5dc6:	07 91 22 40 00 93 0c 40 08 90 35 40 00 91 26 40     .."@...@..5@..&@
    5dd6:	00 92 35 40 00 93 0e 40 0f 90 33 40 00 91 22 40     ..5@...@..3@.."@
    5de6:	00 92 33 40 00 93 0e 40 0f 90 37 40 00 91 27 40     ..3@...@..7@..'@
    5df6:	00 92 37 40 00 93 0e 40 0f 90 35 40 00 91 24 40     ..7@...@..5@..$@
    5e06:	00 92 35 40 07 90 34 40 00 92 34 40 08 90 32 40     ..5@..4@..4@..2@
    5e16:	00 91 29 40 00 92 32 40 00 93 0c 40 0f 90 32 40     ..)@..2@...@..2@
    5e26:	00 91 29 40 00 92 32 40 00 93 0c 40 0f 90 35 40     ..)@..2@...@..5@
    5e36:	00 91 22 40 00 92 35 40 00 93 0c 40 0f 90 33 40     .."@..5@...@..3@
    5e46:	00 91 22 40 00 92 33 40 00 93 0c 40 07 90 32 40     .."@..3@...@..2@
    5e56:	00 91 22 40 00 92 32 40 00 93 0c 40 08 90 35 40     .."@..2@...@..5@
    5e66:	00 91 26 40 00 92 35 40 00 93 0e 40 0f 90 35 40     ..&@..5@...@..5@
    5e76:	00 91 22 40 00 92 35 40 00 93 0e 40 0f 90 32 40     .."@..5@...@..2@
    5e86:	00 91 24 40 00 92 32 40 00 93 0c 40 0f 90 35 40     ..$@..2@...@..5@
    5e96:	00 91 22 40 00 92 35 40 00 93 0c 40 07 0c 40 08     .."@..5@...@..@.
    5ea6:	90 37 40 00 91 29 40 00 92 37 40 00 93 0e 40 0f     .7@..)@..7@...@.
    5eb6:	0e 40 0b 90 34 40 00 92 34 40 04 90 35 40 00 91     .@..4@..4@..5@..
    5ec6:	22 40 00 92 35 40 00 93 0c 40 0f 90 33 40 00 91     "@..5@...@..3@..
    5ed6:	22 40 00 92 33 40 00 93 0c 40 07 90 32 40 00 91     "@..3@...@..2@..
    5ee6:	22 40 00 92 32 40 00 93 0c 40 08 90 35 40 00 91     "@..2@...@..5@..
    5ef6:	26 40 00 92 35 40 00 93 0e 40 0f 90 35 40 00 91     &@..5@...@..5@..
    5f06:	22 40 00 92 35 40 00 93 0e 40 0f 90 37 40 00 91     "@..5@...@..7@..
    5f16:	29 40 00 92 37 40 00 93 0c 40 0f 90 35 40 00 91     )@..7@...@..5@..
    5f26:	27 40 00 92 35 40 00 93 0e 40 07 0e 40 08 90 32     '@..5@...@..@..2
    5f36:	40 00 91 26 40 00 92 32 40 00 93 0c 40 0f 0c 40     @..&@..2@...@..@
    5f46:	0b 90 32 40 00 92 32 40 04 90 35 40 00 91 22 40     ..2@..2@..5@.."@
    5f56:	00 92 35 40 00 93 0c 40 0f 90 33 40 00 91 22 40     ..5@...@..3@.."@
    5f66:	00 92 33 40 00 93 0c 40 07 90 32 40 00 91 22 40     ..3@...@..2@.."@
    5f76:	00 92 32 40 00 93 0c 40 08 90 35 40 00 91 26 40     ..2@...@..5@..&@
    5f86:	00 92 35 40 00 93 0e 40 0f 90 35 40 00 91 22 40     ..5@...@..5@.."@
    5f96:	00 92 35 40 00 93 0e 40 0f 90 32 40 00 91 24 40     ..5@...@..2@..$@
    5fa6:	00 92 32 40 00 93 0c 40 0f 90 35 40 00 91 22 40     ..2@...@..5@.."@
    5fb6:	00 92 35 40 00 93 0c 40 07 0c 40 08 90 37 40 00     ..5@...@..@..7@.
    5fc6:	91 29 40 00 92 37 40 00 93 0e 40 0f 0e 40 0b 90     .)@..7@...@..@..
    5fd6:	34 40 00 92 34 40 04 90 35 40 00 91 22 40 00 92     4@..4@..5@.."@..
    5fe6:	35 40 00 93 0c 40 0f 90 33 40 00 91 22 40 00 92     5@...@..3@.."@..
    5ff6:	33 40 00 93 0c 40 07 91 22 40 00 93 0c 40 08 90     3@...@.."@...@..
    6006:	35 40 00 91 26 40 00 92 35 40 00 93 0e 40 0f 90     5@..&@..5@...@..
    6016:	33 40 00 91 22 40 00 92 33 40 00 93 0e 40 0f 90     3@.."@..3@...@..
    6026:	37 40 00 91 27 40 00 92 37 40 00 93 0e 40 0f 90     7@..'@..7@...@..
    6036:	35 40 00 91 24 40 00 92 35 40 00 93 0e 40 07 90     5@..$@..5@...@..
    6046:	34 40 00 92 34 40 00 93 0e 40 08 90 32 40 00 91     4@..4@...@..2@..
    6056:	29 40 00 92 32 40 00 93 0c 40 07 90 33 40 00 92     )@..2@...@..3@..
    6066:	33 40 08 90 32 40 00 91 29 40 00 92 32 40 00 93     3@..2@..)@..2@..
    6076:	0c 40 07 90 30 40 00 92 30 40 08 90 2e 40 00 91     .@..0@..0@...@..
    6086:	22 40 00 92 2e 40 00 93 0c 40 07 90 2e 40 00 92     "@...@...@...@..
    6096:	2e 40 08 93 0c 40 07 90 2e 40 00 92 2e 40 00 93     .@...@...@...@..
    60a6:	0c 40 08 90 35 40 00 91 26 40 00 92 35 40 00 93     .@..5@..&@..5@..
    60b6:	0c 40 0f 90 2c 40 00 91 26 40 00 92 2c 40 00 93     .@..,@..&@..,@..
    60c6:	0e 40 0f 90 2e 40 00 91 22 40 00 92 2e 40 00 93     .@...@.."@...@..
    60d6:	0c 40 07 90 2e 40 00 92 2e 40 08 93 0c 40 07 90     .@...@...@...@..
    60e6:	2e 40 00 92 2e 40 00 93 0c 40 08 90 35 40 00 91     .@...@...@..5@..
    60f6:	26 40 00 92 35 40 00 93 0c 40 0f 0e 40 07 0e 40     &@..5@...@..@..@
    6106:	08 90 2e 40 00 91 22 40 00 92 2e 40 00 93 0c 40     ...@.."@...@...@
    6116:	07 90 2e 40 00 92 2e 40 08 93 0c 40 07 90 2e 40     ...@...@...@...@
    6126:	00 92 2e 40 00 93 0c 40 08 90 35 40 00 91 26 40     ...@...@..5@..&@
    6136:	00 92 35 40 00 93 0c 40 0f 90 2c 40 00 91 26 40     ..5@...@..,@..&@
    6146:	00 92 2c 40 00 93 0e 40 0f 90 37 40 00 91 22 40     ..,@...@..7@.."@
    6156:	00 92 37 40 00 93 0c 40 07 90 2e 40 00 92 2e 40     ..7@...@...@...@
    6166:	08 90 35 40 00 92 35 40 00 93 0c 40 07 90 2e 40     ..5@..5@...@...@
    6176:	00 92 2e 40 00 93 0c 40 08 90 32 40 00 91 26 40     ...@...@..2@..&@
    6186:	00 92 32 40 00 93 0c 40 07 90 2e 40 00 92 2e 40     ..2@...@...@...@
    6196:	08 90 32 40 00 92 32 40 00 93 0e 40 07 90 30 40     ..2@..2@...@..0@
    61a6:	00 92 30 40 00 93 0e 40 08 90 2e 40 00 91 22 40     ..0@...@...@.."@
    61b6:	00 92 2e 40 00 93 0c 40 07 90 2e 40 00 92 2e 40     ...@...@...@...@
    61c6:	08 93 0c 40 07 90 2e 40 00 92 2e 40 00 93 0c 40     ...@...@...@...@
    61d6:	08 90 35 40 00 91 26 40 00 92 35 40 00 93 0c 40     ..5@..&@..5@...@
    61e6:	0f 90 2c 40 00 91 26 40 00 92 2c 40 00 93 0e 40     ..,@..&@..,@...@
    61f6:	0f 90 2e 40 00 91 22 40 00 92 2e 40 00 93 0c 40     ...@.."@...@...@
    6206:	07 90 2e 40 00 92 2e 40 08 93 0c 40 07 90 2e 40     ...@...@...@...@
    6216:	00 92 2e 40 00 93 0c 40 08 90 35 40 00 91 26 40     ...@...@..5@..&@
    6226:	00 92 35 40 00 93 0c 40 0f 0e 40 07 0e 40 08 90     ..5@...@..@..@..
    6236:	35 40 00 91 22 40 00 92 35 40 00 93 0c 40 07 90     5@.."@..5@...@..
    6246:	2e 40 00 92 2e 40 08 90 32 40 00 91 22 40 00 92     .@...@..2@.."@..
    6256:	32 40 00 93 0c 40 07 90 2e 40 00 92 2e 40 00 93     2@...@...@...@..
    6266:	0c 40 08 90 35 40 00 91 26 40 00 92 35 40 00 93     .@..5@..&@..5@..
    6276:	0c 40 07 90 2e 40 00 92 2e 40 08 90 32 40 00 92     .@...@...@..2@..
    6286:	32 40 00 93 0e 40 0f 90 30 40 00 91 22 40 00 92     2@...@..0@.."@..
    6296:	30 40 00 93 0c 40 0f 90 33 40 00 91 22 40 00 92     0@...@..3@.."@..
    62a6:	33 40 00 93 0c 40 07 0c 40 08 90 32 40 00 91 29     3@...@..@..2@..)
    62b6:	40 00 92 32 40 00 93 0c 40 0f 90 32 40 00 92 32     @..2@...@..2@..2
    62c6:	40 00 93 0e 40 07 90 30 40 00 92 30 40 00 93 0e     @...@..0@..0@...
    62d6:	40 08 90 2e 40 00 91 22 40 00 92 2e 40 00 93 0d     @...@.."@...@...
    62e6:	40 0f 90 2e 40 00 91 22 40 00 92 2e 40 0f 90 30     @...@.."@...@..0
    62f6:	40 00 91 26 40 00 92 30 40 00 93 0e 40 0f 90 32     @..&@..0@...@..2
    6306:	40 00 92 32 40 0f 90 35 40 00 91 22 40 00 92 35     @..2@..5@.."@..5
    6316:	40 00 93 0c 40 0f 90 33 40 00 91 22 40 00 92 33     @...@..3@.."@..3
    6326:	40 0f 90 32 40 00 91 29 40 00 92 32 40 00 93 0e     @..2@..)@..2@...
    6336:	40 1e 90 2e 40 00 91 22 40 00 92 2e 40 00 93 0c     @...@.."@...@...
    6346:	40 0f 90 2e 40 00 91 22 40 00 92 2e 40 0f 90 30     @...@.."@...@..0
    6356:	40 00 91 26 40 00 92 30 40 00 93 0e 40 0f 90 32     @..&@..0@...@..2
    6366:	40 00 91 22 40 00 92 32 40 0f 90 30 40 00 91 29     @.."@..2@..0@..)
    6376:	40 00 92 30 40 00 93 0c 40 0f 90 33 40 00 91 27     @..0@...@..3@..'
    6386:	40 00 92 33 40 0f 90 30 40 00 91 26 40 00 92 30     @..3@..0@..&@..0
    6396:	40 00 93 0e 40 0f 90 35 40 00 92 35 40 00 93 0e     @...@..5@..5@...
    63a6:	40 0f 90 2e 40 00 91 22 40 00 92 2e 40 00 93 0c     @...@.."@...@...
    63b6:	40 0f 90 2e 40 00 91 22 40 00 92 2e 40 0f 90 30     @...@.."@...@..0
    63c6:	40 00 91 26 40 00 92 30 40 00 93 0e 40 0f 90 32     @..&@..0@...@..2
    63d6:	40 00 92 32 40 0f 90 35 40 00 91 22 40 00 92 35     @..2@..5@.."@..5
    63e6:	40 00 93 0c 40 0f 90 33 40 00 91 22 40 00 92 33     @...@..3@.."@..3
    63f6:	40 0f 90 32 40 00 91 29 40 00 92 32 40 00 93 0e     @..2@..)@..2@...
    6406:	40 1e 90 35 40 00 91 29 40 00 92 35 40 00 93 0c     @..5@..)@..5@...
    6416:	40 07 90 2e 40 00 92 2e 40 08 90 33 40 00 91 27     @...@...@..3@..'
    6426:	40 00 92 33 40 07 90 2e 40 00 92 2e 40 08 90 32     @..3@...@...@..2
    6436:	40 00 91 26 40 00 92 32 40 00 93 0e 40 07 90 2e     @..&@..2@...@...
    6446:	40 00 92 2e 40 08 91 24 40 07 90 2e 40 00 92 2e     @...@..$@...@...
    6456:	40 08 91 22 40 00 93 0c 40 07 90 2e 40 00 92 2e     @.."@...@...@...
    6466:	40 08 90 2e 40 00 92 2e 40 0f 90 34 40 00 91 29     @...@...@..4@..)
    6476:	40 00 92 34 40 00 93 0e 40 03 90 35 40 00 92 35     @..4@...@..5@..5
    6486:	40 04 90 34 40 00 91 29 40 00 93 0c 40 04 90 35     @..4@..)@...@..5
    6496:	40 00 92 34 40 04 90 34 40 00 91 29 40 00 92 35     @..4@..4@..)@..5
    64a6:	40 00 93 0e 40 03 90 35 40 03 ff 06 01 45 01 92     @...@..5@....E..
    64b6:	34 40 00 93 0e 40 04 92 35 40 04 ff 2f 00           4@...@..5@../.

000064c4 <levelclear_song>:
    64c4:	00 c0 10 00 c1 11 00 c2 12 00 c3 0b 00 b0 07 76     ...............v
    64d4:	00 90 45 40 00 b1 07 76 00 07 76 00 91 39 40 00     ..E@...v..v..9@.
    64e4:	b2 07 76 00 07 76 00 07 7f 00 92 51 40 03 90 46     ..v..v.....Q@..F
    64f4:	40 00 91 3a 40 00 92 52 40 0c 90 27 40 00 91 1b     @..:@..R@..'@...
    6504:	40 00 92 33 40 03 90 2b 40 00 91 1f 40 00 92 37     @..3@..+@...@..7
    6514:	40 04 90 2f 40 00 91 23 40 00 92 3b 40 04 90 33     @../@..#@..;@..3
    6524:	40 00 91 27 40 00 92 3f 40 04 90 36 40 00 91 2a     @..'@..?@..6@..*
    6534:	40 00 92 42 40 03 90 38 40 00 91 2c 40 00 92 44     @..B@..8@..,@..D
    6544:	40 1b 90 2e 40 00 91 22 40 00 92 3a 40 0f 90 30     @...@.."@..:@..0
    6554:	40 00 91 24 40 00 92 3c 40 0f 90 2e 40 00 91 22     @..$@..<@...@.."
    6564:	40 00 92 3a 40 0f 90 32 40 00 91 26 40 00 92 3e     @..:@..2@..&@..>
    6574:	40 0f 90 2e 40 00 91 22 40 00 92 3a 40 0f 90 33     @...@.."@..:@..3
    6584:	40 00 91 27 40 00 92 3f 40 2d 90 33 40 00 91 27     @..'@..?@-.3@..'
    6594:	40 00 92 3f 40 0f 90 37 40 00 91 2b 40 00 92 43     @..?@..7@..+@..C
    65a4:	40 0f 90 36 40 00 91 2a 40 00 92 42 40 0f 90 37     @..6@..*@..B@..7
    65b4:	40 00 91 2b 40 00 92 43 40 07 90 37 40 00 91 2b     @..+@..C@..7@..+
    65c4:	40 00 92 43 40 0f 90 33 40 00 91 27 40 00 92 3f     @..C@..3@..'@..?
    65d4:	40 17 ff 2f 00                                      @../.

000065d9 <uzebox_string>:
    65d9:	55 5a 45 42 4f 58 00                                UZEBOX.

000065e0 <title_block_coords>:
    65e0:	02 01 00 03 04 03 00 05 02 05 04 05 00 07 04 07     ................
    65f0:	09 01 07 02 08 04 0a 06 08 07 0c 01 0e 01 0d 03     ................
    6600:	0d 05 0d 07 11 01 13 01 11 03 14 03 11 05 13 05     ................
    6610:	11 07 14 07 18 01 1a 01 17 03 1b 03 17 05 1b 05     ................
    6620:	18 07 1a 07 02 0b 00 0c 01 0e 03 10 01 11 05 0b     ................
    6630:	07 0b 06 0d 06 0f 06 11 0c 0b 0a 0d 0e 0d 0a 0f     ................
    6640:	0c 0f 0e 0f 0a 11 0e 11 12 0b 14 0b 11 0d 11 0f     ................
    6650:	12 11 14 11 17 0b 17 0d 1a 0d 17 0f 19 0f 17 11     ................
    6660:	1a 11                                               ..

00006662 <round_text_rt_map>:
    6662:	01 02 05 06 09 0a 0d 0e 11 12 15 16 03 04 07 08     ................
    6672:	0b 0c 0f 10 13 14 17 18                             ........

0000667a <__c.1945>:
    667a:	52 45 41 44 59 5d 00                                READY].

00006681 <__c.1947>:
    6681:	52 45 41 44 59 5b 00                                READY[.

00006688 <__c.1949>:
    6688:	47 4f 5b 5b 00                                      GO[[.

0000668d <__c.1733>:
    668d:	53 49 4e 47 4c 45 00                                SINGLE.

00006694 <__c.1735>:
    6694:	56 45 52 53 55 53 00                                VERSUS.

0000669b <__c.1737>:
    669b:	55 5a 45 4e 45 54 00                                UZENET.

000066a2 <__c.1660>:
    66a2:	55 5a 45 4e 45 54 00                                UZENET.

000066a9 <__c.1662>:
    66a9:	43 4f 4e 4e 45 43 54 49 4e 47 00                    CONNECTING.

000066b4 <__c.1665>:
    66b4:	45 52 52 4f 52 00                                   ERROR.

000066ba <__c.1667>:
    66ba:	20 52 55 4e 20 45 53 50 38 32 36 36 00               RUN ESP8266.

000066c7 <__c.1669>:
    66c7:	53 45 54 55 50 20 55 54 49 4c 49 54 59 00           SETUP UTILITY.

000066d5 <__c.1672>:
    66d5:	43 4f 4e 4e 45 43 54 45 44 5b 00                    CONNECTED[.

000066e0 <__c.1681>:
    66e0:	43 48 4f 4f 53 45 20 50 4c 41 59 45 52 00           CHOOSE PLAYER.

000066ee <__c.1683>:
    66ee:	44 33 54 48 41 44 44 33 52 00                       D3THADD3R.

000066f8 <__c.1685>:
    66f8:	45 41 53 59 20 43 50 55 00                          EASY CPU.

00006701 <__c.1687>:
    6701:	47 4f 4f 44 20 43 50 55 00                          GOOD CPU.

0000670a <__c.1689>:
    670a:	41 52 54 43 46 4f 58 00                             ARTCFOX.

00006712 <__c.1691>:
    6712:	5c 4d 4f 52 45 5e 00                                \MORE^.

00006719 <__c.1630>:
    6719:	53 4f 55 52 43 45 20 43 4f 44 45 00                 SOURCE CODE.

00006725 <__c.1632>:
    6725:	20 20 20 47 50 4c 20 33 00                             GPL 3.

0000672e <__c.1634>:
    672e:	53 46 58 20 47 46 58 20 4d 55 53 49 43 00           SFX GFX MUSIC.

0000673c <__c.1636>:
    673c:	20 20 43 43 20 53 41 20 34 00                         CC SA 4.

00006746 <__c.1638>:
    6746:	20 4c 45 45 20 57 45 42 45 52 00                     LEE WEBER.

00006751 <__c.1640>:
    6751:	20 20 20 32 30 31 37 00 00                             2017..

0000675a <__ctors_end>:
    675a:	11 24       	eor	r1, r1
    675c:	1f be       	out	0x3f, r1	; 63
    675e:	cf ef       	ldi	r28, 0xFF	; 255
    6760:	d0 e1       	ldi	r29, 0x10	; 16
    6762:	de bf       	out	0x3e, r29	; 62
    6764:	cd bf       	out	0x3d, r28	; 61

00006766 <__do_copy_data>:
    6766:	11 e0       	ldi	r17, 0x01	; 1
    6768:	a0 e0       	ldi	r26, 0x00	; 0
    676a:	b1 e0       	ldi	r27, 0x01	; 1
    676c:	e0 ec       	ldi	r30, 0xC0	; 192
    676e:	f0 e9       	ldi	r31, 0x90	; 144
    6770:	02 c0       	rjmp	.+4      	; 0x6776 <.do_copy_data_start>

00006772 <.do_copy_data_loop>:
    6772:	05 90       	lpm	r0, Z+
    6774:	0d 92       	st	X+, r0

00006776 <.do_copy_data_start>:
    6776:	aa 30       	cpi	r26, 0x0A	; 10
    6778:	b1 07       	cpc	r27, r17
    677a:	d9 f7       	brne	.-10     	; 0x6772 <.do_copy_data_loop>

0000677c <__do_clear_bss>:
    677c:	1e e0       	ldi	r17, 0x0E	; 14
    677e:	a0 e2       	ldi	r26, 0x20	; 32
    6780:	b1 e0       	ldi	r27, 0x01	; 1
    6782:	01 c0       	rjmp	.+2      	; 0x6786 <.do_clear_bss_start>

00006784 <.do_clear_bss_loop>:
    6784:	1d 92       	st	X+, r1

00006786 <.do_clear_bss_start>:
    6786:	af 31       	cpi	r26, 0x1F	; 31
    6788:	b1 07       	cpc	r27, r17
    678a:	e1 f7       	brne	.-8      	; 0x6784 <.do_clear_bss_loop>

0000678c <wdt_init>:

void wdt_init(void)
{

#if TRUE_RANDOM_GEN == 1	
	wdt_randomize();
    678c:	0e 94 7c 38 	call	0x70f8	; 0x70f8 <wdt_randomize>
#endif

    MCUSR = 0;
    6790:	14 be       	out	0x34, r1	; 52
    wdt_disable();
    6792:	88 e1       	ldi	r24, 0x18	; 24
    6794:	0f b6       	in	r0, 0x3f	; 63
    6796:	f8 94       	cli
    6798:	80 93 60 00 	sts	0x0060, r24
    679c:	10 92 60 00 	sts	0x0060, r1
    67a0:	0f be       	out	0x3f, r0	; 63

000067a2 <Initialize>:


void Initialize(void){
	int i;

	if(!isEepromFormatted()) FormatEeprom();
    67a2:	0e 94 5d 39 	call	0x72ba	; 0x72ba <isEepromFormatted>
    67a6:	88 23       	and	r24, r24
    67a8:	11 f4       	brne	.+4      	; 0x67ae <Initialize+0xc>
    67aa:	0e 94 3a 39 	call	0x7274	; 0x7274 <FormatEeprom>

	cli();
    67ae:	f8 94       	cli
		mix_bank=0;
	#endif
	
	#if MIXER_CHAN4_TYPE == 0
		//initialize LFSR		
		tr4_barrel_lo=1;
    67b0:	91 e0       	ldi	r25, 0x01	; 1
    67b2:	90 93 b5 0c 	sts	0x0CB5, r25
		tr4_barrel_hi=1;		
    67b6:	90 93 b6 0c 	sts	0x0CB6, r25
		tr4_params=0b00000001; //15 bits no divider (1)
    67ba:	90 93 b4 0c 	sts	0x0CB4, r25
		snesMouseEnabled=false;
	#endif

	//silence all sound channels
	for(i=0;i<CHANNELS;i++){
		mixer.channels.all[i].volume=0;
    67be:	10 92 a1 0c 	sts	0x0CA1, r1
    67c2:	10 92 a7 0c 	sts	0x0CA7, r1
    67c6:	10 92 ad 0c 	sts	0x0CAD, r1
    67ca:	10 92 b3 0c 	sts	0x0CB3, r1
    67ce:	10 92 b9 0c 	sts	0x0CB9, r1
	}
	
	//set sync parameters. starts at odd field, in pre-eq pulses, line 1, vsync flag cleared
	sync_phase=0;
    67d2:	10 92 84 0c 	sts	0x0C84, r1
	sync_flags=0;
    67d6:	10 92 86 0c 	sts	0x0C86, r1
	sync_pulse=SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES;
    67da:	82 e1       	ldi	r24, 0x12	; 18
    67dc:	80 93 85 0c 	sts	0x0C85, r24

	//set rendering parameters
	render_lines_count=FRAME_LINES;
    67e0:	80 ed       	ldi	r24, 0xD0	; 208
    67e2:	80 93 8c 0c 	sts	0x0C8C, r24
	first_render_line=FIRST_RENDER_LINE;
    67e6:	8c e1       	ldi	r24, 0x1C	; 28
    67e8:	80 93 8b 0c 	sts	0x0C8B, r24

	joypad1_status_hi=0;
    67ec:	10 92 90 0c 	sts	0x0C90, r1
    67f0:	10 92 8f 0c 	sts	0x0C8F, r1
	joypad2_status_hi=0;
    67f4:	10 92 94 0c 	sts	0x0C94, r1
    67f8:	10 92 93 0c 	sts	0x0C93, r1
	sound_enabled=1;
    67fc:	90 93 a0 0c 	sts	0x0CA0, r25

	InitializeVideoMode();
    6800:	0e 94 e4 42 	call	0x85c8	; 0x85c8 <InitializeVideoMode>
    6804:	20 e9       	ldi	r18, 0x90	; 144
    6806:	30 e0       	ldi	r19, 0x00	; 0
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
		val=pgm_read_word(&io_table[j]);
    6808:	f9 01       	movw	r30, r18
    680a:	85 91       	lpm	r24, Z+
    680c:	94 91       	lpm	r25, Z+
		ptr=(u8*)(val&0xff);
		*ptr=val>>8;	
    680e:	fc 01       	movw	r30, r24
    6810:	f0 70       	andi	r31, 0x00	; 0
    6812:	90 83       	st	Z, r25
    6814:	2e 5f       	subi	r18, 0xFE	; 254
    6816:	3f 4f       	sbci	r19, 0xFF	; 255
	InitializeVideoMode();
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
    6818:	80 e0       	ldi	r24, 0x00	; 0
    681a:	2e 3b       	cpi	r18, 0xBE	; 190
    681c:	38 07       	cpc	r19, r24
    681e:	a1 f7       	brne	.-24     	; 0x6808 <Initialize+0x66>
		val=pgm_read_word(&io_table[j]);
		ptr=(u8*)(val&0xff);
		*ptr=val>>8;	
	}

	sei();
    6820:	78 94       	sei
	
	DisplayLogo();
    6822:	0e 94 e3 42 	call	0x85c6	; 0x85c6 <DisplayLogo>
    6826:	0e 94 b1 47 	call	0x8f62	; 0x8f62 <main>
    682a:	0c 94 5e 48 	jmp	0x90bc	; 0x90bc <_exit>

0000682e <__bad_interrupt>:
    682e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00006832 <sub_video_mode3>:
	; Mode 3 with NO scrolling
	;***************************************************	
	sub_video_mode3:

		;wait cycles to align with next hsync
		WAIT r16,465 //30-3+340+98
    6832:	0b e9       	ldi	r16, 0x9B	; 155
    6834:	0a 95       	dec	r16
    6836:	f1 f7       	brne	.-4      	; 0x6834 <sub_video_mode3+0x2>

		;Refresh ramtiles indexes in VRAM
		;This has to be done because the main
		;program may have altered the VRAM
		;after vsync and the rendering interrupt.
		lds r16,userRamTilesCount
    6838:	00 91 c6 0c 	lds	r16, 0x0CC6

		ldi ZL,lo8(ram_tiles_restore);
    683c:	ec e1       	ldi	r30, 0x1C	; 28
		ldi ZH,hi8(ram_tiles_restore);
    683e:	fc e0       	ldi	r31, 0x0C	; 12
		ldi r18,3
    6840:	23 e0       	ldi	r18, 0x03	; 3
		mul r16,r18
    6842:	02 9f       	mul	r16, r18
		add ZL,r0
    6844:	e0 0d       	add	r30, r0
		adc ZH,r1
    6846:	f1 1d       	adc	r31, r1

		ldi YL,lo8(vram)
    6848:	c0 e2       	ldi	r28, 0x20	; 32
		ldi YH,hi8(vram)
    684a:	d1 e0       	ldi	r29, 0x01	; 1

		lds r18,free_tile_index
    684c:	20 91 4e 0d 	lds	r18, 0x0D4E
		ldi r19,MAX_RAMTILES		;maximum possible ramtiles
    6850:	3c e3       	ldi	r19, 0x3C	; 60
		sub r19,r18					;sub free tile
    6852:	32 1b       	sub	r19, r18
		add r19,r16					;add user tiles
    6854:	30 0f       	add	r19, r16

		cp r18,r16
    6856:	20 17       	cp	r18, r16
		breq no_ramtiles
    6858:	51 f0       	breq	.+20     	; 0x686e <no_ramtiles>
		nop
    685a:	00 00       	nop
	...

0000685e <upd_loop>:
		nop
upd_loop:
		ld XL,Z+	;load vram offset of ramtile
    685e:	a1 91       	ld	r26, Z+
		ld XH,Z+
    6860:	b1 91       	ld	r27, Z+

		ld r17,X	;get latest VRAM tile that may have been modified my
    6862:	1c 91       	ld	r17, X
		st Z+,r17	;the main program and store it in the restore buffer
    6864:	11 93       	st	Z+, r17
		st X,r16	;write the ramtile index back to vram
    6866:	0c 93       	st	X, r16

		inc r16
    6868:	03 95       	inc	r16
		cp r16,r18
    686a:	02 17       	cp	r16, r18
		brlo upd_loop ;loop is 14 cycles
    686c:	c0 f3       	brcs	.-16     	; 0x685e <upd_loop>

0000686e <no_ramtiles>:

no_ramtiles:
		;wait for remaining maximum possible ramtiles
1:
		ldi r17,3
    686e:	13 e0       	ldi	r17, 0x03	; 3
		dec r17
    6870:	1a 95       	dec	r17
		brne .-4
    6872:	f1 f7       	brne	.-4      	; 0x6870 <no_ramtiles+0x2>
		rjmp .
    6874:	00 c0       	rjmp	.+0      	; 0x6876 <no_ramtiles+0x8>
		dec r19
    6876:	3a 95       	dec	r19
		brne 1b
    6878:	d1 f7       	brne	.-12     	; 0x686e <no_ramtiles>


		lds r2,overlay_tile_table
    687a:	20 90 82 0c 	lds	r2, 0x0C82
		lds r3,overlay_tile_table+1
    687e:	30 90 83 0c 	lds	r3, 0x0C83
		lds r16,tile_table_lo 
    6882:	00 91 7e 0c 	lds	r16, 0x0C7E
		lds r17,tile_table_hi
    6886:	10 91 7f 0c 	lds	r17, 0x0C7F
		movw r12,r16
    688a:	68 01       	movw	r12, r16
		movw r6,r16
    688c:	38 01       	movw	r6, r16

		ldi r24,SCREEN_TILES_V
    688e:	8a e1       	ldi	r24, 0x1A	; 26
		ldi YL,lo8(vram)
    6890:	c0 e2       	ldi	r28, 0x20	; 32
		ldi YH,hi8(vram)
    6892:	d1 e0       	ldi	r29, 0x01	; 1
		movw r8,YL	
    6894:	4e 01       	movw	r8, r28
		clr r0
    6896:	00 24       	eor	r0, r0

		;load values for overlay if it's activated (overlay_height>0)
		lds r19,overlay_height	
    6898:	30 91 81 0c 	lds	r19, 0x0C81
		cpi r19,0
    689c:	30 30       	cpi	r19, 0x00	; 0
		
		breq .+2
    689e:	09 f0       	breq	.+2      	; 0x68a2 <no_ramtiles+0x34>
		ldi YL,lo8(overlay_vram)
    68a0:	cc e2       	ldi	r28, 0x2C	; 44
		
		breq .+2
    68a2:	09 f0       	breq	.+2      	; 0x68a6 <no_ramtiles+0x38>
		ldi YH,hi8(overlay_vram)
    68a4:	d4 e0       	ldi	r29, 0x04	; 4
		
		breq .+2
    68a6:	09 f0       	breq	.+2      	; 0x68aa <no_ramtiles+0x3c>
		mov r24,r19
    68a8:	83 2f       	mov	r24, r19

		breq .+2
    68aa:	09 f0       	breq	.+2      	; 0x68ae <no_ramtiles+0x40>
		movw r12,r2
    68ac:	61 01       	movw	r12, r2


		ldi r16,SCREEN_TILES_V*TILE_HEIGHT; total scanlines to draw (28*8)
    68ae:	00 ed       	ldi	r16, 0xD0	; 208
		mov r10,r16
    68b0:	a0 2e       	mov	r10, r16
		clr r22
    68b2:	66 27       	eor	r22, r22
		ldi r23,TILE_WIDTH ;tile width in pixels
    68b4:	78 e0       	ldi	r23, 0x08	; 8

000068b6 <next_tile_line>:
	;r12:r13= Main tile table or overlay tile table if overlay_height>0
	;r24	= vertical tiles to draw before reloading vram adress (for overlay)
	;Y      = vram or overlay_ram if overlay_height>0
	;
	next_tile_line:	
		rcall hsync_pulse
    68b6:	0b d3       	rcall	.+1558   	; 0x6ece <hsync_pulse>

		WAIT r19,250 - AUDIO_OUT_HSYNC_CYCLES + CENTER_ADJUSTMENT + FILL_DELAY
    68b8:	3c e0       	ldi	r19, 0x0C	; 12
    68ba:	3a 95       	dec	r19
    68bc:	f1 f7       	brne	.-4      	; 0x68ba <next_tile_line+0x4>
    68be:	00 00       	nop
    68c0:	00 00       	nop

		;***draw line***
		call render_tile_line
    68c2:	0e 94 92 34 	call	0x6924	; 0x6924 <render_tile_line>

		WAIT r19,47 + FILL_DELAY - CENTER_ADJUSTMENT	
    68c6:	3f e0       	ldi	r19, 0x0F	; 15
    68c8:	3a 95       	dec	r19
    68ca:	f1 f7       	brne	.-4      	; 0x68c8 <next_tile_line+0x12>
    68cc:	00 00       	nop
    68ce:	00 00       	nop

		dec r10
    68d0:	aa 94       	dec	r10
		breq frame_end
    68d2:	a9 f0       	breq	.+42     	; 0x68fe <frame_end>
	
		inc r22
    68d4:	63 95       	inc	r22
		lpm ;3 nop
    68d6:	c8 95       	lpm

		cpi r22,TILE_HEIGHT ;last char line? 1
    68d8:	68 30       	cpi	r22, 0x08	; 8
		breq next_tile_row 
    68da:	31 f0       	breq	.+12     	; 0x68e8 <next_tile_row>
	
		;wait to align with next_tile_row instructions (+1 cycle for the breq)
		WAIT r19,11
    68dc:	33 e0       	ldi	r19, 0x03	; 3
    68de:	3a 95       	dec	r19
    68e0:	f1 f7       	brne	.-4      	; 0x68de <next_tile_line+0x28>
    68e2:	00 00       	nop
    68e4:	00 00       	nop
		
		rjmp next_tile_line	
    68e6:	e7 cf       	rjmp	.-50     	; 0x68b6 <next_tile_line>

000068e8 <next_tile_row>:

	next_tile_row:
		clr r22		;current char line			;1	
    68e8:	66 27       	eor	r22, r22

		clr r0
    68ea:	00 24       	eor	r0, r0
		ldi r19,VRAM_TILES_H
    68ec:	3e e1       	ldi	r19, 0x1E	; 30
		add YL,r19
    68ee:	c3 0f       	add	r28, r19
		adc YH,r0
    68f0:	d0 1d       	adc	r29, r0

		dec r24		;overlay done?
    68f2:	8a 95       	dec	r24
		brne .+2
    68f4:	09 f4       	brne	.+2      	; 0x68f8 <next_tile_row+0x10>
		movw YL,r8	;main vram
    68f6:	e4 01       	movw	r28, r8
		brne .+2
    68f8:	09 f4       	brne	.+2      	; 0x68fc <next_tile_row+0x14>
		movw r12,r6	;main tile table
    68fa:	63 01       	movw	r12, r6

	
		rjmp next_tile_line
    68fc:	dc cf       	rjmp	.-72     	; 0x68b6 <next_tile_line>

000068fe <frame_end>:

	frame_end:

		WAIT r19,18
    68fe:	36 e0       	ldi	r19, 0x06	; 6
    6900:	3a 95       	dec	r19
    6902:	f1 f7       	brne	.-4      	; 0x6900 <frame_end+0x2>

		rcall hsync_pulse ;145
    6904:	e4 d2       	rcall	.+1480   	; 0x6ece <hsync_pulse>
	
		clr r1
    6906:	11 24       	eor	r1, r1
		call RestoreBackground
    6908:	0e 94 00 42 	call	0x8400	; 0x8400 <RestoreBackground>

		;set vsync flag & flip field
		lds ZL,sync_flags
    690c:	e0 91 86 0c 	lds	r30, 0x0C86
		ldi r20,SYNC_FLAG_FIELD
    6910:	42 e0       	ldi	r20, 0x02	; 2
		ori ZL,SYNC_FLAG_VSYNC
    6912:	e1 60       	ori	r30, 0x01	; 1
		eor ZL,r20
    6914:	e4 27       	eor	r30, r20
		sts sync_flags,ZL
    6916:	e0 93 86 0c 	sts	0x0C86, r30

		;clear any pending timer int
		ldi ZL,(1<<OCF1A)
    691a:	e2 e0       	ldi	r30, 0x02	; 2
		sts _SFR_MEM_ADDR(TIFR1),ZL
    691c:	e0 93 36 00 	sts	0x0036, r30



		clr r1
    6920:	11 24       	eor	r1, r1


		ret
    6922:	08 95       	ret

00006924 <render_tile_line>:
	;*************************************************
	render_tile_line:

		;load first tile and determine if its a ROM or RAM tile

		movw XL,YL
    6924:	de 01       	movw	r26, r28

		mul r22,r23
    6926:	67 9f       	mul	r22, r23

		movw r16,r12 ;current tile table (main or overlay)
    6928:	86 01       	movw	r16, r12
		subi r16,lo8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    692a:	00 58       	subi	r16, 0x80	; 128
		sbci r17,hi8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    692c:	17 40       	sbci	r17, 0x07	; 7

		add r16,r0
    692e:	00 0d       	add	r16, r0
		adc r17,r1
    6930:	11 1d       	adc	r17, r1
		movw r2,r16			;rom tiles
    6932:	18 01       	movw	r2, r16

		ldi r16,lo8(ram_tiles)
    6934:	0c e9       	ldi	r16, 0x9C	; 156
		ldi r17,hi8(ram_tiles)
    6936:	14 e0       	ldi	r17, 0x04	; 4
		add r16,r0
    6938:	00 0d       	add	r16, r0
		adc r17,r1
    693a:	11 1d       	adc	r17, r1
		movw r4,r16			;ram tiles
    693c:	28 01       	movw	r4, r16

		ldi r19,TILE_HEIGHT*TILE_WIDTH
    693e:	30 e4       	ldi	r19, 0x40	; 64
		ldi r17,SCREEN_TILES_H
    6940:	1e e1       	ldi	r17, 0x1E	; 30

	    ld r18,X+     	;load next tile # from VRAM
    6942:	2d 91       	ld	r18, X+

		mul r18,r19 	;tile*width*height
    6944:	23 9f       	mul	r18, r19
		movw r20,r2		;rom tiles
    6946:	a1 01       	movw	r20, r2
		
		cpi r18,RAM_TILES_COUNT
    6948:	2e 31       	cpi	r18, 0x1E	; 30
		brcc .+2
    694a:	08 f4       	brcc	.+2      	; 0x694e <render_tile_line+0x2a>
		movw r20,r4		;ram tiles
    694c:	a2 01       	movw	r20, r4

	    add r0,r20    ;add title table address +row offset
    694e:	04 0e       	add	r0, r20
	    adc r1,r21
    6950:	15 1e       	adc	r1, r21

		movw ZL,r0
    6952:	f0 01       	movw	r30, r0
		
		cpi r18,RAM_TILES_COUNT
    6954:	2e 31       	cpi	r18, 0x1E	; 30
		brcs ramloop
    6956:	f0 f0       	brcs	.+60     	; 0x6994 <ramloop>

00006958 <romloop>:
	

	romloop:
	    lpm r16,Z+
    6958:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    695a:	08 b9       	out	0x08, r16	; 8
	    ld r18,X+     ;load next tile # from VRAM
    695c:	2d 91       	ld	r18, X+


	    lpm r16,Z+
    695e:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 2
    6960:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    6962:	23 9f       	mul	r18, r19


	    lpm r16,Z+
    6964:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 3
    6966:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT		;is tile in RAM or ROM? (RAM tiles have indexes<RAM_TILES_COUNT)
    6968:	2e 31       	cpi	r18, 0x1E	; 30
		nop
    696a:	00 00       	nop

	    lpm r16,Z+
    696c:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    696e:	08 b9       	out	0x08, r16	; 8
		brsh .+2		;skip in next tile is in ROM	
    6970:	08 f4       	brcc	.+2      	; 0x6974 <romloop+0x1c>
		movw r20,r4 	;load RAM title table address +row offset	
    6972:	a2 01       	movw	r20, r4
   
	    lpm r16,Z+
    6974:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 5
    6976:	08 b9       	out	0x08, r16	; 8
		add r0,r20		;add title table address +row offset lsb
    6978:	04 0e       	add	r0, r20
	    adc r1,r21		;add title table address +row offset msb
    697a:	15 1e       	adc	r1, r21

	    lpm r16,Z+
    697c:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 6
    697e:	08 b9       	out	0x08, r16	; 8
		
		cpi r18,RAM_TILES_COUNT	
    6980:	2e 31       	cpi	r18, 0x1E	; 30
		dec r17			;decrement tiles to draw on line
    6982:	1a 95       	dec	r17
   
	    lpm r16,Z+
    6984:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 7   
    6986:	08 b9       	out	0x08, r16	; 8
	    lpm r16,Z+
    6988:	05 91       	lpm	r16, Z+

		breq end	
    698a:	31 f1       	breq	.+76     	; 0x69d8 <end>
	    movw ZL,r0   	;copy next tile adress
    698c:	f0 01       	movw	r30, r0

	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    698e:	08 b9       	out	0x08, r16	; 8
	    brcc romloop
    6990:	18 f7       	brcc	.-58     	; 0x6958 <romloop>
	
		rjmp .
    6992:	00 c0       	rjmp	.+0      	; 0x6994 <ramloop>

00006994 <ramloop>:

	ramloop:

	    ld r16,Z+
    6994:	01 91       	ld	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    6996:	08 b9       	out	0x08, r16	; 8
	    ld r18,X+     ;load next tile # from VRAM
    6998:	2d 91       	ld	r18, X+

	    ld r16,Z+ 
    699a:	01 91       	ld	r16, Z+
		nop   
    699c:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16 		;pixel 2
    699e:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    69a0:	23 9f       	mul	r18, r19


	    ld r16,Z+
    69a2:	01 91       	ld	r16, Z+
		nop
    69a4:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16         ;pixel 3
    69a6:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT
    69a8:	2e 31       	cpi	r18, 0x1E	; 30
   		rjmp .
    69aa:	00 c0       	rjmp	.+0      	; 0x69ac <ramloop+0x18>

	    ld r16,Z+
    69ac:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    69ae:	08 b9       	out	0x08, r16	; 8
		brcs .+2 
    69b0:	08 f0       	brcs	.+2      	; 0x69b4 <ramloop+0x20>
		movw r20,r2 	;ROM title table address +row offset	
    69b2:	a1 01       	movw	r20, r2
   
   
	    ld r16,Z+
    69b4:	01 91       	ld	r16, Z+
	    add r0,r20    ;add title table address +row offset
    69b6:	04 0e       	add	r0, r20
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 5
    69b8:	08 b9       	out	0x08, r16	; 8
	    adc r1,r21
    69ba:	15 1e       	adc	r1, r21
		rjmp .
    69bc:	00 c0       	rjmp	.+0      	; 0x69be <ramloop+0x2a>
    
		ld r16,Z+		
    69be:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 6
    69c0:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT
    69c2:	2e 31       	cpi	r18, 0x1E	; 30
		rjmp .  
    69c4:	00 c0       	rjmp	.+0      	; 0x69c6 <ramloop+0x32>

	    ld r16,Z+	
    69c6:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16      ;pixel 7   
    69c8:	08 b9       	out	0x08, r16	; 8
	    ld r16,Z+
    69ca:	01 91       	ld	r16, Z+

	    dec r17
    69cc:	1a 95       	dec	r17
	    breq end
    69ce:	21 f0       	breq	.+8      	; 0x69d8 <end>
	
		movw ZL,r0
    69d0:	f0 01       	movw	r30, r0
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    69d2:	08 b9       	out	0x08, r16	; 8
	
	    brcc romloop
    69d4:	08 f6       	brcc	.-126    	; 0x6958 <romloop>
		rjmp ramloop
    69d6:	de cf       	rjmp	.-68     	; 0x6994 <ramloop>

000069d8 <end>:
	
	end:
		out _SFR_IO_ADDR(DATA_PORT),r16  	;pixel 8
    69d8:	08 b9       	out	0x08, r16	; 8
		clr r16	
    69da:	00 27       	eor	r16, r16
		lpm	
    69dc:	c8 95       	lpm
		nop
    69de:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16        
    69e0:	08 b9       	out	0x08, r16	; 8

		ret
    69e2:	08 95       	ret

000069e4 <CopyFlashTile>:
; C-callable
; r24=Source ROM tile index
; r22=Dest RAM tile index
;************************************
CopyFlashTile:
	ldi r18,TILE_HEIGHT*TILE_WIDTH
    69e4:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	lds ZL,tile_table_lo
    69e6:	e0 91 7e 0c 	lds	r30, 0x0C7E
	lds ZH,tile_table_hi
    69ea:	f0 91 7f 0c 	lds	r31, 0x0C7F
	mul r24,r18
    69ee:	82 9f       	mul	r24, r18
	add ZL,r0
    69f0:	e0 0d       	add	r30, r0
	adc ZH,r1
    69f2:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    69f4:	ac e9       	ldi	r26, 0x9C	; 156
	ldi XH,hi8(ram_tiles)
    69f6:	b4 e0       	ldi	r27, 0x04	; 4
	mul r22,r18
    69f8:	62 9f       	mul	r22, r18
	add XL,r0
    69fa:	a0 0d       	add	r26, r0
	adc XH,r1
    69fc:	b1 1d       	adc	r27, r1

	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	lpm r1,Z+
	st X+,r1
.endr
    69fe:	15 90       	lpm	r1, Z+
    6a00:	1d 92       	st	X+, r1
    6a02:	15 90       	lpm	r1, Z+
    6a04:	1d 92       	st	X+, r1
    6a06:	15 90       	lpm	r1, Z+
    6a08:	1d 92       	st	X+, r1
    6a0a:	15 90       	lpm	r1, Z+
    6a0c:	1d 92       	st	X+, r1
    6a0e:	15 90       	lpm	r1, Z+
    6a10:	1d 92       	st	X+, r1
    6a12:	15 90       	lpm	r1, Z+
    6a14:	1d 92       	st	X+, r1
    6a16:	15 90       	lpm	r1, Z+
    6a18:	1d 92       	st	X+, r1
    6a1a:	15 90       	lpm	r1, Z+
    6a1c:	1d 92       	st	X+, r1
    6a1e:	15 90       	lpm	r1, Z+
    6a20:	1d 92       	st	X+, r1
    6a22:	15 90       	lpm	r1, Z+
    6a24:	1d 92       	st	X+, r1
    6a26:	15 90       	lpm	r1, Z+
    6a28:	1d 92       	st	X+, r1
    6a2a:	15 90       	lpm	r1, Z+
    6a2c:	1d 92       	st	X+, r1
    6a2e:	15 90       	lpm	r1, Z+
    6a30:	1d 92       	st	X+, r1
    6a32:	15 90       	lpm	r1, Z+
    6a34:	1d 92       	st	X+, r1
    6a36:	15 90       	lpm	r1, Z+
    6a38:	1d 92       	st	X+, r1
    6a3a:	15 90       	lpm	r1, Z+
    6a3c:	1d 92       	st	X+, r1
    6a3e:	15 90       	lpm	r1, Z+
    6a40:	1d 92       	st	X+, r1
    6a42:	15 90       	lpm	r1, Z+
    6a44:	1d 92       	st	X+, r1
    6a46:	15 90       	lpm	r1, Z+
    6a48:	1d 92       	st	X+, r1
    6a4a:	15 90       	lpm	r1, Z+
    6a4c:	1d 92       	st	X+, r1
    6a4e:	15 90       	lpm	r1, Z+
    6a50:	1d 92       	st	X+, r1
    6a52:	15 90       	lpm	r1, Z+
    6a54:	1d 92       	st	X+, r1
    6a56:	15 90       	lpm	r1, Z+
    6a58:	1d 92       	st	X+, r1
    6a5a:	15 90       	lpm	r1, Z+
    6a5c:	1d 92       	st	X+, r1
    6a5e:	15 90       	lpm	r1, Z+
    6a60:	1d 92       	st	X+, r1
    6a62:	15 90       	lpm	r1, Z+
    6a64:	1d 92       	st	X+, r1
    6a66:	15 90       	lpm	r1, Z+
    6a68:	1d 92       	st	X+, r1
    6a6a:	15 90       	lpm	r1, Z+
    6a6c:	1d 92       	st	X+, r1
    6a6e:	15 90       	lpm	r1, Z+
    6a70:	1d 92       	st	X+, r1
    6a72:	15 90       	lpm	r1, Z+
    6a74:	1d 92       	st	X+, r1
    6a76:	15 90       	lpm	r1, Z+
    6a78:	1d 92       	st	X+, r1
    6a7a:	15 90       	lpm	r1, Z+
    6a7c:	1d 92       	st	X+, r1
    6a7e:	15 90       	lpm	r1, Z+
    6a80:	1d 92       	st	X+, r1
    6a82:	15 90       	lpm	r1, Z+
    6a84:	1d 92       	st	X+, r1
    6a86:	15 90       	lpm	r1, Z+
    6a88:	1d 92       	st	X+, r1
    6a8a:	15 90       	lpm	r1, Z+
    6a8c:	1d 92       	st	X+, r1
    6a8e:	15 90       	lpm	r1, Z+
    6a90:	1d 92       	st	X+, r1
    6a92:	15 90       	lpm	r1, Z+
    6a94:	1d 92       	st	X+, r1
    6a96:	15 90       	lpm	r1, Z+
    6a98:	1d 92       	st	X+, r1
    6a9a:	15 90       	lpm	r1, Z+
    6a9c:	1d 92       	st	X+, r1
    6a9e:	15 90       	lpm	r1, Z+
    6aa0:	1d 92       	st	X+, r1
    6aa2:	15 90       	lpm	r1, Z+
    6aa4:	1d 92       	st	X+, r1
    6aa6:	15 90       	lpm	r1, Z+
    6aa8:	1d 92       	st	X+, r1
    6aaa:	15 90       	lpm	r1, Z+
    6aac:	1d 92       	st	X+, r1
    6aae:	15 90       	lpm	r1, Z+
    6ab0:	1d 92       	st	X+, r1
    6ab2:	15 90       	lpm	r1, Z+
    6ab4:	1d 92       	st	X+, r1
    6ab6:	15 90       	lpm	r1, Z+
    6ab8:	1d 92       	st	X+, r1
    6aba:	15 90       	lpm	r1, Z+
    6abc:	1d 92       	st	X+, r1
    6abe:	15 90       	lpm	r1, Z+
    6ac0:	1d 92       	st	X+, r1
    6ac2:	15 90       	lpm	r1, Z+
    6ac4:	1d 92       	st	X+, r1
    6ac6:	15 90       	lpm	r1, Z+
    6ac8:	1d 92       	st	X+, r1
    6aca:	15 90       	lpm	r1, Z+
    6acc:	1d 92       	st	X+, r1
    6ace:	15 90       	lpm	r1, Z+
    6ad0:	1d 92       	st	X+, r1
    6ad2:	15 90       	lpm	r1, Z+
    6ad4:	1d 92       	st	X+, r1
    6ad6:	15 90       	lpm	r1, Z+
    6ad8:	1d 92       	st	X+, r1
    6ada:	15 90       	lpm	r1, Z+
    6adc:	1d 92       	st	X+, r1
    6ade:	15 90       	lpm	r1, Z+
    6ae0:	1d 92       	st	X+, r1
    6ae2:	15 90       	lpm	r1, Z+
    6ae4:	1d 92       	st	X+, r1
    6ae6:	15 90       	lpm	r1, Z+
    6ae8:	1d 92       	st	X+, r1
    6aea:	15 90       	lpm	r1, Z+
    6aec:	1d 92       	st	X+, r1
    6aee:	15 90       	lpm	r1, Z+
    6af0:	1d 92       	st	X+, r1
    6af2:	15 90       	lpm	r1, Z+
    6af4:	1d 92       	st	X+, r1
    6af6:	15 90       	lpm	r1, Z+
    6af8:	1d 92       	st	X+, r1
    6afa:	15 90       	lpm	r1, Z+
    6afc:	1d 92       	st	X+, r1
	clr r1
    6afe:	11 24       	eor	r1, r1
	ret
    6b00:	08 95       	ret

00006b02 <CopyRamTile>:
; r24=Source RAM tile index
; r22=Dest RAM tile index
;************************************
CopyRamTile:

	ldi r18,TILE_HEIGHT*TILE_WIDTH
    6b02:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	ldi ZL,lo8(ram_tiles)
    6b04:	ec e9       	ldi	r30, 0x9C	; 156
	ldi ZH,hi8(ram_tiles)
    6b06:	f4 e0       	ldi	r31, 0x04	; 4
	mul r24,r18
    6b08:	82 9f       	mul	r24, r18
	add ZL,r0
    6b0a:	e0 0d       	add	r30, r0
	adc ZH,r1
    6b0c:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    6b0e:	ac e9       	ldi	r26, 0x9C	; 156
	ldi XH,hi8(ram_tiles)
    6b10:	b4 e0       	ldi	r27, 0x04	; 4
	mul r22,r18
    6b12:	62 9f       	mul	r22, r18
	add XL,r0
    6b14:	a0 0d       	add	r26, r0
	adc XH,r1
    6b16:	b1 1d       	adc	r27, r1

	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	ld r1,Z+
	st X+,r1
.endr
    6b18:	11 90       	ld	r1, Z+
    6b1a:	1d 92       	st	X+, r1
    6b1c:	11 90       	ld	r1, Z+
    6b1e:	1d 92       	st	X+, r1
    6b20:	11 90       	ld	r1, Z+
    6b22:	1d 92       	st	X+, r1
    6b24:	11 90       	ld	r1, Z+
    6b26:	1d 92       	st	X+, r1
    6b28:	11 90       	ld	r1, Z+
    6b2a:	1d 92       	st	X+, r1
    6b2c:	11 90       	ld	r1, Z+
    6b2e:	1d 92       	st	X+, r1
    6b30:	11 90       	ld	r1, Z+
    6b32:	1d 92       	st	X+, r1
    6b34:	11 90       	ld	r1, Z+
    6b36:	1d 92       	st	X+, r1
    6b38:	11 90       	ld	r1, Z+
    6b3a:	1d 92       	st	X+, r1
    6b3c:	11 90       	ld	r1, Z+
    6b3e:	1d 92       	st	X+, r1
    6b40:	11 90       	ld	r1, Z+
    6b42:	1d 92       	st	X+, r1
    6b44:	11 90       	ld	r1, Z+
    6b46:	1d 92       	st	X+, r1
    6b48:	11 90       	ld	r1, Z+
    6b4a:	1d 92       	st	X+, r1
    6b4c:	11 90       	ld	r1, Z+
    6b4e:	1d 92       	st	X+, r1
    6b50:	11 90       	ld	r1, Z+
    6b52:	1d 92       	st	X+, r1
    6b54:	11 90       	ld	r1, Z+
    6b56:	1d 92       	st	X+, r1
    6b58:	11 90       	ld	r1, Z+
    6b5a:	1d 92       	st	X+, r1
    6b5c:	11 90       	ld	r1, Z+
    6b5e:	1d 92       	st	X+, r1
    6b60:	11 90       	ld	r1, Z+
    6b62:	1d 92       	st	X+, r1
    6b64:	11 90       	ld	r1, Z+
    6b66:	1d 92       	st	X+, r1
    6b68:	11 90       	ld	r1, Z+
    6b6a:	1d 92       	st	X+, r1
    6b6c:	11 90       	ld	r1, Z+
    6b6e:	1d 92       	st	X+, r1
    6b70:	11 90       	ld	r1, Z+
    6b72:	1d 92       	st	X+, r1
    6b74:	11 90       	ld	r1, Z+
    6b76:	1d 92       	st	X+, r1
    6b78:	11 90       	ld	r1, Z+
    6b7a:	1d 92       	st	X+, r1
    6b7c:	11 90       	ld	r1, Z+
    6b7e:	1d 92       	st	X+, r1
    6b80:	11 90       	ld	r1, Z+
    6b82:	1d 92       	st	X+, r1
    6b84:	11 90       	ld	r1, Z+
    6b86:	1d 92       	st	X+, r1
    6b88:	11 90       	ld	r1, Z+
    6b8a:	1d 92       	st	X+, r1
    6b8c:	11 90       	ld	r1, Z+
    6b8e:	1d 92       	st	X+, r1
    6b90:	11 90       	ld	r1, Z+
    6b92:	1d 92       	st	X+, r1
    6b94:	11 90       	ld	r1, Z+
    6b96:	1d 92       	st	X+, r1
    6b98:	11 90       	ld	r1, Z+
    6b9a:	1d 92       	st	X+, r1
    6b9c:	11 90       	ld	r1, Z+
    6b9e:	1d 92       	st	X+, r1
    6ba0:	11 90       	ld	r1, Z+
    6ba2:	1d 92       	st	X+, r1
    6ba4:	11 90       	ld	r1, Z+
    6ba6:	1d 92       	st	X+, r1
    6ba8:	11 90       	ld	r1, Z+
    6baa:	1d 92       	st	X+, r1
    6bac:	11 90       	ld	r1, Z+
    6bae:	1d 92       	st	X+, r1
    6bb0:	11 90       	ld	r1, Z+
    6bb2:	1d 92       	st	X+, r1
    6bb4:	11 90       	ld	r1, Z+
    6bb6:	1d 92       	st	X+, r1
    6bb8:	11 90       	ld	r1, Z+
    6bba:	1d 92       	st	X+, r1
    6bbc:	11 90       	ld	r1, Z+
    6bbe:	1d 92       	st	X+, r1
    6bc0:	11 90       	ld	r1, Z+
    6bc2:	1d 92       	st	X+, r1
    6bc4:	11 90       	ld	r1, Z+
    6bc6:	1d 92       	st	X+, r1
    6bc8:	11 90       	ld	r1, Z+
    6bca:	1d 92       	st	X+, r1
    6bcc:	11 90       	ld	r1, Z+
    6bce:	1d 92       	st	X+, r1
    6bd0:	11 90       	ld	r1, Z+
    6bd2:	1d 92       	st	X+, r1
    6bd4:	11 90       	ld	r1, Z+
    6bd6:	1d 92       	st	X+, r1
    6bd8:	11 90       	ld	r1, Z+
    6bda:	1d 92       	st	X+, r1
    6bdc:	11 90       	ld	r1, Z+
    6bde:	1d 92       	st	X+, r1
    6be0:	11 90       	ld	r1, Z+
    6be2:	1d 92       	st	X+, r1
    6be4:	11 90       	ld	r1, Z+
    6be6:	1d 92       	st	X+, r1
    6be8:	11 90       	ld	r1, Z+
    6bea:	1d 92       	st	X+, r1
    6bec:	11 90       	ld	r1, Z+
    6bee:	1d 92       	st	X+, r1
    6bf0:	11 90       	ld	r1, Z+
    6bf2:	1d 92       	st	X+, r1
    6bf4:	11 90       	ld	r1, Z+
    6bf6:	1d 92       	st	X+, r1
    6bf8:	11 90       	ld	r1, Z+
    6bfa:	1d 92       	st	X+, r1
    6bfc:	11 90       	ld	r1, Z+
    6bfe:	1d 92       	st	X+, r1
    6c00:	11 90       	ld	r1, Z+
    6c02:	1d 92       	st	X+, r1
    6c04:	11 90       	ld	r1, Z+
    6c06:	1d 92       	st	X+, r1
    6c08:	11 90       	ld	r1, Z+
    6c0a:	1d 92       	st	X+, r1
    6c0c:	11 90       	ld	r1, Z+
    6c0e:	1d 92       	st	X+, r1
    6c10:	11 90       	ld	r1, Z+
    6c12:	1d 92       	st	X+, r1
    6c14:	11 90       	ld	r1, Z+
    6c16:	1d 92       	st	X+, r1
	clr r1
    6c18:	11 24       	eor	r1, r1
	ret
    6c1a:	08 95       	ret

00006c1c <BlitSprite>:
; r22=RAM tile index (bt)
; r21:r20=Y:X
; r19:r18=DY:DX
;************************************
BlitSprite:
	push r16
    6c1c:	0f 93       	push	r16
	push r17
    6c1e:	1f 93       	push	r17
	push YL
    6c20:	cf 93       	push	r28
	push YH
    6c22:	df 93       	push	r29

	;src=sprites_tiletable_lo+(sprites[i].tileIndex*TILE_HEIGHT*TILE_WIDTH)
	ldi r25,SPRITE_STRUCT_SIZE
    6c24:	94 e0       	ldi	r25, 0x04	; 4
	mul r24,r25
    6c26:	89 9f       	mul	r24, r25

	ldi ZL,lo8(sprites)	
    6c28:	ec e2       	ldi	r30, 0x2C	; 44
	ldi ZH,hi8(sprites)	
    6c2a:	f4 e0       	ldi	r31, 0x04	; 4
	add ZL,r0
    6c2c:	e0 0d       	add	r30, r0
	adc ZH,r1
    6c2e:	f1 1d       	adc	r31, r1

	ldd r16,Z+sprFlags
    6c30:	03 81       	ldd	r16, Z+3	; 0x03

	;8x16 multiply
	ldd r24,Z+sprTileIndex
    6c32:	82 81       	ldd	r24, Z+2	; 0x02
	ldi r30,TILE_WIDTH*TILE_HEIGHT
    6c34:	e0 e4       	ldi	r30, 0x40	; 64
	mul r24,r30
    6c36:	8e 9f       	mul	r24, r30
	movw r26,r0
    6c38:	d0 01       	movw	r26, r0
	
	;get tile bank addr
	ldi r25,4*2
    6c3a:	98 e0       	ldi	r25, 0x08	; 8
	mul r16,r25
    6c3c:	09 9f       	mul	r16, r25
	ldi YL,lo8(sprites_tile_banks)	
    6c3e:	c6 e7       	ldi	r28, 0x76	; 118
	ldi YH,hi8(sprites_tile_banks)	
    6c40:	dc e0       	ldi	r29, 0x0C	; 12
	clr r0
    6c42:	00 24       	eor	r0, r0
	add YL,r1
    6c44:	c1 0d       	add	r28, r1
	adc YH,r0		
    6c46:	d0 1d       	adc	r29, r0
	ldd ZL,Y+0
    6c48:	e8 81       	ld	r30, Y
	ldd ZH,Y+1
    6c4a:	f9 81       	ldd	r31, Y+1	; 0x01
	add ZL,r26	;tile data src
    6c4c:	ea 0f       	add	r30, r26
	adc ZH,r27
    6c4e:	fb 1f       	adc	r31, r27
	
	;dest=ram_tiles+(bt*TILE_HEIGHT*TILE_WIDTH)
	ldi XL,lo8(ram_tiles)	
    6c50:	ac e9       	ldi	r26, 0x9C	; 156
	ldi XH,hi8(ram_tiles)
    6c52:	b4 e0       	ldi	r27, 0x04	; 4
	ldi r25,TILE_WIDTH*TILE_HEIGHT
    6c54:	90 e4       	ldi	r25, 0x40	; 64
	mul r22,r25
    6c56:	69 9f       	mul	r22, r25
	add XL,r0
    6c58:	a0 0d       	add	r26, r0
	adc XH,r1
    6c5a:	b1 1d       	adc	r27, r1
			srcXdiff=destXdiff;
			src+=destXdiff;
		}
	}
	*/
	clr r1
    6c5c:	11 24       	eor	r1, r1
	clr YH		;hi8(srcXdiff)
    6c5e:	dd 27       	eor	r29, r29

	cpi r20,0	
    6c60:	40 30       	cpi	r20, 0x00	; 0
	brne x_2nd_tile
    6c62:	51 f4       	brne	.+20     	; 0x6c78 <x_2nd_tile>
	
	add XL,r18	;dest+=dx
    6c64:	a2 0f       	add	r26, r18
	adc XH,r1
    6c66:	b1 1d       	adc	r27, r1
	mov r24,r18	;destXdiff=dx
    6c68:	82 2f       	mov	r24, r18
	mov YL,r18	;srcXdiff=dx
    6c6a:	c2 2f       	mov	r28, r18

	sbrs r16,SPRITE_FLIP_X_BIT
    6c6c:	00 ff       	sbrs	r16, 0
	rjmp x_check_end
    6c6e:	11 c0       	rjmp	.+34     	; 0x6c92 <x_check_end>

	adiw ZL,(TILE_WIDTH-1)	;src+=7
    6c70:	37 96       	adiw	r30, 0x07	; 7
	ldi YL,TILE_WIDTH*2		;srcXdiff=((TILE_WIDTH*2)-dx);
    6c72:	c0 e1       	ldi	r28, 0x10	; 16
	sub YL,r18	
    6c74:	c2 1b       	sub	r28, r18
	rjmp x_check_end
    6c76:	0d c0       	rjmp	.+26     	; 0x6c92 <x_check_end>

00006c78 <x_2nd_tile>:

x_2nd_tile:
	ldi r24,TILE_WIDTH
    6c78:	88 e0       	ldi	r24, 0x08	; 8
	sub r24,r18		;8-DX = xdiff for dest
    6c7a:	82 1b       	sub	r24, r18

	sbrc r16,SPRITE_FLIP_X_BIT
    6c7c:	00 fd       	sbrc	r16, 0
	rjmp x2_flip_x
    6c7e:	04 c0       	rjmp	.+8      	; 0x6c88 <x2_flip_x>

	mov YL,r24		;srcXdiff=destXdiff;
    6c80:	c8 2f       	mov	r28, r24
	add ZL,r24		;src+=destXdiff;
    6c82:	e8 0f       	add	r30, r24
	adc ZH,r1	
    6c84:	f1 1d       	adc	r31, r1
	rjmp x_check_end
    6c86:	05 c0       	rjmp	.+10     	; 0x6c92 <x_check_end>

00006c88 <x2_flip_x>:

x2_flip_x:
	ldi YL,TILE_WIDTH
    6c88:	c8 e0       	ldi	r28, 0x08	; 8
	add YL,r18		;srcXdiff=TILE_WIDTH+dx;	
    6c8a:	c2 0f       	add	r28, r18
	add ZL,r18		;src+=dx;
    6c8c:	e2 0f       	add	r30, r18
	adc ZH,r1
    6c8e:	f1 1d       	adc	r31, r1
	sbiw ZL,1		;src--;
    6c90:	31 97       	sbiw	r30, 0x01	; 1

00006c92 <x_check_end>:
		}else{
			src+=(ydiff*TILE_WIDTH);
		}
	}
	*/
	cpi r21,0
    6c92:	50 30       	cpi	r21, 0x00	; 0
	brne y_2nd_tile
    6c94:	51 f4       	brne	.+20     	; 0x6caa <y_2nd_tile>

	ldi r25,TILE_WIDTH	;dest+=(dy*TILE_WIDTH)
    6c96:	98 e0       	ldi	r25, 0x08	; 8
	mul r25,r19			
    6c98:	93 9f       	mul	r25, r19
	add XL,r0
    6c9a:	a0 0d       	add	r26, r0
	adc XH,r1
    6c9c:	b1 1d       	adc	r27, r1

	mov r25,r19			;ydiff=dy
    6c9e:	93 2f       	mov	r25, r19

	//sbrc r16,SPRITE_FLIP_Y_BIT
	//adiw ZL,(TILE_WIDTH*(TILE_HEIGHT-1))

	sbrc r16,SPRITE_FLIP_Y_BIT
    6ca0:	01 fd       	sbrc	r16, 1
	subi ZL,lo8(-(TILE_WIDTH*(TILE_HEIGHT-1)));src+=(TILE_WIDTH*(TILE_HEIGHT-1));
    6ca2:	e8 5c       	subi	r30, 0xC8	; 200
	sbrc r16,SPRITE_FLIP_Y_BIT
    6ca4:	01 fd       	sbrc	r16, 1
	sbci ZH,hi8(-(TILE_WIDTH*(TILE_HEIGHT-1)))
    6ca6:	ff 4f       	sbci	r31, 0xFF	; 255


	rjmp y_check_end
    6ca8:	0a c0       	rjmp	.+20     	; 0x6cbe <y_check_end>

00006caa <y_2nd_tile>:

y_2nd_tile:
	ldi r25,TILE_HEIGHT	;ydiff=(TILE_HEIGHT-dy)
    6caa:	98 e0       	ldi	r25, 0x08	; 8
	sub r25,r19	
    6cac:	93 1b       	sub	r25, r19
	
	mov r22,r19			;temp=dy-1
    6cae:	63 2f       	mov	r22, r19
	dec r22
    6cb0:	6a 95       	dec	r22
	sbrs r16,SPRITE_FLIP_Y_BIT
    6cb2:	01 ff       	sbrs	r16, 1
	mov r22,r25			;temp=ydiff
    6cb4:	69 2f       	mov	r22, r25

	ldi r21,TILE_WIDTH	;src+=(temp*TILE_WIDTH);
    6cb6:	58 e0       	ldi	r21, 0x08	; 8
	mul r21,r22
    6cb8:	56 9f       	mul	r21, r22
	add ZL,r0
    6cba:	e0 0d       	add	r30, r0
	adc ZH,r1	
    6cbc:	f1 1d       	adc	r31, r1

00006cbe <y_check_end>:
y_check_end:	
	
	//if(flags&SPRITE_FLIP_X){
	//	step=-1;
	//}
	ser r22		;step=-1
    6cbe:	6f ef       	ldi	r22, 0xFF	; 255
	ser r23
    6cc0:	7f ef       	ldi	r23, 0xFF	; 255
	sbrs r16,SPRITE_FLIP_X_BIT
    6cc2:	00 ff       	sbrs	r16, 0
	ldi r22,1	;step=1
    6cc4:	61 e0       	ldi	r22, 0x01	; 1
	sbrs r16,SPRITE_FLIP_X_BIT
    6cc6:	00 ff       	sbrs	r16, 0
	clr r23
    6cc8:	77 27       	eor	r23, r23

	//if(flags&SPRITE_FLIP_Y){
	//	srcXdiff-=(TILE_WIDTH*2);
	//}
	sbrc r16,SPRITE_FLIP_Y_BIT
    6cca:	01 fd       	sbrc	r16, 1
	sbiw YL,(TILE_WIDTH*2)
    6ccc:	60 97       	sbiw	r28, 0x10	; 16
	;r24	= destXdiff
	;r25	= ydiff
	;X		= dest
	;Y		= srcXdiff
	;Z		= src
	clr r1
    6cce:	11 24       	eor	r1, r1
	ldi r19,TRANSLUCENT_COLOR
    6cd0:	35 e9       	ldi	r19, 0x95	; 149

	ldi r21,TILE_HEIGHT
    6cd2:	58 e0       	ldi	r21, 0x08	; 8
	sub r21,r25 	;yspan=(TILE_HEIGHT-ydiff)
    6cd4:	59 1b       	sub	r21, r25

00006cd6 <y_loop>:

y_loop:
	ldi r20,TILE_WIDTH
    6cd6:	48 e0       	ldi	r20, 0x08	; 8
	sub r20,r24 	;xspan=(TILE_WIDTH-destXdiff)
    6cd8:	48 1b       	sub	r20, r24

00006cda <x_loop>:

x_loop:
	lpm r18,Z		;px=pgm_read_byte(src);
    6cda:	24 91       	lpm	r18, Z+
	cpse r18,r19	;if(px!=TRANSLUCENT_COLOR)
    6cdc:	23 13       	cpse	r18, r19
	st X,r18		;*dest=px;
    6cde:	2c 93       	st	X, r18
	adiw XL,1
    6ce0:	11 96       	adiw	r26, 0x01	; 1
	add ZL,r22		;src+=step;
    6ce2:	e6 0f       	add	r30, r22
	adc ZH,r23
    6ce4:	f7 1f       	adc	r31, r23
	dec r20
    6ce6:	4a 95       	dec	r20
	brne x_loop
    6ce8:	c1 f7       	brne	.-16     	; 0x6cda <x_loop>

	add ZL,YL		;src+=srcXdiff
    6cea:	ec 0f       	add	r30, r28
	adc ZH,YH
    6cec:	fd 1f       	adc	r31, r29
	add XL,r24		;dest+=destXdiff
    6cee:	a8 0f       	add	r26, r24
	adc XH,r1
    6cf0:	b1 1d       	adc	r27, r1
	dec r21
    6cf2:	5a 95       	dec	r21
	brne y_loop
    6cf4:	81 f7       	brne	.-32     	; 0x6cd6 <y_loop>


	pop YH
    6cf6:	df 91       	pop	r29
	pop YL
    6cf8:	cf 91       	pop	r28
	pop r17
    6cfa:	1f 91       	pop	r17
	pop r16
    6cfc:	0f 91       	pop	r16
	ret
    6cfe:	08 95       	ret

00006d00 <__vector_13>:

;***************************************************************************
; Main Video sync interrupt
;***************************************************************************
TIMER1_COMPA_vect:
	push r0
    6d00:	0f 92       	push	r0
	push r1
    6d02:	1f 92       	push	r1
	push ZL;2
    6d04:	ef 93       	push	r30
	push ZH;2
    6d06:	ff 93       	push	r31
	
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    6d08:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    6d0a:	ef 93       	push	r30

	;Read timer offset since rollover to remove cycles 
	;and conpensate for interrupt latency.
	;This is nessesary to eliminate frame jitter.
	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    6d0c:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,0x12 ;MIN_INT_LATENCY
    6d10:	e2 51       	subi	r30, 0x12	; 18

	ldi ZH,1
    6d12:	f1 e0       	ldi	r31, 0x01	; 1

00006d14 <latency_loop>:
latency_loop:
	cp ZL,ZH
    6d14:	ef 17       	cp	r30, r31
	brlo .		;advance PC to next instruction	
    6d16:	00 f0       	brcs	.+0      	; 0x6d18 <latency_loop+0x4>
	inc ZH
    6d18:	f3 95       	inc	r31
	cpi ZH,10
    6d1a:	fa 30       	cpi	r31, 0x0A	; 10
	brlo latency_loop
    6d1c:	d8 f3       	brcs	.-10     	; 0x6d14 <latency_loop>
	jmp .
    6d1e:	0c 94 91 36 	jmp	0x6d22	; 0x6d22 <latency_loop+0xe>
	
	;decrement sync pulse counter
	lds ZL,sync_pulse
    6d22:	e0 91 85 0c 	lds	r30, 0x0C85
	dec ZL
    6d26:	ea 95       	dec	r30
	sts sync_pulse,ZL
    6d28:	e0 93 85 0c 	sts	0x0C85, r30

	;process sync phases
	lds ZH,sync_phase
    6d2c:	f0 91 84 0c 	lds	r31, 0x0C84
	sbrc ZH,0
    6d30:	f0 fd       	sbrc	r31, 0
	rjmp sync_hsync
    6d32:	57 c0       	rjmp	.+174    	; 0x6de2 <sync_hsync>
; Note: TCNT1 should be equal to 
; 0x68 on the cbi
; 0xAC on the sbi
; pulse duration: 68 clocks
;***************************************************		
	cpi ZL,SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    6d34:	ec 30       	cpi	r30, 0x0C	; 12
	brlo sync_eq
    6d36:	98 f0       	brcs	.+38     	; 0x6d5e <sync_eq>

	;Set HDRIVE to double rate during VSYNC
	ldi ZH,hi8(HDRIVE_CL_TWICE)
    6d38:	f3 e0       	ldi	r31, 0x03	; 3
	sts _SFR_MEM_ADDR(OCR1AH),ZH	
    6d3a:	f0 93 89 00 	sts	0x0089, r31
	ldi ZH,lo8(HDRIVE_CL_TWICE)
    6d3e:	fd e8       	ldi	r31, 0x8D	; 141
	sts _SFR_MEM_ADDR(OCR1AL),ZH
    6d40:	f0 93 88 00 	sts	0x0088, r31

	bst ZL,0
    6d44:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0x68
    6d46:	28 98       	cbi	0x05, 0	; 5
	brtc sync_pre_eq_no_sound_update
    6d48:	26 f4       	brtc	.+8      	; 0x6d52 <sync_pre_eq_no_sound_update>
	ldi ZL,1	;indicate update_sound to generate the SBI for pre-eq
    6d4a:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    6d4c:	0e 94 78 37 	call	0x6ef0	; 0x6ef0 <update_sound>
	rjmp sync_end
    6d50:	b7 c0       	rjmp	.+366    	; 0x6ec0 <sync_end>

00006d52 <sync_pre_eq_no_sound_update>:

sync_pre_eq_no_sound_update:
	WAIT ZL,64
    6d52:	e5 e1       	ldi	r30, 0x15	; 21
    6d54:	ea 95       	dec	r30
    6d56:	f1 f7       	brne	.-4      	; 0x6d54 <sync_pre_eq_no_sound_update+0x2>
    6d58:	00 00       	nop
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    6d5a:	28 9a       	sbi	0x05, 0	; 5
		
	rjmp sync_end
    6d5c:	b1 c0       	rjmp	.+354    	; 0x6ec0 <sync_end>

00006d5e <sync_eq>:
; 0x68  on the cbi
; 0x36E on the sbi
; low pulse duration: 774 clocks
;***************************************************	
sync_eq:
	cpi ZL,SYNC_POST_EQ_PULSES
    6d5e:	e6 30       	cpi	r30, 0x06	; 6
	brlo sync_post_eq
    6d60:	38 f1       	brcs	.+78     	; 0x6db0 <sync_post_eq>

	rjmp .
    6d62:	00 c0       	rjmp	.+0      	; 0x6d64 <sync_eq+0x6>
	rjmp .
    6d64:	00 c0       	rjmp	.+0      	; 0x6d66 <sync_eq+0x8>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    6d66:	28 98       	cbi	0x05, 0	; 5

	bst ZL,0
    6d68:	e0 fb       	bst	r30, 0
	ldi ZL,4
    6d6a:	e4 e0       	ldi	r30, 0x04	; 4
	brtc sync_eq_skip
    6d6c:	16 f4       	brtc	.+4      	; 0x6d72 <sync_eq_skip>
	
	call update_sound
    6d6e:	0e 94 78 37 	call	0x6ef0	; 0x6ef0 <update_sound>

00006d72 <sync_eq_skip>:
	;enable interupt to bring back sync 
	;level instead of wasting cycles
	;in a big wait loop

 	;clear interrupt flag
	ldi ZL,(1<<OCF1B)
    6d72:	e4 e0       	ldi	r30, 0x04	; 4
	sts _SFR_MEM_ADDR(TIFR1),ZL 
    6d74:	e0 93 36 00 	sts	0x0036, r30
	
	;generate interrupt on match
	;for timer1 compare unit b
	ldi ZL,(1<<OCIE1A)+(1<<OCIE1B)
    6d78:	e6 e0       	ldi	r30, 0x06	; 6
	sts _SFR_MEM_ADDR(TIMSK1),ZL
    6d7a:	e0 93 6f 00 	sts	0x006F, r30

	rjmp sync_end
    6d7e:	a0 c0       	rjmp	.+320    	; 0x6ec0 <sync_end>

00006d80 <__vector_14>:
; during VSYNC EQ pulses to recover ~5000 cycles per field
; with interrupt latency conpensation
; 37 cycles
;**********************************************************	
TIMER1_COMPB_vect:
	push ZL
    6d80:	ef 93       	push	r30
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    6d82:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    6d84:	ef 93       	push	r30

	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    6d86:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,62+31 ;0x5D ;MIN_INT_LATENCY
    6d8a:	ed 55       	subi	r30, 0x5D	; 93

	cpi ZL,1
    6d8c:	e1 30       	cpi	r30, 0x01	; 1
	brlo .		;advance PC to next instruction
    6d8e:	00 f0       	brcs	.+0      	; 0x6d90 <__vector_14+0x10>

	cpi ZL,2
    6d90:	e2 30       	cpi	r30, 0x02	; 2
	brlo .		;advance PC to next instruction
    6d92:	00 f0       	brcs	.+0      	; 0x6d94 <__vector_14+0x14>

	cpi ZL,3
    6d94:	e3 30       	cpi	r30, 0x03	; 3
	brlo .		;advance PC to next instruction
    6d96:	00 f0       	brcs	.+0      	; 0x6d98 <__vector_14+0x18>

	cpi ZL,4
    6d98:	e4 30       	cpi	r30, 0x04	; 4
	brlo .		;advance PC to next instruction
    6d9a:	00 f0       	brcs	.+0      	; 0x6d9c <__vector_14+0x1c>

	cpi ZL,5
    6d9c:	e5 30       	cpi	r30, 0x05	; 5
	brlo .		;advance PC to next instruction
    6d9e:	00 f0       	brcs	.+0      	; 0x6da0 <__vector_14+0x20>

 	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;68
    6da0:	28 9a       	sbi	0x05, 0	; 5
	ldi ZL,(1<<OCIE1A) ; disable OCIE1B 
    6da2:	e2 e0       	ldi	r30, 0x02	; 2
	sts _SFR_MEM_ADDR(TIMSK1),ZL ;stop generate interrupt on match
    6da4:	e0 93 6f 00 	sts	0x006F, r30
	
	;restore flags
	pop ZL
    6da8:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL	
    6daa:	ef bf       	out	0x3f, r30	; 63
	pop ZL
    6dac:	ef 91       	pop	r30
	reti
    6dae:	18 95       	reti

00006db0 <sync_post_eq>:
; 0x68 on the cbi
; 0xAC on the sbi
; pulse cycles: 68 clocks
;***************************************************	
sync_post_eq:	
	rjmp .
    6db0:	00 c0       	rjmp	.+0      	; 0x6db2 <sync_post_eq+0x2>

	bst ZL,0
    6db2:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    6db4:	28 98       	cbi	0x05, 0	; 5
	brtc sync_post_eq_no_sound_update
    6db6:	26 f4       	brtc	.+8      	; 0x6dc0 <sync_post_eq_no_sound_update>
	ldi ZL,1	
    6db8:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    6dba:	0e 94 78 37 	call	0x6ef0	; 0x6ef0 <update_sound>
	rjmp sync_pre_eq_cont
    6dbe:	05 c0       	rjmp	.+10     	; 0x6dca <sync_pre_eq_cont>

00006dc0 <sync_post_eq_no_sound_update>:

sync_post_eq_no_sound_update:
	WAIT ZL,64
    6dc0:	e5 e1       	ldi	r30, 0x15	; 21
    6dc2:	ea 95       	dec	r30
    6dc4:	f1 f7       	brne	.-4      	; 0x6dc2 <sync_post_eq_no_sound_update+0x2>
    6dc6:	00 00       	nop

	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN 
    6dc8:	28 9a       	sbi	0x05, 0	; 5

00006dca <sync_pre_eq_cont>:

sync_pre_eq_cont:	
	;check if it's the last vsync pulse
	lds ZL,sync_pulse
    6dca:	e0 91 85 0c 	lds	r30, 0x0C85
	cpi ZL,0
    6dce:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2 ;skip rjmp
    6dd0:	09 f0       	breq	.+2      	; 0x6dd4 <sync_pre_eq_cont+0xa>
	rjmp sync_end
    6dd2:	76 c0       	rjmp	.+236    	; 0x6ec0 <sync_end>
	
	;update sync flags
	ldi ZL,SYNC_HSYNC_PULSES
    6dd4:	ed ef       	ldi	r30, 0xFD	; 253
	sts sync_pulse,ZL
    6dd6:	e0 93 85 0c 	sts	0x0C85, r30
	ldi ZL,1
    6dda:	e1 e0       	ldi	r30, 0x01	; 1
	sts sync_phase,ZL
    6ddc:	e0 93 84 0c 	sts	0x0C84, r30
	
	rjmp sync_end
    6de0:	6f c0       	rjmp	.+222    	; 0x6ec0 <sync_end>

00006de2 <sync_hsync>:
; 0xF0 on the sbi
; pulse duration: 136 clocks
;***************************************************	

	; Set HDRIVE to normal rate
	ldi ZL,hi8(HDRIVE_CL)
    6de2:	e7 e0       	ldi	r30, 0x07	; 7
	sts _SFR_MEM_ADDR(OCR1AH),ZL	
    6de4:	e0 93 89 00 	sts	0x0089, r30
	ldi ZL,lo8(HDRIVE_CL)
    6de8:	eb e1       	ldi	r30, 0x1B	; 27
	sts _SFR_MEM_ADDR(OCR1AL),ZL
    6dea:	e0 93 88 00 	sts	0x0088, r30
	rjmp .
    6dee:	00 c0       	rjmp	.+0      	; 0x6df0 <sync_hsync+0xe>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    6df0:	28 98       	cbi	0x05, 0	; 5
	
	ldi ZL,2	;indicate update_sound to generate the SBI for pre-eq
    6df2:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    6df4:	00 c0       	rjmp	.+0      	; 0x6df6 <sync_hsync+0x14>
	call update_sound
    6df6:	0e 94 78 37 	call	0x6ef0	; 0x6ef0 <update_sound>

	;check if we have reached the first line to render
	ldi ZH,SYNC_HSYNC_PULSES
    6dfa:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    6dfc:	00 90 8b 0c 	lds	r0, 0x0C8B
	sub ZH,r0				
    6e00:	f0 19       	sub	r31, r0
	lds ZL,sync_pulse
    6e02:	e0 91 85 0c 	lds	r30, 0x0C85
	cp ZL,ZH
    6e06:	ef 17       	cp	r30, r31
	brsh no_render
    6e08:	d0 f4       	brcc	.+52     	; 0x6e3e <no_render>

	ldi ZH,SYNC_HSYNC_PULSES
    6e0a:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    6e0c:	00 90 8b 0c 	lds	r0, 0x0C8B
	sub ZH,r0				
    6e10:	f0 19       	sub	r31, r0
	lds r0,render_lines_count
    6e12:	00 90 8c 0c 	lds	r0, 0x0C8C
	sub ZH,r0			
    6e16:	f0 19       	sub	r31, r0
	cp ZL,ZH
    6e18:	ef 17       	cp	r30, r31
	brlo no_render
    6e1a:	88 f0       	brcs	.+34     	; 0x6e3e <no_render>

	;push r1-r29
	ldi ZL,29
    6e1c:	ed e1       	ldi	r30, 0x1D	; 29
	clr ZH
    6e1e:	ff 27       	eor	r31, r31

00006e20 <push_loop>:
push_loop:
	ld r0,Z	;load value from register file
    6e20:	00 80       	ld	r0, Z
	push r0
    6e22:	0f 92       	push	r0
	dec ZL
    6e24:	ea 95       	dec	r30
	brne push_loop	
    6e26:	e1 f7       	brne	.-8      	; 0x6e20 <push_loop>

	;timing compensation
	;to insure we always call the video mode 
	;routine at the same cycle	
	WAIT r16,230-(AUDIO_OUT_HSYNC_CYCLES)
    6e28:	06 e0       	ldi	r16, 0x06	; 6
    6e2a:	0a 95       	dec	r16
    6e2c:	f1 f7       	brne	.-4      	; 0x6e2a <push_loop+0xa>

	call VMODE_FUNC		;TCNT1=0x234
    6e2e:	0e 94 19 34 	call	0x6832	; 0x6832 <sub_video_mode3>

	;pop r1-r29
	ldi ZL,1
    6e32:	e1 e0       	ldi	r30, 0x01	; 1
	clr ZH
    6e34:	ff 27       	eor	r31, r31

00006e36 <pop_loop>:
pop_loop:
	pop r0
    6e36:	0f 90       	pop	r0
	st Z+,r0 ;store value to register file
    6e38:	01 92       	st	Z+, r0
	cpi ZL,30
    6e3a:	ee 31       	cpi	r30, 0x1E	; 30
	brlo pop_loop	
    6e3c:	e0 f3       	brcs	.-8      	; 0x6e36 <pop_loop>

00006e3e <no_render>:

no_render:

	;check if it's the last hsync pulse and we are 
	;ready for VSYNC
	lds ZL,sync_pulse
    6e3e:	e0 91 85 0c 	lds	r30, 0x0C85
	cpi ZL,0
    6e42:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2
    6e44:	09 f0       	breq	.+2      	; 0x6e48 <no_render+0xa>
	rjmp sync_end
    6e46:	3c c0       	rjmp	.+120    	; 0x6ec0 <sync_end>
;***************************************************
; Process VSYNC stuff
;***************************************************
	
	;push C-call registers
	push r18
    6e48:	2f 93       	push	r18
	push r19
    6e4a:	3f 93       	push	r19
	push r20
    6e4c:	4f 93       	push	r20
	push r21
    6e4e:	5f 93       	push	r21
	push r22
    6e50:	6f 93       	push	r22
	push r23
    6e52:	7f 93       	push	r23
	push r24
    6e54:	8f 93       	push	r24
	push r25
    6e56:	9f 93       	push	r25
	push r26
    6e58:	af 93       	push	r26
	push r27
    6e5a:	bf 93       	push	r27

	sei ;must enable ints for re-entrant sync pulses
    6e5c:	78 94       	sei
	clr r1
    6e5e:	11 24       	eor	r1, r1

	;set vsync flags
	clr ZL
    6e60:	ee 27       	eor	r30, r30
	sts sync_phase,ZL
    6e62:	e0 93 84 0c 	sts	0x0C84, r30
	ldi ZL,SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    6e66:	e2 e1       	ldi	r30, 0x12	; 18
	sts sync_pulse,ZL
    6e68:	e0 93 85 0c 	sts	0x0C85, r30



	;increment the vsync counter
	lds r24,vsync_counter
    6e6c:	80 91 95 0c 	lds	r24, 0x0C95
	lds r25,vsync_counter+1
    6e70:	90 91 96 0c 	lds	r25, 0x0C96
	adiw r24,1
    6e74:	01 96       	adiw	r24, 0x01	; 1
	sts vsync_counter,r24
    6e76:	80 93 95 0c 	sts	0x0C95, r24
	sts vsync_counter+1,r25
    6e7a:	90 93 96 0c 	sts	0x0C96, r25


	;process user pre callback
	lds ZL,pre_vsync_user_callback+0
    6e7e:	e0 91 87 0c 	lds	r30, 0x0C87
	lds ZH,pre_vsync_user_callback+1
    6e82:	f0 91 88 0c 	lds	r31, 0x0C88
	cp  ZL,r1
    6e86:	e1 15       	cp	r30, r1
	cpc ZH,r1
    6e88:	f1 05       	cpc	r31, r1
	breq .+2 
    6e8a:	09 f0       	breq	.+2      	; 0x6e8e <no_render+0x50>
	icall
    6e8c:	09 95       	icall

	;refresh buttons states
	#if CONTROLLERS_VSYNC_READ == 1
		call ReadControllers
    6e8e:	0e 94 0c 39 	call	0x7218	; 0x7218 <ReadControllers>
	#endif 
	
	;invoke stuff the video mode may have to do
	call VideoModeVsync	
    6e92:	0e 94 ee 42 	call	0x85dc	; 0x85dc <VideoModeVsync>

	;process music (music, envelopes, etc)
	call process_music
    6e96:	0e 94 72 37 	call	0x6ee4	; 0x6ee4 <process_music>
	clr r1
    6e9a:	11 24       	eor	r1, r1

	;process user post callback
	lds ZL,post_vsync_user_callback+0
    6e9c:	e0 91 89 0c 	lds	r30, 0x0C89
	lds ZH,post_vsync_user_callback+1
    6ea0:	f0 91 8a 0c 	lds	r31, 0x0C8A
	cp  ZL,r1
    6ea4:	e1 15       	cp	r30, r1
	cpc ZH,r1
    6ea6:	f1 05       	cpc	r31, r1
	breq .+2 
    6ea8:	09 f0       	breq	.+2      	; 0x6eac <no_render+0x6e>
	icall
    6eaa:	09 95       	icall
	#if SNES_MOUSE == 1
		call ReadMouseExtendedData
		call ProcessMouseMovement
	#endif

	pop r27
    6eac:	bf 91       	pop	r27
	pop r26
    6eae:	af 91       	pop	r26
	pop r25
    6eb0:	9f 91       	pop	r25
	pop r24
    6eb2:	8f 91       	pop	r24
	pop r23
    6eb4:	7f 91       	pop	r23
	pop r22
    6eb6:	6f 91       	pop	r22
	pop r21
    6eb8:	5f 91       	pop	r21
	pop r20
    6eba:	4f 91       	pop	r20
	pop r19
    6ebc:	3f 91       	pop	r19
	pop r18
    6ebe:	2f 91       	pop	r18

00006ec0 <sync_end>:
	
sync_end:	
	;restore flags
	pop ZL
    6ec0:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL
    6ec2:	ef bf       	out	0x3f, r30	; 63
	
	pop ZH
    6ec4:	ff 91       	pop	r31
	pop ZL
    6ec6:	ef 91       	pop	r30
	pop r1
    6ec8:	1f 90       	pop	r1
	pop r0
    6eca:	0f 90       	pop	r0
	reti
    6ecc:	18 95       	reti

00006ece <hsync_pulse>:
; 0xf0 on the sbi 
;	
; Destroys: ZL (r30)
;*************************************************
hsync_pulse:
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    6ece:	28 98       	cbi	0x05, 0	; 5
	ldi ZL,2
    6ed0:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    6ed2:	00 c0       	rjmp	.+0      	; 0x6ed4 <hsync_pulse+0x6>
	call update_sound
    6ed4:	0e 94 78 37 	call	0x6ef0	; 0x6ef0 <update_sound>

	lds ZL,sync_pulse
    6ed8:	e0 91 85 0c 	lds	r30, 0x0C85
	dec ZL
    6edc:	ea 95       	dec	r30
	sts sync_pulse,ZL
    6ede:	e0 93 85 0c 	sts	0x0C85, r30

	ret
    6ee2:	08 95       	ret

00006ee4 <process_music>:
; NOTE: registers r18-r27 are already saved by the caller
;***********************
process_music:
	
#if ENABLE_MIXER==1
	lds ZL,sound_enabled
    6ee4:	e0 91 a0 0c 	lds	r30, 0x0CA0
	sbrc ZL,0
    6ee8:	e0 fd       	sbrc	r30, 0
 	call ProcessMusic
    6eea:	0e 94 78 3a 	call	0x74f0	; 0x74f0 <ProcessMusic>
#endif

	ret
    6eee:	08 95       	ret

00006ef0 <update_sound>:

; Destroys: Z,r0,r1
; cycles: 212+
;****************************
update_sound:
	push r16
    6ef0:	0f 93       	push	r16
	push r17
    6ef2:	1f 93       	push	r17
	push r18
    6ef4:	2f 93       	push	r18
	push r28
    6ef6:	cf 93       	push	r28
	push r29
    6ef8:	df 93       	push	r29

	mov r18,ZL
    6efa:	2e 2f       	mov	r18, r30

	;channel 1 
	lds r16,tr1_step_lo
    6efc:	00 91 a2 0c 	lds	r16, 0x0CA2
	lds r17,tr1_pos_frac
    6f00:	10 91 a4 0c 	lds	r17, 0x0CA4
	add	r17,r16	;add step to fractional part of sample pos
    6f04:	10 0f       	add	r17, r16
	lds r16,tr1_step_hi	
    6f06:	00 91 a3 0c 	lds	r16, 0x0CA3
	lds ZL,tr1_pos_lo
    6f0a:	e0 91 a5 0c 	lds	r30, 0x0CA5
	lds ZH,tr1_pos_hi 
    6f0e:	f0 91 a6 0c 	lds	r31, 0x0CA6
	adc ZL,r16	;add step to low byte of sample pos
    6f12:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    6f14:	04 91       	lpm	r16, Z+
	sts tr1_pos_lo,ZL
    6f16:	e0 93 a5 0c 	sts	0x0CA5, r30
	sts tr1_pos_frac,r17
    6f1a:	10 93 a4 0c 	sts	0x0CA4, r17
	lds r17,tr1_vol
    6f1e:	10 91 a1 0c 	lds	r17, 0x0CA1
	mulsu r16,r17;(sample*mixing vol)
    6f22:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend	
    6f24:	00 08       	sbc	r0, r0
	mov r28,r1	;set (sample*vol>>8) to mix buffer lsb
    6f26:	c1 2d       	mov	r28, r1
	mov r29,r0	;set mix buffer msb	
    6f28:	d0 2d       	mov	r29, r0
	nop
    6f2a:	00 00       	nop

;38
	
	;channel 2
	lds r16,tr2_step_lo
    6f2c:	00 91 a8 0c 	lds	r16, 0x0CA8
	lds r17,tr2_pos_frac
    6f30:	10 91 aa 0c 	lds	r17, 0x0CAA
	add	r17,r16	;add step to fractional part of sample pos
    6f34:	10 0f       	add	r17, r16
	lds r16,tr2_step_hi	
    6f36:	00 91 a9 0c 	lds	r16, 0x0CA9
	lds ZL,tr2_pos_lo
    6f3a:	e0 91 ab 0c 	lds	r30, 0x0CAB
	lds ZH,tr2_pos_hi 
    6f3e:	f0 91 ac 0c 	lds	r31, 0x0CAC
	adc ZL,r16	;add step to low byte of sample pos
    6f42:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    6f44:	04 91       	lpm	r16, Z+
	sts tr2_pos_lo,ZL
    6f46:	e0 93 ab 0c 	sts	0x0CAB, r30
	sts tr2_pos_frac,r17
    6f4a:	10 93 aa 0c 	sts	0x0CAA, r17
	lds r17,tr2_vol
    6f4e:	10 91 a7 0c 	lds	r17, 0x0CA7

	;*** Video sync update ***
	sbrc r18,0								;pre-eq/post-eq sync
    6f52:	20 fd       	sbrc	r18, 0
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    6f54:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,0								
    6f56:	20 ff       	sbrs	r18, 0
	rjmp .
    6f58:	00 c0       	rjmp	.+0      	; 0x6f5a <update_sound+0x6a>
	;*************************

	mulsu r16,r17;(sample*mixing vol)
    6f5a:	01 03       	mulsu	r16, r17
	clr r0
    6f5c:	00 24       	eor	r0, r0
	sbc r0,r0	;sign extend
    6f5e:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    6f60:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb		
    6f62:	d0 1d       	adc	r29, r0
;70
	
	;channel 3
	lds r16,tr3_step_lo
    6f64:	00 91 ae 0c 	lds	r16, 0x0CAE
	lds r17,tr3_pos_frac
    6f68:	10 91 b0 0c 	lds	r17, 0x0CB0
	add	r17,r16				;add step to fractional part of sample pos
    6f6c:	10 0f       	add	r17, r16
	lds r16,tr3_step_hi	
    6f6e:	00 91 af 0c 	lds	r16, 0x0CAF
	lds ZL,tr3_pos_lo
    6f72:	e0 91 b1 0c 	lds	r30, 0x0CB1
	lds ZH,tr3_pos_hi 
    6f76:	f0 91 b2 0c 	lds	r31, 0x0CB2
	adc ZL,r16				;add step to low byte of sample pos
    6f7a:	e0 1f       	adc	r30, r16
	lpm	r16,Z				;load sample
    6f7c:	04 91       	lpm	r16, Z+
	sts tr3_pos_lo,ZL
    6f7e:	e0 93 b1 0c 	sts	0x0CB1, r30
	sts tr3_pos_frac,r17
    6f82:	10 93 b0 0c 	sts	0x0CB0, r17
	lds r17,tr3_vol
    6f86:	10 91 ad 0c 	lds	r17, 0x0CAD
	mulsu r16,r17			;(sample*mixing vol)
    6f8a:	01 03       	mulsu	r16, r17
	sbc r0,r0				;sign extend
    6f8c:	00 08       	sbc	r0, r0
	add r28,r1				;add (sample*vol>>8) to mix buffer lsb
    6f8e:	c1 0d       	add	r28, r1
	adc r29,r0				;ajust mix buffer msb
    6f90:	d0 1d       	adc	r29, r0
;97	

	;channel 4 - 7/15 bit LFSR 
	lds r16,tr4_barrel_lo
    6f92:	00 91 b5 0c 	lds	r16, 0x0CB5
	lds r17,tr4_barrel_hi
    6f96:	10 91 b6 0c 	lds	r17, 0x0CB6
	lds ZL,tr4_divider
    6f9a:	e0 91 b7 0c 	lds	r30, 0x0CB7
	dec ZL	
    6f9e:	ea 95       	dec	r30
	brpl ch4_no_shift	
    6fa0:	92 f4       	brpl	.+36     	; 0x6fc6 <ch4_no_shift>

	lds ZH,tr4_params
    6fa2:	f0 91 b4 0c 	lds	r31, 0x0CB4
	mov ZL,ZH
    6fa6:	ef 2f       	mov	r30, r31
	lsr ZL 			;keep bits7:1
    6fa8:	e6 95       	lsr	r30

	mov r0,r16  ;copy barrel shifter
    6faa:	00 2e       	mov	r0, r16
	lsr r0
    6fac:	06 94       	lsr	r0
	eor r0,r16  ;xor bit0 and bit1
    6fae:	00 26       	eor	r0, r16
	bst r0,0
    6fb0:	00 fa       	bst	r0, 0
	lsr r17
    6fb2:	16 95       	lsr	r17
	ror r16
    6fb4:	07 95       	ror	r16
	bld r17,6	;15 bits mode
    6fb6:	16 f9       	bld	r17, 6
	sbrs ZH,0
    6fb8:	f0 ff       	sbrs	r31, 0
	bld r16,6	;7 bits mode
    6fba:	06 f9       	bld	r16, 6

	sts tr4_barrel_lo,r16
    6fbc:	00 93 b5 0c 	sts	0x0CB5, r16
	sts tr4_barrel_hi,r17
    6fc0:	10 93 b6 0c 	sts	0x0CB6, r17

	rjmp ch4_end
    6fc4:	03 c0       	rjmp	.+6      	; 0x6fcc <ch4_end>

00006fc6 <ch4_no_shift>:
ch4_no_shift:
	;wait loop 21 cycles
	ldi r17,6
    6fc6:	16 e0       	ldi	r17, 0x06	; 6
	dec r17
    6fc8:	1a 95       	dec	r17
	brne .-4
    6fca:	f1 f7       	brne	.-4      	; 0x6fc8 <ch4_no_shift+0x2>

00006fcc <ch4_end>:
	;rjmp .
ch4_end:

	sts tr4_divider,ZL
    6fcc:	e0 93 b7 0c 	sts	0x0CB7, r30
	ldi r17,0x80 ;-128
    6fd0:	10 e8       	ldi	r17, 0x80	; 128
	
	;*** Video sync update ***
	sbrc r18,1								;hsync
    6fd2:	21 fd       	sbrc	r18, 1
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xF0
    6fd4:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,1								
    6fd6:	21 ff       	sbrs	r18, 1
	rjmp .
    6fd8:	00 c0       	rjmp	.+0      	; 0x6fda <ch4_end+0xe>
	;*************************
	
	sbrc r16,0
    6fda:	00 fd       	sbrc	r16, 0
	ldi r17,0x7f ;+127
    6fdc:	1f e7       	ldi	r17, 0x7F	; 127
	
	lds r16,tr4_vol
    6fde:	00 91 b3 0c 	lds	r16, 0x0CB3

	mulsu r17,r16;(sample*mixing vol)
    6fe2:	10 03       	mulsu	r17, r16
	sbc r0,r0	;sign extend
    6fe4:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    6fe6:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb
    6fe8:	d0 1d       	adc	r29, r0
;142
#if SOUND_CHANNEL_5_ENABLE==1
	;channel 5 PCM -- 45 cycles

	;add fractional part
	lds r16,tr5_pos_frac
    6fea:	00 91 bc 0c 	lds	r16, 0x0CBC
	lds r17,tr5_step_lo 
    6fee:	10 91 ba 0c 	lds	r17, 0x0CBA
	add r16,r17
    6ff2:	01 0f       	add	r16, r17
	sts tr5_pos_frac,r16
    6ff4:	00 93 bc 0c 	sts	0x0CBC, r16

	;add lo
	lds ZL,tr5_pos_lo
    6ff8:	e0 91 bd 0c 	lds	r30, 0x0CBD
	lds r17,tr5_step_hi 
    6ffc:	10 91 bb 0c 	lds	r17, 0x0CBB
	adc ZL,r17
    7000:	e1 1f       	adc	r30, r17

	;add hi
	lds ZH,tr5_pos_hi
    7002:	f0 91 be 0c 	lds	r31, 0x0CBE
	ldi r16,0
    7006:	00 e0       	ldi	r16, 0x00	; 0
	adc ZH,r16
    7008:	f0 1f       	adc	r31, r16

	movw r16,ZL
    700a:	8f 01       	movw	r16, r30
	lds r0,tr5_loop_len_lo
    700c:	00 90 bf 0c 	lds	r0, 0x0CBF
	lds r1,tr5_loop_len_hi	
    7010:	10 90 c0 0c 	lds	r1, 0x0CC0
	sub r16,r0
    7014:	00 19       	sub	r16, r0
	sbc r17,r1
    7016:	11 09       	sbc	r17, r1
	lds r0,tr5_loop_end_lo
    7018:	00 90 c1 0c 	lds	r0, 0x0CC1
	lds r1,tr5_loop_end_hi
    701c:	10 90 c2 0c 	lds	r1, 0x0CC2

	cp ZL,r0
    7020:	e0 15       	cp	r30, r0
	cpc ZH,r1
    7022:	f1 05       	cpc	r31, r1
	brlo .+2
    7024:	08 f0       	brcs	.+2      	; 0x7028 <ch4_end+0x5c>
	movw ZL,r16
    7026:	f8 01       	movw	r30, r16

	sts tr5_pos_lo,ZL
    7028:	e0 93 bd 0c 	sts	0x0CBD, r30
	sts tr5_pos_hi,ZH
    702c:	f0 93 be 0c 	sts	0x0CBE, r31

	lpm	r16,Z	;load sample
    7030:	04 91       	lpm	r16, Z+
	lds r17,tr5_vol
    7032:	10 91 b9 0c 	lds	r17, 0x0CB9

	mulsu r16,r17;(sample*mixing vol)
    7036:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend
    7038:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    703a:	c1 0d       	add	r28, r1
	adc r29,r0	;adjust mix buffer msb	
    703c:	d0 1d       	adc	r29, r0
#endif
	
	;final processing

	;clip
	clr r0
    703e:	00 24       	eor	r0, r0
	cpi r28,128	;> 127?
    7040:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0	
    7042:	d0 05       	cpc	r29, r0
	brlt .+2
    7044:	0c f0       	brlt	.+2      	; 0x7048 <ch4_end+0x7c>
	ldi r28,127
    7046:	cf e7       	ldi	r28, 0x7F	; 127
	
	dec r0
    7048:	0a 94       	dec	r0
	cpi r28,-128; <-128?
    704a:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0xff
    704c:	d0 05       	cpc	r29, r0
	brge .+2
    704e:	0c f4       	brge	.+2      	; 0x7052 <ch4_end+0x86>
	ldi r28,-128
    7050:	c0 e8       	ldi	r28, 0x80	; 128

	subi r28,128	;convert to unsigned		
    7052:	c0 58       	subi	r28, 0x80	; 128
	sts _SFR_MEM_ADDR(OCR2A),r28 ;output sound byte
    7054:	c0 93 b3 00 	sts	0x00B3, r28

00007058 <update_sound_end>:
#endif


update_sound_end:

	pop r29
    7058:	df 91       	pop	r29
	pop r28
    705a:	cf 91       	pop	r28
	pop r18
    705c:	2f 91       	pop	r18
	pop r17
    705e:	1f 91       	pop	r17
	pop r16
    7060:	0f 91       	pop	r16
	
	ret
    7062:	08 95       	ret

00007064 <SetSpritesTileBank>:
;     r24=bank No (0-3)
; r23:r22=pointer to sprites pixel data.
;*****************************
.section .text.SetSpritesTileBank
SetSpritesTileBank:
	andi r24,3
    7064:	83 70       	andi	r24, 0x03	; 3
	lsl r24	
    7066:	88 0f       	add	r24, r24
	ldi ZL,lo8(sprites_tile_banks)
    7068:	e6 e7       	ldi	r30, 0x76	; 118
	ldi ZH,hi8(sprites_tile_banks)
    706a:	fc e0       	ldi	r31, 0x0C	; 12
	add ZL,r24
    706c:	e8 0f       	add	r30, r24
	adc ZH,r1
    706e:	f1 1d       	adc	r31, r1
	st Z,r22
    7070:	60 83       	st	Z, r22
	std Z+1,r23
    7072:	71 83       	std	Z+1, r23	; 0x01
	ret
    7074:	08 95       	ret

00007076 <SetTile>:

	ret

#else

	clr r25
    7076:	99 27       	eor	r25, r25
	clr r23	
    7078:	77 27       	eor	r23, r23

	ldi r18,VRAM_TILES_H
    707a:	2e e1       	ldi	r18, 0x1E	; 30

	mul r22,r18		;calculate Y line addr in vram
    707c:	62 9f       	mul	r22, r18
	add r0,r24		;add X offset
    707e:	08 0e       	add	r0, r24
	adc r1,r25
    7080:	19 1e       	adc	r1, r25
	ldi XL,lo8(vram)
    7082:	a0 e2       	ldi	r26, 0x20	; 32
	ldi XH,hi8(vram)
    7084:	b1 e0       	ldi	r27, 0x01	; 1
	add XL,r0
    7086:	a0 0d       	add	r26, r0
	adc XH,r1
    7088:	b1 1d       	adc	r27, r1
	
	subi r20,~(RAM_TILES_COUNT-1)	
    708a:	42 5e       	subi	r20, 0xE2	; 226
	st X,r20
    708c:	4c 93       	st	X, r20

	clr r1
    708e:	11 24       	eor	r1, r1

	ret
    7090:	08 95       	ret

00007092 <SetTileTable>:
; C-callable
; r25:r24=pointer to tiles data
;************************************
.section .text.SetTileTable
SetTileTable:
	sts tile_table_lo,r24
    7092:	80 93 7e 0c 	sts	0x0C7E, r24
	sts tile_table_hi,r25	
    7096:	90 93 7f 0c 	sts	0x0C7F, r25
	ret
    709a:	08 95       	ret

0000709c <GetVsyncFlag>:
;
; C-callable
;************************************
.section .text.GetVsyncFlag
GetVsyncFlag:
	lds r24,sync_flags
    709c:	80 91 86 0c 	lds	r24, 0x0C86
	andi r24,SYNC_FLAG_VSYNC
    70a0:	81 70       	andi	r24, 0x01	; 1
	ret
    70a2:	08 95       	ret

000070a4 <ClearVsyncFlag>:
; 
; C-callable
;*****************************
.section .text.ClearVsyncFlag
ClearVsyncFlag:
	lds r18,sync_flags
    70a4:	20 91 86 0c 	lds	r18, 0x0C86
	andi r18,~SYNC_FLAG_VSYNC
    70a8:	2e 7f       	andi	r18, 0xFE	; 254
	sts sync_flags,r18
    70aa:	20 93 86 0c 	sts	0x0C86, r18
	ret
    70ae:	08 95       	ret

000070b0 <ReadJoypad>:
; r24=joypad No (0 or 1)
; returns: (int) r25:r24
;*****************************
.section .text.ReadJoypad
ReadJoypad:	
	tst r24
    70b0:	88 23       	and	r24, r24
	brne rj_p2
    70b2:	29 f4       	brne	.+10     	; 0x70be <rj_p2>
		
	lds r24,joypad1_status_lo
    70b4:	80 91 8d 0c 	lds	r24, 0x0C8D
	lds r25,joypad1_status_lo+1
    70b8:	90 91 8e 0c 	lds	r25, 0x0C8E
	ret
    70bc:	08 95       	ret

000070be <rj_p2>:
rj_p2:
	lds r24,joypad2_status_lo
    70be:	80 91 91 0c 	lds	r24, 0x0C91
	lds r25,joypad2_status_lo+1	
    70c2:	90 91 92 0c 	lds	r25, 0x0C92

	ret
    70c6:	08 95       	ret

000070c8 <WriteEeprom>:
;****************************

.section .text.WriteEeprom
WriteEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    70c8:	f9 99       	sbic	0x1f, 1	; 31
   rjmp WriteEeprom
    70ca:	fe cf       	rjmp	.-4      	; 0x70c8 <WriteEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    70cc:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    70ce:	81 bd       	out	0x21, r24	; 33
   ; Write data (r22) to Data Register
   out _SFR_IO_ADDR(EEDR),r22
    70d0:	60 bd       	out	0x20, r22	; 32
   cli
    70d2:	f8 94       	cli
   ; Write logical one to EEMPE
   sbi _SFR_IO_ADDR(EECR),EEMPE
    70d4:	fa 9a       	sbi	0x1f, 2	; 31
   ; Start eeprom write by setting EEPE
   sbi _SFR_IO_ADDR(EECR),EEPE
    70d6:	f9 9a       	sbi	0x1f, 1	; 31
   sei
    70d8:	78 94       	sei
   ret
    70da:	08 95       	ret

000070dc <ReadEeprom>:
; r24 - value read
;****************************
.section .text.ReadEeprom
ReadEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    70dc:	f9 99       	sbic	0x1f, 1	; 31
   rjmp ReadEeprom
    70de:	fe cf       	rjmp	.-4      	; 0x70dc <ReadEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    70e0:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    70e2:	81 bd       	out	0x21, r24	; 33
   ; Start eeprom read by writing EERE
   cli
    70e4:	f8 94       	cli
   sbi _SFR_IO_ADDR(EECR),EERE
    70e6:	f8 9a       	sbi	0x1f, 0	; 31
   ; Read data from Data Register
   in r24,_SFR_IO_ADDR(EEDR)
    70e8:	80 b5       	in	r24, 0x20	; 32
   sei
    70ea:	78 94       	sei
   ret
    70ec:	08 95       	ret

000070ee <SetUserPostVsyncCallback>:
; C callable
; r25:r24 - pointer to C function: void ptr*(void)
;****************************
.section .text.SetUserPostVsyncCallback
SetUserPostVsyncCallback:
	sts post_vsync_user_callback+0,r24
    70ee:	80 93 89 0c 	sts	0x0C89, r24
	sts post_vsync_user_callback+1,r25
    70f2:	90 93 8a 0c 	sts	0x0C8A, r25
	ret
    70f6:	08 95       	ret

000070f8 <wdt_randomize>:
	.global wdt_randomize
	.section .text.wdt_randomize
	wdt_randomize:

		;set timer 1 full speed count to 0xffff
		ldi r24,0
    70f8:	80 e0       	ldi	r24, 0x00	; 0
		sts sync_pulse,r24
    70fa:	80 93 85 0c 	sts	0x0C85, r24


		sts _SFR_MEM_ADDR(TIMSK1),r24
    70fe:	80 93 6f 00 	sts	0x006F, r24
		sts _SFR_MEM_ADDR(OCR1AL),r24
    7102:	80 93 88 00 	sts	0x0088, r24
		sts _SFR_MEM_ADDR(OCR1AH),r24
    7106:	80 93 89 00 	sts	0x0089, r24
		sts _SFR_MEM_ADDR(OCR1BL),r24
    710a:	80 93 8a 00 	sts	0x008A, r24
		sts _SFR_MEM_ADDR(OCR1BH),r24
    710e:	80 93 8b 00 	sts	0x008B, r24
		sts _SFR_MEM_ADDR(TCNT1H),r24
    7112:	80 93 85 00 	sts	0x0085, r24
		sts _SFR_MEM_ADDR(TCNT1L),r24
    7116:	80 93 84 00 	sts	0x0084, r24
		
		sts _SFR_MEM_ADDR(TCCR1A),r24	
    711a:	80 93 80 00 	sts	0x0080, r24
		ldi 24,(1<<CS10)
    711e:	81 e0       	ldi	r24, 0x01	; 1
		sts _SFR_MEM_ADDR(TCCR1B),r24
    7120:	80 93 81 00 	sts	0x0081, r24

		cli
    7124:	f8 94       	cli

		;enable watchdog at fastest speed and generate interrupts
		ldi r24,0
    7126:	80 e0       	ldi	r24, 0x00	; 0
		sts _SFR_MEM_ADDR(MCUSR),r24	
    7128:	80 93 54 00 	sts	0x0054, r24
		ldi r25,(1<<WDIE)+(1<<WDE)+(0<<WDP3)+(0<<WDP2)+(0<<WDP1)+(0<<WDP0)
    712c:	98 e4       	ldi	r25, 0x48	; 72
		lds r24,_SFR_MEM_ADDR(WDTCSR)
    712e:	80 91 60 00 	lds	r24, 0x0060
		ori r24,(1<<WDCE)+(1<<WDE)
    7132:	88 61       	ori	r24, 0x18	; 24
		sts _SFR_MEM_ADDR(WDTCSR),r24
    7134:	80 93 60 00 	sts	0x0060, r24
		sts _SFR_MEM_ADDR(WDTCSR),r25
    7138:	90 93 60 00 	sts	0x0060, r25
	
		sei
    713c:	78 94       	sei

0000713e <wait>:

		;generate 8 random cycles
	wait:
		lds r24,sync_pulse ;using the yet unalocated "sync_pulse" as a temp variable
    713e:	80 91 85 0c 	lds	r24, 0x0C85
		cpi r24,8
    7142:	88 30       	cpi	r24, 0x08	; 8
		brlo wait
    7144:	e0 f3       	brcs	.-8      	; 0x713e <wait>

		ret
    7146:	08 95       	ret

00007148 <GetTrueRandomSeed>:
	;********************************

	.global GetTrueRandomSeed
	.section .text.GetTrueRandomSeed
	GetTrueRandomSeed:
		lds r24,random_value
    7148:	80 91 97 0c 	lds	r24, 0x0C97
		lds r25,random_value+1
    714c:	90 91 98 0c 	lds	r25, 0x0C98
		ret
    7150:	08 95       	ret

00007152 <__vector_8>:
	;*************************************
	; Watchdog timer interrupt
	;*************************************
	WDT_vect:
		;save flags & status register
		push r16
    7152:	0f 93       	push	r16
		push r17
    7154:	1f 93       	push	r17

		in r16,_SFR_IO_ADDR(SREG)
    7156:	0f b7       	in	r16, 0x3f	; 63
		push r16
    7158:	0f 93       	push	r16

		lds r16,sync_pulse
    715a:	00 91 85 0c 	lds	r16, 0x0C85
		inc r16
    715e:	03 95       	inc	r16
		sts sync_pulse,r16
    7160:	00 93 85 0c 	sts	0x0C85, r16

		;XOR succesive timer1 LSB into a int
		sbrc r16,0
    7164:	00 fd       	sbrc	r16, 0
		rjmp 1f
    7166:	08 c0       	rjmp	.+16     	; 0x7178 <__vector_8+0x26>
		lds r17,random_value
    7168:	10 91 97 0c 	lds	r17, 0x0C97
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    716c:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    7170:	10 27       	eor	r17, r16
		sts random_value,r17
    7172:	10 93 97 0c 	sts	0x0C97, r17
		rjmp 2f
    7176:	07 c0       	rjmp	.+14     	; 0x7186 <__vector_8+0x34>
	1:
		lds r17,random_value+1
    7178:	10 91 98 0c 	lds	r17, 0x0C98
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    717c:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    7180:	10 27       	eor	r17, r16
		sts random_value+1,r17
    7182:	10 93 98 0c 	sts	0x0C98, r17
	2:

		ldi r16,(1<<WDIE)+(1<<WDE)
    7186:	08 e4       	ldi	r16, 0x48	; 72
		sts _SFR_MEM_ADDR(WDTCSR),r16
    7188:	00 93 60 00 	sts	0x0060, r16

		;restore flags
		pop r16
    718c:	0f 91       	pop	r16
		out _SFR_IO_ADDR(SREG),r16
    718e:	0f bf       	out	0x3f, r16	; 63
	
		pop r17
    7190:	1f 91       	pop	r17
		pop r16
    7192:	0f 91       	pop	r16
		reti
    7194:	18 95       	reti

00007196 <ReadButtons>:
void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
	unsigned char i;

	//latch controllers
	JOYPAD_OUT_PORT|=_BV(JOYPAD_LATCH_PIN);
    7196:	12 9a       	sbi	0x02, 2	; 2
		}else{
			Wait200ns();
			Wait200ns();
		}	
	#else
		Wait200ns();
    7198:	c8 95       	lpm
    719a:	c8 95       	lpm
		Wait200ns();
    719c:	c8 95       	lpm
    719e:	c8 95       	lpm
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));
    71a0:	12 98       	cbi	0x02, 2	; 2
    71a2:	20 e0       	ldi	r18, 0x00	; 0
    71a4:	30 e0       	ldi	r19, 0x00	; 0
    71a6:	80 e0       	ldi	r24, 0x00	; 0
    71a8:	90 e0       	ldi	r25, 0x00	; 0
    71aa:	40 e0       	ldi	r20, 0x00	; 0


	//read button states
	for(i=0;i<16;i++){

		p1ButtonsLo>>=1;
    71ac:	36 95       	lsr	r19
    71ae:	27 95       	ror	r18
		p2ButtonsLo>>=1;
    71b0:	96 95       	lsr	r25
    71b2:	87 95       	ror	r24
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    71b4:	c8 95       	lpm
    71b6:	c8 95       	lpm
			Wait200ns();
    71b8:	c8 95       	lpm
    71ba:	c8 95       	lpm
		#endif
			
		//pulse clock pin		
		JOYPAD_OUT_PORT&=~(_BV(JOYPAD_CLOCK_PIN));
    71bc:	13 98       	cbi	0x02, 3	; 2
		
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) p1ButtonsLo|=(1<<15);
    71be:	00 9b       	sbis	0x00, 0	; 0
    71c0:	30 68       	ori	r19, 0x80	; 128
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) p2ButtonsLo|=(1<<15);
    71c2:	01 9b       	sbis	0x00, 1	; 0
    71c4:	90 68       	ori	r25, 0x80	; 128
		
		JOYPAD_OUT_PORT|=_BV(JOYPAD_CLOCK_PIN);
    71c6:	13 9a       	sbi	0x02, 3	; 2
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    71c8:	c8 95       	lpm
    71ca:	c8 95       	lpm
			Wait200ns();
    71cc:	c8 95       	lpm
    71ce:	c8 95       	lpm
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));


	//read button states
	for(i=0;i<16;i++){
    71d0:	4f 5f       	subi	r20, 0xFF	; 255
    71d2:	40 31       	cpi	r20, 0x10	; 16
    71d4:	59 f7       	brne	.-42     	; 0x71ac <ReadButtons+0x16>
		#endif

	}

	#if JOYSTICK==TYPE_SNES
		joypad1_status_lo=p1ButtonsLo;
    71d6:	30 93 8e 0c 	sts	0x0C8E, r19
    71da:	20 93 8d 0c 	sts	0x0C8D, r18
		joypad2_status_lo=p2ButtonsLo;
    71de:	90 93 92 0c 	sts	0x0C92, r25
    71e2:	80 93 91 0c 	sts	0x0C91, r24
	#else
		joypad1_status_lo=p1ButtonsLo&0xff;
		joypad2_status_lo=p2ButtonsLo&0xff;	
	#endif

	if(joypad1_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B) || joypad2_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B)){
    71e6:	80 91 8d 0c 	lds	r24, 0x0C8D
    71ea:	90 91 8e 0c 	lds	r25, 0x0C8E
    71ee:	0f 97       	sbiw	r24, 0x0f	; 15
    71f0:	31 f0       	breq	.+12     	; 0x71fe <ReadButtons+0x68>
    71f2:	80 91 91 0c 	lds	r24, 0x0C91
    71f6:	90 91 92 0c 	lds	r25, 0x0C92
    71fa:	0f 97       	sbiw	r24, 0x0f	; 15
    71fc:	61 f4       	brne	.+24     	; 0x7216 <ReadButtons+0x80>

/**
 * Performs a software reset
 */
void SoftReset(void){        
	wdt_enable(WDTO_15MS);  
    71fe:	28 e0       	ldi	r18, 0x08	; 8
    7200:	88 e1       	ldi	r24, 0x18	; 24
    7202:	90 e0       	ldi	r25, 0x00	; 0
    7204:	0f b6       	in	r0, 0x3f	; 63
    7206:	f8 94       	cli
    7208:	a8 95       	wdr
    720a:	80 93 60 00 	sts	0x0060, r24
    720e:	0f be       	out	0x3f, r0	; 63
    7210:	20 93 60 00 	sts	0x0060, r18
    7214:	ff cf       	rjmp	.-2      	; 0x7214 <ReadButtons+0x7e>
    7216:	08 95       	ret

00007218 <ReadControllers>:
 * program when CONTROLLERS_VSYNC_READ==0.
*/
void ReadControllers(){

	//Detect if devices are connected.
	joypadsConnectionStatus=0;
    7218:	10 92 c8 0c 	sts	0x0CC8, r1
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) joypadsConnectionStatus|=1;
    721c:	00 99       	sbic	0x00, 0	; 0
    721e:	03 c0       	rjmp	.+6      	; 0x7226 <ReadControllers+0xe>
    7220:	81 e0       	ldi	r24, 0x01	; 1
    7222:	80 93 c8 0c 	sts	0x0CC8, r24
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) joypadsConnectionStatus|=2;
    7226:	01 99       	sbic	0x00, 1	; 0
    7228:	05 c0       	rjmp	.+10     	; 0x7234 <ReadControllers+0x1c>
    722a:	80 91 c8 0c 	lds	r24, 0x0CC8
    722e:	82 60       	ori	r24, 0x02	; 2
    7230:	80 93 c8 0c 	sts	0x0CC8, r24
			
	//read the standard buttons
	ReadButtons();
    7234:	0e 94 cb 38 	call	0x7196	; 0x7196 <ReadButtons>
}
    7238:	08 95       	ret

0000723a <DetectControllers>:
 */
unsigned char DetectControllers(){
	//unsigned int joy;
	unsigned char resp=0;

	if(joypadsConnectionStatus&1){
    723a:	80 91 c8 0c 	lds	r24, 0x0CC8
    723e:	38 2f       	mov	r19, r24
    7240:	80 fd       	sbrc	r24, 0
    7242:	02 c0       	rjmp	.+4      	; 0x7248 <DetectControllers+0xe>
    7244:	20 e0       	ldi	r18, 0x00	; 0
    7246:	09 c0       	rjmp	.+18     	; 0x725a <DetectControllers+0x20>

		//joy=ReadJoypad(0);
		if((joypad1_status_lo&0x8000)!=0){
    7248:	80 91 8d 0c 	lds	r24, 0x0C8D
    724c:	90 91 8e 0c 	lds	r25, 0x0C8E
    7250:	29 2f       	mov	r18, r25
    7252:	22 1f       	adc	r18, r18
    7254:	22 27       	eor	r18, r18
    7256:	22 1f       	adc	r18, r18
    7258:	2f 5f       	subi	r18, 0xFF	; 255
			#endif
			resp|=1;
		}
	}

	if(joypadsConnectionStatus&2){
    725a:	31 ff       	sbrs	r19, 1
    725c:	09 c0       	rjmp	.+18     	; 0x7270 <DetectControllers+0x36>
		//joy=ReadJoypad(1);
		if((joypad2_status_lo&0x8000)!=0){
    725e:	80 91 91 0c 	lds	r24, 0x0C91
    7262:	90 91 92 0c 	lds	r25, 0x0C92
    7266:	97 ff       	sbrs	r25, 7
    7268:	02 c0       	rjmp	.+4      	; 0x726e <DetectControllers+0x34>
			#if SNES_MOUSE == 1
				playDevice=1;
				playPort=1;
				actionButton=BTN_MOUSE_LEFT;
			#endif
			resp|=8;
    726a:	28 60       	ori	r18, 0x08	; 8
    726c:	01 c0       	rjmp	.+2      	; 0x7270 <DetectControllers+0x36>
		}else{
			//we have a regular controller in P2
			resp|=4;
    726e:	24 60       	ori	r18, 0x04	; 4
		}
	}

	return resp;
}
    7270:	82 2f       	mov	r24, r18
    7272:	08 95       	ret

00007274 <FormatEeprom>:

	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {
    7274:	cf 93       	push	r28
    7276:	df 93       	push	r29
    7278:	c0 e0       	ldi	r28, 0x00	; 0
    727a:	d0 e0       	ldi	r29, 0x00	; 0

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
    727c:	fe 01       	movw	r30, r28
    727e:	e0 59       	subi	r30, 0x90	; 144
    7280:	ff 4f       	sbci	r31, 0xFF	; 255
    7282:	e4 91       	lpm	r30, Z+
    7284:	ce 01       	movw	r24, r28
    7286:	6e 2f       	mov	r22, r30
    7288:	0e 94 64 38 	call	0x70c8	; 0x70c8 <WriteEeprom>
    728c:	21 96       	adiw	r28, 0x01	; 1
	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
    728e:	c0 32       	cpi	r28, 0x20	; 32
    7290:	d1 05       	cpc	r29, r1
    7292:	a1 f7       	brne	.-24     	; 0x727c <FormatEeprom+0x8>
    7294:	c0 e2       	ldi	r28, 0x20	; 32
    7296:	d0 e0       	ldi	r29, 0x00	; 0
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (EEPROM_MAX_BLOCKS*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
    7298:	ce 01       	movw	r24, r28
    729a:	6f ef       	ldi	r22, 0xFF	; 255
    729c:	0e 94 64 38 	call	0x70c8	; 0x70c8 <WriteEeprom>
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
    72a0:	ce 01       	movw	r24, r28
    72a2:	01 96       	adiw	r24, 0x01	; 1
    72a4:	6f ef       	ldi	r22, 0xFF	; 255
    72a6:	0e 94 64 38 	call	0x70c8	; 0x70c8 <WriteEeprom>
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (EEPROM_MAX_BLOCKS*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
    72aa:	a0 96       	adiw	r28, 0x20	; 32
    72ac:	88 e0       	ldi	r24, 0x08	; 8
    72ae:	c0 30       	cpi	r28, 0x00	; 0
    72b0:	d8 07       	cpc	r29, r24
    72b2:	91 f7       	brne	.-28     	; 0x7298 <FormatEeprom+0x24>
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
   }
   
}
    72b4:	df 91       	pop	r29
    72b6:	cf 91       	pop	r28
    72b8:	08 95       	ret

000072ba <isEepromFormatted>:
	  }
   }
}
	
//returns true if the EEPROM has been setup to work with the kernel.
bool isEepromFormatted(){
    72ba:	1f 93       	push	r17
	unsigned id;
	id=ReadEeprom(0)+(ReadEeprom(1)<<8);
    72bc:	80 e0       	ldi	r24, 0x00	; 0
    72be:	90 e0       	ldi	r25, 0x00	; 0
    72c0:	0e 94 6e 38 	call	0x70dc	; 0x70dc <ReadEeprom>
    72c4:	18 2f       	mov	r17, r24
    72c6:	81 e0       	ldi	r24, 0x01	; 1
    72c8:	90 e0       	ldi	r25, 0x00	; 0
    72ca:	0e 94 6e 38 	call	0x70dc	; 0x70dc <ReadEeprom>
    72ce:	90 e0       	ldi	r25, 0x00	; 0
    72d0:	38 2f       	mov	r19, r24
    72d2:	20 e0       	ldi	r18, 0x00	; 0
    72d4:	21 0f       	add	r18, r17
    72d6:	31 1d       	adc	r19, r1
    72d8:	2a 55       	subi	r18, 0x5A	; 90
    72da:	35 45       	sbci	r19, 0x55	; 85
    72dc:	09 f4       	brne	.+2      	; 0x72e0 <isEepromFormatted+0x26>
    72de:	91 e0       	ldi	r25, 0x01	; 1
	return (id==EEPROM_SIGNATURE);
}
    72e0:	89 2f       	mov	r24, r25
    72e2:	1f 91       	pop	r17
    72e4:	08 95       	ret

000072e6 <GetPrngNumber>:
 * Input: Zero=return the next random value. Non-zero=Sets the seed value.
 */
u16 GetPrngNumber(u16 seed){
	static u16 prng_state;
  	
	if(seed!=0) prng_state=seed;
    72e6:	00 97       	sbiw	r24, 0x00	; 0
    72e8:	21 f0       	breq	.+8      	; 0x72f2 <GetPrngNumber+0xc>
    72ea:	90 93 c4 0c 	sts	0x0CC4, r25
    72ee:	80 93 c3 0c 	sts	0x0CC3, r24
	
	u16 bit  = ((prng_state >> 0) ^ (prng_state >> 2) ^ (prng_state >> 3) ^ (prng_state >> 5) ) & 1;
    72f2:	80 91 c3 0c 	lds	r24, 0x0CC3
    72f6:	90 91 c4 0c 	lds	r25, 0x0CC4
	prng_state =  (prng_state >> 1) | (bit << 15);
    72fa:	9c 01       	movw	r18, r24
    72fc:	36 95       	lsr	r19
    72fe:	27 95       	ror	r18
    7300:	36 95       	lsr	r19
    7302:	27 95       	ror	r18
    7304:	ac 01       	movw	r20, r24
    7306:	73 e0       	ldi	r23, 0x03	; 3
    7308:	56 95       	lsr	r21
    730a:	47 95       	ror	r20
    730c:	7a 95       	dec	r23
    730e:	e1 f7       	brne	.-8      	; 0x7308 <GetPrngNumber+0x22>
    7310:	24 27       	eor	r18, r20
    7312:	35 27       	eor	r19, r21
    7314:	28 27       	eor	r18, r24
    7316:	39 27       	eor	r19, r25
    7318:	ac 01       	movw	r20, r24
    731a:	65 e0       	ldi	r22, 0x05	; 5
    731c:	56 95       	lsr	r21
    731e:	47 95       	ror	r20
    7320:	6a 95       	dec	r22
    7322:	e1 f7       	brne	.-8      	; 0x731c <GetPrngNumber+0x36>
    7324:	24 27       	eor	r18, r20
    7326:	35 27       	eor	r19, r21
    7328:	33 27       	eor	r19, r19
    732a:	26 95       	lsr	r18
    732c:	37 95       	ror	r19
    732e:	22 27       	eor	r18, r18
    7330:	96 95       	lsr	r25
    7332:	87 95       	ror	r24
    7334:	28 2b       	or	r18, r24
    7336:	39 2b       	or	r19, r25
    7338:	30 93 c4 0c 	sts	0x0CC4, r19
    733c:	20 93 c3 0c 	sts	0x0CC3, r18
	return prng_state;   
}
    7340:	c9 01       	movw	r24, r18
    7342:	08 95       	ret

00007344 <PatchCommand00>:
/*
 * Command 00: Set envelope speed per frame +127/-128, 0=no envelope
 * Param:
 */
void PatchCommand00(Track* track, char param){
	track->envelopeStep=param;
    7344:	fc 01       	movw	r30, r24
    7346:	67 87       	std	Z+15, r22	; 0x0f
}
    7348:	08 95       	ret

0000734a <PatchCommand01>:
 * Param:
 */
void PatchCommand01(Track* track, char param){
	(void)track; //to remove unused warning
	#if MIXER_CHAN4_TYPE == 0
		mixer.channels.type.noise.barrel=0x0101;
    734a:	81 e0       	ldi	r24, 0x01	; 1
    734c:	91 e0       	ldi	r25, 0x01	; 1
    734e:	90 93 b6 0c 	sts	0x0CB6, r25
    7352:	80 93 b5 0c 	sts	0x0CB5, r24
		mixer.channels.type.noise.params=param;
    7356:	60 93 b4 0c 	sts	0x0CB4, r22
	#endif
}
    735a:	08 95       	ret

0000735c <PatchCommand02>:
/*
 * Command 02: Set wave
 * Param:
 */
void PatchCommand02(Track* track, char param){
	SetMixerWave(track->channel,param);
    735c:	fc 01       	movw	r30, r24
    735e:	82 81       	ldd	r24, Z+2	; 0x02
    7360:	0e 94 c3 3d 	call	0x7b86	; 0x7b86 <SetMixerWave>
}
    7364:	08 95       	ret

00007366 <PatchCommand03>:
/*
 * Command 03: Note up * param
 * Param:
 */
void PatchCommand03(Track* track, char param){
    7366:	fc 01       	movw	r30, r24
	track->note+=param;
    7368:	81 81       	ldd	r24, Z+1	; 0x01
    736a:	68 0f       	add	r22, r24
    736c:	61 83       	std	Z+1, r22	; 0x01
	SetMixerNote(track->channel,track->note);
    736e:	82 81       	ldd	r24, Z+2	; 0x02
    7370:	0e 94 ac 3d 	call	0x7b58	; 0x7b58 <SetMixerNote>
}
    7374:	08 95       	ret

00007376 <PatchCommand04>:
/*
 * Command 04: Note down * param
 * Param:
 */
void PatchCommand04(Track* track, char param){
    7376:	fc 01       	movw	r30, r24
    7378:	86 2f       	mov	r24, r22
	track->note-=param;
    737a:	61 81       	ldd	r22, Z+1	; 0x01
    737c:	68 1b       	sub	r22, r24
    737e:	61 83       	std	Z+1, r22	; 0x01
	SetMixerNote(track->channel,track->note);
    7380:	82 81       	ldd	r24, Z+2	; 0x02
    7382:	0e 94 ac 3d 	call	0x7b58	; 0x7b58 <SetMixerNote>
}
    7386:	08 95       	ret

00007388 <PatchCommand05>:
/*
 * Command 05: End of note/fx
 * Param:
 */
void PatchCommand05(Track* track, char param){
    7388:	fc 01       	movw	r30, r24
	(void)param; //to remove unused warning
	track->flags&=~(TRACK_FLAGS_PLAYING+TRACK_FLAGS_PRIORITY);	//patchPlaying=false,priority=0	
    738a:	80 81       	ld	r24, Z
    738c:	8f 75       	andi	r24, 0x5F	; 95
    738e:	80 83       	st	Z, r24
}
    7390:	08 95       	ret

00007392 <PatchCommand06>:

/*
 * Command 06: Note hold
 * Param:
 */
void PatchCommand06(Track* track, char param){
    7392:	fc 01       	movw	r30, r24
	(void)param; //to remove unused warning
	track->flags|=TRACK_FLAGS_HOLD_ENV; //patchEnvelopeHold=true;
    7394:	80 81       	ld	r24, Z
    7396:	80 64       	ori	r24, 0x40	; 64
    7398:	80 83       	st	Z, r24
}
    739a:	08 95       	ret

0000739c <PatchCommand07>:
 * Command 07: Set envelope volume
 * Param:
 */

void PatchCommand07(Track* track, char param){
	track->envelopeVol=param;
    739c:	fc 01       	movw	r30, r24
    739e:	66 87       	std	Z+14, r22	; 0x0e
}
    73a0:	08 95       	ret

000073a2 <PatchCommand08>:
/*
 * Command 08: Set Note/Pitch
 * Param:
 */

void PatchCommand08(Track* track, char param){
    73a2:	ff 92       	push	r15
    73a4:	0f 93       	push	r16
    73a6:	1f 93       	push	r17
    73a8:	8c 01       	movw	r16, r24
    73aa:	f6 2e       	mov	r15, r22
	SetMixerNote(track->channel,param);
    73ac:	fc 01       	movw	r30, r24
    73ae:	82 81       	ldd	r24, Z+2	; 0x02
    73b0:	0e 94 ac 3d 	call	0x7b58	; 0x7b58 <SetMixerNote>
	track->note=param;
    73b4:	f8 01       	movw	r30, r16
    73b6:	f1 82       	std	Z+1, r15	; 0x01
	track->flags &= ~(TRACK_FLAGS_SLIDING);	
    73b8:	80 81       	ld	r24, Z
    73ba:	87 7f       	andi	r24, 0xF7	; 247
    73bc:	80 83       	st	Z, r24
}
    73be:	1f 91       	pop	r17
    73c0:	0f 91       	pop	r16
    73c2:	ff 90       	pop	r15
    73c4:	08 95       	ret

000073c6 <PatchCommand09>:
 * Command 09: Set tremolo level
 * Param:
*/

void PatchCommand09(Track* track, char param){
	track->tremoloLevel=param;
    73c6:	fc 01       	movw	r30, r24
    73c8:	62 87       	std	Z+10, r22	; 0x0a
}
    73ca:	08 95       	ret

000073cc <PatchCommand10>:
/*
 * Command 10: Set tremolo rate
 * Param:
*/
void PatchCommand10(Track* track, char param){
	track->tremoloRate=param;
    73cc:	fc 01       	movw	r30, r24
    73ce:	63 87       	std	Z+11, r22	; 0x0b
}
    73d0:	08 95       	ret

000073d2 <PatchCommand11>:
/*
 * Command 11: Pitch slide (linear) 
 * Param: (+/-) half steps to slide to
*/

void PatchCommand11(Track* track, char param){
    73d2:	cf 93       	push	r28
    73d4:	df 93       	push	r29
    73d6:	ec 01       	movw	r28, r24
    73d8:	46 2f       	mov	r20, r22
	//slide to note from current note
	s16 currentStep,targetStep,delta;	
	
	currentStep=pgm_read_word(&(steptable[track->note]));
    73da:	89 81       	ldd	r24, Y+1	; 0x01
    73dc:	90 e0       	ldi	r25, 0x00	; 0
    73de:	fc 01       	movw	r30, r24
    73e0:	ee 0f       	add	r30, r30
    73e2:	ff 1f       	adc	r31, r31
    73e4:	e8 5f       	subi	r30, 0xF8	; 248
    73e6:	f3 48       	sbci	r31, 0x83	; 131
    73e8:	25 91       	lpm	r18, Z+
    73ea:	34 91       	lpm	r19, Z+
	targetStep=pgm_read_word(&(steptable[track->note+param]));	
    73ec:	e6 2f       	mov	r30, r22
    73ee:	ff 27       	eor	r31, r31
    73f0:	e7 fd       	sbrc	r30, 7
    73f2:	f0 95       	com	r31
    73f4:	e8 0f       	add	r30, r24
    73f6:	f9 1f       	adc	r31, r25
    73f8:	ee 0f       	add	r30, r30
    73fa:	ff 1f       	adc	r31, r31
    73fc:	e8 5f       	subi	r30, 0xF8	; 248
    73fe:	f3 48       	sbci	r31, 0x83	; 131
    7400:	85 91       	lpm	r24, Z+
    7402:	94 91       	lpm	r25, Z+
	delta=((targetStep-currentStep)/track->slideSpeed);
    7404:	68 85       	ldd	r22, Y+8	; 0x08
    7406:	82 1b       	sub	r24, r18
    7408:	93 0b       	sbc	r25, r19
    740a:	70 e0       	ldi	r23, 0x00	; 0
    740c:	0e 94 14 48 	call	0x9028	; 0x9028 <__divmodhi4>
    7410:	9b 01       	movw	r18, r22
	if(delta==0)delta++;
    7412:	61 15       	cp	r22, r1
    7414:	71 05       	cpc	r23, r1
    7416:	11 f4       	brne	.+4      	; 0x741c <PatchCommand11+0x4a>
    7418:	21 e0       	ldi	r18, 0x01	; 1
    741a:	30 e0       	ldi	r19, 0x00	; 0

	mixer.channels.all[track->channel].step+=delta;
    741c:	8a 81       	ldd	r24, Y+2	; 0x02
    741e:	90 e0       	ldi	r25, 0x00	; 0
    7420:	fc 01       	movw	r30, r24
    7422:	ee 0f       	add	r30, r30
    7424:	ff 1f       	adc	r31, r31
    7426:	e8 0f       	add	r30, r24
    7428:	f9 1f       	adc	r31, r25
    742a:	ee 0f       	add	r30, r30
    742c:	ff 1f       	adc	r31, r31
    742e:	ef 55       	subi	r30, 0x5F	; 95
    7430:	f3 4f       	sbci	r31, 0xF3	; 243
    7432:	81 81       	ldd	r24, Z+1	; 0x01
    7434:	92 81       	ldd	r25, Z+2	; 0x02
    7436:	82 0f       	add	r24, r18
    7438:	93 1f       	adc	r25, r19
    743a:	92 83       	std	Z+2, r25	; 0x02
    743c:	81 83       	std	Z+1, r24	; 0x01
	
	track->slideStep=delta;
    743e:	3e 83       	std	Y+6, r19	; 0x06
    7440:	2d 83       	std	Y+5, r18	; 0x05
	track->flags|=TRACK_FLAGS_SLIDING;
    7442:	88 81       	ld	r24, Y
    7444:	88 60       	ori	r24, 0x08	; 8
    7446:	88 83       	st	Y, r24
	track->slideNote=track->note+param;
    7448:	89 81       	ldd	r24, Y+1	; 0x01
    744a:	84 0f       	add	r24, r20
    744c:	8f 83       	std	Y+7, r24	; 0x07
}
    744e:	df 91       	pop	r29
    7450:	cf 91       	pop	r28
    7452:	08 95       	ret

00007454 <PatchCommand12>:
/*
 * Command 12: Pitch slide speed 
 * Param: slide speed (fixed 4:4)
 */
void PatchCommand12(Track* track, char param){
	track->slideSpeed=param;
    7454:	fc 01       	movw	r30, r24
    7456:	60 87       	std	Z+8, r22	; 0x08
}
    7458:	08 95       	ret

0000745a <PatchCommand13>:
 *  Command 13: Loop start
 * Description: Defines the start of a loop. Works in conjunction with command 14 (PC_LOOP_END).
 *		 Param: loop count
 */
void PatchCommand13(Track* track, char param){
	track->loopCount=(u8)param;
    745a:	fc 01       	movw	r30, r24
    745c:	64 83       	std	Z+4, r22	; 0x04
}
    745e:	08 95       	ret

00007460 <PatchCommand14>:
 *					1,PC_NOTE_DOWN,3,
 *					0,PC_LOOP_END,2,
 *					0,PATCH_END  
 *				};
 */
void PatchCommand14(Track* track, char param){
    7460:	dc 01       	movw	r26, r24
	if(track->loopCount>0){
    7462:	14 96       	adiw	r26, 0x04	; 4
    7464:	8c 91       	ld	r24, X
    7466:	14 97       	sbiw	r26, 0x04	; 4
    7468:	88 23       	and	r24, r24
    746a:	31 f1       	breq	.+76     	; 0x74b8 <PatchCommand14+0x58>
    746c:	55 96       	adiw	r26, 0x15	; 21
    746e:	ed 91       	ld	r30, X+
    7470:	fc 91       	ld	r31, X
    7472:	56 97       	sbiw	r26, 0x16	; 22
		//track->patchCommandStreamPos=track->loopStart;
		if(param!=0){
    7474:	66 23       	and	r22, r22
    7476:	71 f0       	breq	.+28     	; 0x7494 <PatchCommand14+0x34>
			track->patchCommandStreamPos-=((param+1)*3);
    7478:	26 2f       	mov	r18, r22
    747a:	33 27       	eor	r19, r19
    747c:	27 fd       	sbrc	r18, 7
    747e:	30 95       	com	r19
    7480:	20 95       	com	r18
    7482:	30 95       	com	r19
    7484:	c9 01       	movw	r24, r18
    7486:	88 0f       	add	r24, r24
    7488:	99 1f       	adc	r25, r25
    748a:	82 0f       	add	r24, r18
    748c:	93 1f       	adc	r25, r19
    748e:	e8 0f       	add	r30, r24
    7490:	f9 1f       	adc	r31, r25
    7492:	08 c0       	rjmp	.+16     	; 0x74a4 <PatchCommand14+0x44>
 *					1,PC_NOTE_DOWN,3,
 *					0,PC_LOOP_END,2,
 *					0,PATCH_END  
 *				};
 */
void PatchCommand14(Track* track, char param){
    7494:	33 97       	sbiw	r30, 0x03	; 3
			track->patchCommandStreamPos-=((param+1)*3);
		}else{
			u8 command;
			while(1){
				track->patchCommandStreamPos-=3;
				command=pgm_read_byte(track->patchCommandStreamPos-3+1);
    7496:	32 97       	sbiw	r30, 0x02	; 2
    7498:	84 91       	lpm	r24, Z+
    749a:	32 96       	adiw	r30, 0x02	; 2
				
				//if we found the loop point or somehow reached the previous patch, exit
				if(command==PC_LOOP_START || command==PATCH_END) break;				
    749c:	8d 30       	cpi	r24, 0x0D	; 13
    749e:	11 f0       	breq	.+4      	; 0x74a4 <PatchCommand14+0x44>
    74a0:	8f 3f       	cpi	r24, 0xFF	; 255
    74a2:	c1 f7       	brne	.-16     	; 0x7494 <PatchCommand14+0x34>
    74a4:	56 96       	adiw	r26, 0x16	; 22
    74a6:	fc 93       	st	X, r31
    74a8:	ee 93       	st	-X, r30
    74aa:	55 97       	sbiw	r26, 0x15	; 21
			}
		}
		track->loopCount--;
    74ac:	14 96       	adiw	r26, 0x04	; 4
    74ae:	8c 91       	ld	r24, X
    74b0:	14 97       	sbiw	r26, 0x04	; 4
    74b2:	81 50       	subi	r24, 0x01	; 1
    74b4:	14 96       	adiw	r26, 0x04	; 4
    74b6:	8c 93       	st	X, r24
    74b8:	08 95       	ret

000074ba <InitMusicPlayer>:

const Patch *patchPointers;

void InitMusicPlayer(const Patch *patchPointersParam){

	patchPointers=patchPointersParam;
    74ba:	90 93 41 0d 	sts	0x0D41, r25
    74be:	80 93 40 0d 	sts	0x0D40, r24

	masterVolume=DEFAULT_MASTER_VOL;
    74c2:	8f e6       	ldi	r24, 0x6F	; 111
    74c4:	80 93 43 0d 	sts	0x0D43, r24
#if MIDI_IN == ENABLED
	InitUartRxBuffer();
	lastMidiInStatus=0;
#endif

	playSong=false;
    74c8:	10 92 c5 0c 	sts	0x0CC5, r1
    74cc:	eb ec       	ldi	r30, 0xCB	; 203
    74ce:	fc e0       	ldi	r31, 0x0C	; 12
    74d0:	80 e0       	ldi	r24, 0x00	; 0

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
		tracks[t].channel=t;
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    74d2:	90 e1       	ldi	r25, 0x10	; 16
		tracks[t].noteVol=0;
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    74d4:	3f ef       	ldi	r19, 0xFF	; 255
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
    74d6:	28 e1       	ldi	r18, 0x18	; 24

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
		tracks[t].channel=t;
    74d8:	82 83       	std	Z+2, r24	; 0x02
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    74da:	90 83       	st	Z, r25
		tracks[t].noteVol=0;
    74dc:	15 86       	std	Z+13, r1	; 0x0d
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    74de:	34 87       	std	Z+12, r19	; 0x0c
		tracks[t].patchNo=DEFAULT_PATCH;
    74e0:	10 8a       	std	Z+16, r1	; 0x10
		tracks[t].tremoloRate=24; //~6hz
    74e2:	23 87       	std	Z+11, r18	; 0x0b
		tracks[t].slideSpeed=0x10;
    74e4:	90 87       	std	Z+8, r25	; 0x08
#endif

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    74e6:	8f 5f       	subi	r24, 0xFF	; 255
    74e8:	77 96       	adiw	r30, 0x17	; 23
    74ea:	85 30       	cpi	r24, 0x05	; 5
    74ec:	a9 f7       	brne	.-22     	; 0x74d8 <InitMusicPlayer+0x1e>
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
		tracks[t].slideSpeed=0x10;
	}

}
    74ee:	08 95       	ret

000074f0 <ProcessMusic>:
	}

#endif


void ProcessMusic(void){
    74f0:	a0 e0       	ldi	r26, 0x00	; 0
    74f2:	b0 e0       	ldi	r27, 0x00	; 0
    74f4:	ee e7       	ldi	r30, 0x7E	; 126
    74f6:	fa e3       	ldi	r31, 0x3A	; 58
    74f8:	0c 94 31 48 	jmp	0x9062	; 0x9062 <__prologue_saves__+0x14>
    74fc:	ab ec       	ldi	r26, 0xCB	; 203
    74fe:	bc e0       	ldi	r27, 0x0C	; 12
    7500:	c2 ea       	ldi	r28, 0xA2	; 162
    7502:	dc e0       	ldi	r29, 0x0C	; 12
	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//update envelope
		if(track->envelopeStep!=0){
    7504:	1f 96       	adiw	r26, 0x0f	; 15
    7506:	8c 91       	ld	r24, X
    7508:	1f 97       	sbiw	r26, 0x0f	; 15
    750a:	88 23       	and	r24, r24
    750c:	b9 f0       	breq	.+46     	; 0x753c <ProcessMusic+0x4c>
			vol=track->envelopeVol+track->envelopeStep;		
    750e:	28 2f       	mov	r18, r24
    7510:	33 27       	eor	r19, r19
    7512:	27 fd       	sbrc	r18, 7
    7514:	30 95       	com	r19
    7516:	1e 96       	adiw	r26, 0x0e	; 14
    7518:	8c 91       	ld	r24, X
    751a:	1e 97       	sbiw	r26, 0x0e	; 14
    751c:	28 0f       	add	r18, r24
    751e:	31 1d       	adc	r19, r1
    7520:	2f 3f       	cpi	r18, 0xFF	; 255
    7522:	31 05       	cpc	r19, r1
    7524:	19 f0       	breq	.+6      	; 0x752c <ProcessMusic+0x3c>
    7526:	14 f0       	brlt	.+4      	; 0x752c <ProcessMusic+0x3c>
    7528:	2f ef       	ldi	r18, 0xFF	; 255
    752a:	30 e0       	ldi	r19, 0x00	; 0
			if(vol<0){
				vol=0;			
			}else if(vol>0xff){
				vol=0xff;						
			}
			track->envelopeVol=vol;
    752c:	c9 01       	movw	r24, r18
    752e:	37 ff       	sbrs	r19, 7
    7530:	02 c0       	rjmp	.+4      	; 0x7536 <ProcessMusic+0x46>
    7532:	80 e0       	ldi	r24, 0x00	; 0
    7534:	90 e0       	ldi	r25, 0x00	; 0
    7536:	1e 96       	adiw	r26, 0x0e	; 14
    7538:	8c 93       	st	X, r24
    753a:	1e 97       	sbiw	r26, 0x0e	; 14
		}

		//if volumes reaches zero and no more patch command, explicitly end playing on track
		//if(vol==0 && track->patchCommandStreamPos==NULL) track->flags&=~(TRACK_FLAGS_PLAYING);

		if(track->flags & TRACK_FLAGS_SLIDING){
    753c:	8c 91       	ld	r24, X
    753e:	83 ff       	sbrs	r24, 3
    7540:	26 c0       	rjmp	.+76     	; 0x758e <ProcessMusic+0x9e>

			mixer.channels.all[trackNo].step+=track->slideStep;
    7542:	15 96       	adiw	r26, 0x05	; 5
    7544:	4d 91       	ld	r20, X+
    7546:	5c 91       	ld	r21, X
    7548:	16 97       	sbiw	r26, 0x06	; 6
    754a:	28 81       	ld	r18, Y
    754c:	39 81       	ldd	r19, Y+1	; 0x01
    754e:	24 0f       	add	r18, r20
    7550:	35 1f       	adc	r19, r21
    7552:	39 83       	std	Y+1, r19	; 0x01
    7554:	28 83       	st	Y, r18
			u16 tStep=pgm_read_word(&(steptable[track->slideNote]));
    7556:	17 96       	adiw	r26, 0x07	; 7
    7558:	8c 91       	ld	r24, X
    755a:	17 97       	sbiw	r26, 0x07	; 7
    755c:	e8 2f       	mov	r30, r24
    755e:	f0 e0       	ldi	r31, 0x00	; 0
    7560:	ee 0f       	add	r30, r30
    7562:	ff 1f       	adc	r31, r31
    7564:	e8 5f       	subi	r30, 0xF8	; 248
    7566:	f3 48       	sbci	r31, 0x83	; 131
    7568:	85 91       	lpm	r24, Z+
    756a:	94 91       	lpm	r25, Z+

			if((track->slideStep>0 && mixer.channels.all[trackNo].step>=tStep) || 
    756c:	14 16       	cp	r1, r20
    756e:	15 06       	cpc	r1, r21
    7570:	24 f4       	brge	.+8      	; 0x757a <ProcessMusic+0x8a>
    7572:	28 17       	cp	r18, r24
    7574:	39 07       	cpc	r19, r25
    7576:	30 f4       	brcc	.+12     	; 0x7584 <ProcessMusic+0x94>
    7578:	0a c0       	rjmp	.+20     	; 0x758e <ProcessMusic+0x9e>
    757a:	45 2b       	or	r20, r21
    757c:	41 f0       	breq	.+16     	; 0x758e <ProcessMusic+0x9e>
    757e:	82 17       	cp	r24, r18
    7580:	93 07       	cpc	r25, r19
    7582:	28 f0       	brcs	.+10     	; 0x758e <ProcessMusic+0x9e>
				(track->slideStep<0 && mixer.channels.all[trackNo].step<=tStep))
			{					
				mixer.channels.all[trackNo].step = tStep;					
    7584:	99 83       	std	Y+1, r25	; 0x01
    7586:	88 83       	st	Y, r24
				track->flags &= ~(TRACK_FLAGS_SLIDING);	
    7588:	8c 91       	ld	r24, X
    758a:	87 7f       	andi	r24, 0xF7	; 247
    758c:	8c 93       	st	X, r24
    758e:	57 96       	adiw	r26, 0x17	; 23
    7590:	26 96       	adiw	r28, 0x06	; 6
	u8 channel;
	Track* track;


	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    7592:	4d e0       	ldi	r20, 0x0D	; 13
    7594:	ae 33       	cpi	r26, 0x3E	; 62
    7596:	b4 07       	cpc	r27, r20
    7598:	09 f0       	breq	.+2      	; 0x759c <ProcessMusic+0xac>
    759a:	b4 cf       	rjmp	.-152    	; 0x7504 <ProcessMusic+0x14>
	}



	//Process song MIDI notes
	if(playSong){
    759c:	80 91 c5 0c 	lds	r24, 0x0CC5
    75a0:	88 23       	and	r24, r24
    75a2:	09 f0       	breq	.+2      	; 0x75a6 <ProcessMusic+0xb6>
    75a4:	de c0       	rjmp	.+444    	; 0x7762 <ProcessMusic+0x272>
    75a6:	f1 c0       	rjmp	.+482    	; 0x778a <ProcessMusic+0x29a>
		#if MUSIC_ENGINE == MIDI
			
			//process all simultaneous events
			while(currDeltaTime==nextDeltaTime){

				c1=pgm_read_byte(songPos++);
    75a8:	e0 91 47 0d 	lds	r30, 0x0D47
    75ac:	f0 91 48 0d 	lds	r31, 0x0D48
    75b0:	cf 01       	movw	r24, r30
    75b2:	01 96       	adiw	r24, 0x01	; 1
    75b4:	90 93 48 0d 	sts	0x0D48, r25
    75b8:	80 93 47 0d 	sts	0x0D47, r24
    75bc:	44 91       	lpm	r20, Z+
			
				if(c1==0xff){
    75be:	4f 3f       	cpi	r20, 0xFF	; 255
    75c0:	69 f5       	brne	.+90     	; 0x761c <ProcessMusic+0x12c>
					//META data type event
					c1=pgm_read_byte(songPos++);
    75c2:	ac 01       	movw	r20, r24
    75c4:	4f 5f       	subi	r20, 0xFF	; 255
    75c6:	5f 4f       	sbci	r21, 0xFF	; 255
    75c8:	50 93 48 0d 	sts	0x0D48, r21
    75cc:	40 93 47 0d 	sts	0x0D47, r20
    75d0:	fc 01       	movw	r30, r24
    75d2:	84 91       	lpm	r24, Z+

				
					if(c1==0x2f){ //end of song
    75d4:	8f 32       	cpi	r24, 0x2F	; 47
    75d6:	19 f4       	brne	.+6      	; 0x75de <ProcessMusic+0xee>
						playSong=false;
    75d8:	10 92 c5 0c 	sts	0x0CC5, r1
    75dc:	d0 c0       	rjmp	.+416    	; 0x777e <ProcessMusic+0x28e>
						break;	
					}else if(c1==0x6){ //marker
    75de:	86 30       	cpi	r24, 0x06	; 6
    75e0:	09 f0       	breq	.+2      	; 0x75e4 <ProcessMusic+0xf4>
    75e2:	b2 c0       	rjmp	.+356    	; 0x7748 <ProcessMusic+0x258>
						c1=pgm_read_byte(songPos++); //read len
    75e4:	fa 01       	movw	r30, r20
    75e6:	31 96       	adiw	r30, 0x01	; 1
						c2=pgm_read_byte(songPos++); //read data
    75e8:	cf 01       	movw	r24, r30
    75ea:	01 96       	adiw	r24, 0x01	; 1
    75ec:	90 93 48 0d 	sts	0x0D48, r25
    75f0:	80 93 47 0d 	sts	0x0D47, r24
    75f4:	e4 91       	lpm	r30, Z+
						if(c2=='S'){ //loop start
    75f6:	e3 35       	cpi	r30, 0x53	; 83
    75f8:	29 f4       	brne	.+10     	; 0x7604 <ProcessMusic+0x114>
							loopStart=songPos;
    75fa:	90 93 4a 0d 	sts	0x0D4A, r25
    75fe:	80 93 49 0d 	sts	0x0D49, r24
    7602:	a2 c0       	rjmp	.+324    	; 0x7748 <ProcessMusic+0x258>
						}else if(c2=='E'){//loop end
    7604:	e5 34       	cpi	r30, 0x45	; 69
    7606:	09 f0       	breq	.+2      	; 0x760a <ProcessMusic+0x11a>
    7608:	9f c0       	rjmp	.+318    	; 0x7748 <ProcessMusic+0x258>
							songPos=loopStart;
    760a:	80 91 49 0d 	lds	r24, 0x0D49
    760e:	90 91 4a 0d 	lds	r25, 0x0D4A
    7612:	90 93 48 0d 	sts	0x0D48, r25
    7616:	80 93 47 0d 	sts	0x0D47, r24
    761a:	96 c0       	rjmp	.+300    	; 0x7748 <ProcessMusic+0x258>
					}
				

				}else{

					if(c1&0x80) lastStatus=c1;					
    761c:	47 ff       	sbrs	r20, 7
    761e:	02 c0       	rjmp	.+4      	; 0x7624 <ProcessMusic+0x134>
    7620:	40 93 42 0d 	sts	0x0D42, r20
					channel=lastStatus&0x0f;
    7624:	20 91 42 0d 	lds	r18, 0x0D42
    7628:	32 2f       	mov	r19, r18
    762a:	3f 70       	andi	r19, 0x0F	; 15
				
					//get next data byte
					//Note: maybe we should not advance the cursor
					//in case we receive an unsupported command				
					if(c1&0x80) c1=pgm_read_byte(songPos++); 
    762c:	47 ff       	sbrs	r20, 7
    762e:	08 c0       	rjmp	.+16     	; 0x7640 <ProcessMusic+0x150>
    7630:	01 96       	adiw	r24, 0x01	; 1
    7632:	90 93 48 0d 	sts	0x0D48, r25
    7636:	80 93 47 0d 	sts	0x0D47, r24
    763a:	01 97       	sbiw	r24, 0x01	; 1
    763c:	fc 01       	movw	r30, r24
    763e:	44 91       	lpm	r20, Z+

					switch(lastStatus&0xf0){
    7640:	82 2f       	mov	r24, r18
    7642:	90 e0       	ldi	r25, 0x00	; 0
    7644:	80 7f       	andi	r24, 0xF0	; 240
    7646:	90 70       	andi	r25, 0x00	; 0
    7648:	80 3b       	cpi	r24, 0xB0	; 176
    764a:	91 05       	cpc	r25, r1
    764c:	31 f1       	breq	.+76     	; 0x769a <ProcessMusic+0x1aa>
    764e:	80 3c       	cpi	r24, 0xC0	; 192
    7650:	91 05       	cpc	r25, r1
    7652:	09 f4       	brne	.+2      	; 0x7656 <ProcessMusic+0x166>
    7654:	6d c0       	rjmp	.+218    	; 0x7730 <ProcessMusic+0x240>
    7656:	80 39       	cpi	r24, 0x90	; 144
    7658:	91 05       	cpc	r25, r1
    765a:	09 f0       	breq	.+2      	; 0x765e <ProcessMusic+0x16e>
    765c:	75 c0       	rjmp	.+234    	; 0x7748 <ProcessMusic+0x258>

						//note-on
						case 0x90:
							//c1 = note						
							c2=pgm_read_byte(songPos++)<<1; //get volume
    765e:	e0 91 47 0d 	lds	r30, 0x0D47
    7662:	f0 91 48 0d 	lds	r31, 0x0D48
    7666:	31 96       	adiw	r30, 0x01	; 1
    7668:	f0 93 48 0d 	sts	0x0D48, r31
    766c:	e0 93 47 0d 	sts	0x0D47, r30
    7670:	31 97       	sbiw	r30, 0x01	; 1
    7672:	e4 91       	lpm	r30, Z+
						
							if(tracks[channel].flags|TRACK_FLAGS_ALLOCATED){ //allocated==true
								TriggerNote(channel,tracks[channel].patchNo,c1,c2);
    7674:	83 2f       	mov	r24, r19
    7676:	90 e0       	ldi	r25, 0x00	; 0
    7678:	8c 9f       	mul	r24, r28
    767a:	d0 01       	movw	r26, r0
    767c:	8d 9f       	mul	r24, r29
    767e:	b0 0d       	add	r27, r0
    7680:	9c 9f       	mul	r25, r28
    7682:	b0 0d       	add	r27, r0
    7684:	11 24       	eor	r1, r1
    7686:	a5 53       	subi	r26, 0x35	; 53
    7688:	b3 4f       	sbci	r27, 0xF3	; 243
    768a:	ee 0f       	add	r30, r30
    768c:	83 2f       	mov	r24, r19
    768e:	50 96       	adiw	r26, 0x10	; 16
    7690:	6c 91       	ld	r22, X
    7692:	2e 2f       	mov	r18, r30
    7694:	0e 94 82 3d 	call	0x7b04	; 0x7b04 <TriggerNote>
    7698:	57 c0       	rjmp	.+174    	; 0x7748 <ProcessMusic+0x258>
							break;

						//controllers
						case 0xb0:
							///c1 = controller #
							c2=pgm_read_byte(songPos++); //get controller value
    769a:	e0 91 47 0d 	lds	r30, 0x0D47
    769e:	f0 91 48 0d 	lds	r31, 0x0D48
    76a2:	31 96       	adiw	r30, 0x01	; 1
    76a4:	f0 93 48 0d 	sts	0x0D48, r31
    76a8:	e0 93 47 0d 	sts	0x0D47, r30
    76ac:	31 97       	sbiw	r30, 0x01	; 1
    76ae:	24 91       	lpm	r18, Z+
						
							if(c1==CONTROLER_VOL){
    76b0:	47 30       	cpi	r20, 0x07	; 7
    76b2:	71 f4       	brne	.+28     	; 0x76d0 <ProcessMusic+0x1e0>
								tracks[channel].trackVol=c2<<1;
    76b4:	83 2f       	mov	r24, r19
    76b6:	90 e0       	ldi	r25, 0x00	; 0
    76b8:	8c 9f       	mul	r24, r28
    76ba:	f0 01       	movw	r30, r0
    76bc:	8d 9f       	mul	r24, r29
    76be:	f0 0d       	add	r31, r0
    76c0:	9c 9f       	mul	r25, r28
    76c2:	f0 0d       	add	r31, r0
    76c4:	11 24       	eor	r1, r1
    76c6:	e5 53       	subi	r30, 0x35	; 53
    76c8:	f3 4f       	sbci	r31, 0xF3	; 243
    76ca:	22 0f       	add	r18, r18
    76cc:	24 87       	std	Z+12, r18	; 0x0c
    76ce:	3c c0       	rjmp	.+120    	; 0x7748 <ProcessMusic+0x258>
							}else if(c1==CONTROLER_EXPRESSION){
    76d0:	4b 30       	cpi	r20, 0x0B	; 11
    76d2:	71 f4       	brne	.+28     	; 0x76f0 <ProcessMusic+0x200>
								tracks[channel].expressionVol=c2<<1;
    76d4:	83 2f       	mov	r24, r19
    76d6:	90 e0       	ldi	r25, 0x00	; 0
    76d8:	8c 9f       	mul	r24, r28
    76da:	f0 01       	movw	r30, r0
    76dc:	8d 9f       	mul	r24, r29
    76de:	f0 0d       	add	r31, r0
    76e0:	9c 9f       	mul	r25, r28
    76e2:	f0 0d       	add	r31, r0
    76e4:	11 24       	eor	r1, r1
    76e6:	e5 53       	subi	r30, 0x35	; 53
    76e8:	f3 4f       	sbci	r31, 0xF3	; 243
    76ea:	22 0f       	add	r18, r18
    76ec:	23 83       	std	Z+3, r18	; 0x03
    76ee:	2c c0       	rjmp	.+88     	; 0x7748 <ProcessMusic+0x258>
							}else if(c1==CONTROLER_TREMOLO){
    76f0:	4c 35       	cpi	r20, 0x5C	; 92
    76f2:	71 f4       	brne	.+28     	; 0x7710 <ProcessMusic+0x220>
								tracks[channel].tremoloLevel=c2<<1;
    76f4:	83 2f       	mov	r24, r19
    76f6:	90 e0       	ldi	r25, 0x00	; 0
    76f8:	8c 9f       	mul	r24, r28
    76fa:	f0 01       	movw	r30, r0
    76fc:	8d 9f       	mul	r24, r29
    76fe:	f0 0d       	add	r31, r0
    7700:	9c 9f       	mul	r25, r28
    7702:	f0 0d       	add	r31, r0
    7704:	11 24       	eor	r1, r1
    7706:	e5 53       	subi	r30, 0x35	; 53
    7708:	f3 4f       	sbci	r31, 0xF3	; 243
    770a:	22 0f       	add	r18, r18
    770c:	22 87       	std	Z+10, r18	; 0x0a
    770e:	1c c0       	rjmp	.+56     	; 0x7748 <ProcessMusic+0x258>
							}else if(c1==CONTROLER_TREMOLO_RATE){
    7710:	44 36       	cpi	r20, 0x64	; 100
    7712:	d1 f4       	brne	.+52     	; 0x7748 <ProcessMusic+0x258>
								tracks[channel].tremoloRate=c2<<1;
    7714:	83 2f       	mov	r24, r19
    7716:	90 e0       	ldi	r25, 0x00	; 0
    7718:	8c 9f       	mul	r24, r28
    771a:	f0 01       	movw	r30, r0
    771c:	8d 9f       	mul	r24, r29
    771e:	f0 0d       	add	r31, r0
    7720:	9c 9f       	mul	r25, r28
    7722:	f0 0d       	add	r31, r0
    7724:	11 24       	eor	r1, r1
    7726:	e5 53       	subi	r30, 0x35	; 53
    7728:	f3 4f       	sbci	r31, 0xF3	; 243
    772a:	22 0f       	add	r18, r18
    772c:	23 87       	std	Z+11, r18	; 0x0b
    772e:	0c c0       	rjmp	.+24     	; 0x7748 <ProcessMusic+0x258>
							break;

						//program change
						case 0xc0:
							// c1 = patch #						
							tracks[channel].patchNo=c1;
    7730:	83 2f       	mov	r24, r19
    7732:	90 e0       	ldi	r25, 0x00	; 0
    7734:	8c 9f       	mul	r24, r28
    7736:	f0 01       	movw	r30, r0
    7738:	8d 9f       	mul	r24, r29
    773a:	f0 0d       	add	r31, r0
    773c:	9c 9f       	mul	r25, r28
    773e:	f0 0d       	add	r31, r0
    7740:	11 24       	eor	r1, r1
    7742:	e5 53       	subi	r30, 0x35	; 53
    7744:	f3 4f       	sbci	r31, 0xF3	; 243
    7746:	40 8b       	std	Z+16, r20	; 0x10


				}//end if(c1==0xff)

				//read next delta time
				nextDeltaTime=ReadVarLen(&songPos);			
    7748:	87 e4       	ldi	r24, 0x47	; 71
    774a:	9d e0       	ldi	r25, 0x0D	; 13
    774c:	0e 94 8f 3c 	call	0x791e	; 0x791e <ReadVarLen>
    7750:	90 93 45 0d 	sts	0x0D45, r25
    7754:	80 93 44 0d 	sts	0x0D44, r24
				currDeltaTime=0;
    7758:	10 92 3f 0d 	sts	0x0D3F, r1
    775c:	10 92 3e 0d 	sts	0x0D3E, r1
    7760:	02 c0       	rjmp	.+4      	; 0x7766 <ProcessMusic+0x276>
							}else if(c1==CONTROLER_EXPRESSION){
								tracks[channel].expressionVol=c2<<1;
							}else if(c1==CONTROLER_TREMOLO){
								tracks[channel].tremoloLevel=c2<<1;
							}else if(c1==CONTROLER_TREMOLO_RATE){
								tracks[channel].tremoloRate=c2<<1;
    7762:	c7 e1       	ldi	r28, 0x17	; 23
    7764:	d0 e0       	ldi	r29, 0x00	; 0
	if(playSong){
	
		#if MUSIC_ENGINE == MIDI
			
			//process all simultaneous events
			while(currDeltaTime==nextDeltaTime){
    7766:	20 91 3e 0d 	lds	r18, 0x0D3E
    776a:	30 91 3f 0d 	lds	r19, 0x0D3F
    776e:	80 91 44 0d 	lds	r24, 0x0D44
    7772:	90 91 45 0d 	lds	r25, 0x0D45
    7776:	28 17       	cp	r18, r24
    7778:	39 07       	cpc	r19, r25
    777a:	09 f4       	brne	.+2      	; 0x777e <ProcessMusic+0x28e>
    777c:	15 cf       	rjmp	.-470    	; 0x75a8 <ProcessMusic+0xb8>
					}
				#endif

			}//end while
		
			currDeltaTime++;
    777e:	2f 5f       	subi	r18, 0xFF	; 255
    7780:	3f 4f       	sbci	r19, 0xFF	; 255
    7782:	30 93 3f 0d 	sts	0x0D3F, r19
    7786:	20 93 3e 0d 	sts	0x0D3E, r18
    778a:	cb ec       	ldi	r28, 0xCB	; 203
    778c:	dc e0       	ldi	r29, 0x0C	; 12
    778e:	01 ea       	ldi	r16, 0xA1	; 161
    7790:	1c e0       	ldi	r17, 0x0C	; 12
					tmp-=128; //convert to unsigned

					tVol=(track->tremoloLevel*tmp)+0x100;
					tVol>>=8;
					
					uVol=(uVol*(0xff-tVol))+0x100;
    7792:	8f ef       	ldi	r24, 0xFF	; 255
    7794:	c8 2e       	mov	r12, r24
    7796:	d1 2c       	mov	r13, r1
					}
				#endif

			}//end while
		
			currDeltaTime++;
    7798:	7e 01       	movw	r14, r28
	//
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//process patch command stream
		if((track->flags & TRACK_FLAGS_PLAYING) && (track->patchCommandStreamPos!=NULL) && ((track->flags & TRACK_FLAGS_HOLD_ENV)==0)){
    779a:	88 81       	ld	r24, Y
    779c:	28 2f       	mov	r18, r24
    779e:	85 ff       	sbrs	r24, 5
    77a0:	39 c0       	rjmp	.+114    	; 0x7814 <ProcessMusic+0x324>
    77a2:	8d 89       	ldd	r24, Y+21	; 0x15
    77a4:	9e 89       	ldd	r25, Y+22	; 0x16
    77a6:	89 2b       	or	r24, r25
    77a8:	09 f4       	brne	.+2      	; 0x77ac <ProcessMusic+0x2bc>
    77aa:	34 c0       	rjmp	.+104    	; 0x7814 <ProcessMusic+0x324>
    77ac:	26 ff       	sbrs	r18, 6
    77ae:	2b c0       	rjmp	.+86     	; 0x7806 <ProcessMusic+0x316>
    77b0:	31 c0       	rjmp	.+98     	; 0x7814 <ProcessMusic+0x324>

			//process all simultaneous events
			while(track->patchCurrDeltaTime==track->patchNextDeltaTime){

				c1=pgm_read_byte(track->patchCommandStreamPos++);
    77b2:	ed 89       	ldd	r30, Y+21	; 0x15
    77b4:	fe 89       	ldd	r31, Y+22	; 0x16
    77b6:	cf 01       	movw	r24, r30
    77b8:	01 96       	adiw	r24, 0x01	; 1
    77ba:	9e 8b       	std	Y+22, r25	; 0x16
    77bc:	8d 8b       	std	Y+21, r24	; 0x15
    77be:	24 91       	lpm	r18, Z+
				if(c1==PATCH_END){
    77c0:	2f 3f       	cpi	r18, 0xFF	; 255
    77c2:	31 f4       	brne	.+12     	; 0x77d0 <ProcessMusic+0x2e0>
					//end of stream!
					track->flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    77c4:	88 81       	ld	r24, Y
    77c6:	8f 77       	andi	r24, 0x7F	; 127
    77c8:	88 83       	st	Y, r24
					track->patchCommandStreamPos=NULL;
    77ca:	1e 8a       	std	Y+22, r1	; 0x16
    77cc:	1d 8a       	std	Y+21, r1	; 0x15
    77ce:	1f c0       	rjmp	.+62     	; 0x780e <ProcessMusic+0x31e>
					break;

				}else{
					c2=pgm_read_byte(track->patchCommandStreamPos++);
    77d0:	01 96       	adiw	r24, 0x01	; 1
    77d2:	9e 8b       	std	Y+22, r25	; 0x16
    77d4:	8d 8b       	std	Y+21, r24	; 0x15
    77d6:	01 97       	sbiw	r24, 0x01	; 1
    77d8:	fc 01       	movw	r30, r24
    77da:	64 91       	lpm	r22, Z+
					//invoke patch command function
					((PatchCommand)pgm_read_word(&patchCommands[c1]))(track,c2);
    77dc:	82 2f       	mov	r24, r18
    77de:	90 e0       	ldi	r25, 0x00	; 0
    77e0:	88 0f       	add	r24, r24
    77e2:	99 1f       	adc	r25, r25
    77e4:	82 54       	subi	r24, 0x42	; 66
    77e6:	9f 4f       	sbci	r25, 0xFF	; 255
    77e8:	fc 01       	movw	r30, r24
    77ea:	25 91       	lpm	r18, Z+
    77ec:	34 91       	lpm	r19, Z+
    77ee:	c7 01       	movw	r24, r14
    77f0:	f9 01       	movw	r30, r18
    77f2:	09 95       	icall
				}

				//read next delta time
				track->patchNextDeltaTime=pgm_read_byte(track->patchCommandStreamPos++);
    77f4:	ed 89       	ldd	r30, Y+21	; 0x15
    77f6:	fe 89       	ldd	r31, Y+22	; 0x16
    77f8:	31 96       	adiw	r30, 0x01	; 1
    77fa:	fe 8b       	std	Y+22, r31	; 0x16
    77fc:	ed 8b       	std	Y+21, r30	; 0x15
    77fe:	31 97       	sbiw	r30, 0x01	; 1
    7800:	e4 91       	lpm	r30, Z+
    7802:	ea 8b       	std	Y+18, r30	; 0x12
				track->patchCurrDeltaTime=0;
    7804:	1b 8a       	std	Y+19, r1	; 0x13

		//process patch command stream
		if((track->flags & TRACK_FLAGS_PLAYING) && (track->patchCommandStreamPos!=NULL) && ((track->flags & TRACK_FLAGS_HOLD_ENV)==0)){

			//process all simultaneous events
			while(track->patchCurrDeltaTime==track->patchNextDeltaTime){
    7806:	9b 89       	ldd	r25, Y+19	; 0x13
    7808:	8a 89       	ldd	r24, Y+18	; 0x12
    780a:	98 17       	cp	r25, r24
    780c:	91 f2       	breq	.-92     	; 0x77b2 <ProcessMusic+0x2c2>
				//read next delta time
				track->patchNextDeltaTime=pgm_read_byte(track->patchCommandStreamPos++);
				track->patchCurrDeltaTime=0;
			}

			track->patchCurrDeltaTime++;
    780e:	8b 89       	ldd	r24, Y+19	; 0x13
    7810:	8f 5f       	subi	r24, 0xFF	; 255
    7812:	8b 8b       	std	Y+19, r24	; 0x13
		}

		if(track->flags & TRACK_FLAGS_PLAYING){
    7814:	88 81       	ld	r24, Y
    7816:	85 fd       	sbrc	r24, 5
    7818:	03 c0       	rjmp	.+6      	; 0x7820 <ProcessMusic+0x330>
    781a:	20 e0       	ldi	r18, 0x00	; 0
    781c:	30 e0       	ldi	r19, 0x00	; 0
    781e:	70 c0       	rjmp	.+224    	; 0x7900 <ProcessMusic+0x410>

			if(track->patchPlayingTime<0xff){
    7820:	8c 89       	ldd	r24, Y+20	; 0x14
    7822:	8f 3f       	cpi	r24, 0xFF	; 255
    7824:	11 f0       	breq	.+4      	; 0x782a <ProcessMusic+0x33a>
				track->patchPlayingTime++;
    7826:	8f 5f       	subi	r24, 0xFF	; 255
    7828:	8c 8b       	std	Y+20, r24	; 0x14
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
    782a:	88 81       	ld	r24, Y
    782c:	87 ff       	sbrs	r24, 7
    782e:	02 c0       	rjmp	.+4      	; 0x7834 <ProcessMusic+0x344>
    7830:	8f ef       	ldi	r24, 0xFF	; 255
    7832:	01 c0       	rjmp	.+2      	; 0x7836 <ProcessMusic+0x346>
				//if an FX, use full track volume.
				trackVol=0xff;
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
    7834:	8c 85       	ldd	r24, Y+12	; 0x0c
			}
			if(track->noteVol!=0 && track->envelopeVol!=0 && trackVol!=0 && masterVolume!=0){
    7836:	9d 85       	ldd	r25, Y+13	; 0x0d
    7838:	99 23       	and	r25, r25
    783a:	09 f4       	brne	.+2      	; 0x783e <ProcessMusic+0x34e>
    783c:	5b c0       	rjmp	.+182    	; 0x78f4 <ProcessMusic+0x404>
    783e:	2e 85       	ldd	r18, Y+14	; 0x0e
    7840:	22 23       	and	r18, r18
    7842:	09 f4       	brne	.+2      	; 0x7846 <ProcessMusic+0x356>
    7844:	57 c0       	rjmp	.+174    	; 0x78f4 <ProcessMusic+0x404>
    7846:	88 23       	and	r24, r24
    7848:	09 f4       	brne	.+2      	; 0x784c <ProcessMusic+0x35c>
    784a:	54 c0       	rjmp	.+168    	; 0x78f4 <ProcessMusic+0x404>
    784c:	40 91 43 0d 	lds	r20, 0x0D43
    7850:	44 23       	and	r20, r20
    7852:	09 f4       	brne	.+2      	; 0x7856 <ProcessMusic+0x366>
    7854:	4f c0       	rjmp	.+158    	; 0x78f4 <ProcessMusic+0x404>

				uVol=(track->noteVol*trackVol)+0x100;
    7856:	89 9f       	mul	r24, r25
    7858:	c0 01       	movw	r24, r0
    785a:	11 24       	eor	r1, r1
    785c:	80 50       	subi	r24, 0x00	; 0
    785e:	9f 4f       	sbci	r25, 0xFF	; 255
				uVol>>=8;
				
				uVol=(uVol*track->envelopeVol)+0x100;
    7860:	89 2f       	mov	r24, r25
    7862:	99 27       	eor	r25, r25
    7864:	30 e0       	ldi	r19, 0x00	; 0
    7866:	b9 01       	movw	r22, r18
    7868:	86 9f       	mul	r24, r22
    786a:	90 01       	movw	r18, r0
    786c:	87 9f       	mul	r24, r23
    786e:	30 0d       	add	r19, r0
    7870:	96 9f       	mul	r25, r22
    7872:	30 0d       	add	r19, r0
    7874:	11 24       	eor	r1, r1
    7876:	20 50       	subi	r18, 0x00	; 0
    7878:	3f 4f       	sbci	r19, 0xFF	; 255
				uVol>>=8;
				
				#if MUSIC_ENGINE == MIDI
					uVol=(uVol*track->expressionVol)+0x100;
    787a:	23 2f       	mov	r18, r19
    787c:	33 27       	eor	r19, r19
    787e:	8b 81       	ldd	r24, Y+3	; 0x03
    7880:	90 e0       	ldi	r25, 0x00	; 0
    7882:	fc 01       	movw	r30, r24
    7884:	2e 9f       	mul	r18, r30
    7886:	c0 01       	movw	r24, r0
    7888:	2f 9f       	mul	r18, r31
    788a:	90 0d       	add	r25, r0
    788c:	3e 9f       	mul	r19, r30
    788e:	90 0d       	add	r25, r0
    7890:	11 24       	eor	r1, r1
    7892:	80 50       	subi	r24, 0x00	; 0
    7894:	9f 4f       	sbci	r25, 0xFF	; 255
					uVol>>=8;
				#endif
				
				uVol=(uVol*masterVolume)+0x100;
    7896:	89 2f       	mov	r24, r25
    7898:	99 27       	eor	r25, r25
    789a:	24 2f       	mov	r18, r20
    789c:	30 e0       	ldi	r19, 0x00	; 0
    789e:	ac 01       	movw	r20, r24
    78a0:	42 9f       	mul	r20, r18
    78a2:	c0 01       	movw	r24, r0
    78a4:	43 9f       	mul	r20, r19
    78a6:	90 0d       	add	r25, r0
    78a8:	52 9f       	mul	r21, r18
    78aa:	90 0d       	add	r25, r0
    78ac:	11 24       	eor	r1, r1
    78ae:	80 50       	subi	r24, 0x00	; 0
    78b0:	9f 4f       	sbci	r25, 0xFF	; 255
				uVol>>=8;
    78b2:	29 2f       	mov	r18, r25
    78b4:	33 27       	eor	r19, r19

				if(track->tremoloLevel>0){					
    78b6:	8a 85       	ldd	r24, Y+10	; 0x0a
    78b8:	88 23       	and	r24, r24
    78ba:	f1 f0       	breq	.+60     	; 0x78f8 <ProcessMusic+0x408>
					tmp=pgm_read_byte(&(waves[track->tremoloPos]));
    78bc:	e9 85       	ldd	r30, Y+9	; 0x09
    78be:	f0 e0       	ldi	r31, 0x00	; 0
    78c0:	e0 50       	subi	r30, 0x00	; 0
    78c2:	f2 48       	sbci	r31, 0x82	; 130
    78c4:	e4 91       	lpm	r30, Z+
					tmp-=128; //convert to unsigned

					tVol=(track->tremoloLevel*tmp)+0x100;
    78c6:	e0 58       	subi	r30, 0x80	; 128
    78c8:	e8 9f       	mul	r30, r24
    78ca:	c0 01       	movw	r24, r0
    78cc:	11 24       	eor	r1, r1
    78ce:	80 50       	subi	r24, 0x00	; 0
    78d0:	9f 4f       	sbci	r25, 0xFF	; 255
					tVol>>=8;
					
					uVol=(uVol*(0xff-tVol))+0x100;
    78d2:	89 2f       	mov	r24, r25
    78d4:	99 27       	eor	r25, r25
    78d6:	b6 01       	movw	r22, r12
    78d8:	68 1b       	sub	r22, r24
    78da:	79 0b       	sbc	r23, r25
    78dc:	62 9f       	mul	r22, r18
    78de:	c0 01       	movw	r24, r0
    78e0:	63 9f       	mul	r22, r19
    78e2:	90 0d       	add	r25, r0
    78e4:	72 9f       	mul	r23, r18
    78e6:	90 0d       	add	r25, r0
    78e8:	11 24       	eor	r1, r1
    78ea:	80 50       	subi	r24, 0x00	; 0
    78ec:	9f 4f       	sbci	r25, 0xFF	; 255
					uVol>>=8;
    78ee:	29 2f       	mov	r18, r25
    78f0:	33 27       	eor	r19, r19
    78f2:	02 c0       	rjmp	.+4      	; 0x78f8 <ProcessMusic+0x408>
    78f4:	20 e0       	ldi	r18, 0x00	; 0
    78f6:	30 e0       	ldi	r19, 0x00	; 0
			
			}else{
				uVol=0;
			}	

			track->tremoloPos+=track->tremoloRate;	
    78f8:	89 85       	ldd	r24, Y+9	; 0x09
    78fa:	9b 85       	ldd	r25, Y+11	; 0x0b
    78fc:	89 0f       	add	r24, r25
    78fe:	89 87       	std	Y+9, r24	; 0x09

		}else{
			uVol=0;
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
    7900:	f8 01       	movw	r30, r16
    7902:	20 83       	st	Z, r18
    7904:	67 96       	adiw	r28, 0x17	; 23
    7906:	0a 5f       	subi	r16, 0xFA	; 250
    7908:	1f 4f       	sbci	r17, 0xFF	; 255


	//
	// Process patches command streams & final volume
	//
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    790a:	fd e0       	ldi	r31, 0x0D	; 13
    790c:	ce 33       	cpi	r28, 0x3E	; 62
    790e:	df 07       	cpc	r29, r31
    7910:	09 f0       	breq	.+2      	; 0x7914 <ProcessMusic+0x424>
    7912:	42 cf       	rjmp	.-380    	; 0x7798 <ProcessMusic+0x2a8>
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
	}
	
}
    7914:	cd b7       	in	r28, 0x3d	; 61
    7916:	de b7       	in	r29, 0x3e	; 62
    7918:	e8 e0       	ldi	r30, 0x08	; 8
    791a:	0c 94 4d 48 	jmp	0x909a	; 0x909a <__epilogue_restores__+0x14>

0000791e <ReadVarLen>:



unsigned int ReadVarLen(const char **songPos)
{
    791e:	dc 01       	movw	r26, r24
    unsigned int value;
    unsigned char c;


    if ( (value = pgm_read_byte((*songPos)++)) & 0x80 )
    7920:	ed 91       	ld	r30, X+
    7922:	fc 91       	ld	r31, X
    7924:	11 97       	sbiw	r26, 0x01	; 1
    7926:	af 01       	movw	r20, r30
    7928:	4f 5f       	subi	r20, 0xFF	; 255
    792a:	5f 4f       	sbci	r21, 0xFF	; 255
    792c:	11 96       	adiw	r26, 0x01	; 1
    792e:	5c 93       	st	X, r21
    7930:	4e 93       	st	-X, r20
    7932:	e4 91       	lpm	r30, Z+
    7934:	2e 2f       	mov	r18, r30
    7936:	30 e0       	ldi	r19, 0x00	; 0
    7938:	e7 ff       	sbrs	r30, 7
    793a:	13 c0       	rjmp	.+38     	; 0x7962 <ReadVarLen+0x44>
    {
       value &= 0x7F;
    793c:	2f 77       	andi	r18, 0x7F	; 127
    793e:	30 70       	andi	r19, 0x00	; 0
       do
       {
         value = (value << 7) + ((c = pgm_read_byte((*songPos)++)) & 0x7F);
    7940:	36 95       	lsr	r19
    7942:	32 2f       	mov	r19, r18
    7944:	22 27       	eor	r18, r18
    7946:	37 95       	ror	r19
    7948:	27 95       	ror	r18
    794a:	fa 01       	movw	r30, r20
    794c:	4f 5f       	subi	r20, 0xFF	; 255
    794e:	5f 4f       	sbci	r21, 0xFF	; 255
    7950:	e4 91       	lpm	r30, Z+
    7952:	8e 2f       	mov	r24, r30
    7954:	8f 77       	andi	r24, 0x7F	; 127
    7956:	28 0f       	add	r18, r24
    7958:	31 1d       	adc	r19, r1
       } while (c & 0x80);
    795a:	e7 fd       	sbrc	r30, 7
    795c:	f1 cf       	rjmp	.-30     	; 0x7940 <ReadVarLen+0x22>
    795e:	4d 93       	st	X+, r20
    7960:	5c 93       	st	X, r21
    }


    return value;
}
    7962:	c9 01       	movw	r24, r18
    7964:	08 95       	ret

00007966 <TriggerCommon>:




void TriggerCommon(Track* track,u8 patch,u8 volume,u8 note){
    7966:	ff 92       	push	r15
    7968:	0f 93       	push	r16
    796a:	1f 93       	push	r17
    796c:	cf 93       	push	r28
    796e:	df 93       	push	r29
    7970:	ec 01       	movw	r28, r24
    7972:	06 2f       	mov	r16, r22
    7974:	12 2f       	mov	r17, r18
		
	bool isFx = (track->flags&TRACK_FLAGS_PRIORITY);
    7976:	ff 24       	eor	r15, r15
    7978:	88 81       	ld	r24, Y
    797a:	87 ff       	sbrs	r24, 7
    797c:	02 c0       	rjmp	.+4      	; 0x7982 <TriggerCommon+0x1c>
    797e:	ff 24       	eor	r15, r15
    7980:	f3 94       	inc	r15

	track->envelopeStep=0; 
    7982:	1f 86       	std	Y+15, r1	; 0x0f
	track->envelopeVol=0xff; 
    7984:	9f ef       	ldi	r25, 0xFF	; 255
    7986:	9e 87       	std	Y+14, r25	; 0x0e
	track->noteVol=volume;
    7988:	4d 87       	std	Y+13, r20	; 0x0d
	track->patchPlayingTime=0;
    798a:	1c 8a       	std	Y+20, r1	; 0x14
	track->flags&=(~(TRACK_FLAGS_HOLD_ENV|TRACK_FLAGS_SLIDING));
    798c:	88 81       	ld	r24, Y
    798e:	87 7b       	andi	r24, 0xB7	; 183
    7990:	88 83       	st	Y, r24
	track->tremoloLevel=0;
    7992:	1a 86       	std	Y+10, r1	; 0x0a
	track->tremoloPos=0;
    7994:	19 86       	std	Y+9, r1	; 0x09
	track->note=note;
    7996:	19 83       	std	Y+1, r17	; 0x01
	track->loopCount=0;
    7998:	1c 82       	std	Y+4, r1	; 0x04

#if MUSIC_ENGINE == MIDI
	track->expressionVol=DEFAULT_EXPRESSION_VOL;
    799a:	9b 83       	std	Y+3, r25	; 0x03
#endif

	#if SOUND_MIXER == MIXER_TYPE_INLINE

		if(track->channel==3){
    799c:	8a 81       	ldd	r24, Y+2	; 0x02
    799e:	83 30       	cpi	r24, 0x03	; 3
    79a0:	69 f4       	brne	.+26     	; 0x79bc <TriggerCommon+0x56>
			//noise channel		
			if(!isFx) patch=note;			
    79a2:	ff 20       	and	r15, r15
    79a4:	09 f4       	brne	.+2      	; 0x79a8 <TriggerCommon+0x42>
    79a6:	01 2f       	mov	r16, r17
			mixer.channels.type.noise.barrel=0x0101;				
    79a8:	81 e0       	ldi	r24, 0x01	; 1
    79aa:	91 e0       	ldi	r25, 0x01	; 1
    79ac:	90 93 b6 0c 	sts	0x0CB6, r25
    79b0:	80 93 b5 0c 	sts	0x0CB5, r24
			mixer.channels.type.noise.params=1; //default (15bits,no divider)
    79b4:	81 e0       	ldi	r24, 0x01	; 1
    79b6:	80 93 b4 0c 	sts	0x0CB4, r24
    79ba:	33 c0       	rjmp	.+102    	; 0x7a22 <TriggerCommon+0xbc>

		#if SOUND_CHANNEL_5_ENABLE==1		

		}else if(track->channel==4){
    79bc:	84 30       	cpi	r24, 0x04	; 4
    79be:	51 f5       	brne	.+84     	; 0x7a14 <TriggerCommon+0xae>
				//PCM channel					
				mixer.channels.type.pcm.positionFrac=0;
    79c0:	10 92 bc 0c 	sts	0x0CBC, r1
				const char *pos=(const char*)pgm_read_word(&(patchPointers[patch].pcmData));
    79c4:	29 e0       	ldi	r18, 0x09	; 9
    79c6:	02 9f       	mul	r16, r18
    79c8:	90 01       	movw	r18, r0
    79ca:	11 24       	eor	r1, r1
    79cc:	80 91 40 0d 	lds	r24, 0x0D40
    79d0:	90 91 41 0d 	lds	r25, 0x0D41
    79d4:	82 0f       	add	r24, r18
    79d6:	93 1f       	adc	r25, r19
    79d8:	fc 01       	movw	r30, r24
    79da:	31 96       	adiw	r30, 0x01	; 1
    79dc:	25 91       	lpm	r18, Z+
    79de:	34 91       	lpm	r19, Z+
				mixer.channels.type.pcm.position=pos;				
    79e0:	30 93 be 0c 	sts	0x0CBE, r19
    79e4:	20 93 bd 0c 	sts	0x0CBD, r18
				mixer.pcmLoopLenght=pgm_read_word(&(patchPointers[patch].loopEnd))-pgm_read_word(&(patchPointers[patch].loopStart));
    79e8:	07 96       	adiw	r24, 0x07	; 7
    79ea:	fc 01       	movw	r30, r24
    79ec:	45 91       	lpm	r20, Z+
    79ee:	54 91       	lpm	r21, Z+
    79f0:	fc 01       	movw	r30, r24
    79f2:	32 97       	sbiw	r30, 0x02	; 2
    79f4:	85 91       	lpm	r24, Z+
    79f6:	94 91       	lpm	r25, Z+
    79f8:	ba 01       	movw	r22, r20
    79fa:	68 1b       	sub	r22, r24
    79fc:	79 0b       	sbc	r23, r25
    79fe:	70 93 c0 0c 	sts	0x0CC0, r23
    7a02:	60 93 bf 0c 	sts	0x0CBF, r22
				mixer.pcmLoopEnd=pos+pgm_read_word(&(patchPointers[patch].loopEnd));
    7a06:	24 0f       	add	r18, r20
    7a08:	35 1f       	adc	r19, r21
    7a0a:	30 93 c2 0c 	sts	0x0CC2, r19
    7a0e:	20 93 c1 0c 	sts	0x0CC1, r18
    7a12:	03 c0       	rjmp	.+6      	; 0x7a1a <TriggerCommon+0xb4>
				SetMixerNote(track->channel,note);
		#endif	

		}else{					
			//wave channels					
			SetMixerWave(track->channel,0);//default wave
    7a14:	60 e0       	ldi	r22, 0x00	; 0
    7a16:	0e 94 c3 3d 	call	0x7b86	; 0x7b86 <SetMixerWave>
			SetMixerNote(track->channel,note);
    7a1a:	8a 81       	ldd	r24, Y+2	; 0x02
    7a1c:	61 2f       	mov	r22, r17
    7a1e:	0e 94 ac 3d 	call	0x7b58	; 0x7b58 <SetMixerNote>

		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
    7a22:	ff 20       	and	r15, r15
    7a24:	11 f0       	breq	.+4      	; 0x7a2a <TriggerCommon+0xc4>
		track->fxPatchNo=patch;
    7a26:	09 8b       	std	Y+17, r16	; 0x11
    7a28:	01 c0       	rjmp	.+2      	; 0x7a2c <TriggerCommon+0xc6>
	}else{
		track->patchNo=patch;	
    7a2a:	08 8b       	std	Y+16, r16	; 0x10
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
    7a2c:	89 e0       	ldi	r24, 0x09	; 9
    7a2e:	08 9f       	mul	r16, r24
    7a30:	c0 01       	movw	r24, r0
    7a32:	11 24       	eor	r1, r1
    7a34:	e0 91 40 0d 	lds	r30, 0x0D40
    7a38:	f0 91 41 0d 	lds	r31, 0x0D41
    7a3c:	e8 0f       	add	r30, r24
    7a3e:	f9 1f       	adc	r31, r25
    7a40:	33 96       	adiw	r30, 0x03	; 3
    7a42:	25 91       	lpm	r18, Z+
    7a44:	34 91       	lpm	r19, Z+
	if(pos==NULL){
    7a46:	21 15       	cp	r18, r1
    7a48:	31 05       	cpc	r19, r1
    7a4a:	19 f4       	brne	.+6      	; 0x7a52 <TriggerCommon+0xec>
		track->patchCommandStreamPos=NULL;
    7a4c:	1e 8a       	std	Y+22, r1	; 0x16
    7a4e:	1d 8a       	std	Y+21, r1	; 0x15
    7a50:	08 c0       	rjmp	.+16     	; 0x7a62 <TriggerCommon+0xfc>
	}else{
		track->patchCurrDeltaTime=0;
    7a52:	1b 8a       	std	Y+19, r1	; 0x13
		track->patchNextDeltaTime=pgm_read_byte(pos++);
    7a54:	f9 01       	movw	r30, r18
    7a56:	84 91       	lpm	r24, Z+
    7a58:	8a 8b       	std	Y+18, r24	; 0x12
		track->patchCommandStreamPos=pos;
    7a5a:	2f 5f       	subi	r18, 0xFF	; 255
    7a5c:	3f 4f       	sbci	r19, 0xFF	; 255
    7a5e:	3e 8b       	std	Y+22, r19	; 0x16
    7a60:	2d 8b       	std	Y+21, r18	; 0x15
	}

}
    7a62:	cd b7       	in	r28, 0x3d	; 61
    7a64:	de b7       	in	r29, 0x3e	; 62
    7a66:	e5 e0       	ldi	r30, 0x05	; 5
    7a68:	0c 94 50 48 	jmp	0x90a0	; 0x90a0 <__epilogue_restores__+0x1a>

00007a6c <TriggerFx>:

/* Trigger a sound effect.
 * Method allocates the channel based on priority.
 * Retrig: if this fx if already playing on a track, reuse same track.
 */
void TriggerFx(unsigned char patch,unsigned char volume,bool retrig){
    7a6c:	0f 93       	push	r16
    7a6e:	1f 93       	push	r17
    7a70:	28 2f       	mov	r18, r24
    7a72:	36 2f       	mov	r19, r22
	unsigned char channel;
	
	unsigned char type=(unsigned char)pgm_read_byte(&(patchPointers[patch].type));
    7a74:	89 e0       	ldi	r24, 0x09	; 9
    7a76:	28 9f       	mul	r18, r24
    7a78:	c0 01       	movw	r24, r0
    7a7a:	11 24       	eor	r1, r1
    7a7c:	e0 91 40 0d 	lds	r30, 0x0D40
    7a80:	f0 91 41 0d 	lds	r31, 0x0D41
    7a84:	e8 0f       	add	r30, r24
    7a86:	f9 1f       	adc	r31, r25
    7a88:	84 91       	lpm	r24, Z+

	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || (type==2 && MIXER_CHAN4_TYPE == 1)){
    7a8a:	81 30       	cpi	r24, 0x01	; 1
    7a8c:	11 f4       	brne	.+4      	; 0x7a92 <TriggerFx+0x26>
    7a8e:	83 e0       	ldi	r24, 0x03	; 3
    7a90:	21 c0       	rjmp	.+66     	; 0x7ad4 <TriggerFx+0x68>
		//noise or PCM channel fx		
		channel=3;
	}else if(type==2){
    7a92:	82 30       	cpi	r24, 0x02	; 2
    7a94:	11 f4       	brne	.+4      	; 0x7a9a <TriggerFx+0x2e>
    7a96:	84 e0       	ldi	r24, 0x04	; 4
    7a98:	1d c0       	rjmp	.+58     	; 0x7ad4 <TriggerFx+0x68>
		channel=4;
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
    7a9a:	80 91 e2 0c 	lds	r24, 0x0CE2
    7a9e:	87 ff       	sbrs	r24, 7
    7aa0:	16 c0       	rjmp	.+44     	; 0x7ace <TriggerFx+0x62>
    7aa2:	80 91 f3 0c 	lds	r24, 0x0CF3
    7aa6:	82 17       	cp	r24, r18
    7aa8:	11 f4       	brne	.+4      	; 0x7aae <TriggerFx+0x42>
    7aaa:	44 23       	and	r20, r20
    7aac:	81 f4       	brne	.+32     	; 0x7ace <TriggerFx+0x62>
		channel=1;
	}else if( (tracks[2].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[2].fxPatchNo==patch && (tracks[2].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing				
    7aae:	80 91 f9 0c 	lds	r24, 0x0CF9
    7ab2:	87 ff       	sbrs	r24, 7
    7ab4:	0e c0       	rjmp	.+28     	; 0x7ad2 <TriggerFx+0x66>
    7ab6:	80 91 0a 0d 	lds	r24, 0x0D0A
    7aba:	82 17       	cp	r24, r18
    7abc:	11 f4       	brne	.+4      	; 0x7ac2 <TriggerFx+0x56>
    7abe:	44 23       	and	r20, r20
    7ac0:	41 f4       	brne	.+16     	; 0x7ad2 <TriggerFx+0x66>
		channel=2;
	}else{
		//both channels have fx playing, use the oldest one
		if(tracks[1].patchPlayingTime>tracks[2].patchPlayingTime){
    7ac2:	90 91 f6 0c 	lds	r25, 0x0CF6
    7ac6:	80 91 0d 0d 	lds	r24, 0x0D0D
    7aca:	89 17       	cp	r24, r25
    7acc:	10 f4       	brcc	.+4      	; 0x7ad2 <TriggerFx+0x66>
    7ace:	81 e0       	ldi	r24, 0x01	; 1
    7ad0:	01 c0       	rjmp	.+2      	; 0x7ad4 <TriggerFx+0x68>
    7ad2:	82 e0       	ldi	r24, 0x02	; 2
		}else{
			channel=2;
		}
	}				

	Track* track=&tracks[channel];
    7ad4:	07 e1       	ldi	r16, 0x17	; 23
    7ad6:	80 9f       	mul	r24, r16
    7ad8:	80 01       	movw	r16, r0
    7ada:	11 24       	eor	r1, r1
    7adc:	05 53       	subi	r16, 0x35	; 53
    7ade:	13 4f       	sbci	r17, 0xF3	; 243
	track->flags=TRACK_FLAGS_PRIORITY; //priority=1;
    7ae0:	80 e8       	ldi	r24, 0x80	; 128
    7ae2:	f8 01       	movw	r30, r16
    7ae4:	80 83       	st	Z, r24
	track->patchCommandStreamPos = NULL;
    7ae6:	16 8a       	std	Z+22, r1	; 0x16
    7ae8:	15 8a       	std	Z+21, r1	; 0x15
	TriggerCommon(track,patch,volume,80);
    7aea:	c8 01       	movw	r24, r16
    7aec:	62 2f       	mov	r22, r18
    7aee:	43 2f       	mov	r20, r19
    7af0:	20 e5       	ldi	r18, 0x50	; 80
    7af2:	0e 94 b3 3c 	call	0x7966	; 0x7966 <TriggerCommon>
	track->flags|=TRACK_FLAGS_PLAYING;
    7af6:	f8 01       	movw	r30, r16
    7af8:	80 81       	ld	r24, Z
    7afa:	80 62       	ori	r24, 0x20	; 32
    7afc:	80 83       	st	Z, r24
}
    7afe:	1f 91       	pop	r17
    7b00:	0f 91       	pop	r16
    7b02:	08 95       	ret

00007b04 <TriggerNote>:


void TriggerNote(unsigned char channel,unsigned char patch,unsigned char note,unsigned char volume){
    7b04:	cf 93       	push	r28
    7b06:	df 93       	push	r29
    7b08:	34 2f       	mov	r19, r20
	Track* track=&tracks[channel];
    7b0a:	97 e1       	ldi	r25, 0x17	; 23
    7b0c:	89 9f       	mul	r24, r25
    7b0e:	e0 01       	movw	r28, r0
    7b10:	11 24       	eor	r1, r1
    7b12:	c5 53       	subi	r28, 0x35	; 53
    7b14:	d3 4f       	sbci	r29, 0xF3	; 243

	//allow only other music notes 
	if((track->flags&TRACK_FLAGS_PLAYING)==0 || (track->flags&TRACK_FLAGS_PRIORITY)==0){
    7b16:	88 81       	ld	r24, Y
    7b18:	98 2f       	mov	r25, r24
    7b1a:	85 ff       	sbrs	r24, 5
    7b1c:	02 c0       	rjmp	.+4      	; 0x7b22 <TriggerNote+0x1e>
    7b1e:	87 fd       	sbrc	r24, 7
    7b20:	15 c0       	rjmp	.+42     	; 0x7b4c <TriggerNote+0x48>
			
		if(volume==0){ //note-off received
    7b22:	22 23       	and	r18, r18
    7b24:	41 f4       	brne	.+16     	; 0x7b36 <TriggerNote+0x32>

			
			//cut note if there's no envelope & no note hold
			if(track->envelopeStep==0 && !(track->flags&TRACK_FLAGS_HOLD_ENV)){
    7b26:	8f 85       	ldd	r24, Y+15	; 0x0f
    7b28:	88 23       	and	r24, r24
    7b2a:	11 f4       	brne	.+4      	; 0x7b30 <TriggerNote+0x2c>
    7b2c:	96 ff       	sbrs	r25, 6
				track->noteVol=0;
    7b2e:	1d 86       	std	Y+13, r1	; 0x0d
			}

			track->flags&=(~TRACK_FLAGS_HOLD_ENV);//patchEnvelopeHold=false;
    7b30:	88 81       	ld	r24, Y
    7b32:	8f 7b       	andi	r24, 0xBF	; 191
    7b34:	0a c0       	rjmp	.+20     	; 0x7b4a <TriggerNote+0x46>
		}else{
		
			track->flags=0;//&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    7b36:	18 82       	st	Y, r1
			track->patchCommandStreamPos = NULL;
    7b38:	1e 8a       	std	Y+22, r1	; 0x16
    7b3a:	1d 8a       	std	Y+21, r1	; 0x15
			TriggerCommon(track,patch,volume,note);
    7b3c:	ce 01       	movw	r24, r28
    7b3e:	42 2f       	mov	r20, r18
    7b40:	23 2f       	mov	r18, r19
    7b42:	0e 94 b3 3c 	call	0x7966	; 0x7966 <TriggerCommon>
			track->flags|=TRACK_FLAGS_PLAYING;
    7b46:	88 81       	ld	r24, Y
    7b48:	80 62       	ori	r24, 0x20	; 32
    7b4a:	88 83       	st	Y, r24
		}

	}
}
    7b4c:	df 91       	pop	r29
    7b4e:	cf 91       	pop	r28
    7b50:	08 95       	ret

00007b52 <SetMasterVolume>:



void SetMasterVolume(unsigned char vol){
	masterVolume=vol;
    7b52:	80 93 43 0d 	sts	0x0D43, r24
}
    7b56:	08 95       	ret

00007b58 <SetMixerNote>:
; r22: -MIDI note, 69=A5(440) for waves channels (0,1,2)
;      -Noise params for channel 3
;***********************
.section .text.SetMixerNote
SetMixerNote:
	clr r25
    7b58:	99 27       	eor	r25, r25
	clr r23
    7b5a:	77 27       	eor	r23, r23
	#if SOUND_MIXER == MIXER_TYPE_VSYNC
		cpi r24,3
		brlo set_note_waves
		ret		
	#else
		cpi r24,3
    7b5c:	83 30       	cpi	r24, 0x03	; 3
		brne set_note_waves		
    7b5e:	09 f4       	brne	.+2      	; 0x7b62 <set_note_waves>
		ret
    7b60:	08 95       	ret

00007b62 <set_note_waves>:
	#endif
#endif

set_note_waves:
	;get step for note
	ldi ZL,lo8(steptable)
    7b62:	e8 e0       	ldi	r30, 0x08	; 8
	ldi ZH,hi8(steptable)
    7b64:	fc e7       	ldi	r31, 0x7C	; 124
	lsl r22
    7b66:	66 0f       	add	r22, r22
	rol r23
    7b68:	77 1f       	adc	r23, r23
	add ZL,r22
    7b6a:	e6 0f       	add	r30, r22
	adc ZH,r23	
    7b6c:	f7 1f       	adc	r31, r23

	lpm r26,Z+
    7b6e:	a5 91       	lpm	r26, Z+
	lpm r27,Z
    7b70:	b4 91       	lpm	r27, Z+

	ldi ZL,lo8(mixerStruct)
    7b72:	e1 ea       	ldi	r30, 0xA1	; 161
	ldi ZH,hi8(mixerStruct)
    7b74:	fc e0       	ldi	r31, 0x0C	; 12
	ldi r18,CHANNEL_STRUCT_SIZE
    7b76:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24
    7b78:	28 9f       	mul	r18, r24
	add ZL,r0
    7b7a:	e0 0d       	add	r30, r0
	adc ZH,r1
    7b7c:	f1 1d       	adc	r31, r1
	
	std Z+step_lo,r26
    7b7e:	a1 83       	std	Z+1, r26	; 0x01
	std Z+step_hi,r27
    7b80:	b2 83       	std	Z+2, r27	; 0x02
	
	clr r1
    7b82:	11 24       	eor	r1, r1
	

	ret
    7b84:	08 95       	ret

00007b86 <SetMixerWave>:
;         Noise channel: 0xfe=7 bit lfsr, 0xff=15 bit lfsr
;                 
;***********************
.section .text.SetMixerWave
SetMixerWave:
	clr r25
    7b86:	99 27       	eor	r25, r25
	clr r23
    7b88:	77 27       	eor	r23, r23

	ldi ZL,lo8(mixerStruct)
    7b8a:	e1 ea       	ldi	r30, 0xA1	; 161
	ldi ZH,hi8(mixerStruct)
    7b8c:	fc e0       	ldi	r31, 0x0C	; 12
	ldi r18,CHANNEL_STRUCT_SIZE
    7b8e:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24	
    7b90:	28 9f       	mul	r18, r24
	add ZL,r0
    7b92:	e0 0d       	add	r30, r0
	adc ZH,r1
    7b94:	f1 1d       	adc	r31, r1

#if MIXER_CHAN4_TYPE == 0
	cpi r22,0xfe	;7bit lfsr
    7b96:	6e 3f       	cpi	r22, 0xFE	; 254
	brne smw1
    7b98:	31 f4       	brne	.+12     	; 0x7ba6 <smw1>
	lds r22,tr4_params
    7b9a:	60 91 b4 0c 	lds	r22, 0x0CB4
	andi r22,0xfe;
    7b9e:	6e 7f       	andi	r22, 0xFE	; 254
	sts tr4_params,r22
    7ba0:	60 93 b4 0c 	sts	0x0CB4, r22
	rjmp esmw	
    7ba4:	0b c0       	rjmp	.+22     	; 0x7bbc <esmw>

00007ba6 <smw1>:
smw1:
	cpi r22,0xff	;15bit lfsr
    7ba6:	6f 3f       	cpi	r22, 0xFF	; 255
	brne smw2
    7ba8:	31 f4       	brne	.+12     	; 0x7bb6 <smw2>
	lds r22,tr4_params
    7baa:	60 91 b4 0c 	lds	r22, 0x0CB4
	ori r22,0xfe;
    7bae:	6e 6f       	ori	r22, 0xFE	; 254
	sts tr4_params,r22	
    7bb0:	60 93 b4 0c 	sts	0x0CB4, r22
	rjmp esmw
    7bb4:	03 c0       	rjmp	.+6      	; 0x7bbc <esmw>

00007bb6 <smw2>:
smw2:
#endif

	ldi r23,hi8(waves)
    7bb6:	7e e7       	ldi	r23, 0x7E	; 126
	add r23,r22
    7bb8:	76 0f       	add	r23, r22
	std Z+samplepos_hi,r23 ;store path No
    7bba:	75 83       	std	Z+5, r23	; 0x05

00007bbc <esmw>:

esmw:
	clr r1	
    7bbc:	11 24       	eor	r1, r1
	ret
    7bbe:	08 95       	ret
	...

00007c00 <DisableSoundEngine>:
; no CPU cycles are consumed.
; C-callable
;*****************************
.section .text.DisableSoundEngine
DisableSoundEngine:	
	ldi r24,0
    7c00:	80 e0       	ldi	r24, 0x00	; 0
	sts sound_enabled,r24
    7c02:	80 93 a0 0c 	sts	0x0CA0, r24
	ret
    7c06:	08 95       	ret

00007c08 <steptable>:
    7c08:	22 00       	.word	0x0022	; ????
    7c0a:	24 00       	.word	0x0024	; ????
    7c0c:	26 00       	.word	0x0026	; ????
    7c0e:	28 00       	.word	0x0028	; ????
    7c10:	2b 00       	.word	0x002b	; ????
    7c12:	2d 00       	.word	0x002d	; ????
    7c14:	30 00       	.word	0x0030	; ????
    7c16:	33 00       	.word	0x0033	; ????
    7c18:	36 00       	.word	0x0036	; ????
    7c1a:	39 00       	.word	0x0039	; ????
    7c1c:	3d 00       	.word	0x003d	; ????
    7c1e:	40 00       	.word	0x0040	; ????
    7c20:	44 00       	.word	0x0044	; ????
    7c22:	48 00       	.word	0x0048	; ????
    7c24:	4c 00       	.word	0x004c	; ????
    7c26:	51 00       	.word	0x0051	; ????
    7c28:	56 00       	.word	0x0056	; ????
    7c2a:	5b 00       	.word	0x005b	; ????
    7c2c:	60 00       	.word	0x0060	; ????
    7c2e:	66 00       	.word	0x0066	; ????
    7c30:	6c 00       	.word	0x006c	; ????
    7c32:	73 00       	.word	0x0073	; ????
    7c34:	79 00       	.word	0x0079	; ????
    7c36:	81 00       	.word	0x0081	; ????
    7c38:	88 00       	.word	0x0088	; ????
    7c3a:	90 00       	.word	0x0090	; ????
    7c3c:	99 00       	.word	0x0099	; ????
    7c3e:	a2 00       	.word	0x00a2	; ????
    7c40:	ac 00       	.word	0x00ac	; ????
    7c42:	b6 00       	.word	0x00b6	; ????
    7c44:	c1 00       	.word	0x00c1	; ????
    7c46:	cc 00       	.word	0x00cc	; ????
    7c48:	d8 00       	.word	0x00d8	; ????
    7c4a:	e5 00       	.word	0x00e5	; ????
    7c4c:	f3 00       	.word	0x00f3	; ????
    7c4e:	01 01       	movw	r0, r2
    7c50:	10 01       	movw	r2, r0
    7c52:	21 01       	movw	r4, r2
    7c54:	32 01       	movw	r6, r4
    7c56:	44 01       	movw	r8, r8
    7c58:	57 01       	movw	r10, r14
    7c5a:	6c 01       	movw	r12, r24
    7c5c:	81 01       	movw	r16, r2
    7c5e:	98 01       	movw	r18, r16
    7c60:	b0 01       	movw	r22, r0
    7c62:	ca 01       	movw	r24, r20
    7c64:	e5 01       	movw	r28, r10
    7c66:	02 02       	muls	r16, r18
    7c68:	21 02       	muls	r18, r17
    7c6a:	41 02       	muls	r20, r17
    7c6c:	64 02       	muls	r22, r20
    7c6e:	88 02       	muls	r24, r24
    7c70:	ae 02       	muls	r26, r30
    7c72:	d7 02       	muls	r29, r23
    7c74:	03 03       	mulsu	r16, r19
    7c76:	30 03       	mulsu	r19, r16
    7c78:	61 03       	mulsu	r22, r17
    7c7a:	94 03       	fmuls	r17, r20
    7c7c:	cb 03       	fmulsu	r20, r19
    7c7e:	05 04       	cpc	r0, r5
    7c80:	42 04       	cpc	r4, r2
    7c82:	83 04       	cpc	r8, r3
    7c84:	c7 04       	cpc	r12, r7
    7c86:	10 05       	cpc	r17, r0
    7c88:	5d 05       	cpc	r21, r13
    7c8a:	af 05       	cpc	r26, r15
    7c8c:	05 06       	cpc	r0, r21
    7c8e:	61 06       	cpc	r6, r17
    7c90:	c2 06       	cpc	r12, r18
    7c92:	29 07       	cpc	r18, r25
    7c94:	96 07       	cpc	r25, r22
    7c96:	09 08       	sbc	r0, r9
    7c98:	83 08       	sbc	r8, r3
    7c9a:	05 09       	sbc	r16, r5
    7c9c:	8e 09       	sbc	r24, r14
    7c9e:	20 0a       	sbc	r2, r16
    7ca0:	ba 0a       	sbc	r11, r26
    7ca2:	5d 0b       	sbc	r21, r29
    7ca4:	0a 0c       	add	r0, r10
    7ca6:	c1 0c       	add	r12, r1
    7ca8:	84 0d       	add	r24, r4
    7caa:	51 0e       	add	r5, r17
    7cac:	2b 0f       	add	r18, r27
    7cae:	12 10       	cpse	r1, r2
    7cb0:	07 11       	cpse	r16, r7
    7cb2:	0a 12       	cpse	r0, r26
    7cb4:	1d 13       	cpse	r17, r29
    7cb6:	40 14       	cp	r4, r0
    7cb8:	74 15       	cp	r23, r4
    7cba:	ba 16       	cp	r11, r26
    7cbc:	14 18       	sub	r1, r4
    7cbe:	83 19       	sub	r24, r3
    7cc0:	07 1b       	sub	r16, r23
    7cc2:	a3 1c       	adc	r10, r3
    7cc4:	57 1e       	adc	r5, r23
    7cc6:	24 20       	and	r2, r4
    7cc8:	0e 22       	and	r0, r30
    7cca:	14 24       	eor	r1, r4
    7ccc:	39 26       	eor	r3, r25
    7cce:	7f 28       	or	r7, r15
    7cd0:	e8 2a       	or	r14, r24
    7cd2:	75 2d       	mov	r23, r5
    7cd4:	29 30       	cpi	r18, 0x09	; 9
    7cd6:	06 33       	cpi	r16, 0x36	; 54
    7cd8:	0f 36       	cpi	r16, 0x6F	; 111
    7cda:	45 39       	cpi	r20, 0x95	; 149
    7cdc:	ad 3c       	cpi	r26, 0xCD	; 205
    7cde:	49 40       	sbci	r20, 0x09	; 9
    7ce0:	1b 44       	sbci	r17, 0x4B	; 75
    7ce2:	28 48       	sbci	r18, 0x88	; 136
    7ce4:	73 4c       	sbci	r23, 0xC3	; 195
    7ce6:	fe 50       	subi	r31, 0x0E	; 14
    7ce8:	cf 55       	subi	r28, 0x5F	; 95
    7cea:	ea 5a       	subi	r30, 0xAA	; 170
    7cec:	51 60       	ori	r21, 0x01	; 1
    7cee:	0c 66       	ori	r16, 0x6C	; 108
    7cf0:	1d 6c       	ori	r17, 0xCD	; 205
    7cf2:	8b 72       	andi	r24, 0x2B	; 43
    7cf4:	5a 79       	andi	r21, 0x9A	; 154
    7cf6:	92 80       	ldd	r9, Z+2	; 0x02
    7cf8:	37 88       	ldd	r3, Z+23	; 0x17
    7cfa:	50 90 e5 98 	lds	r5, 0x98E5
    7cfe:	fd a1       	ldd	r31, Y+37	; 0x25
    7d00:	9f ab       	std	Y+55, r25	; 0x37
    7d02:	d3 b5       	in	r29, 0x23	; 35
    7d04:	a3 c0       	rjmp	.+326    	; 0x7e4c <waves+0x4c>
	...

00007e00 <waves>:
    7e00:	00 03       	mulsu	r16, r16
    7e02:	06 09       	sbc	r16, r6
    7e04:	0c 10       	cpse	r0, r12
    7e06:	13 16       	cp	r1, r19
    7e08:	19 1c       	adc	r1, r9
    7e0a:	1f 22       	and	r1, r31
    7e0c:	25 28       	or	r2, r5
    7e0e:	2b 2e       	mov	r2, r27
    7e10:	31 33       	cpi	r19, 0x31	; 49
    7e12:	36 39       	cpi	r19, 0x96	; 150
    7e14:	3c 3f       	cpi	r19, 0xFC	; 252
    7e16:	41 44       	sbci	r20, 0x41	; 65
    7e18:	47 49       	sbci	r20, 0x97	; 151
    7e1a:	4c 4e       	sbci	r20, 0xEC	; 236
    7e1c:	51 53       	subi	r21, 0x31	; 49
    7e1e:	55 58       	subi	r21, 0x85	; 133
    7e20:	5a 5c       	subi	r21, 0xCA	; 202
    7e22:	5e 60       	ori	r21, 0x0E	; 14
    7e24:	62 64       	ori	r22, 0x42	; 66
    7e26:	66 68       	ori	r22, 0x86	; 134
    7e28:	6a 6b       	ori	r22, 0xBA	; 186
    7e2a:	6d 6f       	ori	r22, 0xFD	; 253
    7e2c:	70 71       	andi	r23, 0x10	; 16
    7e2e:	73 74       	andi	r23, 0x43	; 67
    7e30:	75 76       	andi	r23, 0x65	; 101
    7e32:	78 79       	andi	r23, 0x98	; 152
    7e34:	7a 7a       	andi	r23, 0xAA	; 170
    7e36:	7b 7c       	andi	r23, 0xCB	; 203
    7e38:	7d 7d       	andi	r23, 0xDD	; 221
    7e3a:	7e 7e       	andi	r23, 0xEE	; 238
    7e3c:	7e 7f       	andi	r23, 0xFE	; 254
    7e3e:	7f 7f       	andi	r23, 0xFF	; 255
    7e40:	7f 7f       	andi	r23, 0xFF	; 255
    7e42:	7f 7f       	andi	r23, 0xFF	; 255
    7e44:	7e 7e       	andi	r23, 0xEE	; 238
    7e46:	7e 7d       	andi	r23, 0xDE	; 222
    7e48:	7d 7c       	andi	r23, 0xCD	; 205
    7e4a:	7b 7a       	andi	r23, 0xAB	; 171
    7e4c:	7a 79       	andi	r23, 0x9A	; 154
    7e4e:	78 76       	andi	r23, 0x68	; 104
    7e50:	75 74       	andi	r23, 0x45	; 69
    7e52:	73 71       	andi	r23, 0x13	; 19
    7e54:	70 6f       	ori	r23, 0xF0	; 240
    7e56:	6d 6b       	ori	r22, 0xBD	; 189
    7e58:	6a 68       	ori	r22, 0x8A	; 138
    7e5a:	66 64       	ori	r22, 0x46	; 70
    7e5c:	62 60       	ori	r22, 0x02	; 2
    7e5e:	5e 5c       	subi	r21, 0xCE	; 206
    7e60:	5a 58       	subi	r21, 0x8A	; 138
    7e62:	55 53       	subi	r21, 0x35	; 53
    7e64:	51 4e       	sbci	r21, 0xE1	; 225
    7e66:	4c 49       	sbci	r20, 0x9C	; 156
    7e68:	47 44       	sbci	r20, 0x47	; 71
    7e6a:	41 3f       	cpi	r20, 0xF1	; 241
    7e6c:	3c 39       	cpi	r19, 0x9C	; 156
    7e6e:	36 33       	cpi	r19, 0x36	; 54
    7e70:	31 2e       	mov	r3, r17
    7e72:	2b 28       	or	r2, r11
    7e74:	25 22       	and	r2, r21
    7e76:	1f 1c       	adc	r1, r15
    7e78:	19 16       	cp	r1, r25
    7e7a:	13 10       	cpse	r1, r3
    7e7c:	0c 09       	sbc	r16, r12
    7e7e:	06 03       	mulsu	r16, r22
    7e80:	00 fd       	sbrc	r16, 0
    7e82:	fa f7       	brpl	.-2      	; 0x7e82 <waves+0x82>
    7e84:	f4 f0       	brlt	.+60     	; 0x7ec2 <waves+0xc2>
    7e86:	ed ea       	ldi	r30, 0xAD	; 173
    7e88:	e7 e4       	ldi	r30, 0x47	; 71
    7e8a:	e1 de       	rcall	.-574    	; 0x7c4e <steptable+0x46>
    7e8c:	db d8       	rcall	.-3658   	; 0x7044 <ch4_end+0x78>
    7e8e:	d5 d2       	rcall	.+1450   	; 0x843a <ProcessSprites+0xe>
    7e90:	cf cd       	rjmp	.-1122   	; 0x7a30 <TriggerCommon+0xca>
    7e92:	ca c7       	rjmp	.+3988   	; 0x8e28 <DrawPreview+0x28>
    7e94:	c4 c1       	rjmp	.+904    	; 0x821e <waves+0x41e>
    7e96:	bf bc       	out	0x2f, r11	; 47
    7e98:	b9 b7       	in	r27, 0x39	; 57
    7e9a:	b4 b2       	in	r11, 0x14	; 20
    7e9c:	af ad       	ldd	r26, Y+63	; 0x3f
    7e9e:	ab a8       	ldd	r10, Y+51	; 0x33
    7ea0:	a6 a4       	ldd	r10, Z+46	; 0x2e
    7ea2:	a2 a0       	ldd	r10, Z+34	; 0x22
    7ea4:	9e 9c       	mul	r9, r14
    7ea6:	9a 98       	cbi	0x13, 2	; 19
    7ea8:	96 95       	lsr	r25
    7eaa:	93 91       	.word	0x9193	; ????
    7eac:	90 8f       	std	Z+24, r25	; 0x18
    7eae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    7eb0:	8b 8a       	std	Y+19, r8	; 0x13
    7eb2:	88 87       	std	Y+8, r24	; 0x08
    7eb4:	86 86       	std	Z+14, r8	; 0x0e
    7eb6:	85 84       	ldd	r8, Z+13	; 0x0d
    7eb8:	83 83       	std	Z+3, r24	; 0x03
    7eba:	82 82       	std	Z+2, r8	; 0x02
    7ebc:	82 81       	ldd	r24, Z+2	; 0x02
    7ebe:	81 81       	ldd	r24, Z+1	; 0x01
    7ec0:	81 81       	ldd	r24, Z+1	; 0x01
    7ec2:	81 81       	ldd	r24, Z+1	; 0x01
    7ec4:	82 82       	std	Z+2, r8	; 0x02
    7ec6:	82 83       	std	Z+2, r24	; 0x02
    7ec8:	83 84       	ldd	r8, Z+11	; 0x0b
    7eca:	85 86       	std	Z+13, r8	; 0x0d
    7ecc:	86 87       	std	Z+14, r24	; 0x0e
    7ece:	88 8a       	std	Y+16, r8	; 0x10
    7ed0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    7ed2:	8d 8f       	std	Y+29, r24	; 0x1d
    7ed4:	90 91 93 95 	lds	r25, 0x9593
    7ed8:	96 98       	cbi	0x12, 6	; 18
    7eda:	9a 9c       	mul	r9, r10
    7edc:	9e a0       	ldd	r9, Y+38	; 0x26
    7ede:	a2 a4       	ldd	r10, Z+42	; 0x2a
    7ee0:	a6 a8       	ldd	r10, Z+54	; 0x36
    7ee2:	ab ad       	ldd	r26, Y+59	; 0x3b
    7ee4:	af b2       	in	r10, 0x1f	; 31
    7ee6:	b4 b7       	in	r27, 0x34	; 52
    7ee8:	b9 bc       	out	0x29, r11	; 41
    7eea:	bf c1       	rjmp	.+894    	; 0x826a <waves+0x46a>
    7eec:	c4 c7       	rjmp	.+3976   	; 0x8e76 <DrawScreen+0xe>
    7eee:	ca cd       	rjmp	.-1132   	; 0x7a84 <TriggerFx+0x18>
    7ef0:	cf d2       	rcall	.+1438   	; 0x8490 <ProcessSprites+0x64>
    7ef2:	d5 d8       	rcall	.-3670   	; 0x709e <GetVsyncFlag+0x2>
    7ef4:	db de       	rcall	.-586    	; 0x7cac <steptable+0xa4>
    7ef6:	e1 e4       	ldi	r30, 0x41	; 65
    7ef8:	e7 ea       	ldi	r30, 0xA7	; 167
    7efa:	ed f0       	brhs	.+58     	; 0x7f36 <waves+0x136>
    7efc:	f4 f7       	brge	.-4      	; 0x7efa <waves+0xfa>
    7efe:	fa fd       	.word	0xfdfa	; ????
    7f00:	80 81       	ld	r24, Z
    7f02:	82 83       	std	Z+2, r24	; 0x02
    7f04:	84 85       	ldd	r24, Z+12	; 0x0c
    7f06:	86 87       	std	Z+14, r24	; 0x0e
    7f08:	88 89       	ldd	r24, Y+16	; 0x10
    7f0a:	8a 8b       	std	Y+18, r24	; 0x12
    7f0c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    7f0e:	8e 8f       	std	Y+30, r24	; 0x1e
    7f10:	90 91 92 93 	lds	r25, 0x9392
    7f14:	94 95       	.word	0x9594	; ????
    7f16:	96 97       	sbiw	r26, 0x26	; 38
    7f18:	98 99       	sbic	0x13, 0	; 19
    7f1a:	9a 9b       	sbis	0x13, 2	; 19
    7f1c:	9c 9d       	mul	r25, r12
    7f1e:	9e 9f       	mul	r25, r30
    7f20:	a0 a1       	ldd	r26, Z+32	; 0x20
    7f22:	a2 a3       	std	Z+34, r26	; 0x22
    7f24:	a4 a5       	ldd	r26, Z+44	; 0x2c
    7f26:	a6 a7       	std	Z+46, r26	; 0x2e
    7f28:	a8 a9       	ldd	r26, Y+48	; 0x30
    7f2a:	aa ab       	std	Y+50, r26	; 0x32
    7f2c:	ac ad       	ldd	r26, Y+60	; 0x3c
    7f2e:	ae af       	std	Y+62, r26	; 0x3e
    7f30:	b0 b1       	in	r27, 0x00	; 0
    7f32:	b2 b3       	in	r27, 0x12	; 18
    7f34:	b4 b5       	in	r27, 0x24	; 36
    7f36:	b6 b7       	in	r27, 0x36	; 54
    7f38:	b8 b9       	out	0x08, r27	; 8
    7f3a:	ba bb       	out	0x1a, r27	; 26
    7f3c:	bc bd       	out	0x2c, r27	; 44
    7f3e:	be bf       	out	0x3e, r27	; 62
    7f40:	c0 c1       	rjmp	.+896    	; 0x82c2 <waves+0x4c2>
    7f42:	c2 c3       	rjmp	.+1924   	; 0x86c8 <UzenetMenu+0xa>
    7f44:	c4 c5       	rjmp	.+2952   	; 0x8ace <DrawFrame+0x106>
    7f46:	c6 c7       	rjmp	.+3980   	; 0x8ed4 <DrawScreen+0x6c>
    7f48:	c8 c9       	rjmp	.-3184   	; 0x72da <isEepromFormatted+0x20>
    7f4a:	ca cb       	rjmp	.-2156   	; 0x76e0 <ProcessMusic+0x1f0>
    7f4c:	cc cd       	rjmp	.-1128   	; 0x7ae6 <TriggerFx+0x7a>
    7f4e:	ce cf       	rjmp	.-100    	; 0x7eec <waves+0xec>
    7f50:	d0 d1       	rcall	.+928    	; 0x82f2 <waves+0x4f2>
    7f52:	d2 d3       	rcall	.+1956   	; 0x86f8 <UzenetMenu+0x3a>
    7f54:	d4 d5       	rcall	.+2984   	; 0x8afe <DrawFrame+0x136>
    7f56:	d6 d7       	rcall	.+4012   	; 0x8f04 <DrawScreen+0x9c>
    7f58:	d8 d9       	rcall	.-3152   	; 0x730a <GetPrngNumber+0x24>
    7f5a:	da db       	rcall	.-2124   	; 0x7710 <ProcessMusic+0x220>
    7f5c:	dc dd       	rcall	.-1096   	; 0x7b16 <TriggerNote+0x12>
    7f5e:	de df       	rcall	.-68     	; 0x7f1c <waves+0x11c>
    7f60:	e0 e1       	ldi	r30, 0x10	; 16
    7f62:	e2 e3       	ldi	r30, 0x32	; 50
    7f64:	e4 e5       	ldi	r30, 0x54	; 84
    7f66:	e6 e7       	ldi	r30, 0x76	; 118
    7f68:	e8 e9       	ldi	r30, 0x98	; 152
    7f6a:	ea eb       	ldi	r30, 0xBA	; 186
    7f6c:	ec ed       	ldi	r30, 0xDC	; 220
    7f6e:	ee ef       	ldi	r30, 0xFE	; 254
    7f70:	f0 f1       	brcs	.+124    	; 0x7fee <waves+0x1ee>
    7f72:	f2 f3       	brmi	.-4      	; 0x7f70 <waves+0x170>
    7f74:	f4 f5       	brge	.+124    	; 0x7ff2 <waves+0x1f2>
    7f76:	f6 f7       	brtc	.-4      	; 0x7f74 <waves+0x174>
    7f78:	f8 f9       	.word	0xf9f8	; ????
    7f7a:	fa fb       	.word	0xfbfa	; ????
    7f7c:	fc fd       	.word	0xfdfc	; ????
    7f7e:	fe ff       	.word	0xfffe	; ????
    7f80:	00 01       	movw	r0, r0
    7f82:	02 03       	mulsu	r16, r18
    7f84:	04 05       	cpc	r16, r4
    7f86:	06 07       	cpc	r16, r22
    7f88:	08 09       	sbc	r16, r8
    7f8a:	0a 0b       	sbc	r16, r26
    7f8c:	0c 0d       	add	r16, r12
    7f8e:	0e 0f       	add	r16, r30
    7f90:	10 11       	cpse	r17, r0
    7f92:	12 13       	cpse	r17, r18
    7f94:	14 15       	cp	r17, r4
    7f96:	16 17       	cp	r17, r22
    7f98:	18 19       	sub	r17, r8
    7f9a:	1a 1b       	sub	r17, r26
    7f9c:	1c 1d       	adc	r17, r12
    7f9e:	1e 1f       	adc	r17, r30
    7fa0:	20 21       	and	r18, r0
    7fa2:	22 23       	and	r18, r18
    7fa4:	24 25       	eor	r18, r4
    7fa6:	26 27       	eor	r18, r22
    7fa8:	28 29       	or	r18, r8
    7faa:	2a 2b       	or	r18, r26
    7fac:	2c 2d       	mov	r18, r12
    7fae:	2e 2f       	mov	r18, r30
    7fb0:	30 31       	cpi	r19, 0x10	; 16
    7fb2:	32 33       	cpi	r19, 0x32	; 50
    7fb4:	34 35       	cpi	r19, 0x54	; 84
    7fb6:	36 37       	cpi	r19, 0x76	; 118
    7fb8:	38 39       	cpi	r19, 0x98	; 152
    7fba:	3a 3b       	cpi	r19, 0xBA	; 186
    7fbc:	3c 3d       	cpi	r19, 0xDC	; 220
    7fbe:	3e 3f       	cpi	r19, 0xFE	; 254
    7fc0:	40 41       	sbci	r20, 0x10	; 16
    7fc2:	42 43       	sbci	r20, 0x32	; 50
    7fc4:	44 45       	sbci	r20, 0x54	; 84
    7fc6:	46 47       	sbci	r20, 0x76	; 118
    7fc8:	48 49       	sbci	r20, 0x98	; 152
    7fca:	4a 4b       	sbci	r20, 0xBA	; 186
    7fcc:	4c 4d       	sbci	r20, 0xDC	; 220
    7fce:	4e 4f       	sbci	r20, 0xFE	; 254
    7fd0:	50 51       	subi	r21, 0x10	; 16
    7fd2:	52 53       	subi	r21, 0x32	; 50
    7fd4:	54 55       	subi	r21, 0x54	; 84
    7fd6:	56 57       	subi	r21, 0x76	; 118
    7fd8:	58 59       	subi	r21, 0x98	; 152
    7fda:	5a 5b       	subi	r21, 0xBA	; 186
    7fdc:	5c 5d       	subi	r21, 0xDC	; 220
    7fde:	5e 5f       	subi	r21, 0xFE	; 254
    7fe0:	60 61       	ori	r22, 0x10	; 16
    7fe2:	62 63       	ori	r22, 0x32	; 50
    7fe4:	64 65       	ori	r22, 0x54	; 84
    7fe6:	66 67       	ori	r22, 0x76	; 118
    7fe8:	68 69       	ori	r22, 0x98	; 152
    7fea:	6a 6b       	ori	r22, 0xBA	; 186
    7fec:	6c 6d       	ori	r22, 0xDC	; 220
    7fee:	6e 6f       	ori	r22, 0xFE	; 254
    7ff0:	70 71       	andi	r23, 0x10	; 16
    7ff2:	72 73       	andi	r23, 0x32	; 50
    7ff4:	74 75       	andi	r23, 0x54	; 84
    7ff6:	76 77       	andi	r23, 0x76	; 118
    7ff8:	78 79       	andi	r23, 0x98	; 152
    7ffa:	7a 7b       	andi	r23, 0xBA	; 186
    7ffc:	7c 7d       	andi	r23, 0xDC	; 220
    7ffe:	7e 7f       	andi	r23, 0xFE	; 254
    8000:	00 02       	muls	r16, r16
    8002:	04 06       	cpc	r0, r20
    8004:	08 0a       	sbc	r0, r24
    8006:	0c 0e       	add	r0, r28
    8008:	10 12       	cpse	r1, r16
    800a:	14 16       	cp	r1, r20
    800c:	18 1a       	sub	r1, r24
    800e:	1c 1e       	adc	r1, r28
    8010:	20 22       	and	r2, r16
    8012:	24 26       	eor	r2, r20
    8014:	28 2a       	or	r2, r24
    8016:	2c 2e       	mov	r2, r28
    8018:	30 32       	cpi	r19, 0x20	; 32
    801a:	34 36       	cpi	r19, 0x64	; 100
    801c:	38 3a       	cpi	r19, 0xA8	; 168
    801e:	3c 3e       	cpi	r19, 0xEC	; 236
    8020:	40 42       	sbci	r20, 0x20	; 32
    8022:	44 46       	sbci	r20, 0x64	; 100
    8024:	48 4a       	sbci	r20, 0xA8	; 168
    8026:	4c 4e       	sbci	r20, 0xEC	; 236
    8028:	50 52       	subi	r21, 0x20	; 32
    802a:	54 56       	subi	r21, 0x64	; 100
    802c:	58 5a       	subi	r21, 0xA8	; 168
    802e:	5c 5e       	subi	r21, 0xEC	; 236
    8030:	60 62       	ori	r22, 0x20	; 32
    8032:	64 66       	ori	r22, 0x64	; 100
    8034:	68 6a       	ori	r22, 0xA8	; 168
    8036:	6c 6e       	ori	r22, 0xEC	; 236
    8038:	70 72       	andi	r23, 0x20	; 32
    803a:	74 76       	andi	r23, 0x64	; 100
    803c:	78 7a       	andi	r23, 0xA8	; 168
    803e:	7c 7e       	andi	r23, 0xEC	; 236
    8040:	7f 7d       	andi	r23, 0xDF	; 223
    8042:	7b 79       	andi	r23, 0x9B	; 155
    8044:	77 75       	andi	r23, 0x57	; 87
    8046:	73 71       	andi	r23, 0x13	; 19
    8048:	6f 6d       	ori	r22, 0xDF	; 223
    804a:	6b 69       	ori	r22, 0x9B	; 155
    804c:	67 65       	ori	r22, 0x57	; 87
    804e:	63 61       	ori	r22, 0x13	; 19
    8050:	5f 5d       	subi	r21, 0xDF	; 223
    8052:	5b 59       	subi	r21, 0x9B	; 155
    8054:	57 55       	subi	r21, 0x57	; 87
    8056:	53 51       	subi	r21, 0x13	; 19
    8058:	4f 4d       	sbci	r20, 0xDF	; 223
    805a:	4b 49       	sbci	r20, 0x9B	; 155
    805c:	47 45       	sbci	r20, 0x57	; 87
    805e:	43 41       	sbci	r20, 0x13	; 19
    8060:	3f 3d       	cpi	r19, 0xDF	; 223
    8062:	3b 39       	cpi	r19, 0x9B	; 155
    8064:	37 35       	cpi	r19, 0x57	; 87
    8066:	33 31       	cpi	r19, 0x13	; 19
    8068:	2f 2d       	mov	r18, r15
    806a:	2b 29       	or	r18, r11
    806c:	27 25       	eor	r18, r7
    806e:	23 21       	and	r18, r3
    8070:	1f 1d       	adc	r17, r15
    8072:	1b 19       	sub	r17, r11
    8074:	17 15       	cp	r17, r7
    8076:	13 11       	cpse	r17, r3
    8078:	0f 0d       	add	r16, r15
    807a:	0b 09       	sbc	r16, r11
    807c:	07 05       	cpc	r16, r7
    807e:	03 01       	movw	r0, r6
    8080:	ff fd       	.word	0xfdff	; ????
    8082:	fb f9       	.word	0xf9fb	; ????
    8084:	f7 f5       	brid	.+124    	; 0x8102 <waves+0x302>
    8086:	f3 f1       	brvs	.+124    	; 0x8104 <waves+0x304>
    8088:	ef ed       	ldi	r30, 0xDF	; 223
    808a:	eb e9       	ldi	r30, 0x9B	; 155
    808c:	e7 e5       	ldi	r30, 0x57	; 87
    808e:	e3 e1       	ldi	r30, 0x13	; 19
    8090:	df dd       	rcall	.-1090   	; 0x7c50 <steptable+0x48>
    8092:	db d9       	rcall	.-3146   	; 0x744a <PatchCommand11+0x78>
    8094:	d7 d5       	rcall	.+2990   	; 0x8c44 <UpdateFields+0xb0>
    8096:	d3 d1       	rcall	.+934    	; 0x843e <ProcessSprites+0x12>
    8098:	cf cd       	rjmp	.-1122   	; 0x7c38 <steptable+0x30>
    809a:	cb c9       	rjmp	.-3178   	; 0x7432 <PatchCommand11+0x60>
    809c:	c7 c5       	rjmp	.+2958   	; 0x8c2c <UpdateFields+0x98>
    809e:	c3 c1       	rjmp	.+902    	; 0x8426 <RestoreBackground+0x26>
    80a0:	bf bd       	out	0x2f, r27	; 47
    80a2:	bb b9       	out	0x0b, r27	; 11
    80a4:	b7 b5       	in	r27, 0x27	; 39
    80a6:	b3 b1       	in	r27, 0x03	; 3
    80a8:	af ad       	ldd	r26, Y+63	; 0x3f
    80aa:	ab a9       	ldd	r26, Y+51	; 0x33
    80ac:	a7 a5       	ldd	r26, Z+47	; 0x2f
    80ae:	a3 a1       	ldd	r26, Z+35	; 0x23
    80b0:	9f 9d       	mul	r25, r15
    80b2:	9b 99       	sbic	0x13, 3	; 19
    80b4:	97 95       	ror	r25
    80b6:	93 91       	.word	0x9193	; ????
    80b8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    80ba:	8b 89       	ldd	r24, Y+19	; 0x13
    80bc:	87 85       	ldd	r24, Z+15	; 0x0f
    80be:	83 81       	ldd	r24, Z+3	; 0x03
    80c0:	80 82       	st	Z, r8
    80c2:	84 86       	std	Z+12, r8	; 0x0c
    80c4:	88 8a       	std	Y+16, r8	; 0x10
    80c6:	8c 8e       	std	Y+28, r8	; 0x1c
    80c8:	90 92 94 96 	sts	0x9694, r9
    80cc:	98 9a       	sbi	0x13, 0	; 19
    80ce:	9c 9e       	mul	r9, r28
    80d0:	a0 a2       	std	Z+32, r10	; 0x20
    80d2:	a4 a6       	std	Z+44, r10	; 0x2c
    80d4:	a8 aa       	std	Y+48, r10	; 0x30
    80d6:	ac ae       	std	Y+60, r10	; 0x3c
    80d8:	b0 b2       	in	r11, 0x10	; 16
    80da:	b4 b6       	in	r11, 0x34	; 52
    80dc:	b8 ba       	out	0x18, r11	; 24
    80de:	bc be       	out	0x3c, r11	; 60
    80e0:	c0 c2       	rjmp	.+1408   	; 0x8662 <FadeOut+0x1e>
    80e2:	c4 c6       	rjmp	.+3464   	; 0x8e6c <DrawScreen+0x4>
    80e4:	c8 ca       	rjmp	.-2672   	; 0x7676 <ProcessMusic+0x186>
    80e6:	cc ce       	rjmp	.-616    	; 0x7e80 <waves+0x80>
    80e8:	d0 d2       	rcall	.+1440   	; 0x868a <ProcessFading+0x14>
    80ea:	d4 d6       	rcall	.+3496   	; 0x8e94 <DrawScreen+0x2c>
    80ec:	d8 da       	rcall	.-2640   	; 0x769e <ProcessMusic+0x1ae>
    80ee:	dc de       	rcall	.-584    	; 0x7ea8 <waves+0xa8>
    80f0:	e0 e2       	ldi	r30, 0x20	; 32
    80f2:	e4 e6       	ldi	r30, 0x64	; 100
    80f4:	e8 ea       	ldi	r30, 0xA8	; 168
    80f6:	ec ee       	ldi	r30, 0xEC	; 236
    80f8:	f0 f2       	brcs	.-68     	; 0x80b6 <waves+0x2b6>
    80fa:	f4 f6       	brge	.-68     	; 0x80b8 <waves+0x2b8>
    80fc:	f8 fa       	.word	0xfaf8	; ????
    80fe:	fc fe       	.word	0xfefc	; ????
    8100:	7f 7f       	andi	r23, 0xFF	; 255
    8102:	7f 7f       	andi	r23, 0xFF	; 255
    8104:	7f 7f       	andi	r23, 0xFF	; 255
    8106:	7f 7f       	andi	r23, 0xFF	; 255
    8108:	7f 7f       	andi	r23, 0xFF	; 255
    810a:	7f 7f       	andi	r23, 0xFF	; 255
    810c:	7f 7f       	andi	r23, 0xFF	; 255
    810e:	7f 7f       	andi	r23, 0xFF	; 255
    8110:	7f 7f       	andi	r23, 0xFF	; 255
    8112:	7f 7f       	andi	r23, 0xFF	; 255
    8114:	7f 7f       	andi	r23, 0xFF	; 255
    8116:	7f 7f       	andi	r23, 0xFF	; 255
    8118:	7f 7f       	andi	r23, 0xFF	; 255
    811a:	7f 7f       	andi	r23, 0xFF	; 255
    811c:	7f 7f       	andi	r23, 0xFF	; 255
    811e:	7f 7f       	andi	r23, 0xFF	; 255
    8120:	7f 7f       	andi	r23, 0xFF	; 255
    8122:	7f 7f       	andi	r23, 0xFF	; 255
    8124:	7f 7f       	andi	r23, 0xFF	; 255
    8126:	7f 7f       	andi	r23, 0xFF	; 255
    8128:	7f 7f       	andi	r23, 0xFF	; 255
    812a:	7f 7f       	andi	r23, 0xFF	; 255
    812c:	7f 7f       	andi	r23, 0xFF	; 255
    812e:	7f 7f       	andi	r23, 0xFF	; 255
    8130:	7f 7f       	andi	r23, 0xFF	; 255
    8132:	7f 7f       	andi	r23, 0xFF	; 255
    8134:	7f 7f       	andi	r23, 0xFF	; 255
    8136:	7f 7f       	andi	r23, 0xFF	; 255
    8138:	7f 7f       	andi	r23, 0xFF	; 255
    813a:	7f 7f       	andi	r23, 0xFF	; 255
    813c:	7f 7f       	andi	r23, 0xFF	; 255
    813e:	7f 7f       	andi	r23, 0xFF	; 255
    8140:	80 80       	ld	r8, Z
    8142:	80 80       	ld	r8, Z
    8144:	80 80       	ld	r8, Z
    8146:	80 80       	ld	r8, Z
    8148:	80 80       	ld	r8, Z
    814a:	80 80       	ld	r8, Z
    814c:	80 80       	ld	r8, Z
    814e:	80 80       	ld	r8, Z
    8150:	80 80       	ld	r8, Z
    8152:	80 80       	ld	r8, Z
    8154:	80 80       	ld	r8, Z
    8156:	80 80       	ld	r8, Z
    8158:	80 80       	ld	r8, Z
    815a:	80 80       	ld	r8, Z
    815c:	80 80       	ld	r8, Z
    815e:	80 80       	ld	r8, Z
    8160:	80 80       	ld	r8, Z
    8162:	80 80       	ld	r8, Z
    8164:	80 80       	ld	r8, Z
    8166:	80 80       	ld	r8, Z
    8168:	80 80       	ld	r8, Z
    816a:	80 80       	ld	r8, Z
    816c:	80 80       	ld	r8, Z
    816e:	80 80       	ld	r8, Z
    8170:	80 80       	ld	r8, Z
    8172:	80 80       	ld	r8, Z
    8174:	80 80       	ld	r8, Z
    8176:	80 80       	ld	r8, Z
    8178:	80 80       	ld	r8, Z
    817a:	80 80       	ld	r8, Z
    817c:	80 80       	ld	r8, Z
    817e:	80 80       	ld	r8, Z
    8180:	80 80       	ld	r8, Z
    8182:	80 80       	ld	r8, Z
    8184:	80 80       	ld	r8, Z
    8186:	80 80       	ld	r8, Z
    8188:	80 80       	ld	r8, Z
    818a:	80 80       	ld	r8, Z
    818c:	80 80       	ld	r8, Z
    818e:	80 80       	ld	r8, Z
    8190:	80 80       	ld	r8, Z
    8192:	80 80       	ld	r8, Z
    8194:	80 80       	ld	r8, Z
    8196:	80 80       	ld	r8, Z
    8198:	80 80       	ld	r8, Z
    819a:	80 80       	ld	r8, Z
    819c:	80 80       	ld	r8, Z
    819e:	80 80       	ld	r8, Z
    81a0:	80 80       	ld	r8, Z
    81a2:	80 80       	ld	r8, Z
    81a4:	80 80       	ld	r8, Z
    81a6:	80 80       	ld	r8, Z
    81a8:	80 80       	ld	r8, Z
    81aa:	80 80       	ld	r8, Z
    81ac:	80 80       	ld	r8, Z
    81ae:	80 80       	ld	r8, Z
    81b0:	80 80       	ld	r8, Z
    81b2:	80 80       	ld	r8, Z
    81b4:	80 80       	ld	r8, Z
    81b6:	80 80       	ld	r8, Z
    81b8:	80 80       	ld	r8, Z
    81ba:	80 80       	ld	r8, Z
    81bc:	80 80       	ld	r8, Z
    81be:	80 80       	ld	r8, Z
    81c0:	80 80       	ld	r8, Z
    81c2:	80 80       	ld	r8, Z
    81c4:	80 80       	ld	r8, Z
    81c6:	80 80       	ld	r8, Z
    81c8:	80 80       	ld	r8, Z
    81ca:	80 80       	ld	r8, Z
    81cc:	80 80       	ld	r8, Z
    81ce:	80 80       	ld	r8, Z
    81d0:	80 80       	ld	r8, Z
    81d2:	80 80       	ld	r8, Z
    81d4:	80 80       	ld	r8, Z
    81d6:	80 80       	ld	r8, Z
    81d8:	80 80       	ld	r8, Z
    81da:	80 80       	ld	r8, Z
    81dc:	80 80       	ld	r8, Z
    81de:	80 80       	ld	r8, Z
    81e0:	80 80       	ld	r8, Z
    81e2:	80 80       	ld	r8, Z
    81e4:	80 80       	ld	r8, Z
    81e6:	80 80       	ld	r8, Z
    81e8:	80 80       	ld	r8, Z
    81ea:	80 80       	ld	r8, Z
    81ec:	80 80       	ld	r8, Z
    81ee:	80 80       	ld	r8, Z
    81f0:	80 80       	ld	r8, Z
    81f2:	80 80       	ld	r8, Z
    81f4:	80 80       	ld	r8, Z
    81f6:	80 80       	ld	r8, Z
    81f8:	80 80       	ld	r8, Z
    81fa:	80 80       	ld	r8, Z
    81fc:	80 80       	ld	r8, Z
    81fe:	80 80       	ld	r8, Z
    8200:	7f 7f       	andi	r23, 0xFF	; 255
    8202:	7f 7f       	andi	r23, 0xFF	; 255
    8204:	7f 7f       	andi	r23, 0xFF	; 255
    8206:	7f 7f       	andi	r23, 0xFF	; 255
    8208:	7f 7f       	andi	r23, 0xFF	; 255
    820a:	7f 7f       	andi	r23, 0xFF	; 255
    820c:	7f 7f       	andi	r23, 0xFF	; 255
    820e:	7f 7f       	andi	r23, 0xFF	; 255
    8210:	7f 7f       	andi	r23, 0xFF	; 255
    8212:	7f 7f       	andi	r23, 0xFF	; 255
    8214:	7f 7f       	andi	r23, 0xFF	; 255
    8216:	7f 7f       	andi	r23, 0xFF	; 255
    8218:	7f 7f       	andi	r23, 0xFF	; 255
    821a:	7f 7f       	andi	r23, 0xFF	; 255
    821c:	7f 7f       	andi	r23, 0xFF	; 255
    821e:	7f 7f       	andi	r23, 0xFF	; 255
    8220:	7f 7f       	andi	r23, 0xFF	; 255
    8222:	7f 7f       	andi	r23, 0xFF	; 255
    8224:	7f 7f       	andi	r23, 0xFF	; 255
    8226:	7f 7f       	andi	r23, 0xFF	; 255
    8228:	7f 7f       	andi	r23, 0xFF	; 255
    822a:	7f 7f       	andi	r23, 0xFF	; 255
    822c:	7f 7f       	andi	r23, 0xFF	; 255
    822e:	7f 7f       	andi	r23, 0xFF	; 255
    8230:	7f 7f       	andi	r23, 0xFF	; 255
    8232:	7f 7f       	andi	r23, 0xFF	; 255
    8234:	7f 7f       	andi	r23, 0xFF	; 255
    8236:	7f 7f       	andi	r23, 0xFF	; 255
    8238:	7f 7f       	andi	r23, 0xFF	; 255
    823a:	7f 7f       	andi	r23, 0xFF	; 255
    823c:	7f 7f       	andi	r23, 0xFF	; 255
    823e:	7f 7f       	andi	r23, 0xFF	; 255
    8240:	7f 7f       	andi	r23, 0xFF	; 255
    8242:	7f 7f       	andi	r23, 0xFF	; 255
    8244:	7f 7f       	andi	r23, 0xFF	; 255
    8246:	7f 7f       	andi	r23, 0xFF	; 255
    8248:	7f 7f       	andi	r23, 0xFF	; 255
    824a:	7f 7f       	andi	r23, 0xFF	; 255
    824c:	7f 7f       	andi	r23, 0xFF	; 255
    824e:	7f 7f       	andi	r23, 0xFF	; 255
    8250:	7f 7f       	andi	r23, 0xFF	; 255
    8252:	7f 7f       	andi	r23, 0xFF	; 255
    8254:	7f 7f       	andi	r23, 0xFF	; 255
    8256:	7f 7f       	andi	r23, 0xFF	; 255
    8258:	7f 7f       	andi	r23, 0xFF	; 255
    825a:	7f 7f       	andi	r23, 0xFF	; 255
    825c:	7f 7f       	andi	r23, 0xFF	; 255
    825e:	7f 7f       	andi	r23, 0xFF	; 255
    8260:	7f 7f       	andi	r23, 0xFF	; 255
    8262:	7f 7f       	andi	r23, 0xFF	; 255
    8264:	7f 7f       	andi	r23, 0xFF	; 255
    8266:	7f 7f       	andi	r23, 0xFF	; 255
    8268:	7f 7f       	andi	r23, 0xFF	; 255
    826a:	7f 7f       	andi	r23, 0xFF	; 255
    826c:	7f 7f       	andi	r23, 0xFF	; 255
    826e:	7f 7f       	andi	r23, 0xFF	; 255
    8270:	7f 7f       	andi	r23, 0xFF	; 255
    8272:	7f 7f       	andi	r23, 0xFF	; 255
    8274:	7f 7f       	andi	r23, 0xFF	; 255
    8276:	7f 7f       	andi	r23, 0xFF	; 255
    8278:	7f 7f       	andi	r23, 0xFF	; 255
    827a:	7f 7f       	andi	r23, 0xFF	; 255
    827c:	7f 7f       	andi	r23, 0xFF	; 255
    827e:	7f 7f       	andi	r23, 0xFF	; 255
    8280:	80 80       	ld	r8, Z
    8282:	80 80       	ld	r8, Z
    8284:	80 80       	ld	r8, Z
    8286:	80 80       	ld	r8, Z
    8288:	80 80       	ld	r8, Z
    828a:	80 80       	ld	r8, Z
    828c:	80 80       	ld	r8, Z
    828e:	80 80       	ld	r8, Z
    8290:	80 80       	ld	r8, Z
    8292:	80 80       	ld	r8, Z
    8294:	80 80       	ld	r8, Z
    8296:	80 80       	ld	r8, Z
    8298:	80 80       	ld	r8, Z
    829a:	80 80       	ld	r8, Z
    829c:	80 80       	ld	r8, Z
    829e:	80 80       	ld	r8, Z
    82a0:	80 80       	ld	r8, Z
    82a2:	80 80       	ld	r8, Z
    82a4:	80 80       	ld	r8, Z
    82a6:	80 80       	ld	r8, Z
    82a8:	80 80       	ld	r8, Z
    82aa:	80 80       	ld	r8, Z
    82ac:	80 80       	ld	r8, Z
    82ae:	80 80       	ld	r8, Z
    82b0:	80 80       	ld	r8, Z
    82b2:	80 80       	ld	r8, Z
    82b4:	80 80       	ld	r8, Z
    82b6:	80 80       	ld	r8, Z
    82b8:	80 80       	ld	r8, Z
    82ba:	80 80       	ld	r8, Z
    82bc:	80 80       	ld	r8, Z
    82be:	80 80       	ld	r8, Z
    82c0:	80 80       	ld	r8, Z
    82c2:	80 80       	ld	r8, Z
    82c4:	80 80       	ld	r8, Z
    82c6:	80 80       	ld	r8, Z
    82c8:	80 80       	ld	r8, Z
    82ca:	80 80       	ld	r8, Z
    82cc:	80 80       	ld	r8, Z
    82ce:	80 80       	ld	r8, Z
    82d0:	80 80       	ld	r8, Z
    82d2:	80 80       	ld	r8, Z
    82d4:	80 80       	ld	r8, Z
    82d6:	80 80       	ld	r8, Z
    82d8:	80 80       	ld	r8, Z
    82da:	80 80       	ld	r8, Z
    82dc:	80 80       	ld	r8, Z
    82de:	80 80       	ld	r8, Z
    82e0:	80 80       	ld	r8, Z
    82e2:	80 80       	ld	r8, Z
    82e4:	80 80       	ld	r8, Z
    82e6:	80 80       	ld	r8, Z
    82e8:	80 80       	ld	r8, Z
    82ea:	80 80       	ld	r8, Z
    82ec:	80 80       	ld	r8, Z
    82ee:	80 80       	ld	r8, Z
    82f0:	80 80       	ld	r8, Z
    82f2:	80 80       	ld	r8, Z
    82f4:	80 80       	ld	r8, Z
    82f6:	80 80       	ld	r8, Z
    82f8:	80 80       	ld	r8, Z
    82fa:	80 80       	ld	r8, Z
    82fc:	80 80       	ld	r8, Z
    82fe:	80 80       	ld	r8, Z
    8300:	7f 7f       	andi	r23, 0xFF	; 255
    8302:	7f 7f       	andi	r23, 0xFF	; 255
    8304:	7f 7f       	andi	r23, 0xFF	; 255
    8306:	7f 7f       	andi	r23, 0xFF	; 255
    8308:	7f 7f       	andi	r23, 0xFF	; 255
    830a:	7f 7f       	andi	r23, 0xFF	; 255
    830c:	7f 7f       	andi	r23, 0xFF	; 255
    830e:	7f 7f       	andi	r23, 0xFF	; 255
    8310:	7f 7f       	andi	r23, 0xFF	; 255
    8312:	7f 7f       	andi	r23, 0xFF	; 255
    8314:	7f 7f       	andi	r23, 0xFF	; 255
    8316:	7f 7f       	andi	r23, 0xFF	; 255
    8318:	7f 7f       	andi	r23, 0xFF	; 255
    831a:	7f 7f       	andi	r23, 0xFF	; 255
    831c:	7f 7f       	andi	r23, 0xFF	; 255
    831e:	7f 7f       	andi	r23, 0xFF	; 255
    8320:	7f 7f       	andi	r23, 0xFF	; 255
    8322:	7f 7f       	andi	r23, 0xFF	; 255
    8324:	7f 7f       	andi	r23, 0xFF	; 255
    8326:	7f 7f       	andi	r23, 0xFF	; 255
    8328:	7f 7f       	andi	r23, 0xFF	; 255
    832a:	7f 7f       	andi	r23, 0xFF	; 255
    832c:	7f 7f       	andi	r23, 0xFF	; 255
    832e:	7f 7f       	andi	r23, 0xFF	; 255
    8330:	7f 7f       	andi	r23, 0xFF	; 255
    8332:	7f 7f       	andi	r23, 0xFF	; 255
    8334:	7f 7f       	andi	r23, 0xFF	; 255
    8336:	7f 7f       	andi	r23, 0xFF	; 255
    8338:	7f 7f       	andi	r23, 0xFF	; 255
    833a:	7f 7f       	andi	r23, 0xFF	; 255
    833c:	7f 7f       	andi	r23, 0xFF	; 255
    833e:	7f 7f       	andi	r23, 0xFF	; 255
    8340:	7f 7f       	andi	r23, 0xFF	; 255
    8342:	7f 7f       	andi	r23, 0xFF	; 255
    8344:	7f 7f       	andi	r23, 0xFF	; 255
    8346:	7f 7f       	andi	r23, 0xFF	; 255
    8348:	7f 7f       	andi	r23, 0xFF	; 255
    834a:	7f 7f       	andi	r23, 0xFF	; 255
    834c:	7f 7f       	andi	r23, 0xFF	; 255
    834e:	7f 7f       	andi	r23, 0xFF	; 255
    8350:	7f 7f       	andi	r23, 0xFF	; 255
    8352:	7f 7f       	andi	r23, 0xFF	; 255
    8354:	7f 7f       	andi	r23, 0xFF	; 255
    8356:	7f 7f       	andi	r23, 0xFF	; 255
    8358:	7f 7f       	andi	r23, 0xFF	; 255
    835a:	7f 7f       	andi	r23, 0xFF	; 255
    835c:	7f 7f       	andi	r23, 0xFF	; 255
    835e:	7f 7f       	andi	r23, 0xFF	; 255
    8360:	7f 7f       	andi	r23, 0xFF	; 255
    8362:	7f 7f       	andi	r23, 0xFF	; 255
    8364:	7f 7f       	andi	r23, 0xFF	; 255
    8366:	7f 7f       	andi	r23, 0xFF	; 255
    8368:	7f 7f       	andi	r23, 0xFF	; 255
    836a:	7f 7f       	andi	r23, 0xFF	; 255
    836c:	7f 7f       	andi	r23, 0xFF	; 255
    836e:	7f 7f       	andi	r23, 0xFF	; 255
    8370:	7f 7f       	andi	r23, 0xFF	; 255
    8372:	7f 7f       	andi	r23, 0xFF	; 255
    8374:	7f 7f       	andi	r23, 0xFF	; 255
    8376:	7f 7f       	andi	r23, 0xFF	; 255
    8378:	7f 7f       	andi	r23, 0xFF	; 255
    837a:	7f 7f       	andi	r23, 0xFF	; 255
    837c:	7f 7f       	andi	r23, 0xFF	; 255
    837e:	7f 7f       	andi	r23, 0xFF	; 255
    8380:	7f 7f       	andi	r23, 0xFF	; 255
    8382:	7f 7f       	andi	r23, 0xFF	; 255
    8384:	7f 7f       	andi	r23, 0xFF	; 255
    8386:	7f 7f       	andi	r23, 0xFF	; 255
    8388:	7f 7f       	andi	r23, 0xFF	; 255
    838a:	7f 7f       	andi	r23, 0xFF	; 255
    838c:	7f 7f       	andi	r23, 0xFF	; 255
    838e:	7f 7f       	andi	r23, 0xFF	; 255
    8390:	7f 7f       	andi	r23, 0xFF	; 255
    8392:	7f 7f       	andi	r23, 0xFF	; 255
    8394:	7f 7f       	andi	r23, 0xFF	; 255
    8396:	7f 7f       	andi	r23, 0xFF	; 255
    8398:	7f 7f       	andi	r23, 0xFF	; 255
    839a:	7f 7f       	andi	r23, 0xFF	; 255
    839c:	7f 7f       	andi	r23, 0xFF	; 255
    839e:	7f 7f       	andi	r23, 0xFF	; 255
    83a0:	7f 7f       	andi	r23, 0xFF	; 255
    83a2:	7f 7f       	andi	r23, 0xFF	; 255
    83a4:	7f 7f       	andi	r23, 0xFF	; 255
    83a6:	7f 7f       	andi	r23, 0xFF	; 255
    83a8:	7f 7f       	andi	r23, 0xFF	; 255
    83aa:	7f 7f       	andi	r23, 0xFF	; 255
    83ac:	7f 7f       	andi	r23, 0xFF	; 255
    83ae:	7f 7f       	andi	r23, 0xFF	; 255
    83b0:	7f 7f       	andi	r23, 0xFF	; 255
    83b2:	7f 7f       	andi	r23, 0xFF	; 255
    83b4:	7f 7f       	andi	r23, 0xFF	; 255
    83b6:	7f 7f       	andi	r23, 0xFF	; 255
    83b8:	7f 7f       	andi	r23, 0xFF	; 255
    83ba:	7f 7f       	andi	r23, 0xFF	; 255
    83bc:	7f 7f       	andi	r23, 0xFF	; 255
    83be:	7f 7f       	andi	r23, 0xFF	; 255
    83c0:	80 80       	ld	r8, Z
    83c2:	80 80       	ld	r8, Z
    83c4:	80 80       	ld	r8, Z
    83c6:	80 80       	ld	r8, Z
    83c8:	80 80       	ld	r8, Z
    83ca:	80 80       	ld	r8, Z
    83cc:	80 80       	ld	r8, Z
    83ce:	80 80       	ld	r8, Z
    83d0:	80 80       	ld	r8, Z
    83d2:	80 80       	ld	r8, Z
    83d4:	80 80       	ld	r8, Z
    83d6:	80 80       	ld	r8, Z
    83d8:	80 80       	ld	r8, Z
    83da:	80 80       	ld	r8, Z
    83dc:	80 80       	ld	r8, Z
    83de:	80 80       	ld	r8, Z
    83e0:	80 80       	ld	r8, Z
    83e2:	80 80       	ld	r8, Z
    83e4:	80 80       	ld	r8, Z
    83e6:	80 80       	ld	r8, Z
    83e8:	80 80       	ld	r8, Z
    83ea:	80 80       	ld	r8, Z
    83ec:	80 80       	ld	r8, Z
    83ee:	80 80       	ld	r8, Z
    83f0:	80 80       	ld	r8, Z
    83f2:	80 80       	ld	r8, Z
    83f4:	80 80       	ld	r8, Z
    83f6:	80 80       	ld	r8, Z
    83f8:	80 80       	ld	r8, Z
    83fa:	80 80       	ld	r8, Z
    83fc:	80 80       	ld	r8, Z
    83fe:	80 80       	ld	r8, Z

00008400 <RestoreBackground>:
	unsigned char free_tile_index, userRamTilesCount=0,userRamTilesCount_tmp=0;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=userRamTilesCount;i<free_tile_index;i++){
    8400:	20 91 c6 0c 	lds	r18, 0x0CC6
    8404:	0e c0       	rjmp	.+28     	; 0x8422 <RestoreBackground+0x22>
			//vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
			*ram_tiles_restore[i].addr=ram_tiles_restore[i].tileIndex;
    8406:	82 2f       	mov	r24, r18
    8408:	90 e0       	ldi	r25, 0x00	; 0
    840a:	fc 01       	movw	r30, r24
    840c:	ee 0f       	add	r30, r30
    840e:	ff 1f       	adc	r31, r31
    8410:	e8 0f       	add	r30, r24
    8412:	f9 1f       	adc	r31, r25
    8414:	e4 5e       	subi	r30, 0xE4	; 228
    8416:	f3 4f       	sbci	r31, 0xF3	; 243
    8418:	a0 81       	ld	r26, Z
    841a:	b1 81       	ldd	r27, Z+1	; 0x01
    841c:	82 81       	ldd	r24, Z+2	; 0x02
    841e:	8c 93       	st	X, r24
	unsigned char free_tile_index, userRamTilesCount=0,userRamTilesCount_tmp=0;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=userRamTilesCount;i<free_tile_index;i++){
    8420:	2f 5f       	subi	r18, 0xFF	; 255
    8422:	80 91 4e 0d 	lds	r24, 0x0D4E
    8426:	28 17       	cp	r18, r24
    8428:	70 f3       	brcs	.-36     	; 0x8406 <RestoreBackground+0x6>
			//vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
			*ram_tiles_restore[i].addr=ram_tiles_restore[i].tileIndex;
		}	
	}
    842a:	08 95       	ret

0000842c <ProcessSprites>:
		}

	}
	*/

	void ProcessSprites(){
    842c:	a4 e0       	ldi	r26, 0x04	; 4
    842e:	b0 e0       	ldi	r27, 0x00	; 0
    8430:	ec e1       	ldi	r30, 0x1C	; 28
    8432:	f2 e4       	ldi	r31, 0x42	; 66
    8434:	0c 94 27 48 	jmp	0x904e	; 0x904e <__prologue_saves__>
	
		unsigned char i,bx,by,dx,dy,bt,x,y,tx=1,ty=1,wx,wy;
		unsigned int ramPtr,ssx,ssy;

		if(!spritesOn) return;
    8438:	80 91 00 01 	lds	r24, 0x0100
    843c:	88 23       	and	r24, r24
    843e:	09 f4       	brne	.+2      	; 0x8442 <ProcessSprites+0x16>
    8440:	be c0       	rjmp	.+380    	; 0x85be <ProcessSprites+0x192>

		userRamTilesCount=userRamTilesCount_tmp;
    8442:	80 91 c7 0c 	lds	r24, 0x0CC7
    8446:	80 93 c6 0c 	sts	0x0CC6, r24
		free_tile_index=userRamTilesCount;
    844a:	80 93 4e 0d 	sts	0x0D4E, r24
    844e:	ac e2       	ldi	r26, 0x2C	; 44
    8450:	8a 2e       	mov	r8, r26
    8452:	a4 e0       	ldi	r26, 0x04	; 4
    8454:	9a 2e       	mov	r9, r26
    8456:	66 24       	eor	r6, r6
	
		for(i=0;i<MAX_SPRITES;i++){
			bx=sprites[i].x;
    8458:	f4 01       	movw	r30, r8
    845a:	80 81       	ld	r24, Z

			if(bx!=(SCREEN_TILES_H*TILE_WIDTH)){
    845c:	80 3f       	cpi	r24, 0xF0	; 240
    845e:	09 f4       	brne	.+2      	; 0x8462 <ProcessSprites+0x36>
    8460:	90 c0       	rjmp	.+288    	; 0x8582 <ProcessSprites+0x156>
				#if SCROLLING == 1
					ssx=sprites[i].x+Screen.scrollX;
					ssy=sprites[i].y+Screen.scrollY;
   				#else
					ssx=sprites[i].x;
					ssy=sprites[i].y;
    8462:	91 81       	ldd	r25, Z+1	; 0x01

				tx=1;
				ty=1;

				//get the BG tiles that are overlapped by the sprite
				bx=ssx>>3;
    8464:	f8 2f       	mov	r31, r24
    8466:	f6 95       	lsr	r31
    8468:	f6 95       	lsr	r31
    846a:	f6 95       	lsr	r31
    846c:	f9 83       	std	Y+1, r31	; 0x01
				dx=ssx&0x7;
    846e:	28 2f       	mov	r18, r24
    8470:	27 70       	andi	r18, 0x07	; 7
				if(dx>0) tx++;
    8472:	19 f0       	breq	.+6      	; 0x847a <ProcessSprites+0x4e>
    8474:	f2 e0       	ldi	r31, 0x02	; 2
    8476:	2f 2e       	mov	r2, r31
    8478:	02 c0       	rjmp	.+4      	; 0x847e <ProcessSprites+0x52>
    847a:	22 24       	eor	r2, r2
    847c:	23 94       	inc	r2

				//by=ssy>>3;
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
    847e:	39 2f       	mov	r19, r25
    8480:	36 95       	lsr	r19
    8482:	36 95       	lsr	r19
    8484:	36 95       	lsr	r19
				dy=ssy%TILE_HEIGHT;
    8486:	89 2f       	mov	r24, r25
    8488:	87 70       	andi	r24, 0x07	; 7
				if(dy>0) ty++;			
    848a:	19 f0       	breq	.+6      	; 0x8492 <ProcessSprites+0x66>
    848c:	e2 e0       	ldi	r30, 0x02	; 2
    848e:	3e 2e       	mov	r3, r30
    8490:	02 c0       	rjmp	.+4      	; 0x8496 <ProcessSprites+0x6a>
    8492:	33 24       	eor	r3, r3
    8494:	33 94       	inc	r3
								bt=free_tile_index;
								free_tile_index++;
							}
				
							if(bt<RAM_TILES_COUNT){				
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    8496:	b8 2e       	mov	r11, r24
    8498:	aa 24       	eor	r10, r10
    849a:	25 01       	movw	r4, r10
    849c:	42 0e       	add	r4, r18
    849e:	51 1c       	adc	r5, r1
    84a0:	73 2e       	mov	r7, r19
    84a2:	cc 24       	eor	r12, r12
    84a4:	dd 24       	eor	r13, r13
    84a6:	64 c0       	rjmp	.+200    	; 0x8570 <ProcessSprites+0x144>

							//process X-Y wrapping
                            #if SCROLLING == 0
							    if(wy>=(VRAM_TILES_V*2)){
								    wy-=(VRAM_TILES_V*2);
							    }else if(wy>=VRAM_TILES_V){
    84a8:	29 e1       	ldi	r18, 0x19	; 25
    84aa:	27 15       	cp	r18, r7
    84ac:	10 f0       	brcs	.+4      	; 0x84b2 <ProcessSprites+0x86>
    84ae:	a7 2d       	mov	r26, r7
    84b0:	01 c0       	rjmp	.+2      	; 0x84b4 <ProcessSprites+0x88>
    84b2:	aa 81       	ldd	r26, Y+2	; 0x02
								    wy-=(Screen.scrollHeight*2);
							    }else if(wy>=Screen.scrollHeight){
							    	wy-=Screen.scrollHeight;
							    }
                            #endif
							if(wx>=VRAM_TILES_H)wx-=VRAM_TILES_H; //should always be 32
    84b4:	0e 31       	cpi	r16, 0x1E	; 30
    84b6:	10 f4       	brcc	.+4      	; 0x84bc <ProcessSprites+0x90>
    84b8:	80 2f       	mov	r24, r16
    84ba:	02 c0       	rjmp	.+4      	; 0x84c0 <ProcessSprites+0x94>
    84bc:	80 2f       	mov	r24, r16
    84be:	8e 51       	subi	r24, 0x1E	; 30

							#if SCROLLING == 0
								ramPtr=(wy*VRAM_TILES_H)+wx;
    84c0:	fe e1       	ldi	r31, 0x1E	; 30
    84c2:	af 9f       	mul	r26, r31
    84c4:	f0 01       	movw	r30, r0
    84c6:	11 24       	eor	r1, r1
    84c8:	e8 0f       	add	r30, r24
    84ca:	f1 1d       	adc	r31, r1
    84cc:	fc 83       	std	Y+4, r31	; 0x04
    84ce:	eb 83       	std	Y+3, r30	; 0x03

								ramPtr=((wy>>3)*256)+(wx*8)+(wy&7);	

							#endif

							bt=vram[ramPtr];						
    84d0:	e0 5e       	subi	r30, 0xE0	; 224
    84d2:	fe 4f       	sbci	r31, 0xFE	; 254
    84d4:	10 81       	ld	r17, Z

							if( ((bt>=RAM_TILES_COUNT) | (bt<userRamTilesCount)) && (free_tile_index < RAM_TILES_COUNT) ){ //if no ram free ignore tile
    84d6:	20 e0       	ldi	r18, 0x00	; 0
    84d8:	1e 31       	cpi	r17, 0x1E	; 30
    84da:	08 f0       	brcs	.+2      	; 0x84de <ProcessSprites+0xb2>
    84dc:	21 e0       	ldi	r18, 0x01	; 1
    84de:	90 e0       	ldi	r25, 0x00	; 0
    84e0:	80 91 c6 0c 	lds	r24, 0x0CC6
    84e4:	18 17       	cp	r17, r24
    84e6:	08 f4       	brcc	.+2      	; 0x84ea <ProcessSprites+0xbe>
    84e8:	91 e0       	ldi	r25, 0x01	; 1
    84ea:	22 23       	and	r18, r18
    84ec:	21 f4       	brne	.+8      	; 0x84f6 <ProcessSprites+0xca>
    84ee:	99 23       	and	r25, r25
    84f0:	11 f4       	brne	.+4      	; 0x84f6 <ProcessSprites+0xca>
    84f2:	61 2f       	mov	r22, r17
    84f4:	2b c0       	rjmp	.+86     	; 0x854c <ProcessSprites+0x120>
    84f6:	60 91 4e 0d 	lds	r22, 0x0D4E
    84fa:	6e 31       	cpi	r22, 0x1E	; 30
    84fc:	10 f0       	brcs	.+4      	; 0x8502 <ProcessSprites+0xd6>
    84fe:	61 2f       	mov	r22, r17
    8500:	23 c0       	rjmp	.+70     	; 0x8548 <ProcessSprites+0x11c>
								if( bt>=RAM_TILES_COUNT ){
    8502:	22 23       	and	r18, r18
    8504:	29 f0       	breq	.+10     	; 0x8510 <ProcessSprites+0xe4>
									//tile is mapped to flash. Copy it to next free RAM tile.
									CopyFlashTile(bt-RAM_TILES_COUNT,free_tile_index);
    8506:	81 2f       	mov	r24, r17
    8508:	8e 51       	subi	r24, 0x1E	; 30
    850a:	0e 94 f2 34 	call	0x69e4	; 0x69e4 <CopyFlashTile>
    850e:	05 c0       	rjmp	.+10     	; 0x851a <ProcessSprites+0xee>
								}else if(bt<userRamTilesCount){
    8510:	99 23       	and	r25, r25
    8512:	19 f0       	breq	.+6      	; 0x851a <ProcessSprites+0xee>
									//tile is a user ram tile. Copy it to next free RAM tile.
									CopyRamTile(bt,free_tile_index);
    8514:	81 2f       	mov	r24, r17
    8516:	0e 94 81 35 	call	0x6b02	; 0x6b02 <CopyRamTile>
								}
								ram_tiles_restore[free_tile_index].addr=(&vram[ramPtr]);
    851a:	60 91 4e 0d 	lds	r22, 0x0D4E
    851e:	86 2f       	mov	r24, r22
    8520:	90 e0       	ldi	r25, 0x00	; 0
    8522:	fc 01       	movw	r30, r24
    8524:	ee 0f       	add	r30, r30
    8526:	ff 1f       	adc	r31, r31
    8528:	e8 0f       	add	r30, r24
    852a:	f9 1f       	adc	r31, r25
    852c:	e4 5e       	subi	r30, 0xE4	; 228
    852e:	f3 4f       	sbci	r31, 0xF3	; 243
    8530:	ab 81       	ldd	r26, Y+3	; 0x03
    8532:	bc 81       	ldd	r27, Y+4	; 0x04
    8534:	a0 5e       	subi	r26, 0xE0	; 224
    8536:	be 4f       	sbci	r27, 0xFE	; 254
    8538:	b1 83       	std	Z+1, r27	; 0x01
    853a:	a0 83       	st	Z, r26
								ram_tiles_restore[free_tile_index].tileIndex=bt;
    853c:	12 83       	std	Z+2, r17	; 0x02
								vram[ramPtr]=free_tile_index;
    853e:	6c 93       	st	X, r22
								bt=free_tile_index;
								free_tile_index++;
    8540:	6f 5f       	subi	r22, 0xFF	; 255
    8542:	60 93 4e 0d 	sts	0x0D4E, r22
    8546:	61 50       	subi	r22, 0x01	; 1
							}
				
							if(bt<RAM_TILES_COUNT){				
    8548:	6e 31       	cpi	r22, 0x1E	; 30
    854a:	28 f4       	brcc	.+10     	; 0x8556 <ProcessSprites+0x12a>
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    854c:	86 2d       	mov	r24, r6
    854e:	a7 01       	movw	r20, r14
    8550:	92 01       	movw	r18, r4
    8552:	0e 94 0e 36 	call	0x6c1c	; 0x6c1c <BlitSprite>
    8556:	08 94       	sec
    8558:	e1 1c       	adc	r14, r1
    855a:	f1 1c       	adc	r15, r1
    855c:	0f 5f       	subi	r16, 0xFF	; 255
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){

					for(x=0;x<tx;x++){
    855e:	e2 14       	cp	r14, r2
    8560:	08 f4       	brcc	.+2      	; 0x8564 <ProcessSprites+0x138>
    8562:	a2 cf       	rjmp	.-188    	; 0x84a8 <ProcessSprites+0x7c>
    8564:	08 94       	sec
    8566:	c1 1c       	adc	r12, r1
    8568:	d1 1c       	adc	r13, r1
    856a:	73 94       	inc	r7
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){
    856c:	c3 14       	cp	r12, r3
    856e:	48 f4       	brcc	.+18     	; 0x8582 <ProcessSprites+0x156>
								bt=free_tile_index;
								free_tile_index++;
							}
				
							if(bt<RAM_TILES_COUNT){				
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    8570:	80 e0       	ldi	r24, 0x00	; 0
    8572:	9c 2d       	mov	r25, r12
    8574:	9c 01       	movw	r18, r24
    8576:	79 01       	movw	r14, r18
    8578:	09 81       	ldd	r16, Y+1	; 0x01

							//process X-Y wrapping
                            #if SCROLLING == 0
							    if(wy>=(VRAM_TILES_V*2)){
								    wy-=(VRAM_TILES_V*2);
							    }else if(wy>=VRAM_TILES_V){
    857a:	27 2d       	mov	r18, r7
    857c:	2a 51       	subi	r18, 0x1A	; 26
    857e:	2a 83       	std	Y+2, r18	; 0x02
    8580:	93 cf       	rjmp	.-218    	; 0x84a8 <ProcessSprites+0x7c>
		if(!spritesOn) return;

		userRamTilesCount=userRamTilesCount_tmp;
		free_tile_index=userRamTilesCount;
	
		for(i=0;i<MAX_SPRITES;i++){
    8582:	63 94       	inc	r6
    8584:	84 e0       	ldi	r24, 0x04	; 4
    8586:	90 e0       	ldi	r25, 0x00	; 0
    8588:	88 0e       	add	r8, r24
    858a:	99 1e       	adc	r9, r25
    858c:	9c e1       	ldi	r25, 0x1C	; 28
    858e:	69 16       	cp	r6, r25
    8590:	09 f0       	breq	.+2      	; 0x8594 <ProcessSprites+0x168>
    8592:	62 cf       	rjmp	.-316    	; 0x8458 <ProcessSprites+0x2c>
	unsigned char free_tile_index, userRamTilesCount=0,userRamTilesCount_tmp=0;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=userRamTilesCount;i<free_tile_index;i++){
    8594:	20 91 c6 0c 	lds	r18, 0x0CC6
    8598:	0e c0       	rjmp	.+28     	; 0x85b6 <ProcessSprites+0x18a>
			//vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
			*ram_tiles_restore[i].addr=ram_tiles_restore[i].tileIndex;
    859a:	82 2f       	mov	r24, r18
    859c:	90 e0       	ldi	r25, 0x00	; 0
    859e:	fc 01       	movw	r30, r24
    85a0:	ee 0f       	add	r30, r30
    85a2:	ff 1f       	adc	r31, r31
    85a4:	e8 0f       	add	r30, r24
    85a6:	f9 1f       	adc	r31, r25
    85a8:	e4 5e       	subi	r30, 0xE4	; 228
    85aa:	f3 4f       	sbci	r31, 0xF3	; 243
    85ac:	a0 81       	ld	r26, Z
    85ae:	b1 81       	ldd	r27, Z+1	; 0x01
    85b0:	82 81       	ldd	r24, Z+2	; 0x02
    85b2:	8c 93       	st	X, r24
	unsigned char free_tile_index, userRamTilesCount=0,userRamTilesCount_tmp=0;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=userRamTilesCount;i<free_tile_index;i++){
    85b4:	2f 5f       	subi	r18, 0xFF	; 255
    85b6:	80 91 4e 0d 	lds	r24, 0x0D4E
    85ba:	28 17       	cp	r18, r24
    85bc:	70 f3       	brcs	.-36     	; 0x859a <ProcessSprites+0x16e>


		//restore BG tiles
		RestoreBackground();

	}
    85be:	24 96       	adiw	r28, 0x04	; 4
    85c0:	e2 e1       	ldi	r30, 0x12	; 18
    85c2:	0c 94 43 48 	jmp	0x9086	; 0x9086 <__epilogue_restores__>

000085c6 <DisplayLogo>:
		
			WaitVsync(65);
			ClearVram();
			WaitVsync(20);
		#endif	
	}
    85c6:	08 95       	ret

000085c8 <InitializeVideoMode>:


	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){
    85c8:	ec e2       	ldi	r30, 0x2C	; 44
    85ca:	f4 e0       	ldi	r31, 0x04	; 4

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
			sprites[i].x=(SCREEN_TILES_H*TILE_WIDTH);		
    85cc:	80 ef       	ldi	r24, 0xF0	; 240
    85ce:	80 83       	st	Z, r24
    85d0:	34 96       	adiw	r30, 0x04	; 4

	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
    85d2:	94 e0       	ldi	r25, 0x04	; 4
    85d4:	ec 39       	cpi	r30, 0x9C	; 156
    85d6:	f9 07       	cpc	r31, r25
    85d8:	d1 f7       	brne	.-12     	; 0x85ce <InitializeVideoMode+0x6>
			screenSections[i].wrapLine=0;
			screenSections[i].flags=SCT_PRIORITY_SPR;
		}
		*/

	}
    85da:	08 95       	ret

000085dc <VideoModeVsync>:

	//Callback invoked during hsync
	void VideoModeVsync(){
		
		ProcessFading();
    85dc:	0e 94 3b 43 	call	0x8676	; 0x8676 <ProcessFading>
		ProcessSprites();
    85e0:	0e 94 16 42 	call	0x842c	; 0x842c <ProcessSprites>

	}
    85e4:	08 95       	ret

000085e6 <WaitVsync>:
		}
	}
}

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
    85e6:	0f 93       	push	r16
    85e8:	1f 93       	push	r17
    85ea:	cf 93       	push	r28
    85ec:	df 93       	push	r29
    85ee:	8c 01       	movw	r16, r24
    85f0:	c0 e0       	ldi	r28, 0x00	; 0
    85f2:	d0 e0       	ldi	r29, 0x00	; 0
    85f4:	07 c0       	rjmp	.+14     	; 0x8604 <WaitVsync+0x1e>
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
		while(!GetVsyncFlag());
    85f6:	0e 94 4e 38 	call	0x709c	; 0x709c <GetVsyncFlag>
    85fa:	88 23       	and	r24, r24
    85fc:	e1 f3       	breq	.-8      	; 0x85f6 <WaitVsync+0x10>
		ClearVsyncFlag();		
    85fe:	0e 94 52 38 	call	0x70a4	; 0x70a4 <ClearVsyncFlag>

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    8602:	21 96       	adiw	r28, 0x01	; 1
    8604:	c0 17       	cp	r28, r16
    8606:	d1 07       	cpc	r29, r17
    8608:	b4 f3       	brlt	.-20     	; 0x85f6 <WaitVsync+0x10>
		while(!GetVsyncFlag());
		ClearVsyncFlag();		
	}
}
    860a:	df 91       	pop	r29
    860c:	cf 91       	pop	r28
    860e:	1f 91       	pop	r17
    8610:	0f 91       	pop	r16
    8612:	08 95       	ret

00008614 <FadeIn>:
	}
	
	
}

void FadeIn(unsigned char speed,bool blocking){
    8614:	98 2f       	mov	r25, r24
	if(speed==0){
    8616:	88 23       	and	r24, r24
    8618:	19 f4       	brne	.+6      	; 0x8620 <FadeIn+0xc>
		DDRC=0xff;
    861a:	8f ef       	ldi	r24, 0xFF	; 255
    861c:	87 b9       	out	0x07, r24	; 7
    861e:	08 95       	ret
		return;
	}
	fadeStep=1;
    8620:	81 e0       	ldi	r24, 0x01	; 1
    8622:	80 93 51 0d 	sts	0x0D51, r24
	fadeDir=1;
    8626:	80 93 4d 0d 	sts	0x0D4D, r24
char fadeDir;
bool volatile fadeActive;


void doFade(unsigned char speed,bool blocking){
	fadeSpeed=speed;
    862a:	90 93 4c 0d 	sts	0x0D4C, r25
	currFadeFrame=0;
    862e:	10 92 50 0d 	sts	0x0D50, r1
	fadeActive=true;
    8632:	80 93 4f 0d 	sts	0x0D4F, r24
		
	if(blocking){
    8636:	66 23       	and	r22, r22
    8638:	21 f0       	breq	.+8      	; 0x8642 <FadeIn+0x2e>
		while(fadeActive==true);
    863a:	80 91 4f 0d 	lds	r24, 0x0D4F
    863e:	88 23       	and	r24, r24
    8640:	e1 f7       	brne	.-8      	; 0x863a <FadeIn+0x26>
    8642:	08 95       	ret

00008644 <FadeOut>:
	fadeStep=1;
	fadeDir=1;
	doFade(speed,blocking);
}

void FadeOut(unsigned char speed,bool blocking){
    8644:	98 2f       	mov	r25, r24
	if(speed==0){
    8646:	88 23       	and	r24, r24
    8648:	11 f4       	brne	.+4      	; 0x864e <FadeOut+0xa>
		DDRC=0;
    864a:	17 b8       	out	0x07, r1	; 7
    864c:	08 95       	ret
		return;
	}
	
	fadeStep=FADER_STEPS;
    864e:	8c e0       	ldi	r24, 0x0C	; 12
    8650:	80 93 51 0d 	sts	0x0D51, r24
	fadeDir=-1;
    8654:	8f ef       	ldi	r24, 0xFF	; 255
    8656:	80 93 4d 0d 	sts	0x0D4D, r24
char fadeDir;
bool volatile fadeActive;


void doFade(unsigned char speed,bool blocking){
	fadeSpeed=speed;
    865a:	90 93 4c 0d 	sts	0x0D4C, r25
	currFadeFrame=0;
    865e:	10 92 50 0d 	sts	0x0D50, r1
	fadeActive=true;
    8662:	81 e0       	ldi	r24, 0x01	; 1
    8664:	80 93 4f 0d 	sts	0x0D4F, r24
		
	if(blocking){
    8668:	66 23       	and	r22, r22
    866a:	21 f0       	breq	.+8      	; 0x8674 <FadeOut+0x30>
		while(fadeActive==true);
    866c:	80 91 4f 0d 	lds	r24, 0x0D4F
    8670:	88 23       	and	r24, r24
    8672:	e1 f7       	brne	.-8      	; 0x866c <FadeOut+0x28>
    8674:	08 95       	ret

00008676 <ProcessFading>:
}


//called by the kernel at each field end
void ProcessFading(){
	if(fadeActive==true){
    8676:	80 91 4f 0d 	lds	r24, 0x0D4F
    867a:	88 23       	and	r24, r24
    867c:	f9 f0       	breq	.+62     	; 0x86bc <ProcessFading+0x46>
		if(currFadeFrame==0){
    867e:	80 91 50 0d 	lds	r24, 0x0D50
    8682:	88 23       	and	r24, r24
    8684:	c1 f4       	brne	.+48     	; 0x86b6 <ProcessFading+0x40>
			currFadeFrame=fadeSpeed;
    8686:	80 91 4c 0d 	lds	r24, 0x0D4C
    868a:	80 93 50 0d 	sts	0x0D50, r24
			DDRC = pgm_read_byte(&(fader[fadeStep-1]));
    868e:	80 91 51 0d 	lds	r24, 0x0D51
    8692:	e8 2f       	mov	r30, r24
    8694:	f0 e0       	ldi	r31, 0x00	; 0
    8696:	e5 52       	subi	r30, 0x25	; 37
    8698:	ff 4f       	sbci	r31, 0xFF	; 255
    869a:	e4 91       	lpm	r30, Z+
    869c:	e7 b9       	out	0x07, r30	; 7
			fadeStep+=fadeDir;
    869e:	90 91 4d 0d 	lds	r25, 0x0D4D
    86a2:	98 0f       	add	r25, r24
    86a4:	90 93 51 0d 	sts	0x0D51, r25
			if(fadeStep==0 || fadeStep==(FADER_STEPS+1)){
    86a8:	99 23       	and	r25, r25
    86aa:	11 f0       	breq	.+4      	; 0x86b0 <ProcessFading+0x3a>
    86ac:	9d 30       	cpi	r25, 0x0D	; 13
    86ae:	31 f4       	brne	.+12     	; 0x86bc <ProcessFading+0x46>
				fadeActive=false;
    86b0:	10 92 4f 0d 	sts	0x0D4F, r1
    86b4:	08 95       	ret
			}
		}else{
			currFadeFrame--;
    86b6:	81 50       	subi	r24, 0x01	; 1
    86b8:	80 93 50 0d 	sts	0x0D50, r24
    86bc:	08 95       	ret

000086be <UzenetMenu>:

uint8_t UzenetMenu(){
    86be:	0f 93       	push	r16
    86c0:	1f 93       	push	r17
	FadeIn(1,false);
    86c2:	81 e0       	ldi	r24, 0x01	; 1
    86c4:	60 e0       	ldi	r22, 0x00	; 0
    86c6:	0e 94 0a 43 	call	0x8614	; 0x8614 <FadeIn>
    86ca:	e0 e2       	ldi	r30, 0x20	; 32
    86cc:	f1 e0       	ldi	r31, 0x01	; 1



void FillVram(uint8_t t){
	for(uint16_t i=0;i<VRAM_SIZE;i++)
		vram[i] = t;
    86ce:	82 e4       	ldi	r24, 0x42	; 66
    86d0:	81 93       	st	Z+, r24




void FillVram(uint8_t t){
	for(uint16_t i=0;i<VRAM_SIZE;i++)
    86d2:	94 e0       	ldi	r25, 0x04	; 4
    86d4:	ec 32       	cpi	r30, 0x2C	; 44
    86d6:	f9 07       	cpc	r31, r25
    86d8:	d9 f7       	brne	.-10     	; 0x86d0 <UzenetMenu+0x12>
}

uint8_t UzenetMenu(){
	FadeIn(1,false);
	FillVram(BLACK_TILE+RAM_TILES_COUNT);
	DrawBigString(9,2,PSTR("UZENET"));
    86da:	89 e0       	ldi	r24, 0x09	; 9
    86dc:	62 e0       	ldi	r22, 0x02	; 2
    86de:	42 ea       	ldi	r20, 0xA2	; 162
    86e0:	56 e6       	ldi	r21, 0x66	; 102
    86e2:	0e 94 e6 46 	call	0x8dcc	; 0x8dcc <DrawBigString>
	DrawBigString(5,6,PSTR("CONNECTING"));
    86e6:	85 e0       	ldi	r24, 0x05	; 5
    86e8:	66 e0       	ldi	r22, 0x06	; 6
    86ea:	49 ea       	ldi	r20, 0xA9	; 169
    86ec:	56 e6       	ldi	r21, 0x66	; 102
    86ee:	0e 94 e6 46 	call	0x8dcc	; 0x8dcc <DrawBigString>
	FadeIn(3,false);
	
}

uint8_t UzenetConnect(){
	WaitVsync(60);
    86f2:	8c e3       	ldi	r24, 0x3C	; 60
    86f4:	90 e0       	ldi	r25, 0x00	; 0
    86f6:	0e 94 f3 42 	call	0x85e6	; 0x85e6 <WaitVsync>
			WaitVsync(1);
			if(padState[0] & BTN_START && !(oldPadState[0] & BTN_START))
				return r;
		}
	}else{
		DrawBigString(5,6,PSTR("CONNECTED["));
    86fa:	85 e0       	ldi	r24, 0x05	; 5
    86fc:	66 e0       	ldi	r22, 0x06	; 6
    86fe:	45 ed       	ldi	r20, 0xD5	; 213
    8700:	56 e6       	ldi	r21, 0x66	; 102
    8702:	0e 94 e6 46 	call	0x8dcc	; 0x8dcc <DrawBigString>
    8706:	01 e0       	ldi	r16, 0x01	; 1
		uint8_t cursorpos = 1;
		uint8_t playerpos = 0;
		uint8_t totalplayers = 5;
		
		while(1){
			WaitVsync(1);
    8708:	81 e0       	ldi	r24, 0x01	; 1
    870a:	90 e0       	ldi	r25, 0x00	; 0
    870c:	0e 94 f3 42 	call	0x85e6	; 0x85e6 <WaitVsync>
		
			if(padState[0] & BTN_UP && !(oldPadState[0] & BTN_UP))
    8710:	80 91 1d 0e 	lds	r24, 0x0E1D
    8714:	98 2f       	mov	r25, r24
    8716:	84 ff       	sbrs	r24, 4
    8718:	06 c0       	rjmp	.+12     	; 0x8726 <UzenetMenu+0x68>
    871a:	80 91 1a 0e 	lds	r24, 0x0E1A
    871e:	84 fd       	sbrc	r24, 4
    8720:	02 c0       	rjmp	.+4      	; 0x8726 <UzenetMenu+0x68>
				cursorpos--;
    8722:	01 50       	subi	r16, 0x01	; 1
    8724:	07 c0       	rjmp	.+14     	; 0x8734 <UzenetMenu+0x76>
			else if(padState[0] & BTN_DOWN && !(oldPadState[0] & BTN_DOWN))
    8726:	95 ff       	sbrs	r25, 5
    8728:	09 c0       	rjmp	.+18     	; 0x873c <UzenetMenu+0x7e>
    872a:	80 91 1a 0e 	lds	r24, 0x0E1A
    872e:	85 fd       	sbrc	r24, 5
    8730:	05 c0       	rjmp	.+10     	; 0x873c <UzenetMenu+0x7e>
				cursorpos++;
    8732:	0f 5f       	subi	r16, 0xFF	; 255
			if(cursorpos == 4)
    8734:	04 30       	cpi	r16, 0x04	; 4
    8736:	11 f4       	brne	.+4      	; 0x873c <UzenetMenu+0x7e>
    8738:	01 e0       	ldi	r16, 0x01	; 1
    873a:	03 c0       	rjmp	.+6      	; 0x8742 <UzenetMenu+0x84>
				cursorpos = 1;
			else if(cursorpos < 1)
    873c:	00 23       	and	r16, r16
    873e:	09 f4       	brne	.+2      	; 0x8742 <UzenetMenu+0x84>
    8740:	03 e0       	ldi	r16, 0x03	; 3
    8742:	1e e0       	ldi	r17, 0x0E	; 14
				cursorpos = 3;
		
			for(uint8_t i=14;i<SCREEN_TILES_V;i++){
				SetTile(1,i,BLACK_TILE);
    8744:	81 e0       	ldi	r24, 0x01	; 1
    8746:	61 2f       	mov	r22, r17
    8748:	44 e2       	ldi	r20, 0x24	; 36
    874a:	50 e0       	ldi	r21, 0x00	; 0
    874c:	0e 94 3b 38 	call	0x7076	; 0x7076 <SetTile>
				SetTile(2,i,BLACK_TILE);
    8750:	82 e0       	ldi	r24, 0x02	; 2
    8752:	61 2f       	mov	r22, r17
    8754:	44 e2       	ldi	r20, 0x24	; 36
    8756:	50 e0       	ldi	r21, 0x00	; 0
    8758:	0e 94 3b 38 	call	0x7076	; 0x7076 <SetTile>
			if(cursorpos == 4)
				cursorpos = 1;
			else if(cursorpos < 1)
				cursorpos = 3;
		
			for(uint8_t i=14;i<SCREEN_TILES_V;i++){
    875c:	1f 5f       	subi	r17, 0xFF	; 255
    875e:	1a 31       	cpi	r17, 0x1A	; 26
    8760:	89 f7       	brne	.-30     	; 0x8744 <UzenetMenu+0x86>
				SetTile(1,i,BLACK_TILE);
				SetTile(2,i,BLACK_TILE);
			}
			DrawBlock(1,12+(cursorpos*2),BLOCK_RED);
    8762:	60 2f       	mov	r22, r16
    8764:	70 e0       	ldi	r23, 0x00	; 0
    8766:	6a 5f       	subi	r22, 0xFA	; 250
    8768:	7f 4f       	sbci	r23, 0xFF	; 255
    876a:	66 0f       	add	r22, r22
    876c:	77 1f       	adc	r23, r23
    876e:	81 e0       	ldi	r24, 0x01	; 1
    8770:	41 e0       	ldi	r20, 0x01	; 1
    8772:	0e 94 95 45 	call	0x8b2a	; 0x8b2a <DrawBlock>

			
			DrawBigString(1,10,PSTR("CHOOSE PLAYER"));
    8776:	81 e0       	ldi	r24, 0x01	; 1
    8778:	6a e0       	ldi	r22, 0x0A	; 10
    877a:	40 ee       	ldi	r20, 0xE0	; 224
    877c:	56 e6       	ldi	r21, 0x66	; 102
    877e:	0e 94 e6 46 	call	0x8dcc	; 0x8dcc <DrawBigString>
			DrawBigString(3,14,PSTR("D3THADD3R"));
    8782:	83 e0       	ldi	r24, 0x03	; 3
    8784:	6e e0       	ldi	r22, 0x0E	; 14
    8786:	4e ee       	ldi	r20, 0xEE	; 238
    8788:	56 e6       	ldi	r21, 0x66	; 102
    878a:	0e 94 e6 46 	call	0x8dcc	; 0x8dcc <DrawBigString>
			DrawBigString(3,16,PSTR("EASY CPU"));
    878e:	83 e0       	ldi	r24, 0x03	; 3
    8790:	60 e1       	ldi	r22, 0x10	; 16
    8792:	48 ef       	ldi	r20, 0xF8	; 248
    8794:	56 e6       	ldi	r21, 0x66	; 102
    8796:	0e 94 e6 46 	call	0x8dcc	; 0x8dcc <DrawBigString>
			DrawBigString(3,18,PSTR("GOOD CPU"));
    879a:	83 e0       	ldi	r24, 0x03	; 3
    879c:	62 e1       	ldi	r22, 0x12	; 18
    879e:	41 e0       	ldi	r20, 0x01	; 1
    87a0:	57 e6       	ldi	r21, 0x67	; 103
    87a2:	0e 94 e6 46 	call	0x8dcc	; 0x8dcc <DrawBigString>
			DrawBigString(3,20,PSTR("ARTCFOX"));
    87a6:	83 e0       	ldi	r24, 0x03	; 3
    87a8:	64 e1       	ldi	r22, 0x14	; 20
    87aa:	4a e0       	ldi	r20, 0x0A	; 10
    87ac:	57 e6       	ldi	r21, 0x67	; 103
    87ae:	0e 94 e6 46 	call	0x8dcc	; 0x8dcc <DrawBigString>
			if(totalplayers > playerpos+4)
				DrawBigString(3,22,PSTR("\\MORE^"));
    87b2:	83 e0       	ldi	r24, 0x03	; 3
    87b4:	66 e1       	ldi	r22, 0x16	; 22
    87b6:	42 e1       	ldi	r20, 0x12	; 18
    87b8:	57 e6       	ldi	r21, 0x67	; 103
    87ba:	0e 94 e6 46 	call	0x8dcc	; 0x8dcc <DrawBigString>
    87be:	a4 cf       	rjmp	.-184    	; 0x8708 <UzenetMenu+0x4a>

000087c0 <TitleScreen>:
23,17,
26,17,

};

void TitleScreen(){
    87c0:	ff 92       	push	r15
    87c2:	0f 93       	push	r16
    87c4:	1f 93       	push	r17
    87c6:	cf 93       	push	r28
    87c8:	df 93       	push	r29



void FillVram(uint8_t t){
	for(uint16_t i=0;i<VRAM_SIZE;i++)
		vram[i] = t;
    87ca:	42 e4       	ldi	r20, 0x42	; 66
    87cc:	f4 2e       	mov	r15, r20
26,17,

};

void TitleScreen(){
TITLE_SCREEN_TOP:
    87ce:	e0 e2       	ldi	r30, 0x20	; 32
    87d0:	f1 e0       	ldi	r31, 0x01	; 1



void FillVram(uint8_t t){
	for(uint16_t i=0;i<VRAM_SIZE;i++)
		vram[i] = t;
    87d2:	f1 92       	st	Z+, r15




void FillVram(uint8_t t){
	for(uint16_t i=0;i<VRAM_SIZE;i++)
    87d4:	84 e0       	ldi	r24, 0x04	; 4
    87d6:	ec 32       	cpi	r30, 0x2C	; 44
    87d8:	f8 07       	cpc	r31, r24
    87da:	d9 f7       	brne	.-10     	; 0x87d2 <TitleScreen+0x12>
    87dc:	c0 ee       	ldi	r28, 0xE0	; 224
    87de:	d5 e6       	ldi	r29, 0x65	; 101
p.level = TESTLEVEL;
return;
#endif
	FillVram(BLACK_TILE+RAM_TILES_COUNT);
	for(uint8_t i=0;i<sizeof(title_block_coords);i+=2)
		DrawBlock(pgm_read_byte(&title_block_coords[i]),pgm_read_byte(&title_block_coords[i+1]),BLOCK_STAR);
    87e0:	fe 01       	movw	r30, r28
    87e2:	84 91       	lpm	r24, Z+
    87e4:	21 96       	adiw	r28, 0x01	; 1
    87e6:	fe 01       	movw	r30, r28
    87e8:	64 91       	lpm	r22, Z+
    87ea:	46 e0       	ldi	r20, 0x06	; 6
    87ec:	0e 94 95 45 	call	0x8b2a	; 0x8b2a <DrawBlock>
    87f0:	21 96       	adiw	r28, 0x01	; 1
#ifdef FASTDEBUG
p.level = TESTLEVEL;
return;
#endif
	FillVram(BLACK_TILE+RAM_TILES_COUNT);
	for(uint8_t i=0;i<sizeof(title_block_coords);i+=2)
    87f2:	f6 e6       	ldi	r31, 0x66	; 102
    87f4:	c2 36       	cpi	r28, 0x62	; 98
    87f6:	df 07       	cpc	r29, r31
    87f8:	99 f7       	brne	.-26     	; 0x87e0 <TitleScreen+0x20>
    87fa:	01 e0       	ldi	r16, 0x01	; 1
		DrawBlock(pgm_read_byte(&title_block_coords[i]),pgm_read_byte(&title_block_coords[i+1]),BLOCK_STAR);
	
	uint8_t cursorpos = 1;
	while(1){
		DrawBigString(9,20,PSTR("SINGLE"));
    87fc:	89 e0       	ldi	r24, 0x09	; 9
    87fe:	64 e1       	ldi	r22, 0x14	; 20
    8800:	4d e8       	ldi	r20, 0x8D	; 141
    8802:	56 e6       	ldi	r21, 0x66	; 102
    8804:	0e 94 e6 46 	call	0x8dcc	; 0x8dcc <DrawBigString>
		DrawBigString(9,22,PSTR("VERSUS"));
    8808:	89 e0       	ldi	r24, 0x09	; 9
    880a:	66 e1       	ldi	r22, 0x16	; 22
    880c:	44 e9       	ldi	r20, 0x94	; 148
    880e:	56 e6       	ldi	r21, 0x66	; 102
    8810:	0e 94 e6 46 	call	0x8dcc	; 0x8dcc <DrawBigString>
		DrawBigString(9,24,PSTR("UZENET"));
    8814:	89 e0       	ldi	r24, 0x09	; 9
    8816:	68 e1       	ldi	r22, 0x18	; 24
    8818:	4b e9       	ldi	r20, 0x9B	; 155
    881a:	56 e6       	ldi	r21, 0x66	; 102
    881c:	0e 94 e6 46 	call	0x8dcc	; 0x8dcc <DrawBigString>
    8820:	14 e1       	ldi	r17, 0x14	; 20
		for(uint8_t i=20;i<SCREEN_TILES_V;i++){
			SetTile(7,i,BLACK_TILE);
    8822:	87 e0       	ldi	r24, 0x07	; 7
    8824:	61 2f       	mov	r22, r17
    8826:	44 e2       	ldi	r20, 0x24	; 36
    8828:	50 e0       	ldi	r21, 0x00	; 0
    882a:	0e 94 3b 38 	call	0x7076	; 0x7076 <SetTile>
			SetTile(8,i,BLACK_TILE);
    882e:	88 e0       	ldi	r24, 0x08	; 8
    8830:	61 2f       	mov	r22, r17
    8832:	44 e2       	ldi	r20, 0x24	; 36
    8834:	50 e0       	ldi	r21, 0x00	; 0
    8836:	0e 94 3b 38 	call	0x7076	; 0x7076 <SetTile>
	uint8_t cursorpos = 1;
	while(1){
		DrawBigString(9,20,PSTR("SINGLE"));
		DrawBigString(9,22,PSTR("VERSUS"));
		DrawBigString(9,24,PSTR("UZENET"));
		for(uint8_t i=20;i<SCREEN_TILES_V;i++){
    883a:	1f 5f       	subi	r17, 0xFF	; 255
    883c:	1a 31       	cpi	r17, 0x1A	; 26
    883e:	89 f7       	brne	.-30     	; 0x8822 <TitleScreen+0x62>
			SetTile(7,i,BLACK_TILE);
			SetTile(8,i,BLACK_TILE);
		}

		if(padState[0] & BTN_UP && !(oldPadState[0] & BTN_UP))
    8840:	80 91 1d 0e 	lds	r24, 0x0E1D
    8844:	98 2f       	mov	r25, r24
    8846:	84 ff       	sbrs	r24, 4
    8848:	06 c0       	rjmp	.+12     	; 0x8856 <TitleScreen+0x96>
    884a:	80 91 1a 0e 	lds	r24, 0x0E1A
    884e:	84 fd       	sbrc	r24, 4
    8850:	02 c0       	rjmp	.+4      	; 0x8856 <TitleScreen+0x96>
			cursorpos--;
    8852:	01 50       	subi	r16, 0x01	; 1
    8854:	07 c0       	rjmp	.+14     	; 0x8864 <TitleScreen+0xa4>
		else if(padState[0] & BTN_DOWN && !(oldPadState[0] & BTN_DOWN))
    8856:	95 ff       	sbrs	r25, 5
    8858:	09 c0       	rjmp	.+18     	; 0x886c <TitleScreen+0xac>
    885a:	80 91 1a 0e 	lds	r24, 0x0E1A
    885e:	85 fd       	sbrc	r24, 5
    8860:	05 c0       	rjmp	.+10     	; 0x886c <TitleScreen+0xac>
			cursorpos++;
    8862:	0f 5f       	subi	r16, 0xFF	; 255
		if(cursorpos == 4)
    8864:	04 30       	cpi	r16, 0x04	; 4
    8866:	11 f4       	brne	.+4      	; 0x886c <TitleScreen+0xac>
    8868:	01 e0       	ldi	r16, 0x01	; 1
    886a:	03 c0       	rjmp	.+6      	; 0x8872 <TitleScreen+0xb2>
			cursorpos = 1;
		else if(cursorpos < 1)
    886c:	00 23       	and	r16, r16
    886e:	09 f4       	brne	.+2      	; 0x8872 <TitleScreen+0xb2>
    8870:	03 e0       	ldi	r16, 0x03	; 3
			cursorpos = 3;

		DrawBlock(7,18+(cursorpos*2),BLOCK_BLUE);
    8872:	60 2f       	mov	r22, r16
    8874:	70 e0       	ldi	r23, 0x00	; 0
    8876:	67 5f       	subi	r22, 0xF7	; 247
    8878:	7f 4f       	sbci	r23, 0xFF	; 255
    887a:	66 0f       	add	r22, r22
    887c:	77 1f       	adc	r23, r23
    887e:	87 e0       	ldi	r24, 0x07	; 7
    8880:	43 e0       	ldi	r20, 0x03	; 3
    8882:	0e 94 95 45 	call	0x8b2a	; 0x8b2a <DrawBlock>
		
		if(padState[0] & BTN_START && !(oldPadState[0] & BTN_START)){
    8886:	80 91 1d 0e 	lds	r24, 0x0E1D
    888a:	83 ff       	sbrs	r24, 3
    888c:	1f c0       	rjmp	.+62     	; 0x88cc <TitleScreen+0x10c>
    888e:	80 91 1a 0e 	lds	r24, 0x0E1A
    8892:	83 fd       	sbrc	r24, 3
    8894:	1b c0       	rjmp	.+54     	; 0x88cc <TitleScreen+0x10c>
			if(cursorpos == 2 && (DetectControllers() & 0b00001100) != 0b00000100){//cannot play 2 player game without a second controller
    8896:	02 30       	cpi	r16, 0x02	; 2
    8898:	59 f4       	brne	.+22     	; 0x88b0 <TitleScreen+0xf0>
    889a:	0e 94 1d 39 	call	0x723a	; 0x723a <DetectControllers>
    889e:	8c 70       	andi	r24, 0x0C	; 12
    88a0:	84 30       	cpi	r24, 0x04	; 4
    88a2:	31 f0       	breq	.+12     	; 0x88b0 <TitleScreen+0xf0>
				TriggerFx(1,255,true);
    88a4:	81 e0       	ldi	r24, 0x01	; 1
    88a6:	6f ef       	ldi	r22, 0xFF	; 255
    88a8:	41 e0       	ldi	r20, 0x01	; 1
    88aa:	0e 94 36 3d 	call	0x7a6c	; 0x7a6c <TriggerFx>
    88ae:	0e c0       	rjmp	.+28     	; 0x88cc <TitleScreen+0x10c>
			}else{
				FadeOut(2,true);
    88b0:	82 e0       	ldi	r24, 0x02	; 2
    88b2:	61 e0       	ldi	r22, 0x01	; 1
    88b4:	0e 94 22 43 	call	0x8644	; 0x8644 <FadeOut>
				if(cursorpos == 1){//single
    88b8:	01 30       	cpi	r16, 0x01	; 1
    88ba:	69 f0       	breq	.+26     	; 0x88d6 <TitleScreen+0x116>
					return;
				}else if(cursorpos == 2){//vs
    88bc:	02 30       	cpi	r16, 0x02	; 2
    88be:	59 f0       	breq	.+22     	; 0x88d6 <TitleScreen+0x116>
					return;
				}else{//uzenet
					if(UzenetMenu())
    88c0:	0e 94 5f 43 	call	0x86be	; 0x86be <UzenetMenu>
    88c4:	88 23       	and	r24, r24
    88c6:	09 f4       	brne	.+2      	; 0x88ca <TitleScreen+0x10a>
    88c8:	82 cf       	rjmp	.-252    	; 0x87ce <TitleScreen+0xe>
    88ca:	05 c0       	rjmp	.+10     	; 0x88d6 <TitleScreen+0x116>
						return;
					goto TITLE_SCREEN_TOP;
				}
			}
		}
		WaitVsync(1);
    88cc:	81 e0       	ldi	r24, 0x01	; 1
    88ce:	90 e0       	ldi	r25, 0x00	; 0
    88d0:	0e 94 f3 42 	call	0x85e6	; 0x85e6 <WaitVsync>
    88d4:	93 cf       	rjmp	.-218    	; 0x87fc <TitleScreen+0x3c>
	}
}
    88d6:	cd b7       	in	r28, 0x3d	; 61
    88d8:	de b7       	in	r29, 0x3e	; 62
    88da:	e5 e0       	ldi	r30, 0x05	; 5
    88dc:	0c 94 50 48 	jmp	0x90a0	; 0x90a0 <__epilogue_restores__+0x1a>

000088e0 <VsyncHook>:



void VsyncHook(){

	oldPadState[0] = padState[0];
    88e0:	80 91 1d 0e 	lds	r24, 0x0E1D
    88e4:	80 93 1a 0e 	sts	0x0E1A, r24
	padState[0] = ReadJoypad(0);
    88e8:	80 e0       	ldi	r24, 0x00	; 0
    88ea:	0e 94 58 38 	call	0x70b0	; 0x70b0 <ReadJoypad>
    88ee:	80 93 1d 0e 	sts	0x0E1D, r24

}
    88f2:	08 95       	ret

000088f4 <FillScreenPattern>:

}

#define FIRST_BORDER_TILE 36

void FillScreenPattern(){//return;
    88f4:	a0 e0       	ldi	r26, 0x00	; 0
    88f6:	b0 e0       	ldi	r27, 0x00	; 0
    88f8:	e0 e8       	ldi	r30, 0x80	; 128
    88fa:	f4 e4       	ldi	r31, 0x44	; 68
    88fc:	0c 94 30 48 	jmp	0x9060	; 0x9060 <__prologue_saves__+0x12>
    8900:	dd 24       	eor	r13, r13
    8902:	bb 24       	eor	r11, r11
    8904:	0b 2d       	mov	r16, r11
    8906:	5b e2       	ldi	r21, 0x2B	; 43
    8908:	c5 2e       	mov	r12, r21
    890a:	20 e0       	ldi	r18, 0x00	; 0
	uint8_t drew = 0;

	do{
		drew = 0;
		t = (FIRST_BORDER_TILE+8)-1;
		for(uint8_t i=y;i<y+4;i++){
    890c:	eb 2c       	mov	r14, r11
    890e:	ff 24       	eor	r15, r15
    8910:	83 e0       	ldi	r24, 0x03	; 3
    8912:	90 e0       	ldi	r25, 0x00	; 0
    8914:	e8 0e       	add	r14, r24
    8916:	f9 1e       	adc	r15, r25
			for(uint8_t j=x;j<x+2;j++){
    8918:	cd 2d       	mov	r28, r13
    891a:	d0 e0       	ldi	r29, 0x00	; 0
    891c:	21 96       	adiw	r28, 0x01	; 1
    891e:	13 c0       	rjmp	.+38     	; 0x8946 <FillScreenPattern+0x52>
				t++;
    8920:	c3 94       	inc	r12
				if(j >= SCREEN_TILES_H || i >= SCREEN_TILES_V)
    8922:	1e 31       	cpi	r17, 0x1E	; 30
    8924:	48 f4       	brcc	.+18     	; 0x8938 <FillScreenPattern+0x44>
    8926:	0a 31       	cpi	r16, 0x1A	; 26
    8928:	38 f4       	brcc	.+14     	; 0x8938 <FillScreenPattern+0x44>
					continue;
				drew = 1;
				SetTile(j,i,t);
    892a:	81 2f       	mov	r24, r17
    892c:	60 2f       	mov	r22, r16
    892e:	4c 2d       	mov	r20, r12
    8930:	50 e0       	ldi	r21, 0x00	; 0
    8932:	0e 94 3b 38 	call	0x7076	; 0x7076 <SetTile>
    8936:	21 e0       	ldi	r18, 0x01	; 1

	do{
		drew = 0;
		t = (FIRST_BORDER_TILE+8)-1;
		for(uint8_t i=y;i<y+4;i++){
			for(uint8_t j=x;j<x+2;j++){
    8938:	1f 5f       	subi	r17, 0xFF	; 255
    893a:	81 2f       	mov	r24, r17
    893c:	90 e0       	ldi	r25, 0x00	; 0
    893e:	c8 17       	cp	r28, r24
    8940:	d9 07       	cpc	r29, r25
    8942:	74 f7       	brge	.-36     	; 0x8920 <FillScreenPattern+0x2c>
	uint8_t drew = 0;

	do{
		drew = 0;
		t = (FIRST_BORDER_TILE+8)-1;
		for(uint8_t i=y;i<y+4;i++){
    8944:	0f 5f       	subi	r16, 0xFF	; 255
    8946:	80 2f       	mov	r24, r16
    8948:	90 e0       	ldi	r25, 0x00	; 0
    894a:	e8 16       	cp	r14, r24
    894c:	f9 06       	cpc	r15, r25
    894e:	14 f0       	brlt	.+4      	; 0x8954 <FillScreenPattern+0x60>
    8950:	1d 2d       	mov	r17, r13
    8952:	f3 cf       	rjmp	.-26     	; 0x893a <FillScreenPattern+0x46>
					continue;
				drew = 1;
				SetTile(j,i,t);
			}
		}
		x += 2;
    8954:	92 e0       	ldi	r25, 0x02	; 2
    8956:	d9 0e       	add	r13, r25
		if(x >= SCREEN_TILES_H){
    8958:	8d e1       	ldi	r24, 0x1D	; 29
    895a:	8d 15       	cp	r24, r13
    895c:	18 f4       	brcc	.+6      	; 0x8964 <FillScreenPattern+0x70>
			x = 0;
			y += 4;
    895e:	94 e0       	ldi	r25, 0x04	; 4
    8960:	b9 0e       	add	r11, r25
    8962:	dd 24       	eor	r13, r13
		}
	}while(drew);
    8964:	22 23       	and	r18, r18
    8966:	71 f6       	brne	.-100    	; 0x8904 <FillScreenPattern+0x10>
}
    8968:	cd b7       	in	r28, 0x3d	; 61
    896a:	de b7       	in	r29, 0x3e	; 62
    896c:	e9 e0       	ldi	r30, 0x09	; 9
    896e:	0c 94 4c 48 	jmp	0x9098	; 0x9098 <__epilogue_restores__+0x12>

00008972 <DrawRectangle>:

void DrawRectangle(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t t){
    8972:	a0 e0       	ldi	r26, 0x00	; 0
    8974:	b0 e0       	ldi	r27, 0x00	; 0
    8976:	ef eb       	ldi	r30, 0xBF	; 191
    8978:	f4 e4       	ldi	r31, 0x44	; 68
    897a:	0c 94 31 48 	jmp	0x9062	; 0x9062 <__prologue_saves__+0x14>
    897e:	d8 2e       	mov	r13, r24
    8980:	c0 2e       	mov	r12, r16
    8982:	06 2f       	mov	r16, r22
	for(uint8_t i=y;i<y+h;i++)
    8984:	e6 2e       	mov	r14, r22
    8986:	ff 24       	eor	r15, r15
    8988:	e2 0e       	add	r14, r18
    898a:	f1 1c       	adc	r15, r1
		for(uint8_t j=x;j<x+w;j++)
    898c:	c8 2f       	mov	r28, r24
    898e:	d0 e0       	ldi	r29, 0x00	; 0
    8990:	c4 0f       	add	r28, r20
    8992:	d1 1d       	adc	r29, r1
    8994:	0d c0       	rjmp	.+26     	; 0x89b0 <DrawRectangle+0x3e>
			SetTile(j,i,t);
    8996:	81 2f       	mov	r24, r17
    8998:	60 2f       	mov	r22, r16
    899a:	4c 2d       	mov	r20, r12
    899c:	50 e0       	ldi	r21, 0x00	; 0
    899e:	0e 94 3b 38 	call	0x7076	; 0x7076 <SetTile>
	}while(drew);
}

void DrawRectangle(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t t){
	for(uint8_t i=y;i<y+h;i++)
		for(uint8_t j=x;j<x+w;j++)
    89a2:	1f 5f       	subi	r17, 0xFF	; 255
    89a4:	81 2f       	mov	r24, r17
    89a6:	90 e0       	ldi	r25, 0x00	; 0
    89a8:	8c 17       	cp	r24, r28
    89aa:	9d 07       	cpc	r25, r29
    89ac:	a4 f3       	brlt	.-24     	; 0x8996 <DrawRectangle+0x24>
		}
	}while(drew);
}

void DrawRectangle(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t t){
	for(uint8_t i=y;i<y+h;i++)
    89ae:	0f 5f       	subi	r16, 0xFF	; 255
    89b0:	80 2f       	mov	r24, r16
    89b2:	90 e0       	ldi	r25, 0x00	; 0
    89b4:	8e 15       	cp	r24, r14
    89b6:	9f 05       	cpc	r25, r15
    89b8:	14 f4       	brge	.+4      	; 0x89be <DrawRectangle+0x4c>
    89ba:	1d 2d       	mov	r17, r13
    89bc:	f3 cf       	rjmp	.-26     	; 0x89a4 <DrawRectangle+0x32>
		for(uint8_t j=x;j<x+w;j++)
			SetTile(j,i,t);
}
    89be:	cd b7       	in	r28, 0x3d	; 61
    89c0:	de b7       	in	r29, 0x3e	; 62
    89c2:	e8 e0       	ldi	r30, 0x08	; 8
    89c4:	0c 94 4d 48 	jmp	0x909a	; 0x909a <__epilogue_restores__+0x14>

000089c8 <DrawFrame>:
void DrawFrame(uint8_t x, uint8_t y, uint8_t w, uint8_t h){
    89c8:	a0 e0       	ldi	r26, 0x00	; 0
    89ca:	b0 e0       	ldi	r27, 0x00	; 0
    89cc:	ea ee       	ldi	r30, 0xEA	; 234
    89ce:	f4 e4       	ldi	r31, 0x44	; 68
    89d0:	0c 94 2c 48 	jmp	0x9058	; 0x9058 <__prologue_saves__+0xa>
    89d4:	b8 2e       	mov	r11, r24
    89d6:	16 2f       	mov	r17, r22
    89d8:	94 2e       	mov	r9, r20
    89da:	a2 2e       	mov	r10, r18
	w--;h--;
    89dc:	9a 94       	dec	r9
    89de:	aa 94       	dec	r10
	DrawRectangle(x,y,w,h,FIRST_BORDER_TILE);
    89e0:	49 2d       	mov	r20, r9
    89e2:	2a 2d       	mov	r18, r10
    89e4:	04 e2       	ldi	r16, 0x24	; 36
    89e6:	0e 94 b9 44 	call	0x8972	; 0x8972 <DrawRectangle>
    89ea:	0b 2d       	mov	r16, r11
    89ec:	0f 5f       	subi	r16, 0xFF	; 255
    89ee:	88 24       	eor	r8, r8
    89f0:	83 94       	inc	r8
    89f2:	cc 24       	eor	r12, r12
    89f4:	dd 24       	eor	r13, r13

	for(uint8_t i=1;i<w;i++){//draw horizontal lines
		if(x+i >= SCREEN_TILES_H)
    89f6:	eb 2c       	mov	r14, r11
    89f8:	ff 24       	eor	r15, r15
    89fa:	08 94       	sec
    89fc:	e1 1c       	adc	r14, r1
    89fe:	f1 1c       	adc	r15, r1
			break;

		if(y+0 < SCREEN_TILES_V )
			SetTile(x+i,y+0,FIRST_BORDER_TILE+7);
		if(y+h < SCREEN_TILES_V )
    8a00:	c1 2f       	mov	r28, r17
    8a02:	d0 e0       	ldi	r29, 0x00	; 0
    8a04:	ca 0d       	add	r28, r10
    8a06:	d1 1d       	adc	r29, r1
			SetTile(x+i,y+h,FIRST_BORDER_TILE+7);
    8a08:	7a 2c       	mov	r7, r10
    8a0a:	71 0e       	add	r7, r17
    8a0c:	2d c0       	rjmp	.+90     	; 0x8a68 <DrawFrame+0xa0>
void DrawFrame(uint8_t x, uint8_t y, uint8_t w, uint8_t h){
	w--;h--;
	DrawRectangle(x,y,w,h,FIRST_BORDER_TILE);

	for(uint8_t i=1;i<w;i++){//draw horizontal lines
		if(x+i >= SCREEN_TILES_H)
    8a0e:	c7 01       	movw	r24, r14
    8a10:	8c 0d       	add	r24, r12
    8a12:	9d 1d       	adc	r25, r13
    8a14:	4e 97       	sbiw	r24, 0x1e	; 30
    8a16:	94 f0       	brlt	.+36     	; 0x8a3c <DrawFrame+0x74>
    8a18:	01 2f       	mov	r16, r17
    8a1a:	0f 5f       	subi	r16, 0xFF	; 255
    8a1c:	88 24       	eor	r8, r8
    8a1e:	83 94       	inc	r8
    8a20:	cc 24       	eor	r12, r12
    8a22:	dd 24       	eor	r13, r13
			SetTile(x+i,y+h,FIRST_BORDER_TILE+7);

	}

	for(uint8_t i=1;i<h;i++){//draw vertical lines
		if(y+i >= SCREEN_TILES_V)
    8a24:	e1 2e       	mov	r14, r17
    8a26:	ff 24       	eor	r15, r15
    8a28:	08 94       	sec
    8a2a:	e1 1c       	adc	r14, r1
    8a2c:	f1 1c       	adc	r15, r1
			break;

		if(x+0 < SCREEN_TILES_H )
			SetTile(x+0,y+i,FIRST_BORDER_TILE+5);
		if(x+w < SCREEN_TILES_H )
    8a2e:	cb 2d       	mov	r28, r11
    8a30:	d0 e0       	ldi	r29, 0x00	; 0
    8a32:	c9 0d       	add	r28, r9
    8a34:	d1 1d       	adc	r29, r1
			SetTile(x+w,y+i,FIRST_BORDER_TILE+6);
    8a36:	79 2c       	mov	r7, r9
    8a38:	7b 0c       	add	r7, r11
    8a3a:	35 c0       	rjmp	.+106    	; 0x8aa6 <DrawFrame+0xde>

	for(uint8_t i=1;i<w;i++){//draw horizontal lines
		if(x+i >= SCREEN_TILES_H)
			break;

		if(y+0 < SCREEN_TILES_V )
    8a3c:	1a 31       	cpi	r17, 0x1A	; 26
    8a3e:	30 f4       	brcc	.+12     	; 0x8a4c <DrawFrame+0x84>
			SetTile(x+i,y+0,FIRST_BORDER_TILE+7);
    8a40:	80 2f       	mov	r24, r16
    8a42:	61 2f       	mov	r22, r17
    8a44:	4b e2       	ldi	r20, 0x2B	; 43
    8a46:	50 e0       	ldi	r21, 0x00	; 0
    8a48:	0e 94 3b 38 	call	0x7076	; 0x7076 <SetTile>
		if(y+h < SCREEN_TILES_V )
    8a4c:	ca 31       	cpi	r28, 0x1A	; 26
    8a4e:	d1 05       	cpc	r29, r1
    8a50:	34 f4       	brge	.+12     	; 0x8a5e <DrawFrame+0x96>
			SetTile(x+i,y+h,FIRST_BORDER_TILE+7);
    8a52:	80 2f       	mov	r24, r16
    8a54:	67 2d       	mov	r22, r7
    8a56:	4b e2       	ldi	r20, 0x2B	; 43
    8a58:	50 e0       	ldi	r21, 0x00	; 0
    8a5a:	0e 94 3b 38 	call	0x7076	; 0x7076 <SetTile>
}
void DrawFrame(uint8_t x, uint8_t y, uint8_t w, uint8_t h){
	w--;h--;
	DrawRectangle(x,y,w,h,FIRST_BORDER_TILE);

	for(uint8_t i=1;i<w;i++){//draw horizontal lines
    8a5e:	83 94       	inc	r8
    8a60:	08 94       	sec
    8a62:	c1 1c       	adc	r12, r1
    8a64:	d1 1c       	adc	r13, r1
    8a66:	0f 5f       	subi	r16, 0xFF	; 255
    8a68:	89 14       	cp	r8, r9
    8a6a:	88 f2       	brcs	.-94     	; 0x8a0e <DrawFrame+0x46>
    8a6c:	d5 cf       	rjmp	.-86     	; 0x8a18 <DrawFrame+0x50>
			SetTile(x+i,y+h,FIRST_BORDER_TILE+7);

	}

	for(uint8_t i=1;i<h;i++){//draw vertical lines
		if(y+i >= SCREEN_TILES_V)
    8a6e:	c7 01       	movw	r24, r14
    8a70:	8c 0d       	add	r24, r12
    8a72:	9d 1d       	adc	r25, r13
    8a74:	4a 97       	sbiw	r24, 0x1a	; 26
    8a76:	cc f4       	brge	.+50     	; 0x8aaa <DrawFrame+0xe2>
			break;

		if(x+0 < SCREEN_TILES_H )
    8a78:	8d e1       	ldi	r24, 0x1D	; 29
    8a7a:	8b 15       	cp	r24, r11
    8a7c:	30 f0       	brcs	.+12     	; 0x8a8a <DrawFrame+0xc2>
			SetTile(x+0,y+i,FIRST_BORDER_TILE+5);
    8a7e:	8b 2d       	mov	r24, r11
    8a80:	60 2f       	mov	r22, r16
    8a82:	49 e2       	ldi	r20, 0x29	; 41
    8a84:	50 e0       	ldi	r21, 0x00	; 0
    8a86:	0e 94 3b 38 	call	0x7076	; 0x7076 <SetTile>
		if(x+w < SCREEN_TILES_H )
    8a8a:	ce 31       	cpi	r28, 0x1E	; 30
    8a8c:	d1 05       	cpc	r29, r1
    8a8e:	34 f4       	brge	.+12     	; 0x8a9c <DrawFrame+0xd4>
			SetTile(x+w,y+i,FIRST_BORDER_TILE+6);
    8a90:	87 2d       	mov	r24, r7
    8a92:	60 2f       	mov	r22, r16
    8a94:	4a e2       	ldi	r20, 0x2A	; 42
    8a96:	50 e0       	ldi	r21, 0x00	; 0
    8a98:	0e 94 3b 38 	call	0x7076	; 0x7076 <SetTile>
		if(y+h < SCREEN_TILES_V )
			SetTile(x+i,y+h,FIRST_BORDER_TILE+7);

	}

	for(uint8_t i=1;i<h;i++){//draw vertical lines
    8a9c:	83 94       	inc	r8
    8a9e:	08 94       	sec
    8aa0:	c1 1c       	adc	r12, r1
    8aa2:	d1 1c       	adc	r13, r1
    8aa4:	0f 5f       	subi	r16, 0xFF	; 255
    8aa6:	8a 14       	cp	r8, r10
    8aa8:	10 f3       	brcs	.-60     	; 0x8a6e <DrawFrame+0xa6>
			SetTile(x+w,y+i,FIRST_BORDER_TILE+6);

	}

	
	if(x+0 < SCREEN_TILES_H && y+0 < SCREEN_TILES_V)//top left corner
    8aaa:	8d e1       	ldi	r24, 0x1D	; 29
    8aac:	8b 15       	cp	r24, r11
    8aae:	40 f0       	brcs	.+16     	; 0x8ac0 <DrawFrame+0xf8>
    8ab0:	1a 31       	cpi	r17, 0x1A	; 26
    8ab2:	30 f4       	brcc	.+12     	; 0x8ac0 <DrawFrame+0xf8>
		SetTile(x+0,y+0,FIRST_BORDER_TILE+1);
    8ab4:	8b 2d       	mov	r24, r11
    8ab6:	61 2f       	mov	r22, r17
    8ab8:	45 e2       	ldi	r20, 0x25	; 37
    8aba:	50 e0       	ldi	r21, 0x00	; 0
    8abc:	0e 94 3b 38 	call	0x7076	; 0x7076 <SetTile>
	if(x+w < SCREEN_TILES_H && y+0 < SCREEN_TILES_V)//top right corner
    8ac0:	cb 2d       	mov	r28, r11
    8ac2:	d0 e0       	ldi	r29, 0x00	; 0
    8ac4:	c9 0d       	add	r28, r9
    8ac6:	d1 1d       	adc	r29, r1
    8ac8:	ce 31       	cpi	r28, 0x1E	; 30
    8aca:	d1 05       	cpc	r29, r1
    8acc:	4c f4       	brge	.+18     	; 0x8ae0 <DrawFrame+0x118>
    8ace:	1a 31       	cpi	r17, 0x1A	; 26
    8ad0:	38 f4       	brcc	.+14     	; 0x8ae0 <DrawFrame+0x118>
		SetTile(x+w,y+0,FIRST_BORDER_TILE+2);
    8ad2:	89 2d       	mov	r24, r9
    8ad4:	8b 0d       	add	r24, r11
    8ad6:	61 2f       	mov	r22, r17
    8ad8:	46 e2       	ldi	r20, 0x26	; 38
    8ada:	50 e0       	ldi	r21, 0x00	; 0
    8adc:	0e 94 3b 38 	call	0x7076	; 0x7076 <SetTile>
	if(x+0 < SCREEN_TILES_H && y+h < SCREEN_TILES_V)//bottom left corner
    8ae0:	8d e1       	ldi	r24, 0x1D	; 29
    8ae2:	8b 15       	cp	r24, r11
    8ae4:	68 f0       	brcs	.+26     	; 0x8b00 <DrawFrame+0x138>
    8ae6:	81 2f       	mov	r24, r17
    8ae8:	90 e0       	ldi	r25, 0x00	; 0
    8aea:	8a 0d       	add	r24, r10
    8aec:	91 1d       	adc	r25, r1
    8aee:	4a 97       	sbiw	r24, 0x1a	; 26
    8af0:	3c f4       	brge	.+14     	; 0x8b00 <DrawFrame+0x138>
		SetTile(x+0,y+h,FIRST_BORDER_TILE+3);
    8af2:	6a 2d       	mov	r22, r10
    8af4:	61 0f       	add	r22, r17
    8af6:	8b 2d       	mov	r24, r11
    8af8:	47 e2       	ldi	r20, 0x27	; 39
    8afa:	50 e0       	ldi	r21, 0x00	; 0
    8afc:	0e 94 3b 38 	call	0x7076	; 0x7076 <SetTile>
	if(x+w < SCREEN_TILES_H && y+h < SCREEN_TILES_V)//bottom right corner
    8b00:	6e 97       	sbiw	r28, 0x1e	; 30
    8b02:	74 f4       	brge	.+28     	; 0x8b20 <DrawFrame+0x158>
    8b04:	81 2f       	mov	r24, r17
    8b06:	90 e0       	ldi	r25, 0x00	; 0
    8b08:	8a 0d       	add	r24, r10
    8b0a:	91 1d       	adc	r25, r1
    8b0c:	4a 97       	sbiw	r24, 0x1a	; 26
    8b0e:	44 f4       	brge	.+16     	; 0x8b20 <DrawFrame+0x158>
		SetTile(x+w,y+h,FIRST_BORDER_TILE+4);
    8b10:	a1 0e       	add	r10, r17
    8b12:	89 2d       	mov	r24, r9
    8b14:	8b 0d       	add	r24, r11
    8b16:	6a 2d       	mov	r22, r10
    8b18:	48 e2       	ldi	r20, 0x28	; 40
    8b1a:	50 e0       	ldi	r21, 0x00	; 0
    8b1c:	0e 94 3b 38 	call	0x7076	; 0x7076 <SetTile>


}
    8b20:	cd b7       	in	r28, 0x3d	; 61
    8b22:	de b7       	in	r29, 0x3e	; 62
    8b24:	ed e0       	ldi	r30, 0x0D	; 13
    8b26:	0c 94 48 48 	jmp	0x9090	; 0x9090 <__epilogue_restores__+0xa>

00008b2a <DrawBlock>:


void DrawBlock(uint8_t x, uint8_t y, uint8_t b){
	if(x >= SCREEN_TILES_H || y >= SCREEN_TILES_V)
    8b2a:	8e 31       	cpi	r24, 0x1E	; 30
    8b2c:	90 f5       	brcc	.+100    	; 0x8b92 <DrawBlock+0x68>
    8b2e:	6a 31       	cpi	r22, 0x1A	; 26
    8b30:	80 f5       	brcc	.+96     	; 0x8b92 <DrawBlock+0x68>
		return;
	
	uint16_t voff = (y*VRAM_TILES_H)+x;
    8b32:	9e e1       	ldi	r25, 0x1E	; 30
    8b34:	69 9f       	mul	r22, r25
    8b36:	d0 01       	movw	r26, r0
    8b38:	11 24       	eor	r1, r1
    8b3a:	a8 0f       	add	r26, r24
    8b3c:	b1 1d       	adc	r27, r1

	if(b){
    8b3e:	44 23       	and	r20, r20
    8b40:	d9 f0       	breq	.+54     	; 0x8b78 <DrawBlock+0x4e>
		b--;
		uint8_t toff = (b<<2)+RAM_TILES_COUNT;
    8b42:	41 50       	subi	r20, 0x01	; 1
    8b44:	44 0f       	add	r20, r20
    8b46:	44 0f       	add	r20, r20
    8b48:	84 2f       	mov	r24, r20
    8b4a:	82 5e       	subi	r24, 0xE2	; 226
    8b4c:	9d 01       	movw	r18, r26
    8b4e:	22 5e       	subi	r18, 0xE2	; 226
    8b50:	3f 4f       	sbci	r19, 0xFF	; 255

		if(voff >= SCREEN_TILES_H){//don't draw piece preview over the border
    8b52:	ae 31       	cpi	r26, 0x1E	; 30
    8b54:	b1 05       	cpc	r27, r1
    8b56:	48 f0       	brcs	.+18     	; 0x8b6a <DrawBlock+0x40>
			vram[voff++] = toff++;
    8b58:	fd 01       	movw	r30, r26
    8b5a:	e0 5e       	subi	r30, 0xE0	; 224
    8b5c:	fe 4f       	sbci	r31, 0xFE	; 254
    8b5e:	80 83       	st	Z, r24
    8b60:	41 5e       	subi	r20, 0xE1	; 225
			vram[voff] = toff++;
    8b62:	af 5d       	subi	r26, 0xDF	; 223
    8b64:	be 4f       	sbci	r27, 0xFE	; 254
    8b66:	4c 93       	st	X, r20
    8b68:	8e 5f       	subi	r24, 0xFE	; 254
			voff += VRAM_TILES_H-1;
		}else
			voff += VRAM_TILES_H;

		vram[voff++] = toff++;
    8b6a:	f9 01       	movw	r30, r18
    8b6c:	e0 5e       	subi	r30, 0xE0	; 224
    8b6e:	fe 4f       	sbci	r31, 0xFE	; 254
    8b70:	80 83       	st	Z, r24
		vram[voff] = toff;
    8b72:	8f 5f       	subi	r24, 0xFF	; 255
    8b74:	81 83       	std	Z+1, r24	; 0x01
    8b76:	08 95       	ret
	}else{
		vram[voff++] = RAM_TILES_COUNT;
    8b78:	fd 01       	movw	r30, r26
    8b7a:	e0 5e       	subi	r30, 0xE0	; 224
    8b7c:	fe 4f       	sbci	r31, 0xFE	; 254
    8b7e:	90 83       	st	Z, r25
		vram[voff] = RAM_TILES_COUNT;
    8b80:	fd 01       	movw	r30, r26
    8b82:	ef 5d       	subi	r30, 0xDF	; 223
    8b84:	fe 4f       	sbci	r31, 0xFE	; 254
    8b86:	90 83       	st	Z, r25
		voff += VRAM_TILES_H-1;

		vram[voff++] = RAM_TILES_COUNT;
    8b88:	fd 01       	movw	r30, r26
    8b8a:	e2 5c       	subi	r30, 0xC2	; 194
    8b8c:	fe 4f       	sbci	r31, 0xFE	; 254
    8b8e:	90 83       	st	Z, r25
		vram[voff] = RAM_TILES_COUNT;
    8b90:	91 83       	std	Z+1, r25	; 0x01
    8b92:	08 95       	ret

00008b94 <UpdateFields>:

	return hasmoved;
}


void UpdateFields(){
    8b94:	a0 e0       	ldi	r26, 0x00	; 0
    8b96:	b0 e0       	ldi	r27, 0x00	; 0
    8b98:	e0 ed       	ldi	r30, 0xD0	; 208
    8b9a:	f5 e4       	ldi	r31, 0x45	; 69
    8b9c:	0c 94 29 48 	jmp	0x9052	; 0x9052 <__prologue_saves__+0x4>
    8ba0:	c4 e5       	ldi	r28, 0x54	; 84
    8ba2:	dd e0       	ldi	r29, 0x0D	; 13
    8ba4:	cc 24       	eor	r12, r12
    8ba6:	dd 24       	eor	r13, r13
			int8_t orbital_y = (p[i].y<<1)+pgm_read_byte(&orbital_pos_lookup[(i<<3)+(p[i].r<<1)+1]);
			DrawBlock(p[i].x,p[i].y,0);//blank out "planet block"
			DrawBlock(orbital_x,orbital_y,0);

			if(!p[i].state_count){
				p[i].state_count = 45;
    8ba8:	4d e2       	ldi	r20, 0x2D	; 45
    8baa:	64 2e       	mov	r6, r20
					if(p[i].state_count > 30)
						DrawBigChar((i?20:7),6,'0'+(p[i].state_count/30));
					else
						DrawBigString((i?17:4),6,PSTR("GO[["));
					if(--p[i].state_count == 0){
						p[i].state = STATE_MOVING;
    8bac:	3b e0       	ldi	r19, 0x0B	; 11
    8bae:	53 2e       	mov	r5, r19
						DrawRectangle((i?15:2),3,12,5,FIRST_BORDER_TILE);//blank out the round start text
    8bb0:	22 e0       	ldi	r18, 0x02	; 2
    8bb2:	42 2e       	mov	r4, r18
	for(uint8_t i=0;i<MAX_PLAYERS;i++){
		if(p[i].state == STATE_DISABLED)
			continue;
		if(p[i].state == STATE_AWAIT_READY){
			DrawBigString((i?15:2),3,PSTR("READY]"));
			if(p[!i].state == STATE_COUNT_DOWN){
    8bb4:	92 e3       	ldi	r25, 0x32	; 50
    8bb6:	89 2e       	mov	r8, r25
    8bb8:	91 2c       	mov	r9, r1
				p[i].state = STATE_COUNT_DOWN;
				p[i].state_count = p[!i].state_count;
			}
			if(padState[0] & BTN_START && !(oldPadState[0] & BTN_START)){
				p[i].state = STATE_COUNT_DOWN;
				p[i].state_count = (30*4)-1;
    8bba:	87 e7       	ldi	r24, 0x77	; 119
    8bbc:	78 2e       	mov	r7, r24
			continue;
		if(p[i].state == STATE_AWAIT_READY){
			DrawBigString((i?15:2),3,PSTR("READY]"));
			if(p[!i].state == STATE_COUNT_DOWN){
				p[i].state = STATE_COUNT_DOWN;
				p[i].state_count = p[!i].state_count;
    8bbe:	b4 e6       	ldi	r27, 0x64	; 100
    8bc0:	ab 2e       	mov	r10, r27
    8bc2:	b1 2c       	mov	r11, r1

void UpdateFields(){
	
	//GET INPUT STUFF
	for(uint8_t i=0;i<MAX_PLAYERS;i++){
		if(p[i].state == STATE_DISABLED)
    8bc4:	88 81       	ld	r24, Y
    8bc6:	88 23       	and	r24, r24
    8bc8:	09 f4       	brne	.+2      	; 0x8bcc <UpdateFields+0x38>
    8bca:	b5 c0       	rjmp	.+362    	; 0x8d36 <UpdateFields+0x1a2>
			continue;
		if(p[i].state == STATE_AWAIT_READY){
    8bcc:	81 30       	cpi	r24, 0x01	; 1
    8bce:	b1 f5       	brne	.+108    	; 0x8c3c <UpdateFields+0xa8>
    8bd0:	1c 2d       	mov	r17, r12
			DrawBigString((i?15:2),3,PSTR("READY]"));
    8bd2:	cc 20       	and	r12, r12
    8bd4:	11 f0       	breq	.+4      	; 0x8bda <UpdateFields+0x46>
    8bd6:	8f e0       	ldi	r24, 0x0F	; 15
    8bd8:	01 c0       	rjmp	.+2      	; 0x8bdc <UpdateFields+0x48>
    8bda:	82 e0       	ldi	r24, 0x02	; 2
    8bdc:	63 e0       	ldi	r22, 0x03	; 3
    8bde:	4a e7       	ldi	r20, 0x7A	; 122
    8be0:	56 e6       	ldi	r21, 0x66	; 102
    8be2:	0e 94 e6 46 	call	0x8dcc	; 0x8dcc <DrawBigString>
			if(p[!i].state == STATE_COUNT_DOWN){
    8be6:	80 e0       	ldi	r24, 0x00	; 0
    8be8:	90 e0       	ldi	r25, 0x00	; 0
    8bea:	11 23       	and	r17, r17
    8bec:	11 f4       	brne	.+4      	; 0x8bf2 <UpdateFields+0x5e>
    8bee:	81 e0       	ldi	r24, 0x01	; 1
    8bf0:	90 e0       	ldi	r25, 0x00	; 0
    8bf2:	88 9d       	mul	r24, r8
    8bf4:	f0 01       	movw	r30, r0
    8bf6:	89 9d       	mul	r24, r9
    8bf8:	f0 0d       	add	r31, r0
    8bfa:	98 9d       	mul	r25, r8
    8bfc:	f0 0d       	add	r31, r0
    8bfe:	11 24       	eor	r1, r1
    8c00:	ee 0f       	add	r30, r30
    8c02:	ff 1f       	adc	r31, r31
    8c04:	ec 5a       	subi	r30, 0xAC	; 172
    8c06:	f2 4f       	sbci	r31, 0xF2	; 242
    8c08:	e0 81       	ld	r30, Z
    8c0a:	e2 30       	cpi	r30, 0x02	; 2
    8c0c:	61 f4       	brne	.+24     	; 0x8c26 <UpdateFields+0x92>
				p[i].state = STATE_COUNT_DOWN;
    8c0e:	e8 83       	st	Y, r30
				p[i].state_count = p[!i].state_count;
    8c10:	8a 9d       	mul	r24, r10
    8c12:	f0 01       	movw	r30, r0
    8c14:	8b 9d       	mul	r24, r11
    8c16:	f0 0d       	add	r31, r0
    8c18:	9a 9d       	mul	r25, r10
    8c1a:	f0 0d       	add	r31, r0
    8c1c:	11 24       	eor	r1, r1
    8c1e:	ee 5a       	subi	r30, 0xAE	; 174
    8c20:	f2 4f       	sbci	r31, 0xF2	; 242
    8c22:	83 81       	ldd	r24, Z+3	; 0x03
    8c24:	89 83       	std	Y+1, r24	; 0x01
			}
			if(padState[0] & BTN_START && !(oldPadState[0] & BTN_START)){
    8c26:	80 91 1d 0e 	lds	r24, 0x0E1D
    8c2a:	83 ff       	sbrs	r24, 3
    8c2c:	84 c0       	rjmp	.+264    	; 0x8d36 <UpdateFields+0x1a2>
    8c2e:	80 91 1a 0e 	lds	r24, 0x0E1A
    8c32:	83 fd       	sbrc	r24, 3
    8c34:	80 c0       	rjmp	.+256    	; 0x8d36 <UpdateFields+0x1a2>
				p[i].state = STATE_COUNT_DOWN;
    8c36:	48 82       	st	Y, r4
				p[i].state_count = (30*4)-1;
    8c38:	79 82       	std	Y+1, r7	; 0x01
    8c3a:	7d c0       	rjmp	.+250    	; 0x8d36 <UpdateFields+0x1a2>
			}
		}else if(p[i].state == STATE_COUNT_DOWN){
    8c3c:	82 30       	cpi	r24, 0x02	; 2
    8c3e:	09 f0       	breq	.+2      	; 0x8c42 <UpdateFields+0xae>
    8c40:	47 c0       	rjmp	.+142    	; 0x8cd0 <UpdateFields+0x13c>
    8c42:	1c 2d       	mov	r17, r12
			DrawBigString((i?15:2),3,PSTR("READY["));
    8c44:	cc 20       	and	r12, r12
    8c46:	11 f0       	breq	.+4      	; 0x8c4c <UpdateFields+0xb8>
    8c48:	8f e0       	ldi	r24, 0x0F	; 15
    8c4a:	01 c0       	rjmp	.+2      	; 0x8c4e <UpdateFields+0xba>
    8c4c:	82 e0       	ldi	r24, 0x02	; 2
    8c4e:	63 e0       	ldi	r22, 0x03	; 3
    8c50:	41 e8       	ldi	r20, 0x81	; 129
    8c52:	56 e6       	ldi	r21, 0x66	; 102
    8c54:	0e 94 e6 46 	call	0x8dcc	; 0x8dcc <DrawBigString>
			if(p[!i].state >= STATE_COUNT_DOWN){
    8c58:	11 23       	and	r17, r17
    8c5a:	19 f4       	brne	.+6      	; 0x8c62 <UpdateFields+0xce>
    8c5c:	e6 e6       	ldi	r30, 0x66	; 102
    8c5e:	f0 e0       	ldi	r31, 0x00	; 0
    8c60:	02 c0       	rjmp	.+4      	; 0x8c66 <UpdateFields+0xd2>
    8c62:	e2 e0       	ldi	r30, 0x02	; 2
    8c64:	f0 e0       	ldi	r31, 0x00	; 0
    8c66:	ee 5a       	subi	r30, 0xAE	; 174
    8c68:	f2 4f       	sbci	r31, 0xF2	; 242
    8c6a:	80 81       	ld	r24, Z
    8c6c:	82 30       	cpi	r24, 0x02	; 2
    8c6e:	08 f4       	brcc	.+2      	; 0x8c72 <UpdateFields+0xde>
    8c70:	62 c0       	rjmp	.+196    	; 0x8d36 <UpdateFields+0x1a2>
				
					if(p[i].state_count > 30)
    8c72:	89 81       	ldd	r24, Y+1	; 0x01
    8c74:	8f 31       	cpi	r24, 0x1F	; 31
    8c76:	78 f0       	brcs	.+30     	; 0x8c96 <UpdateFields+0x102>
						DrawBigChar((i?20:7),6,'0'+(p[i].state_count/30));
    8c78:	11 23       	and	r17, r17
    8c7a:	11 f4       	brne	.+4      	; 0x8c80 <UpdateFields+0xec>
    8c7c:	27 e0       	ldi	r18, 0x07	; 7
    8c7e:	01 c0       	rjmp	.+2      	; 0x8c82 <UpdateFields+0xee>
    8c80:	24 e1       	ldi	r18, 0x14	; 20
    8c82:	6e e1       	ldi	r22, 0x1E	; 30
    8c84:	0e 94 f4 47 	call	0x8fe8	; 0x8fe8 <__udivmodqi4>
    8c88:	48 2f       	mov	r20, r24
    8c8a:	40 5d       	subi	r20, 0xD0	; 208
    8c8c:	82 2f       	mov	r24, r18
    8c8e:	66 e0       	ldi	r22, 0x06	; 6
    8c90:	0e 94 aa 46 	call	0x8d54	; 0x8d54 <DrawBigChar>
    8c94:	0a c0       	rjmp	.+20     	; 0x8caa <UpdateFields+0x116>
					else
						DrawBigString((i?17:4),6,PSTR("GO[["));
    8c96:	11 23       	and	r17, r17
    8c98:	11 f4       	brne	.+4      	; 0x8c9e <UpdateFields+0x10a>
    8c9a:	84 e0       	ldi	r24, 0x04	; 4
    8c9c:	01 c0       	rjmp	.+2      	; 0x8ca0 <UpdateFields+0x10c>
    8c9e:	81 e1       	ldi	r24, 0x11	; 17
    8ca0:	66 e0       	ldi	r22, 0x06	; 6
    8ca2:	48 e8       	ldi	r20, 0x88	; 136
    8ca4:	56 e6       	ldi	r21, 0x66	; 102
    8ca6:	0e 94 e6 46 	call	0x8dcc	; 0x8dcc <DrawBigString>
					if(--p[i].state_count == 0){
    8caa:	89 81       	ldd	r24, Y+1	; 0x01
    8cac:	81 50       	subi	r24, 0x01	; 1
    8cae:	89 83       	std	Y+1, r24	; 0x01
    8cb0:	88 23       	and	r24, r24
    8cb2:	09 f0       	breq	.+2      	; 0x8cb6 <UpdateFields+0x122>
    8cb4:	40 c0       	rjmp	.+128    	; 0x8d36 <UpdateFields+0x1a2>
						p[i].state = STATE_MOVING;
    8cb6:	58 82       	st	Y, r5
						DrawRectangle((i?15:2),3,12,5,FIRST_BORDER_TILE);//blank out the round start text
    8cb8:	11 23       	and	r17, r17
    8cba:	11 f4       	brne	.+4      	; 0x8cc0 <UpdateFields+0x12c>
    8cbc:	82 e0       	ldi	r24, 0x02	; 2
    8cbe:	01 c0       	rjmp	.+2      	; 0x8cc2 <UpdateFields+0x12e>
    8cc0:	8f e0       	ldi	r24, 0x0F	; 15
    8cc2:	63 e0       	ldi	r22, 0x03	; 3
    8cc4:	4c e0       	ldi	r20, 0x0C	; 12
    8cc6:	25 e0       	ldi	r18, 0x05	; 5
    8cc8:	04 e2       	ldi	r16, 0x24	; 36
    8cca:	0e 94 b9 44 	call	0x8972	; 0x8972 <DrawRectangle>
    8cce:	33 c0       	rjmp	.+102    	; 0x8d36 <UpdateFields+0x1a2>
					}
			}
		}else if(p[i].state == STATE_MOVING){
    8cd0:	8b 30       	cpi	r24, 0x0B	; 11
    8cd2:	89 f5       	brne	.+98     	; 0x8d36 <UpdateFields+0x1a2>
			const char orbital_pos_lookup[] PROGMEM = {
				0,-2,	2,0,	0,2,	-2,0,
			};
			
			//first blank out the block from last frame, in case it moves due to rotation or falling(avoid repeating code, same cycles in worst case)
			int8_t orbital_x = (p[i].x<<1)+pgm_read_byte(&orbital_pos_lookup[(i<<3)+(p[i].r<<1)+0]);//calculate vram position of the pieces current position
    8cd4:	0a 81       	ldd	r16, Y+2	; 0x02
    8cd6:	96 01       	movw	r18, r12
    8cd8:	e3 e0       	ldi	r30, 0x03	; 3
    8cda:	22 0f       	add	r18, r18
    8cdc:	33 1f       	adc	r19, r19
    8cde:	ea 95       	dec	r30
    8ce0:	e1 f7       	brne	.-8      	; 0x8cda <UpdateFields+0x146>
    8ce2:	8c 81       	ldd	r24, Y+4	; 0x04
    8ce4:	90 e0       	ldi	r25, 0x00	; 0
    8ce6:	88 0f       	add	r24, r24
    8ce8:	99 1f       	adc	r25, r25
    8cea:	28 0f       	add	r18, r24
    8cec:	39 1f       	adc	r19, r25
    8cee:	c9 01       	movw	r24, r18
    8cf0:	8f 5f       	subi	r24, 0xFF	; 255
    8cf2:	9e 4f       	sbci	r25, 0xFE	; 254
    8cf4:	fc 01       	movw	r30, r24
    8cf6:	e4 90       	lpm	r14, Z+
			int8_t orbital_y = (p[i].y<<1)+pgm_read_byte(&orbital_pos_lookup[(i<<3)+(p[i].r<<1)+1]);
    8cf8:	1b 81       	ldd	r17, Y+3	; 0x03
    8cfa:	2e 5f       	subi	r18, 0xFE	; 254
    8cfc:	3e 4f       	sbci	r19, 0xFE	; 254
    8cfe:	f9 01       	movw	r30, r18
    8d00:	f4 90       	lpm	r15, Z+
			DrawBlock(p[i].x,p[i].y,0);//blank out "planet block"
    8d02:	80 2f       	mov	r24, r16
    8d04:	61 2f       	mov	r22, r17
    8d06:	40 e0       	ldi	r20, 0x00	; 0
    8d08:	0e 94 95 45 	call	0x8b2a	; 0x8b2a <DrawBlock>
			DrawBlock(orbital_x,orbital_y,0);
    8d0c:	00 0f       	add	r16, r16
    8d0e:	11 0f       	add	r17, r17
    8d10:	f1 0e       	add	r15, r17
    8d12:	8e 2d       	mov	r24, r14
    8d14:	80 0f       	add	r24, r16
    8d16:	6f 2d       	mov	r22, r15
    8d18:	40 e0       	ldi	r20, 0x00	; 0
    8d1a:	0e 94 95 45 	call	0x8b2a	; 0x8b2a <DrawBlock>

			if(!p[i].state_count){
    8d1e:	89 81       	ldd	r24, Y+1	; 0x01
    8d20:	88 23       	and	r24, r24
    8d22:	39 f4       	brne	.+14     	; 0x8d32 <UpdateFields+0x19e>
				p[i].state_count = 45;
    8d24:	69 82       	std	Y+1, r6	; 0x01
				DrawBlock(p[i].x,p[i].y,p[i].blocks[0]);//draw the control block
    8d26:	8a 81       	ldd	r24, Y+2	; 0x02
    8d28:	6b 81       	ldd	r22, Y+3	; 0x03
    8d2a:	4d 81       	ldd	r20, Y+5	; 0x05
    8d2c:	0e 94 95 45 	call	0x8b2a	; 0x8b2a <DrawBlock>
    8d30:	02 c0       	rjmp	.+4      	; 0x8d36 <UpdateFields+0x1a2>
			}else
				p[i].state_count--;
    8d32:	81 50       	subi	r24, 0x01	; 1
    8d34:	89 83       	std	Y+1, r24	; 0x01
    8d36:	08 94       	sec
    8d38:	c1 1c       	adc	r12, r1
    8d3a:	d1 1c       	adc	r13, r1
    8d3c:	cc 59       	subi	r28, 0x9C	; 156
    8d3e:	df 4f       	sbci	r29, 0xFF	; 255


void UpdateFields(){
	
	//GET INPUT STUFF
	for(uint8_t i=0;i<MAX_PLAYERS;i++){
    8d40:	f2 e0       	ldi	r31, 0x02	; 2
    8d42:	cf 16       	cp	r12, r31
    8d44:	d1 04       	cpc	r13, r1
    8d46:	09 f0       	breq	.+2      	; 0x8d4a <UpdateFields+0x1b6>
    8d48:	3d cf       	rjmp	.-390    	; 0x8bc4 <UpdateFields+0x30>
				DrawBlock(p[i].x,p[i].y,p[i].blocks[0]);//draw the control block
			}else
				p[i].state_count--;
		}
	}
}
    8d4a:	cd b7       	in	r28, 0x3d	; 61
    8d4c:	de b7       	in	r29, 0x3e	; 62
    8d4e:	e0 e1       	ldi	r30, 0x10	; 16
    8d50:	0c 94 45 48 	jmp	0x908a	; 0x908a <__epilogue_restores__+0x4>

00008d54 <DrawBigChar>:
		for(uint8_t dx=0;dx<mapWidth;dx++)
			vram[((y+dy)*VRAM_TILES_H)+(x+dx)] = pgm_read_byte(&map[(dy*mapWidth)+dx+2]);					

}
*/
void DrawBigChar(uint8_t x, uint8_t y, uint8_t c){
    8d54:	28 2f       	mov	r18, r24
	if(c >= '0' && c <= '9')
    8d56:	e4 2f       	mov	r30, r20
    8d58:	e0 53       	subi	r30, 0x30	; 48
    8d5a:	ea 30       	cpi	r30, 0x0A	; 10
    8d5c:	40 f0       	brcs	.+16     	; 0x8d6e <DrawBigChar+0x1a>
		c -= '0';
	else if(c >= 'A' && c <= '^')
    8d5e:	84 2f       	mov	r24, r20
    8d60:	81 54       	subi	r24, 0x41	; 65
    8d62:	8e 31       	cpi	r24, 0x1E	; 30
    8d64:	10 f0       	brcs	.+4      	; 0x8d6a <DrawBigChar+0x16>
    8d66:	e4 2f       	mov	r30, r20
    8d68:	02 c0       	rjmp	.+4      	; 0x8d6e <DrawBigChar+0x1a>
		c -= '7';
    8d6a:	e4 2f       	mov	r30, r20
    8d6c:	e7 53       	subi	r30, 0x37	; 55
	uint16_t moff = c*4;
    8d6e:	f0 e0       	ldi	r31, 0x00	; 0
    8d70:	ee 0f       	add	r30, r30
    8d72:	ff 1f       	adc	r31, r31
    8d74:	ee 0f       	add	r30, r30
    8d76:	ff 1f       	adc	r31, r31
	uint16_t voff = (y*VRAM_TILES_H)+x;
    8d78:	8e e1       	ldi	r24, 0x1E	; 30
    8d7a:	68 9f       	mul	r22, r24
    8d7c:	c0 01       	movw	r24, r0
    8d7e:	11 24       	eor	r1, r1
    8d80:	82 0f       	add	r24, r18
    8d82:	91 1d       	adc	r25, r1
	
	vram[voff++]	= pgm_read_byte(&big_font_maps[moff++]);
    8d84:	9f 01       	movw	r18, r30
    8d86:	2f 5f       	subi	r18, 0xFF	; 255
    8d88:	3f 4f       	sbci	r19, 0xFF	; 255
    8d8a:	e8 59       	subi	r30, 0x98	; 152
    8d8c:	fa 4b       	sbci	r31, 0xBA	; 186
    8d8e:	e4 91       	lpm	r30, Z+
    8d90:	dc 01       	movw	r26, r24
    8d92:	a0 5e       	subi	r26, 0xE0	; 224
    8d94:	be 4f       	sbci	r27, 0xFE	; 254
    8d96:	ec 93       	st	X, r30
	vram[voff]		= pgm_read_byte(&big_font_maps[moff++]);
    8d98:	a9 01       	movw	r20, r18
    8d9a:	4f 5f       	subi	r20, 0xFF	; 255
    8d9c:	5f 4f       	sbci	r21, 0xFF	; 255
    8d9e:	28 59       	subi	r18, 0x98	; 152
    8da0:	3a 4b       	sbci	r19, 0xBA	; 186
    8da2:	f9 01       	movw	r30, r18
    8da4:	24 91       	lpm	r18, Z+
    8da6:	fc 01       	movw	r30, r24
    8da8:	ef 5d       	subi	r30, 0xDF	; 223
    8daa:	fe 4f       	sbci	r31, 0xFE	; 254
    8dac:	20 83       	st	Z, r18
	
	voff += VRAM_TILES_H-1;
	vram[voff++]	= pgm_read_byte(&big_font_maps[moff++]);
    8dae:	fa 01       	movw	r30, r20
    8db0:	e8 59       	subi	r30, 0x98	; 152
    8db2:	fa 4b       	sbci	r31, 0xBA	; 186
    8db4:	e4 91       	lpm	r30, Z+
    8db6:	82 5c       	subi	r24, 0xC2	; 194
    8db8:	9e 4f       	sbci	r25, 0xFE	; 254
    8dba:	dc 01       	movw	r26, r24
    8dbc:	ec 93       	st	X, r30
	vram[voff]		= pgm_read_byte(&big_font_maps[moff]);
    8dbe:	47 59       	subi	r20, 0x97	; 151
    8dc0:	5a 4b       	sbci	r21, 0xBA	; 186
    8dc2:	fa 01       	movw	r30, r20
    8dc4:	24 91       	lpm	r18, Z+
    8dc6:	11 96       	adiw	r26, 0x01	; 1
    8dc8:	2c 93       	st	X, r18

}
    8dca:	08 95       	ret

00008dcc <DrawBigString>:

void DrawBigString(uint8_t x, uint8_t y, const char *str){
    8dcc:	0f 93       	push	r16
    8dce:	1f 93       	push	r17
    8dd0:	cf 93       	push	r28
    8dd2:	df 93       	push	r29
    8dd4:	06 2f       	mov	r16, r22
    8dd6:	ea 01       	movw	r28, r20
    8dd8:	18 2f       	mov	r17, r24
    8dda:	1e 5f       	subi	r17, 0xFE	; 254
    8ddc:	81 2f       	mov	r24, r17
    8dde:	82 50       	subi	r24, 0x02	; 2
    8de0:	fe 01       	movw	r30, r28
	int i=0;
	char c;

	while(1){
		c=pgm_read_byte(str++);//&(str[i++]));		
    8de2:	21 96       	adiw	r28, 0x01	; 1
    8de4:	44 91       	lpm	r20, Z+
		if(c!=0){
    8de6:	44 23       	and	r20, r20
    8de8:	31 f0       	breq	.+12     	; 0x8df6 <DrawBigString+0x2a>
			if(c == ' '){
    8dea:	40 32       	cpi	r20, 0x20	; 32
    8dec:	b1 f3       	breq	.-20     	; 0x8dda <DrawBigString+0xe>
				x += 2;
				continue;
			}
			//c&= 127;//c=((c&127)-32);			

			DrawBigChar(x,y,c);
    8dee:	60 2f       	mov	r22, r16
    8df0:	0e 94 aa 46 	call	0x8d54	; 0x8d54 <DrawBigChar>
    8df4:	f2 cf       	rjmp	.-28     	; 0x8dda <DrawBigString+0xe>
			x += 2;
		}else{
			break;
		}
	}
}
    8df6:	df 91       	pop	r29
    8df8:	cf 91       	pop	r28
    8dfa:	1f 91       	pop	r17
    8dfc:	0f 91       	pop	r16
    8dfe:	08 95       	ret

00008e00 <DrawPreview>:
};



void DrawPreview(uint8_t i){
	uint16_t voff = (1*VRAM_TILES_H)+(i?19:6);
    8e00:	88 23       	and	r24, r24
    8e02:	19 f4       	brne	.+6      	; 0x8e0a <DrawPreview+0xa>
    8e04:	44 e2       	ldi	r20, 0x24	; 36
    8e06:	50 e0       	ldi	r21, 0x00	; 0
    8e08:	02 c0       	rjmp	.+4      	; 0x8e0e <DrawPreview+0xe>
    8e0a:	41 e3       	ldi	r20, 0x31	; 49
    8e0c:	50 e0       	ldi	r21, 0x00	; 0
	uint8_t toff = ((p[i].next[0]-1)<<2)+RAM_TILES_COUNT+2;
    8e0e:	28 2f       	mov	r18, r24
    8e10:	30 e0       	ldi	r19, 0x00	; 0
    8e12:	84 e6       	ldi	r24, 0x64	; 100
    8e14:	90 e0       	ldi	r25, 0x00	; 0
    8e16:	b9 01       	movw	r22, r18
    8e18:	68 9f       	mul	r22, r24
    8e1a:	90 01       	movw	r18, r0
    8e1c:	69 9f       	mul	r22, r25
    8e1e:	30 0d       	add	r19, r0
    8e20:	78 9f       	mul	r23, r24
    8e22:	30 0d       	add	r19, r0
    8e24:	11 24       	eor	r1, r1
    8e26:	2e 5a       	subi	r18, 0xAE	; 174
    8e28:	32 4f       	sbci	r19, 0xF2	; 242
    8e2a:	d9 01       	movw	r26, r18
    8e2c:	19 96       	adiw	r26, 0x09	; 9
    8e2e:	8c 91       	ld	r24, X
    8e30:	81 50       	subi	r24, 0x01	; 1
    8e32:	88 0f       	add	r24, r24
    8e34:	88 0f       	add	r24, r24
    8e36:	80 5e       	subi	r24, 0xE0	; 224

	vram[voff++] = toff++;
    8e38:	fa 01       	movw	r30, r20
    8e3a:	e0 5e       	subi	r30, 0xE0	; 224
    8e3c:	fe 4f       	sbci	r31, 0xFE	; 254
    8e3e:	80 83       	st	Z, r24
    8e40:	fa 01       	movw	r30, r20
    8e42:	31 96       	adiw	r30, 0x01	; 1
	vram[voff++] = toff;
    8e44:	df 01       	movw	r26, r30
    8e46:	a0 5e       	subi	r26, 0xE0	; 224
    8e48:	be 4f       	sbci	r27, 0xFE	; 254
    8e4a:	8f 5f       	subi	r24, 0xFF	; 255
    8e4c:	8c 93       	st	X, r24
	
	toff = ((p[i].next[1]-1)<<2)+RAM_TILES_COUNT+2;
    8e4e:	d9 01       	movw	r26, r18
    8e50:	1a 96       	adiw	r26, 0x0a	; 10
    8e52:	8c 91       	ld	r24, X
    8e54:	81 50       	subi	r24, 0x01	; 1
    8e56:	88 0f       	add	r24, r24
    8e58:	88 0f       	add	r24, r24
    8e5a:	80 5e       	subi	r24, 0xE0	; 224

	vram[voff++] = toff++;
    8e5c:	ef 5d       	subi	r30, 0xDF	; 223
    8e5e:	fe 4f       	sbci	r31, 0xFE	; 254
    8e60:	80 83       	st	Z, r24
	vram[voff] = toff;
    8e62:	8f 5f       	subi	r24, 0xFF	; 255
    8e64:	81 83       	std	Z+1, r24	; 0x01
}
    8e66:	08 95       	ret

00008e68 <DrawScreen>:


void DrawScreen(){
	FillScreenPattern();
    8e68:	0e 94 7a 44 	call	0x88f4	; 0x88f4 <FillScreenPattern>
	DrawFrame(5,0,6,2);	
    8e6c:	85 e0       	ldi	r24, 0x05	; 5
    8e6e:	60 e0       	ldi	r22, 0x00	; 0
    8e70:	46 e0       	ldi	r20, 0x06	; 6
    8e72:	22 e0       	ldi	r18, 0x02	; 2
    8e74:	0e 94 e4 44 	call	0x89c8	; 0x89c8 <DrawFrame>
	DrawFrame(1,1,14,26);
    8e78:	81 e0       	ldi	r24, 0x01	; 1
    8e7a:	61 e0       	ldi	r22, 0x01	; 1
    8e7c:	4e e0       	ldi	r20, 0x0E	; 14
    8e7e:	2a e1       	ldi	r18, 0x1A	; 26
    8e80:	0e 94 e4 44 	call	0x89c8	; 0x89c8 <DrawFrame>

	DrawFrame(18,0,6,2);
    8e84:	82 e1       	ldi	r24, 0x12	; 18
    8e86:	60 e0       	ldi	r22, 0x00	; 0
    8e88:	46 e0       	ldi	r20, 0x06	; 6
    8e8a:	22 e0       	ldi	r18, 0x02	; 2
    8e8c:	0e 94 e4 44 	call	0x89c8	; 0x89c8 <DrawFrame>
	DrawFrame(14,1,14,26);
    8e90:	8e e0       	ldi	r24, 0x0E	; 14
    8e92:	61 e0       	ldi	r22, 0x01	; 1
    8e94:	4e e0       	ldi	r20, 0x0E	; 14
    8e96:	2a e1       	ldi	r18, 0x1A	; 26
    8e98:	0e 94 e4 44 	call	0x89c8	; 0x89c8 <DrawFrame>

	for(uint8_t i=6;i<6+4;i++){
		SetTile(i+0,1,FIRST_BORDER_TILE);
    8e9c:	86 e0       	ldi	r24, 0x06	; 6
    8e9e:	61 e0       	ldi	r22, 0x01	; 1
    8ea0:	44 e2       	ldi	r20, 0x24	; 36
    8ea2:	50 e0       	ldi	r21, 0x00	; 0
    8ea4:	0e 94 3b 38 	call	0x7076	; 0x7076 <SetTile>
		SetTile(i+13,1,FIRST_BORDER_TILE);
    8ea8:	83 e1       	ldi	r24, 0x13	; 19
    8eaa:	61 e0       	ldi	r22, 0x01	; 1
    8eac:	44 e2       	ldi	r20, 0x24	; 36
    8eae:	50 e0       	ldi	r21, 0x00	; 0
    8eb0:	0e 94 3b 38 	call	0x7076	; 0x7076 <SetTile>

	DrawFrame(18,0,6,2);
	DrawFrame(14,1,14,26);

	for(uint8_t i=6;i<6+4;i++){
		SetTile(i+0,1,FIRST_BORDER_TILE);
    8eb4:	87 e0       	ldi	r24, 0x07	; 7
    8eb6:	61 e0       	ldi	r22, 0x01	; 1
    8eb8:	44 e2       	ldi	r20, 0x24	; 36
    8eba:	50 e0       	ldi	r21, 0x00	; 0
    8ebc:	0e 94 3b 38 	call	0x7076	; 0x7076 <SetTile>
		SetTile(i+13,1,FIRST_BORDER_TILE);
    8ec0:	84 e1       	ldi	r24, 0x14	; 20
    8ec2:	61 e0       	ldi	r22, 0x01	; 1
    8ec4:	44 e2       	ldi	r20, 0x24	; 36
    8ec6:	50 e0       	ldi	r21, 0x00	; 0
    8ec8:	0e 94 3b 38 	call	0x7076	; 0x7076 <SetTile>

	DrawFrame(18,0,6,2);
	DrawFrame(14,1,14,26);

	for(uint8_t i=6;i<6+4;i++){
		SetTile(i+0,1,FIRST_BORDER_TILE);
    8ecc:	88 e0       	ldi	r24, 0x08	; 8
    8ece:	61 e0       	ldi	r22, 0x01	; 1
    8ed0:	44 e2       	ldi	r20, 0x24	; 36
    8ed2:	50 e0       	ldi	r21, 0x00	; 0
    8ed4:	0e 94 3b 38 	call	0x7076	; 0x7076 <SetTile>
		SetTile(i+13,1,FIRST_BORDER_TILE);
    8ed8:	85 e1       	ldi	r24, 0x15	; 21
    8eda:	61 e0       	ldi	r22, 0x01	; 1
    8edc:	44 e2       	ldi	r20, 0x24	; 36
    8ede:	50 e0       	ldi	r21, 0x00	; 0
    8ee0:	0e 94 3b 38 	call	0x7076	; 0x7076 <SetTile>

	DrawFrame(18,0,6,2);
	DrawFrame(14,1,14,26);

	for(uint8_t i=6;i<6+4;i++){
		SetTile(i+0,1,FIRST_BORDER_TILE);
    8ee4:	89 e0       	ldi	r24, 0x09	; 9
    8ee6:	61 e0       	ldi	r22, 0x01	; 1
    8ee8:	44 e2       	ldi	r20, 0x24	; 36
    8eea:	50 e0       	ldi	r21, 0x00	; 0
    8eec:	0e 94 3b 38 	call	0x7076	; 0x7076 <SetTile>
		SetTile(i+13,1,FIRST_BORDER_TILE);
    8ef0:	86 e1       	ldi	r24, 0x16	; 22
    8ef2:	61 e0       	ldi	r22, 0x01	; 1
    8ef4:	44 e2       	ldi	r20, 0x24	; 36
    8ef6:	50 e0       	ldi	r21, 0x00	; 0
    8ef8:	0e 94 3b 38 	call	0x7076	; 0x7076 <SetTile>
	}

	SetTile(14,1,FIRST_BORDER_TILE+7);
    8efc:	8e e0       	ldi	r24, 0x0E	; 14
    8efe:	61 e0       	ldi	r22, 0x01	; 1
    8f00:	4b e2       	ldi	r20, 0x2B	; 43
    8f02:	50 e0       	ldi	r21, 0x00	; 0
    8f04:	0e 94 3b 38 	call	0x7076	; 0x7076 <SetTile>
	//SetTile(14,SCREEN_TILES_V-1,FIRST_BORDER_TILE+7);
	SetTile(5,1,FIRST_BORDER_TILE+4);
    8f08:	85 e0       	ldi	r24, 0x05	; 5
    8f0a:	61 e0       	ldi	r22, 0x01	; 1
    8f0c:	48 e2       	ldi	r20, 0x28	; 40
    8f0e:	50 e0       	ldi	r21, 0x00	; 0
    8f10:	0e 94 3b 38 	call	0x7076	; 0x7076 <SetTile>
	SetTile(10,1,FIRST_BORDER_TILE+3);
    8f14:	8a e0       	ldi	r24, 0x0A	; 10
    8f16:	61 e0       	ldi	r22, 0x01	; 1
    8f18:	47 e2       	ldi	r20, 0x27	; 39
    8f1a:	50 e0       	ldi	r21, 0x00	; 0
    8f1c:	0e 94 3b 38 	call	0x7076	; 0x7076 <SetTile>
	SetTile(18,1,FIRST_BORDER_TILE+4);
    8f20:	82 e1       	ldi	r24, 0x12	; 18
    8f22:	61 e0       	ldi	r22, 0x01	; 1
    8f24:	48 e2       	ldi	r20, 0x28	; 40
    8f26:	50 e0       	ldi	r21, 0x00	; 0
    8f28:	0e 94 3b 38 	call	0x7076	; 0x7076 <SetTile>
	SetTile(23,1,FIRST_BORDER_TILE+3);
    8f2c:	87 e1       	ldi	r24, 0x17	; 23
    8f2e:	61 e0       	ldi	r22, 0x01	; 1
    8f30:	47 e2       	ldi	r20, 0x27	; 39
    8f32:	50 e0       	ldi	r21, 0x00	; 0
    8f34:	0e 94 3b 38 	call	0x7076	; 0x7076 <SetTile>
	
	for(uint8_t i=0;i<MAX_PLAYERS;i++){
		DrawPreview(i);
    8f38:	80 e0       	ldi	r24, 0x00	; 0
    8f3a:	0e 94 00 47 	call	0x8e00	; 0x8e00 <DrawPreview>
    8f3e:	81 e0       	ldi	r24, 0x01	; 1
    8f40:	0e 94 00 47 	call	0x8e00	; 0x8e00 <DrawPreview>
		DrawWell(i);
	}
	

}
    8f44:	08 95       	ret

00008f46 <Tick>:

void Tick(){
    8f46:	ec e2       	ldi	r30, 0x2C	; 44
    8f48:	f4 e0       	ldi	r31, 0x04	; 4


void ResetSprites(){

	for(uint8_t i=0;i<MAX_SPRITES;i++)
		sprites[i].x = SCREEN_TILES_H*8;
    8f4a:	80 ef       	ldi	r24, 0xF0	; 240
    8f4c:	80 83       	st	Z, r24
    8f4e:	34 96       	adiw	r30, 0x04	; 4



void ResetSprites(){

	for(uint8_t i=0;i<MAX_SPRITES;i++)
    8f50:	94 e0       	ldi	r25, 0x04	; 4
    8f52:	ec 39       	cpi	r30, 0x9C	; 156
    8f54:	f9 07       	cpc	r31, r25
    8f56:	d1 f7       	brne	.-12     	; 0x8f4c <Tick+0x6>
		sprites[i].x = SCREEN_TILES_H*8;
	sprite_count = 0;
    8f58:	10 92 1c 0e 	sts	0x0E1C, r1

}

void Tick(){
	ResetSprites();
	UpdateFields();
    8f5c:	0e 94 ca 45 	call	0x8b94	; 0x8b94 <UpdateFields>
}
    8f60:	08 95       	ret

00008f62 <main>:


int main(){
	
	SetUserPostVsyncCallback(&VsyncHook);
    8f62:	80 e7       	ldi	r24, 0x70	; 112
    8f64:	94 e4       	ldi	r25, 0x44	; 68
    8f66:	0e 94 77 38 	call	0x70ee	; 0x70ee <SetUserPostVsyncCallback>
	InitMusicPlayer(patches);
    8f6a:	86 ed       	ldi	r24, 0xD6	; 214
    8f6c:	98 e4       	ldi	r25, 0x48	; 72
    8f6e:	0e 94 5d 3a 	call	0x74ba	; 0x74ba <InitMusicPlayer>
	GetPrngNumber(GetTrueRandomSeed());
    8f72:	0e 94 a4 38 	call	0x7148	; 0x7148 <GetTrueRandomSeed>
    8f76:	0e 94 73 39 	call	0x72e6	; 0x72e6 <GetPrngNumber>
	SetSpritesTileBank(0,font_sprites);
    8f7a:	80 e0       	ldi	r24, 0x00	; 0
    8f7c:	68 ea       	ldi	r22, 0xA8	; 168
    8f7e:	79 e2       	ldi	r23, 0x29	; 41
    8f80:	0e 94 32 38 	call	0x7064	; 0x7064 <SetSpritesTileBank>
	SetTileTable(rom_tiles);
    8f84:	88 ee       	ldi	r24, 0xE8	; 232
    8f86:	90 e0       	ldi	r25, 0x00	; 0
    8f88:	0e 94 49 38 	call	0x7092	; 0x7092 <SetTileTable>
	
//	Intro();
	SetMasterVolume(AS_MASTER_VOLUME);
    8f8c:	84 eb       	ldi	r24, 0xB4	; 180
    8f8e:	0e 94 a9 3d 	call	0x7b52	; 0x7b52 <SetMasterVolume>
	
TITLE_TOP:
	TitleScreen();
    8f92:	0e 94 e0 43 	call	0x87c0	; 0x87c0 <TitleScreen>
    8f96:	e4 e6       	ldi	r30, 0x64	; 100
    8f98:	fd e0       	ldi	r31, 0x0D	; 13
    8f9a:	20 e0       	ldi	r18, 0x00	; 0

GAME_TOP:
for(uint8_t i=0;i<sizeof(p[0].well);i++){
	p[0].well[i] = (i%BLOCK_STAR)+1;
    8f9c:	82 2f       	mov	r24, r18
    8f9e:	66 e0       	ldi	r22, 0x06	; 6
    8fa0:	0e 94 f4 47 	call	0x8fe8	; 0x8fe8 <__udivmodqi4>
    8fa4:	9f 5f       	subi	r25, 0xFF	; 255
    8fa6:	90 83       	st	Z, r25
	p[1].well[i] = p[0].well[i];
    8fa8:	ec 59       	subi	r30, 0x9C	; 156
    8faa:	ff 4f       	sbci	r31, 0xFF	; 255
    8fac:	90 83       	st	Z, r25
	
TITLE_TOP:
	TitleScreen();

GAME_TOP:
for(uint8_t i=0;i<sizeof(p[0].well);i++){
    8fae:	2f 5f       	subi	r18, 0xFF	; 255
    8fb0:	e3 56       	subi	r30, 0x63	; 99
    8fb2:	f0 40       	sbci	r31, 0x00	; 0
    8fb4:	2f 34       	cpi	r18, 0x4F	; 79
    8fb6:	91 f7       	brne	.-28     	; 0x8f9c <main+0x3a>
	p[0].well[i] = (i%BLOCK_STAR)+1;
	p[1].well[i] = p[0].well[i];
}

	p[0].state = 1;
    8fb8:	81 e0       	ldi	r24, 0x01	; 1
    8fba:	80 93 54 0d 	sts	0x0D54, r24
	p[1].state = 1;
    8fbe:	80 93 b8 0d 	sts	0x0DB8, r24
	p[0].next[0] = BLOCK_BLUE;
    8fc2:	93 e0       	ldi	r25, 0x03	; 3
    8fc4:	90 93 5b 0d 	sts	0x0D5B, r25
	p[0].next[1] = BLOCK_RED;
    8fc8:	80 93 5c 0d 	sts	0x0D5C, r24
	p[1].next[0] = BLOCK_GREEN;
    8fcc:	92 e0       	ldi	r25, 0x02	; 2
    8fce:	90 93 bf 0d 	sts	0x0DBF, r25
	p[1].next[1] = BLOCK_RED;
    8fd2:	80 93 c0 0d 	sts	0x0DC0, r24
	DrawScreen();
    8fd6:	0e 94 34 47 	call	0x8e68	; 0x8e68 <DrawScreen>
	
	FadeIn(1,false);
    8fda:	81 e0       	ldi	r24, 0x01	; 1
    8fdc:	60 e0       	ldi	r22, 0x00	; 0
    8fde:	0e 94 0a 43 	call	0x8614	; 0x8614 <FadeIn>
	while(1)
		Tick();
    8fe2:	0e 94 a3 47 	call	0x8f46	; 0x8f46 <Tick>
    8fe6:	fd cf       	rjmp	.-6      	; 0x8fe2 <main+0x80>

00008fe8 <__udivmodqi4>:
    8fe8:	99 1b       	sub	r25, r25
    8fea:	79 e0       	ldi	r23, 0x09	; 9
    8fec:	04 c0       	rjmp	.+8      	; 0x8ff6 <__udivmodqi4_ep>

00008fee <__udivmodqi4_loop>:
    8fee:	99 1f       	adc	r25, r25
    8ff0:	96 17       	cp	r25, r22
    8ff2:	08 f0       	brcs	.+2      	; 0x8ff6 <__udivmodqi4_ep>
    8ff4:	96 1b       	sub	r25, r22

00008ff6 <__udivmodqi4_ep>:
    8ff6:	88 1f       	adc	r24, r24
    8ff8:	7a 95       	dec	r23
    8ffa:	c9 f7       	brne	.-14     	; 0x8fee <__udivmodqi4_loop>
    8ffc:	80 95       	com	r24
    8ffe:	08 95       	ret

00009000 <__udivmodhi4>:
    9000:	aa 1b       	sub	r26, r26
    9002:	bb 1b       	sub	r27, r27
    9004:	51 e1       	ldi	r21, 0x11	; 17
    9006:	07 c0       	rjmp	.+14     	; 0x9016 <__udivmodhi4_ep>

00009008 <__udivmodhi4_loop>:
    9008:	aa 1f       	adc	r26, r26
    900a:	bb 1f       	adc	r27, r27
    900c:	a6 17       	cp	r26, r22
    900e:	b7 07       	cpc	r27, r23
    9010:	10 f0       	brcs	.+4      	; 0x9016 <__udivmodhi4_ep>
    9012:	a6 1b       	sub	r26, r22
    9014:	b7 0b       	sbc	r27, r23

00009016 <__udivmodhi4_ep>:
    9016:	88 1f       	adc	r24, r24
    9018:	99 1f       	adc	r25, r25
    901a:	5a 95       	dec	r21
    901c:	a9 f7       	brne	.-22     	; 0x9008 <__udivmodhi4_loop>
    901e:	80 95       	com	r24
    9020:	90 95       	com	r25
    9022:	bc 01       	movw	r22, r24
    9024:	cd 01       	movw	r24, r26
    9026:	08 95       	ret

00009028 <__divmodhi4>:
    9028:	97 fb       	bst	r25, 7
    902a:	09 2e       	mov	r0, r25
    902c:	07 26       	eor	r0, r23
    902e:	0a d0       	rcall	.+20     	; 0x9044 <__divmodhi4_neg1>
    9030:	77 fd       	sbrc	r23, 7
    9032:	04 d0       	rcall	.+8      	; 0x903c <__divmodhi4_neg2>
    9034:	e5 df       	rcall	.-54     	; 0x9000 <__udivmodhi4>
    9036:	06 d0       	rcall	.+12     	; 0x9044 <__divmodhi4_neg1>
    9038:	00 20       	and	r0, r0
    903a:	1a f4       	brpl	.+6      	; 0x9042 <__divmodhi4_exit>

0000903c <__divmodhi4_neg2>:
    903c:	70 95       	com	r23
    903e:	61 95       	neg	r22
    9040:	7f 4f       	sbci	r23, 0xFF	; 255

00009042 <__divmodhi4_exit>:
    9042:	08 95       	ret

00009044 <__divmodhi4_neg1>:
    9044:	f6 f7       	brtc	.-4      	; 0x9042 <__divmodhi4_exit>
    9046:	90 95       	com	r25
    9048:	81 95       	neg	r24
    904a:	9f 4f       	sbci	r25, 0xFF	; 255
    904c:	08 95       	ret

0000904e <__prologue_saves__>:
    904e:	2f 92       	push	r2
    9050:	3f 92       	push	r3
    9052:	4f 92       	push	r4
    9054:	5f 92       	push	r5
    9056:	6f 92       	push	r6
    9058:	7f 92       	push	r7
    905a:	8f 92       	push	r8
    905c:	9f 92       	push	r9
    905e:	af 92       	push	r10
    9060:	bf 92       	push	r11
    9062:	cf 92       	push	r12
    9064:	df 92       	push	r13
    9066:	ef 92       	push	r14
    9068:	ff 92       	push	r15
    906a:	0f 93       	push	r16
    906c:	1f 93       	push	r17
    906e:	cf 93       	push	r28
    9070:	df 93       	push	r29
    9072:	cd b7       	in	r28, 0x3d	; 61
    9074:	de b7       	in	r29, 0x3e	; 62
    9076:	ca 1b       	sub	r28, r26
    9078:	db 0b       	sbc	r29, r27
    907a:	0f b6       	in	r0, 0x3f	; 63
    907c:	f8 94       	cli
    907e:	de bf       	out	0x3e, r29	; 62
    9080:	0f be       	out	0x3f, r0	; 63
    9082:	cd bf       	out	0x3d, r28	; 61
    9084:	09 94       	ijmp

00009086 <__epilogue_restores__>:
    9086:	2a 88       	ldd	r2, Y+18	; 0x12
    9088:	39 88       	ldd	r3, Y+17	; 0x11
    908a:	48 88       	ldd	r4, Y+16	; 0x10
    908c:	5f 84       	ldd	r5, Y+15	; 0x0f
    908e:	6e 84       	ldd	r6, Y+14	; 0x0e
    9090:	7d 84       	ldd	r7, Y+13	; 0x0d
    9092:	8c 84       	ldd	r8, Y+12	; 0x0c
    9094:	9b 84       	ldd	r9, Y+11	; 0x0b
    9096:	aa 84       	ldd	r10, Y+10	; 0x0a
    9098:	b9 84       	ldd	r11, Y+9	; 0x09
    909a:	c8 84       	ldd	r12, Y+8	; 0x08
    909c:	df 80       	ldd	r13, Y+7	; 0x07
    909e:	ee 80       	ldd	r14, Y+6	; 0x06
    90a0:	fd 80       	ldd	r15, Y+5	; 0x05
    90a2:	0c 81       	ldd	r16, Y+4	; 0x04
    90a4:	1b 81       	ldd	r17, Y+3	; 0x03
    90a6:	aa 81       	ldd	r26, Y+2	; 0x02
    90a8:	b9 81       	ldd	r27, Y+1	; 0x01
    90aa:	ce 0f       	add	r28, r30
    90ac:	d1 1d       	adc	r29, r1
    90ae:	0f b6       	in	r0, 0x3f	; 63
    90b0:	f8 94       	cli
    90b2:	de bf       	out	0x3e, r29	; 62
    90b4:	0f be       	out	0x3f, r0	; 63
    90b6:	cd bf       	out	0x3d, r28	; 61
    90b8:	ed 01       	movw	r28, r26
    90ba:	08 95       	ret

000090bc <_exit>:
    90bc:	f8 94       	cli

000090be <__stop_program>:
    90be:	ff cf       	rjmp	.-2      	; 0x90be <__stop_program>
