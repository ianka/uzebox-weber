
ASTROSTACK.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  0000afc4  0000b0c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000afc4  00000000  00000000  00000100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000dc2  00800120  00800120  0000b0e0  2**5
                  ALLOC
  3 .debug_aranges 00000578  00000000  00000000  0000b0d0  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000de2  00000000  00000000  0000b648  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00005162  00000000  00000000  0000c42a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c3f  00000000  00000000  0001158c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000042ce  00000000  00000000  000121cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000007e0  00000000  00000000  0001649c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000133b  00000000  00000000  00016c7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00003521  00000000  00000000  00017fb7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000970  00000000  00000000  0001b4d8  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
}

/**
 * Performs a software reset
 */
void SoftReset(void){        
       0:	0c 94 cd 34 	jmp	0x699a	; 0x699a <__ctors_end>
		song_buffer_tail = 0;

	return t;
}
   
u8 song_buffer_bytes_available(){
       4:	0c 94 37 35 	jmp	0x6a6e	; 0x6a6e <__bad_interrupt>
			//vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
			*ram_tiles_restore[i].addr=ram_tiles_restore[i].tileIndex;
		}	
	}

	void SetUserRamTilesCount(u8 count){
       8:	0c 94 37 35 	jmp	0x6a6e	; 0x6a6e <__bad_interrupt>
	}
	particles[low].x = x;
	particles[low].y = y;
	particles[low].time = life;
	particles[low].type = style;
}
       c:	0c 94 37 35 	jmp	0x6a6e	; 0x6a6e <__bad_interrupt>
      10:	0c 94 37 35 	jmp	0x6a6e	; 0x6a6e <__bad_interrupt>
      14:	0c 94 37 35 	jmp	0x6a6e	; 0x6a6e <__bad_interrupt>
      18:	0c 94 37 35 	jmp	0x6a6e	; 0x6a6e <__bad_interrupt>
      1c:	0c 94 37 35 	jmp	0x6a6e	; 0x6a6e <__bad_interrupt>
      20:	0c 94 c9 39 	jmp	0x7392	; 0x7392 <__vector_8>
      24:	0c 94 37 35 	jmp	0x6a6e	; 0x6a6e <__bad_interrupt>
      28:	0c 94 37 35 	jmp	0x6a6e	; 0x6a6e <__bad_interrupt>
      2c:	0c 94 37 35 	jmp	0x6a6e	; 0x6a6e <__bad_interrupt>
      30:	0c 94 37 35 	jmp	0x6a6e	; 0x6a6e <__bad_interrupt>
      34:	0c 94 a0 37 	jmp	0x6f40	; 0x6f40 <__vector_13>
      38:	0c 94 e0 37 	jmp	0x6fc0	; 0x6fc0 <__vector_14>
      3c:	0c 94 37 35 	jmp	0x6a6e	; 0x6a6e <__bad_interrupt>
      40:	0c 94 37 35 	jmp	0x6a6e	; 0x6a6e <__bad_interrupt>
      44:	0c 94 37 35 	jmp	0x6a6e	; 0x6a6e <__bad_interrupt>
      48:	0c 94 37 35 	jmp	0x6a6e	; 0x6a6e <__bad_interrupt>
      4c:	0c 94 37 35 	jmp	0x6a6e	; 0x6a6e <__bad_interrupt>
      50:	0c 94 37 35 	jmp	0x6a6e	; 0x6a6e <__bad_interrupt>
      54:	0c 94 37 35 	jmp	0x6a6e	; 0x6a6e <__bad_interrupt>
      58:	0c 94 37 35 	jmp	0x6a6e	; 0x6a6e <__bad_interrupt>
      5c:	0c 94 37 35 	jmp	0x6a6e	; 0x6a6e <__bad_interrupt>
      60:	0c 94 37 35 	jmp	0x6a6e	; 0x6a6e <__bad_interrupt>
      64:	0c 94 37 35 	jmp	0x6a6e	; 0x6a6e <__bad_interrupt>
      68:	0c 94 37 35 	jmp	0x6a6e	; 0x6a6e <__bad_interrupt>
      6c:	0c 94 37 35 	jmp	0x6a6e	; 0x6a6e <__bad_interrupt>

00000070 <eeprom_format_table>:
      70:	5a 55 01 20 01 01 00 38 08 00 00 00 00 00 00 00     ZU. ...8........
	...

00000090 <io_table>:
      90:	81 00 45 00 27 ff 24 ff 2a 90 2b 1c 21 0c 22 fb     ..E.'.$.*.+.!.".
      a0:	85 00 84 00 89 03 88 8d 81 09 6f 02 44 42 47 00     ..........o.DBG.
      b0:	45 01 b0 83 b3 00 b1 01 25 11 8a 4f 8b 03           E.......%..O..

000000be <patchCommands>:
      be:	46 3b 49 3b 52 3b 57 3b 5f 3b 68 3b 6d 3b 72 3b     F;I;R;W;_;h;m;r;
      ce:	75 3b 87 3b 8a 3b 8d 3b ce 3b d1 3b d4 3b           u;.;.;.;.;.;.;

000000dc <fader>:
      dc:	00 40 88 91 d2 e4 ad b5 b6 be bf ff                 .@..........

000000e8 <rom_tiles>:
      e8:	06 57 57 57 57 57 57 57 06 04 04 04 04 04 04 06     .WWWWWWW........
      f8:	06 04 04 06 06 06 06 06 06 04 ff ff ff ff ff ff     ................
     108:	06 04 ff ff ff ff ff ff 06 04 ff ff 57 04 06 06     ............W...
     118:	06 04 ff ff 57 06 06 06 06 06 ff ff 06 06 06 06     ....W...........
     128:	57 57 57 57 57 57 57 57 06 04 04 04 04 04 04 57     WWWWWWWW.......W
     138:	06 06 06 06 06 04 04 57 ff ff ff ff ff ff 04 57     .......W.......W
     148:	ff ff ff ff ff ff 04 57 06 06 04 04 ff ff 04 57     .......W.......W
     158:	06 06 06 04 ff ff 04 57 06 06 06 06 ff ff 06 57     .......W.......W
     168:	06 06 ff ff 06 06 06 06 06 04 ff ff 57 06 06 06     ............W...
     178:	06 04 ff ff 57 04 06 06 06 04 ff ff ff ff ff ff     ....W...........
     188:	06 04 ff ff ff ff ff ff 06 04 02 02 02 02 02 06     ................
     198:	06 04 04 04 04 04 04 06 06 06 06 06 06 06 06 06     ................
     1a8:	06 06 06 06 ff ff 06 57 06 06 06 05 ff ff 04 57     .......W.......W
     1b8:	06 06 04 05 ff ff 04 57 ff ff ff ff ff ff 04 57     .......W.......W
     1c8:	ff ff ff ff ff ff 04 57 06 02 02 02 02 05 04 57     .......W.......W
     1d8:	06 04 04 04 04 04 04 57 06 06 06 06 06 06 06 57     .......W.......W
     1e8:	69 bc bc bc bc bc bc bc 69 10 10 10 10 10 10 69     i.......i......i
     1f8:	69 10 10 69 69 69 69 69 69 10 bb 10 69 69 69 69     i..iiiiii...iiii
     208:	69 10 bb bb 10 69 69 ff 69 10 bb bb bb 10 72 ff     i....ii.i.....r.
     218:	69 10 bb bb bb 72 ff ff 69 69 69 69 69 72 ff ff     i....r..iiiiir..
     228:	bc bc bc bc bc bc bc bc 69 10 10 10 10 10 10 bc     ........i.......
     238:	69 69 69 69 69 10 10 bc 69 69 69 69 10 61 10 bc     iiiii...iiii.a..
     248:	ff 69 69 10 61 61 10 bc ff 72 10 61 61 61 10 bc     .ii.aa...r.aaa..
     258:	ff ff 72 61 61 61 10 bc ff ff 72 69 69 69 69 bc     ..raaa....riiii.
     268:	69 69 69 69 69 ff ff ff 69 10 bb bb ff ff ff ff     iiiii...i.......
     278:	69 10 bb ff ff ff ff ff 69 10 ff ff ff ff ff ff     i.......i.......
     288:	69 10 bb 10 10 10 10 69 69 10 10 10 10 10 10 69     i......ii......i
     298:	69 10 10 10 10 10 10 69 69 69 69 69 69 69 69 69     i......iiiiiiiii
     2a8:	ff ff ff 69 69 69 69 bc ff ff ff ff 61 61 10 bc     ...iiii.....aa..
     2b8:	ff ff ff ff ff 61 10 bc ff ff ff ff ff ff 10 bc     .....a..........
     2c8:	69 10 10 10 10 61 10 bc 69 10 10 10 10 10 10 bc     i....a..i.......
     2d8:	69 10 10 10 10 10 10 bc 69 69 69 69 69 69 69 bc     i.......iiiiiii.
     2e8:	89 e3 e3 e3 e3 e3 e3 e3 89 49 49 49 49 49 49 89     .........IIIIII.
     2f8:	89 49 49 89 89 89 89 ff 89 49 e3 49 89 ff ff ff     .II......I.I....
     308:	89 49 e3 e3 ff ff ff ff 89 49 e3 ff ff ff 92 89     .I.......I......
     318:	89 49 e3 ff ff 92 49 89 89 89 ff ff ff 89 89 89     .I....I.........
     328:	e3 e3 e3 e3 e3 e3 e3 e3 89 49 49 49 49 49 49 e3     .........IIIIII.
     338:	ff 89 89 89 89 49 49 e3 ff ff ff 89 49 91 49 e3     .....II.....I.I.
     348:	ff ff ff ff 49 91 49 e3 89 92 ff ff ff 91 49 e3     ....I.I.......I.
     358:	89 92 92 ff ff 91 49 e3 89 89 89 ff ff ff 89 e3     ......I.........
     368:	89 89 ff ff ff 89 89 89 89 49 e3 ff ff 49 49 89     .........I...II.
     378:	89 49 e3 ff ff ff 49 89 89 49 e3 e3 ff ff ff ff     .I....I..I......
     388:	89 49 e3 49 49 ff ff ff 89 49 49 49 49 49 49 ff     .I.II....IIIIII.
     398:	89 49 49 49 49 49 49 89 89 89 89 89 89 89 89 89     .IIIIII.........
     3a8:	89 89 89 ff ff ff 89 e3 89 49 49 ff ff 91 49 e3     .........II...I.
     3b8:	89 49 ff ff ff 91 49 e3 ff ff ff ff 91 91 49 e3     .I....I.......I.
     3c8:	ff ff ff 49 49 91 49 e3 ff 49 49 49 49 49 49 e3     ...II.I..IIIIII.
     3d8:	89 49 49 49 49 49 49 e3 89 89 89 89 89 89 89 e3     .IIIIII.........
     3e8:	3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 4b 4b 4b 4b 4b 4b     ??????????KKKKKK
     3f8:	3f 4b 4b 06 9d 9d 9d 9d 3f 4b 06 06 06 9d 9d 9d     ?KK.....?K......
     408:	3f 4b 95 06 06 06 9d 9d 3f 4b 95 95 06 06 06 9d     ?K......?K......
     418:	3f 4b 95 95 95 06 06 06 3f 4b 95 95 95 95 06 06     ?K......?K......
     428:	3f 3f 3f 3f 3f 3f 3f 3f 4b 4b 4b 4b 4b 4b 3f 3f     ????????KKKKKK??
     438:	9d 9d 9d 9d 06 4a 4a 3f 9d 9d 9d 06 06 06 4a 3f     .....JJ?......J?
     448:	9d 9d 06 06 06 95 4a 3f 9d 06 06 06 95 95 4a 3f     ......J?......J?
     458:	06 06 06 95 95 95 4a 36 06 06 95 95 95 95 4a 36     ......J6......J6
     468:	3f 4b 95 95 95 95 06 06 3f 4b 95 95 95 06 06 06     ?K......?K......
     478:	3f 4b 95 95 06 06 06 4a 3f 4b 95 06 06 06 4a 4a     ?K.....J?K....JJ
     488:	36 4b 06 06 06 4a 4a 4a 36 36 4a 06 4a 4a 4a 4a     6K...JJJ66J.JJJJ
     498:	36 36 36 4a 4a 4a 4a 4a 1b 1b 1b 1b 1b 1b 1b 1b     666JJJJJ........
     4a8:	06 06 95 95 95 95 4a 36 06 06 06 95 95 95 4a 36     ......J6......J6
     4b8:	4a 06 06 06 95 95 4a 36 4a 4a 06 06 06 95 4a 36     J.....J6JJ....J6
     4c8:	4a 4a 4a 06 06 06 4a 36 4a 4a 4a 4a 06 4a 36 36     JJJ...J6JJJJ.J66
     4d8:	4a 4a 4a 4a 4a 36 36 36 1b 1b 1b 1b 1b 1b 1b 1b     JJJJJ666........
     4e8:	3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 4b 4b 4b 4b 4b 4b     ??????????KKKKKK
     4f8:	3f 4b 4b 9d 9d 9d 9d 9d 3f 4b 95 9d 9d 3f 36 9d     ?KK.....?K...?6.
     508:	3f 4b 95 1f 36 9d 9d 3f 3f 4b 1f 06 1f 9d 04 57     ?K..6..??K.....W
     518:	3f 4b 95 1f 95 95 04 57 3f 4b 95 95 95 95 04 57     ?K.....W?K.....W
     528:	3f 3f 3f 3f 3f 3f 3f 3f 4b 4b 4b 4b 4b 4b 3f 3f     ????????KKKKKK??
     538:	9d 9d 9d 9d 9d 4a 4a 3f 9d 9d 9d 9d 9d 95 4a 3f     .....JJ?......J?
     548:	06 9d 9d 9d 95 95 4a 3f 06 04 9d 95 95 95 4a 3f     ......J?......J?
     558:	06 04 95 95 95 95 4a 36 06 04 95 95 95 95 4a 36     ......J6......J6
     568:	3f 4b 95 95 95 95 04 57 3f 4b 95 95 95 95 04 57     ?K.....W?K.....W
     578:	3f 4b 95 95 95 4a 04 57 3f 4b 95 95 4a 4a 04 57     ?K...J.W?K..JJ.W
     588:	36 4b 95 4a 4a 4a 04 57 36 36 4a 4a 4a 4a 04 57     6K.JJJ.W66JJJJ.W
     598:	36 36 36 4a 4a 4a 4a 57 1b 1b 1b 1b 1b 1b 1b 1b     666JJJJW........
     5a8:	06 04 95 95 95 95 4a 36 06 04 95 95 95 95 4a 36     ......J6......J6
     5b8:	06 04 4a 95 95 95 4a 36 06 04 4a 4a 95 95 4a 36     ..J...J6..JJ..J6
     5c8:	06 04 4a 4a 4a 95 4a 36 06 04 4a 4a 4a 4a 36 36     ..JJJ.J6..JJJJ66
     5d8:	06 4a 4a 4a 4a 36 36 36 1b 1b 1b 1b 1b 1b 1b 1b     .JJJJ666........
     5e8:	3f 3f 3f 3f 3f 3f 4b 4b 3f 3f 4b 4b 4b 4b ff 3f     ??????KK??KKKK.?
     5f8:	3f 4b 4b 9d 9d 4b ff 3f 3f 4b 9d 9d 9d 4b ff 3f     ?KK..K.??K...K.?
     608:	3f 4b 9d 9d 9d 4b ff 3f 3f 4b 4b 4b 4b ff ff ff     ?K...K.??KKKK...
     618:	4b ff ff ff ff ff ff 36 3f 4b 3f 3f 3f ff ff 36     K......6?K???..6
     628:	3f 3f 3f 3f 3f 3f 3f 3f 4b 4b 4b 4b 4b 4b 3f 3f     ????????KKKKKK??
     638:	4b 9d 9d 9d 9d 4b 4a 3f 4b 9d 9d 9d 4b 3f 4b 3f     K....KJ?K...K?K?
     648:	ff 4b 4b 4b 3f 36 4b 3f 3f 3f 3f 3f 3f 36 4b 3f     .KKK?6K??????6K?
     658:	36 36 3f 36 36 4b 4a 36 36 3f 3f 36 4b 95 4a 36     66?66KJ66??6K.J6
     668:	3f 4b 4b 3f 3f 3f ff 3f 3f 4b 95 4b 3f 3f 3f ff     ?KK???.??K.K???.
     678:	3f 4b 95 95 4b 3f 3f 3f 3f 4b 95 4b 3f 3f 3f 3f     ?K..K????K.K????
     688:	36 4b 4a 4b 3f 3f 3f 3f 36 36 4b 3f 3f 3f 4a 4a     6KJK????66K???JJ
     698:	36 36 4b 3f 3f 4a 4a 4a 1b 1b 1b 4b 4b 1b 1b 1b     66K??JJJ...KK...
     6a8:	3f 3f 36 4b 95 95 4a 36 36 3f 36 36 4b 95 4a 36     ??6K..J66?66K.J6
     6b8:	3f 36 3f 3f 36 4b 4b 36 3f 36 36 36 3f 36 36 4b     ?6??6KK6?666?66K
     6c8:	4a 4a 4a 4a 36 3f 36 4b 4a 4a 4a 4a 4a 4a 4b 36     JJJJ6?6KJJJJJJK6
     6d8:	4a 4a 4a 4a 4a 36 36 36 1b 1b 1b 1b 1b 1b 1b 1b     JJJJJ666........
     6e8:	3f 3f 3f 3f 3f 3f 3f 4b 3f 3f 4b 4b 4b 4b 4b ff     ???????K??KKKKK.
     6f8:	3f 4b 4b 9d 9d 9d 4b ff 3f 4b 9d 9d 9d 9d 4b ff     ?KK...K.?K....K.
     708:	4b ff 4b 4b 9d 4b ff ff 4b 3f ff ff 4b 4b ff ff     K.KK.K..K?..KK..
     718:	3f 4b 3f 3f ff ff ff 3f 3f 4b 4b 3f 3f ff ff 3f     ?K??...??KK??..?
     728:	4b 3f 3f 3f 3f 3f 3f 3f 3f 4b 4b 4b 4b 4b 3f 3f     K????????KKKKK??
     738:	3f 4b 9d 9d 9d 4a 4a 3f 3f 4b 9d 9d 9d 9d 4b 3f     ?K...JJ??K....K?
     748:	3f 3f 4b 9d 4b 4b 3f 4b 3f 3f 4b 4b 3f 3f 36 4b     ??K.KK?K??KK??6K
     758:	36 3f 3f 3f 36 36 4b 36 36 3f 3f 3f 36 4b 4a 36     6???66K66???6KJ6
     768:	3f 4b 95 4b 3f 3f 3f ff 3f 4b 95 95 4b 3f 3f ff     ?K.K???.?K..K??.
     778:	3f 4b 95 4b 3f 3f 3f 3f 3f 4b 4b 3f 3f 3f 3f 3f     ?K.K?????KK?????
     788:	36 4b 3f 3f 3f 3f 3f 4a 36 4b 3f 3f 3f 4a 4a 4a     6K?????J6K???JJJ
     798:	36 4b 4b 4a 4a 4a 4a 4a 1b 1b 1b 1b 1b 1b 1b 1b     6KKJJJJJ........
     7a8:	3f 36 36 36 4b 95 4a 36 3f 36 36 4b 95 95 4a 36     ?666K.J6?66K..J6
     7b8:	36 3f 36 36 4b 95 4a 36 36 36 3f 36 36 4b 4a 36     6?66K.J666?66KJ6
     7c8:	4a 36 36 3f 36 36 4b 36 4a 4a 4a 36 3f 3f 4b 36     J66?66K6JJJ6??K6
     7d8:	4a 4a 4a 4a 4a 4b 36 36 1b 1b 1b 1b 1b 1b 1b 1b     JJJJJK66........
     7e8:	3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 4b 4b 4b 4b 4b 4b     ??????????KKKKKK
     7f8:	3f 4b 4b 9d 9d 9d 9d 4b 3f 4b ff 4b 9d 9d 9d 4b     ?KK....K?K.K...K
     808:	3f 4b 3f ff 4b 4b 4b ff 3f 4b 3f 3f ff ff ff ff     ?K?.KKK.?K??....
     818:	3f 4b 4b 3f 3f ff 3f 36 3f 4b 95 4b 3f ff 3f 36     ?KK??.?6?K.K?.?6
     828:	4b 4b 3f 3f 3f 3f 3f 3f ff 3f 4b 4b 4b 4b 3f 3f     KK??????.?KKKK??
     838:	ff 3f 4b 9d 9d 4a 4a 3f ff 3f 4b 9d 9d 95 4a 3f     .?K..JJ?.?K...J?
     848:	ff 3f 4b 9d 95 95 4a 3f 3f 3f 3f 4b 4b 4b 4b 3f     .?K...J????KKKK?
     858:	36 3f 3f 3f 3f 3f 3f 4b 36 36 3f 3f 3f 36 4b 36     6??????K66???6K6
     868:	3f 4b 95 95 4b 3f ff 3f 3f 4b 95 4b 3f 3f 3f ff     ?K..K?.??K.K???.
     878:	3f 4b 4b 3f 3f 3f 3f 3f 4b 3f 3f 3f 3f 3f 3f 3f     ?KK?????K???????
     888:	4b 3f 3f 3f 4a 4a 4a 4a 36 4b 4a 4a 4a 4a 4a 4a     K???JJJJ6KJJJJJJ
     898:	36 36 36 4a 4a 4a 4a 4a 1b 1b 1b 1b 1b 1b 1b 1b     666JJJJJ........
     8a8:	3f 3f 36 36 36 4b 4a 36 3f 3f 36 36 4b 95 4a 36     ??666KJ6??66K.J6
     8b8:	3f 3f 36 4b 4a 95 4a 36 3f 3f 36 36 4b 4a 4a 36     ??6KJ.J6??66KJJ6
     8c8:	36 36 3f 36 4b 4a 4a 36 4a 4a 36 36 36 4b 36 36     66?6KJJ6JJ666K66
     8d8:	4a 4a 4a 3f 36 4b 36 36 1b 1b 1b 4b 4b 1b 1b 1b     JJJ?6K66...KK...
     8e8:	3f 3f 3f 3f 3f 3f 4b 4b 3f 3f 52 52 52 5b 5b 5b     ??????KK??RRR[[[
     8f8:	3f 4b 52 00 00 ad ad ad 3f 4b 00 00 00 00 ff ff     ?KR.....?K......
     908:	3f 4b 00 00 00 00 00 ff 3f 4b 00 00 ff ff 00 ff     ?K......?K......
     918:	4b ff 00 00 00 00 00 ff 3f 4b ff 00 00 00 ff 00     K.......?K......
     928:	3f 3f 3f 3f 3f 3f 3f 3f 5b 5b 5b 52 52 52 3f 3f     ????????[[[RRR??
     938:	ad ad ad 00 00 52 4a 3f ff ff 00 00 00 00 4b 3f     .....RJ?......K?
     948:	ff 00 00 00 00 00 4b 3f ff 00 00 ff ff 00 4b 3f     ......K?......K?
     958:	ff 00 00 00 00 00 4a 36 00 ff 00 00 00 ff 4a 36     ......J6......J6
     968:	3f 4b ff ff ff ff ff ff 3f 4b 00 00 52 ff 52 ff     ?K......?K..R.R.
     978:	3f 4b ad 52 00 00 00 00 3f 4b 52 ad 5b ff 52 ff     ?K.R....?KR.[.R.
     988:	36 4b 52 52 52 ad ad ad 36 36 00 52 52 52 52 52     6KRRR...66.RRRRR
     998:	36 36 4b 3f 3f 4a 4a 4a 1b 1b 1b 4b 4b 1b 1b 1b     66K??JJJ...KK...
     9a8:	ff ff ff ff ff ff 4a 36 ff 52 ff 52 00 00 4a 36     ......J6.R.R..J6
     9b8:	00 00 00 00 52 ad 4b 36 ff 52 ff 5b ad 52 36 4b     ....R.K6.R.[.R6K
     9c8:	ad ad ad 52 52 52 36 4b 52 52 52 52 52 00 4b 36     ...RRR6KRRRRR.K6
     9d8:	4a 4a 4a 4a 4a 36 36 36 1b 1b 1b 1b 1b 1b 1b 1b     JJJJJ666........
	...
     a28:	03 54 0c 82 82 82 82 82 56 82 82 89 89 89 89 89     .T......V.......
     a38:	0c 82 89 d1 d1 d1 d1 d1 82 89 d1 89 ff ff ff ff     ................
     a48:	82 89 d1 ff 89 89 89 89 82 89 d1 ff 89 89 ff e3     ................
     a58:	82 89 d1 ff 89 ff ff 89 82 89 d1 ff 89 e3 89 82     ................
     a68:	82 82 82 82 82 0c 54 03 89 89 89 89 89 82 82 56     ......T........V
     a78:	d1 d1 d1 d1 d1 89 82 0c ff ff ff ff 89 d1 89 82     ................
     a88:	89 89 89 89 ff d1 89 82 e3 ff 89 89 ff d1 89 82     ................
     a98:	89 ff ff 89 ff d1 89 82 82 89 e3 89 ff d1 89 82     ................
     aa8:	82 89 e3 89 ff d1 89 82 82 89 e3 89 ff d1 ff 89     ................
     ab8:	82 89 e3 89 ff 89 d1 d1 82 89 e3 89 d1 ff ff ff     ................
     ac8:	82 89 e3 89 89 89 89 89 00 82 89 e3 e3 e3 e3 e3     ................
     ad8:	00 82 82 89 89 89 89 89 00 00 00 82 82 82 82 82     ................
     ae8:	82 89 d1 ff 89 e3 89 82 89 ff d1 ff 89 e3 89 82     ................
     af8:	d1 d1 89 ff 89 e3 89 82 ff ff ff d1 89 e3 89 82     ................
     b08:	89 89 89 89 89 e3 89 82 e3 e3 e3 e3 e3 89 82 00     ................
     b18:	89 89 89 89 89 82 82 00 82 82 82 82 82 00 00 00     ................
     b28:	82 89 d1 ff 89 e3 89 82 82 89 d1 ff 89 e3 89 82     ................
     b38:	82 89 d1 ff 89 e3 89 82 82 89 d1 ff 89 e3 89 82     ................
     b48:	82 89 d1 ff 89 e3 89 82 82 89 d1 ff 89 e3 89 82     ................
     b58:	82 89 d1 ff 89 e3 89 82 82 89 d1 ff 89 e3 89 82     ................
     b68:	82 89 e3 89 ff d1 89 82 82 89 e3 89 ff d1 89 82     ................
     b78:	82 89 e3 89 ff d1 89 82 82 89 e3 89 ff d1 89 82     ................
     b88:	82 89 e3 89 ff d1 89 82 82 89 e3 89 ff d1 89 82     ................
     b98:	82 89 e3 89 ff d1 89 82 82 89 e3 89 ff d1 89 82     ................
     ba8:	82 82 82 82 82 82 82 82 89 89 89 89 89 89 89 89     ................
     bb8:	d1 d1 d1 d1 d1 d1 d1 d1 ff ff ff ff ff ff ff ff     ................
     bc8:	89 89 89 89 89 89 89 89 e3 e3 e3 e3 e3 e3 e3 e3     ................
     bd8:	89 89 89 89 89 89 89 89 82 82 82 82 82 82 82 82     ................
     be8:	02 0b 13 54 54 54 03 03 55 0b 09 0b 0a 0b 02 0c     ...TTT..U.......
     bf8:	02 5d 54 0b 54 02 0c 0c 0c 0b 0c 0b 54 0b 0d 0d     .]T.T.......T...
     c08:	0c 0b 0b 0a 0a 0b 56 55 54 0c 0b 54 5d 66 0b 54     ......VUT..T]f.T
     c18:	0b 54 0b 0b 14 54 01 0b 54 0b 55 53 54 53 09 09     .T...T..T.USTS..
     c28:	0d 02 0a 5d 01 01 01 01 0c 55 0a 0a 0b 02 01 01     ...].....U......
     c38:	0b 0c 0b 13 54 02 02 01 55 0b 02 54 0b 03 03 02     ....T...U..T....
     c48:	0a 0b 0b 0a 0a 02 02 02 0a 55 0a 53 01 02 04 03     .........U.S....
     c58:	53 55 0b 0b 0a 02 03 03 54 02 0b 0a 0a 03 03 03     SU......T.......
     c68:	54 55 0b 0b 54 01 53 0a 0b 0b 55 5d 13 53 5c 53     TU..T.S...U].S\S
     c78:	0b 54 0a 53 0a 53 53 54 54 0a 53 53 0b 14 5c 0a     .T.S.SSTT.SS..\.
     c88:	55 0b 0b 0a 0c 0b 54 54 02 0b 0b 55 0c 02 54 54     U.....TT...U..TT
     c98:	0b 0b 02 54 03 0c 54 0a 0c 0d 55 02 0b 0a 53 0b     ...T..T...U...S.
     ca8:	0b 0b 5e 0a 0b 0d 03 02 0b 02 0c 0b 0b 03 0d 02     ..^.............
     cb8:	01 56 0d 0c 0b 0b 0c 02 55 0d 0c 03 0b 55 0b 0b     .V......U....U..
     cc8:	0c 03 55 02 0c 0b 02 03 4d 0b 02 02 55 0b 02 0b     ..U.....M...U...
     cd8:	0b 0c 02 0b 14 0b 0c 03 0b 0b 02 03 0b 02 02 02     ................
     ce8:	02 03 0d 03 02 0c 0b 0b 0b 0c 02 0c 0b 0b 55 54     ..............UT
     cf8:	0c 0c 0d 04 0c 02 0b 54 02 55 0d 0c 0b 55 54 0b     .......T.U...UT.
     d08:	0b 02 0d 55 02 0d 0b 0a 56 02 02 02 0c 55 0b 0a     ...U....V....U..
     d18:	0b 0b 14 0c 0c 54 54 0a 0c 02 4c 0b 0b 54 0b 54     .....TT...L..T.T
     d28:	0b 0b 03 03 03 03 03 01 02 03 0c 0c 03 0b 03 0c     ................
     d38:	5d 55 03 03 0c 0c 0b 54 54 0b 0c 0b 0b 0b 02 0a     ]U.....TT.......
     d48:	54 54 03 56 54 02 0a 0b 56 02 0c 0c 02 0a 0a 0a     TT.VT...V.......
     d58:	0a 0c 0d 02 0a 53 0a 01 55 02 03 0b 0a 53 09 01     .....S..U....S..
     d68:	0b 53 0b 0a 02 0b 0a 0b 01 0a 53 53 03 0a 0a 5d     .S........SS...]
     d78:	0a 54 0a 0a 02 01 53 53 01 01 0a 0a 0b 0b 0a 02     .T....SS........
     d88:	0a 0b 0b 5c 0b 0a 0a 0a 0a 0b 0b 0a 0b 0b 0a 01     ...\............
     d98:	02 0b 0b 0b 0a 0b 0a 0b 02 0a 0a 01 13 53 0a 0a     .............S..
     da8:	0b 02 0c 0a 0a 53 02 02 55 0e 02 0a 53 54 01 0b     .....S..U...ST..
     db8:	0b 02 03 0a 0a 01 0b 0c 02 02 0c 01 01 02 0b 02     ................
     dc8:	03 03 03 02 02 0c 02 03 0d 0c 0c 0b 02 0b 01 02     ................
     dd8:	0b 03 02 03 0a 0a 0a 54 02 03 02 03 01 0b 0b 0a     .......T........
     de8:	00 00 00 00 40 80 80 80 00 00 00 40 80 c8 c8 c8     ....@......@....
     df8:	00 00 40 80 d1 e0 e0 e0 00 40 80 d1 f0 00 00 00     ..@......@......
     e08:	40 80 d1 f0 00 00 00 00 80 c8 e0 00 00 00 f0 f0     @...............
     e18:	80 c8 e0 00 00 00 e0 00 80 c8 e0 00 00 00 00 00     ................
     e28:	80 80 40 00 00 00 00 00 c8 c8 80 40 00 00 00 00     ..@........@....
     e38:	e0 e0 d1 80 40 00 00 00 00 00 f0 d1 80 40 00 00     ....@........@..
     e48:	00 00 00 f0 d1 80 40 00 00 00 00 00 e0 c8 80 00     ......@.........
     e58:	00 00 00 00 e0 c8 80 00 00 00 00 00 e0 c8 80 00     ................
     e68:	00 00 00 00 00 00 80 80 00 00 00 00 00 80 c8 c8     ................
     e78:	00 00 00 00 80 c8 e0 e0 00 00 00 80 c8 e0 00 00     ................
     e88:	00 00 80 c8 e0 00 00 00 00 80 c8 e0 00 00 00 00     ................
     e98:	00 80 c8 e0 00 00 00 00 00 00 80 c8 e0 e0 00 00     ................
     ea8:	80 00 00 00 00 00 00 00 c8 80 00 00 00 00 00 00     ................
     eb8:	e0 c8 80 00 00 00 00 00 00 e0 c8 80 00 00 00 00     ................
     ec8:	00 e0 c8 80 00 00 00 00 00 e0 c8 80 00 00 00 00     ................
     ed8:	00 e0 c8 80 00 00 00 00 00 e0 c8 80 00 00 00 00     ................
     ee8:	00 00 00 00 80 80 80 80 00 00 00 80 c8 c8 c8 c8     ................
     ef8:	00 00 80 c8 e0 e0 e0 e0 00 80 c8 e0 00 00 00 00     ................
     f08:	80 c8 e0 00 00 00 00 00 80 c8 e0 00 00 00 f0 f0     ................
     f18:	00 80 c8 e0 e0 f0 f0 f0 00 80 c8 e0 00 00 00 00     ................
     f28:	80 80 40 00 00 00 00 00 c8 c8 80 40 00 00 00 00     ..@........@....
     f38:	e0 e0 d1 80 40 00 00 00 00 00 f0 d1 80 40 00 00     ....@........@..
     f48:	00 00 00 f0 d1 80 40 00 f0 00 00 00 e0 c8 80 00     ......@.........
     f58:	f0 00 00 00 e0 c8 80 00 00 00 00 f0 d1 80 40 00     ..............@.
     f68:	00 00 00 80 80 80 80 80 00 00 80 c8 c8 c8 c8 c8     ................
     f78:	00 80 c8 e0 e0 e0 e0 e0 80 c8 e0 00 00 00 00 00     ................
     f88:	80 c8 e0 00 00 00 00 00 40 80 d1 f0 f0 f0 f0 f0     ........@.......
     f98:	00 40 80 d1 d1 e0 00 00 00 00 80 c8 c8 e0 00 00     .@..............
     fa8:	80 80 80 80 00 00 00 00 c8 c8 c8 c8 80 00 00 00     ................
     fb8:	e0 e0 e0 e0 c8 80 00 00 00 00 00 00 e0 c8 80 00     ................
     fc8:	00 00 00 00 e0 c8 80 00 f0 00 00 00 e0 c8 80 00     ................
     fd8:	00 00 00 f0 d1 80 40 00 00 00 00 e0 c8 80 00 00     ......@.........
     fe8:	00 00 00 80 80 80 00 00 00 00 80 c8 c8 c8 80 40     ...............@
     ff8:	00 80 c8 e0 e0 e0 c8 80 80 c8 e0 00 00 00 e0 d1     ................
    1008:	80 c8 e0 00 00 00 e0 d1 80 c8 e0 00 00 00 e0 d1     ................
    1018:	80 c8 e0 00 00 00 f0 f0 80 c8 e0 00 00 00 00 00     ................
    1028:	40 80 80 40 00 00 00 00 80 c8 c8 80 40 00 00 00     @..@........@...
    1038:	d1 e0 e0 d1 80 40 00 00 f0 00 00 f0 d1 80 40 00     .....@........@.
    1048:	f0 00 00 f0 d1 80 40 00 f0 00 00 f0 d1 80 40 00     ......@.......@.
    1058:	f0 00 00 f0 d1 80 40 00 00 00 00 00 e0 c8 80 00     ......@.........
    1068:	00 00 00 80 80 80 80 80 00 00 80 c8 c8 c8 c8 c8     ................
    1078:	00 80 c8 e0 e0 e0 e0 e0 80 c8 e0 00 00 00 00 00     ................
    1088:	80 c8 e0 00 00 00 00 00 80 c8 e0 00 00 00 f0 f0     ................
    1098:	80 c8 e0 00 00 00 f0 f0 80 c8 e0 00 00 00 00 00     ................
    10a8:	80 80 80 80 00 00 00 00 c8 c8 c8 c8 80 00 00 00     ................
    10b8:	e0 e0 e0 e0 c8 80 00 00 00 00 00 00 e0 c8 80 00     ................
    10c8:	00 00 00 00 e0 c8 80 00 f0 f0 f0 f0 d1 80 40 00     ..............@.
    10d8:	f0 f0 e0 d1 80 40 00 00 00 00 00 e0 c8 80 00 00     .....@..........
    10e8:	00 00 00 00 40 80 80 80 00 00 00 40 80 c8 c8 c8     ....@......@....
    10f8:	00 00 40 80 d1 e0 e0 e0 00 40 80 d1 f0 00 00 00     ..@......@......
    1108:	40 80 d1 f0 00 00 00 00 80 c8 e0 00 00 00 f0 f0     @...............
    1118:	80 c8 e0 00 00 00 f0 f0 80 c8 e0 00 00 00 00 00     ................
    1128:	00 00 00 80 80 80 80 80 00 00 80 c8 c8 c8 c8 c8     ................
    1138:	00 80 c8 e0 e0 e0 e0 e0 80 c8 e0 00 00 00 00 00     ................
    1148:	80 c8 e0 00 00 00 00 00 40 80 d1 f0 f0 f0 f0 f0     ........@.......
    1158:	00 40 80 d1 d1 d1 d1 f0 00 00 40 80 80 d1 f0 00     .@........@.....
    1168:	80 80 80 80 00 00 00 00 c8 c8 c8 c8 80 00 00 00     ................
    1178:	e0 e0 e0 e0 c8 80 00 00 00 00 00 00 e0 c8 80 00     ................
    1188:	00 00 00 00 e0 c8 80 00 f0 00 00 00 e0 c8 80 00     ................
    1198:	00 00 00 e0 c8 80 00 00 00 00 e0 c8 80 00 00 00     ................
    11a8:	00 00 00 00 40 80 80 80 00 00 00 40 80 c8 c8 c8     ....@......@....
    11b8:	00 00 40 80 d1 e0 e0 e0 00 40 80 d1 f0 00 00 00     ..@......@......
    11c8:	40 80 d1 f0 00 00 00 00 80 c8 e0 00 00 00 f0 f0     @...............
    11d8:	80 c8 e0 00 00 00 f0 f0 00 80 c8 e0 00 00 00 00     ................
    11e8:	80 80 40 00 00 00 00 00 c8 c8 80 40 00 00 00 00     ..@........@....
    11f8:	e0 e0 d1 80 40 00 00 00 00 00 f0 d1 80 40 00 00     ....@........@..
    1208:	00 00 00 f0 d1 80 40 00 f0 00 00 00 e0 c8 80 00     ......@.........
    1218:	f0 00 00 00 e0 c8 80 00 00 00 00 e0 c8 80 00 00     ................
    1228:	00 00 00 00 40 80 80 80 00 00 00 40 80 c8 c8 c8     ....@......@....
    1238:	00 00 40 80 d1 e0 e0 e0 00 40 80 d1 f0 00 00 00     ..@......@......
    1248:	40 80 d1 f0 00 00 00 00 80 c8 e0 00 00 00 f0 f0     @...............
    1258:	80 c8 e0 00 00 00 f0 f0 40 80 d1 f0 00 00 00 00     ........@.......
    1268:	80 80 40 00 00 00 00 00 c8 c8 80 40 00 00 00 00     ..@........@....
    1278:	e0 e0 d1 80 40 00 00 00 00 00 f0 d1 80 40 00 00     ....@........@..
    1288:	00 00 00 f0 d1 80 40 00 f0 00 00 00 e0 c8 80 00     ......@.........
    1298:	f0 00 00 00 e0 c8 80 00 00 00 00 00 e0 c8 80 00     ................
    12a8:	80 c8 e0 00 00 00 00 00 80 c8 e0 00 00 00 00 f0     ................
    12b8:	80 c8 e0 00 00 00 00 00 00 80 c8 e0 00 00 00 00     ................
    12c8:	00 00 80 c8 e0 f0 f0 f0 00 00 00 80 c8 d1 d1 d1     ................
    12d8:	00 00 00 00 80 80 80 80 00 00 00 00 00 40 40 40     .............@@@
    12e8:	f0 00 00 00 e0 c8 80 00 e0 00 00 00 e0 c8 80 00     ................
    12f8:	00 00 00 00 e0 c8 80 00 00 00 00 e0 c8 80 00 00     ................
    1308:	f0 f0 e0 c8 80 00 00 00 d1 d1 c8 80 00 00 00 00     ................
    1318:	80 80 80 00 00 00 00 00 40 40 00 00 00 00 00 00     ........@@......
    1328:	00 00 00 80 c8 e0 00 00 00 00 80 c8 e0 e0 00 00     ................
    1338:	00 80 c8 e0 00 00 00 00 00 80 c8 e0 00 00 00 00     ................
    1348:	00 40 80 d1 f0 f0 f0 f0 00 00 40 80 d1 d1 d1 d1     .@........@.....
    1358:	00 00 00 40 80 80 80 80 00 00 00 00 40 40 40 40     ...@........@@@@
    1368:	00 e0 c8 80 00 00 00 00 00 e0 e0 c8 80 00 00 00     ................
    1378:	00 00 00 e0 c8 80 00 00 00 00 00 e0 c8 80 00 00     ................
    1388:	f0 f0 f0 d1 80 40 00 00 d1 d1 d1 80 40 00 00 00     .....@......@...
    1398:	80 80 80 40 00 00 00 00 40 40 40 00 00 00 00 00     ...@....@@@.....
    13a8:	80 c8 e0 00 00 00 00 00 80 c8 e0 00 00 00 e0 e0     ................
    13b8:	80 c8 e0 00 00 00 00 00 80 c8 e0 00 00 00 00 00     ................
    13c8:	40 80 d1 f0 f0 f0 f0 f0 00 40 80 d1 d1 d1 d1 d1     @........@......
    13d8:	00 00 40 80 80 80 80 80 00 00 00 40 40 40 40 40     ..@........@@@@@
    13e8:	00 00 f0 d1 80 40 00 00 e0 e0 e0 e0 c8 80 00 00     .....@..........
    13f8:	00 00 00 00 e0 c8 80 00 00 00 00 00 e0 c8 80 00     ................
    1408:	f0 f0 f0 f0 d1 80 40 00 d1 d1 d1 d1 80 40 00 00     ......@......@..
    1418:	80 80 80 80 40 00 00 00 40 40 40 40 00 00 00 00     ....@...@@@@....
    1428:	00 80 c8 e0 e0 d1 f0 f0 80 c8 e0 00 00 f0 e0 e0     ................
    1438:	80 c8 e0 00 00 00 00 00 40 80 d1 f0 00 00 00 00     ........@.......
    1448:	00 40 80 d1 f0 f0 f0 f0 00 00 40 80 d1 d1 d1 d1     .@........@.....
    1458:	00 00 00 40 80 80 80 80 00 00 00 00 40 40 40 40     ...@........@@@@
    1468:	80 c8 e0 00 00 00 00 00 00 80 c8 e0 e0 e0 e0 e0     ................
    1478:	00 00 80 c8 c8 c8 c8 d1 00 00 00 80 80 80 80 d1     ................
    1488:	00 00 00 00 00 00 80 c8 00 00 00 00 00 00 00 80     ................
	...
    14ac:	e0 c8 80 00 f0 00 00 f0 d1 80 40 00 f0 00 00 f0     ..........@.....
    14bc:	d1 80 40 00 f0 00 00 f0 d1 80 40 00 e0 f0 f0 e0     ..@.......@.....
    14cc:	c8 80 00 00 c8 d1 d1 c8 80 00 00 00 80 80 80 80     ................
    14dc:	00 00 00 00 00 40 40 00 00 00 00 00 80 c8 e0 00     .....@@.........
    14ec:	00 00 00 00 00 80 c8 e0 e0 e0 e0 e0 80 c8 e0 00     ................
    14fc:	00 00 00 00 80 c8 e0 00 00 00 00 00 40 80 d1 f0     ............@...
    150c:	f0 f0 f0 f0 00 40 80 d1 d1 d1 d1 d1 00 00 40 80     .....@........@.
    151c:	80 80 80 80 00 00 00 40 40 40 40 40 00 00 00 00     .......@@@@@....
    152c:	e0 c8 80 00 e0 00 00 00 e0 c8 80 00 00 00 00 00     ................
    153c:	e0 c8 80 00 00 00 00 e0 c8 80 00 00 f0 f0 e0 c8     ................
    154c:	80 00 00 00 d1 d1 c8 80 00 00 00 00 80 80 80 00     ................
    155c:	00 00 00 00 40 40 00 00 00 00 00 00 80 c8 e0 00     ....@@..........
    156c:	00 00 00 00 80 c8 e0 00 00 00 e0 e0 80 c8 e0 00     ................
    157c:	00 00 00 00 00 80 c8 e0 00 00 00 00 00 00 80 c8     ................
    158c:	e0 f0 f0 f0 00 00 00 80 c8 d1 d1 d1 00 00 00 00     ................
    159c:	80 80 80 80 00 00 00 00 00 40 40 40 00 00 00 80     .........@@@....
    15ac:	c8 e0 00 00 00 00 00 80 c8 e0 00 00 00 00 00 80     ................
    15bc:	c8 e0 00 00 00 00 00 80 c8 e0 00 00 00 00 00 40     ...............@
    15cc:	80 d1 f0 f0 00 00 00 00 40 80 d1 d1 00 00 00 00     ........@.......
    15dc:	00 40 80 80 00 00 00 00 00 00 40 40 00 e0 c8 80     .@........@@....
    15ec:	00 00 00 00 00 e0 c8 80 00 00 00 00 00 e0 c8 80     ................
    15fc:	00 00 00 00 00 e0 c8 80 00 00 00 00 f0 d1 80 40     ...............@
    160c:	00 00 00 00 d1 80 40 00 00 00 00 00 80 40 00 00     ......@......@..
    161c:	00 00 00 00 40 00 00 00 00 00 00 00 40 80 d1 f0     ....@.......@...
    162c:	00 00 00 00 80 c8 e0 00 00 00 e0 e0 80 c8 e0 00     ................
    163c:	00 00 00 00 00 80 c8 e0 00 00 00 00 00 00 80 c8     ................
    164c:	e0 f0 f0 f0 00 00 00 80 c8 d1 d1 d1 00 00 00 00     ................
    165c:	80 80 80 80 00 00 00 00 00 40 40 40 00 00 00 f0     .........@@@....
    166c:	d1 80 40 00 e0 00 00 00 e0 c8 80 00 00 00 00 00     ..@.............
    167c:	e0 c8 80 00 00 00 00 e0 c8 80 00 00 f0 f0 e0 c8     ................
    168c:	80 00 00 00 d1 d1 c8 80 00 00 00 00 80 80 80 00     ................
    169c:	00 00 00 00 40 40 00 00 00 00 00 00 00 40 80 d1     ....@@.......@..
    16ac:	f0 00 00 00 00 80 c8 e0 e0 e0 e0 e0 80 c8 e0 00     ................
    16bc:	00 00 00 00 80 c8 e0 00 00 00 00 00 40 80 d1 f0     ............@...
    16cc:	f0 f0 f0 f0 00 40 80 d1 d1 d1 d1 d1 00 00 40 80     .....@........@.
    16dc:	80 80 80 80 00 00 00 40 40 40 40 40 00 00 00 00     .......@@@@@....
    16ec:	40 80 80 80 00 00 00 40 80 c8 c8 c8 00 00 40 80     @......@......@.
    16fc:	d1 e0 e0 e0 00 40 80 d1 f0 00 00 00 40 80 d1 f0     .....@......@...
    170c:	00 00 00 00 80 c8 e0 00 00 00 f0 f0 80 c8 e0 00     ................
    171c:	00 00 e0 d1 80 c8 e0 00 00 00 e0 c8 80 80 80 80     ................
    172c:	00 00 00 00 c8 c8 c8 c8 80 00 00 00 e0 e0 e0 e0     ................
    173c:	c8 80 00 00 00 00 00 00 e0 c8 80 00 00 00 00 00     ................
    174c:	e0 c8 80 00 f0 f0 f0 f0 d1 80 40 00 d1 d1 d1 d1     ..........@.....
    175c:	80 40 00 00 80 80 80 80 40 00 00 00 00 00 00 80     .@......@.......
    176c:	80 80 80 80 00 00 80 c8 c8 c8 c8 c8 00 80 c8 e0     ................
    177c:	e0 e0 e0 e0 80 c8 e0 00 00 00 00 00 80 c8 e0 00     ................
    178c:	00 00 00 00 80 c8 e0 00 00 00 f0 f0 80 c8 e0 00     ................
    179c:	00 00 e0 d1 80 c8 e0 00 00 00 e0 c8 80 80 40 00     ..............@.
    17ac:	00 00 00 00 c8 c8 80 40 00 00 00 00 e0 e0 d1 80     .......@........
    17bc:	40 00 00 00 00 00 f0 d1 80 40 00 00 00 00 00 f0     @........@......
    17cc:	d1 80 40 00 f0 00 00 00 e0 c8 80 00 e0 00 00 00     ..@.............
    17dc:	e0 c8 80 00 e0 00 00 00 e0 c8 80 00 80 80 80 80     ................
    17ec:	00 00 00 00 c8 c8 c8 c8 80 00 00 00 e0 e0 e0 e0     ................
    17fc:	c8 80 00 00 00 00 00 00 e0 c8 80 00 00 00 00 00     ................
    180c:	e0 c8 80 00 f0 f0 f0 f0 d1 80 40 00 f0 f0 f0 d1     ..........@.....
    181c:	80 40 00 00 00 00 00 e0 c8 80 00 00 00 00 00 00     .@..............
    182c:	40 80 80 80 00 00 00 40 80 c8 c8 c8 00 00 40 80     @......@......@.
    183c:	d1 e0 e0 e0 00 40 80 d1 f0 00 00 00 40 80 d1 f0     .....@......@...
    184c:	00 00 00 00 80 c8 e0 00 00 00 f0 f0 80 c8 e0 00     ................
    185c:	00 00 e0 e0 80 c8 e0 00 00 00 e0 f0 80 80 80 80     ................
    186c:	00 00 00 00 c8 c8 c8 c8 80 00 00 00 e0 e0 e0 e0     ................
    187c:	c8 80 00 00 00 00 00 00 e0 c8 80 00 00 00 00 00     ................
    188c:	e0 c8 80 00 f0 f0 f0 f0 d1 80 40 00 f0 f0 f0 f0     ..........@.....
    189c:	d1 80 40 00 00 00 00 00 e0 c8 80 00 00 00 00 80     ..@.............
    18ac:	80 80 00 00 00 00 80 c8 c8 c8 80 00 00 80 c8 e0     ................
    18bc:	e0 e0 c8 80 80 c8 e0 00 00 00 e0 c8 80 c8 e0 00     ................
    18cc:	00 00 e0 c8 80 c8 e0 00 00 00 e0 d1 80 c8 e0 00     ................
    18dc:	00 00 f0 f0 80 c8 e0 00 00 00 00 00 00 80 80 80     ................
    18ec:	00 00 00 00 80 c8 c8 c8 80 00 00 00 c8 e0 e0 e0     ................
    18fc:	c8 80 00 00 e0 00 00 00 e0 c8 80 00 e0 00 00 00     ................
    190c:	e0 c8 80 00 e0 00 00 00 e0 c8 80 00 f0 00 00 00     ................
    191c:	e0 c8 80 00 00 00 00 00 e0 c8 80 00 00 00 00 40     ...............@
    192c:	80 80 80 80 00 00 40 80 c8 c8 c8 c8 00 40 80 d1     ......@......@..
    193c:	e0 e0 e0 e0 40 80 d1 f0 00 00 00 00 40 80 d1 f0     ....@.......@...
    194c:	00 00 00 00 00 80 c8 e0 f0 f0 00 00 00 00 80 c8     ................
    195c:	d1 e0 00 00 00 00 00 80 c8 e0 00 00 80 80 80 40     ...............@
    196c:	00 00 00 00 c8 c8 c8 80 40 00 00 00 e0 e0 e0 d1     ........@.......
    197c:	80 40 00 00 00 00 00 f0 d1 80 40 00 00 00 00 f0     .@........@.....
    198c:	d1 80 40 00 00 f0 f0 e0 c8 80 00 00 00 e0 d1 c8     ..@.............
    199c:	80 00 00 00 00 e0 c8 80 00 00 00 00 00 00 00 00     ................
	...
    19bc:	00 00 00 80 00 00 00 00 00 00 80 c8 00 00 00 00     ................
    19cc:	00 00 80 c8 00 00 00 40 40 40 80 c8 00 00 40 80     .......@@@....@.
    19dc:	80 80 80 c8 00 40 80 d1 d1 d1 80 c8 00 80 80 80     .....@..........
    19ec:	00 00 00 00 80 c8 c8 c8 80 00 00 00 c8 e0 e0 e0     ................
    19fc:	c8 80 00 00 e0 00 00 00 e0 c8 80 00 e0 00 00 00     ................
    1a0c:	e0 c8 80 00 e0 00 00 00 e0 c8 80 00 e0 00 00 00     ................
    1a1c:	e0 c8 80 00 e0 00 00 00 e0 c8 80 00 80 c8 e0 00     ................
    1a2c:	00 00 00 00 80 c8 e0 00 00 00 e0 e0 80 c8 e0 00     ................
    1a3c:	00 00 e0 c8 80 c8 e0 00 00 00 e0 c8 40 80 d1 f0     ............@...
    1a4c:	f0 f0 d1 80 00 40 80 d1 d1 d1 80 40 00 00 40 80     .....@.....@..@.
    1a5c:	80 80 40 00 00 00 00 40 40 40 00 00 00 00 00 00     ..@....@@@......
    1a6c:	e0 c8 80 00 e0 00 00 00 e0 c8 80 00 e0 00 00 00     ................
    1a7c:	e0 c8 80 00 e0 00 00 00 e0 c8 80 00 d1 f0 f0 f0     ................
    1a8c:	d1 80 40 00 80 d1 d1 d1 80 40 00 00 40 80 80 80     ..@......@..@...
    1a9c:	40 00 00 00 00 40 40 40 00 00 00 00 80 c8 e0 00     @....@@@........
    1aac:	00 00 e0 c8 80 c8 e0 00 00 00 e0 e0 80 c8 e0 00     ................
    1abc:	00 00 00 00 00 80 c8 e0 00 00 00 00 00 00 80 c8     ................
    1acc:	e0 f0 f0 f0 00 00 00 80 c8 d1 d1 d1 00 00 00 00     ................
    1adc:	80 80 80 80 00 00 00 00 00 40 40 40 c8 c8 c8 c8     .........@@@....
    1aec:	80 00 00 00 e0 e0 e0 e0 c8 80 00 00 00 00 00 00     ................
    1afc:	e0 c8 80 00 00 00 00 00 e0 c8 80 00 f0 f0 f0 f0     ................
    1b0c:	d1 80 40 00 d1 d1 d1 d1 80 40 00 00 80 80 80 80     ..@......@......
    1b1c:	40 00 00 00 40 40 40 40 00 00 00 00 80 c8 e0 00     @...@@@@........
    1b2c:	00 00 e0 c8 80 c8 e0 00 00 00 e0 e0 80 c8 e0 00     ................
    1b3c:	00 00 00 00 80 c8 e0 00 00 00 00 00 40 80 d1 f0     ............@...
    1b4c:	f0 f0 f0 f0 00 40 80 d1 d1 d1 d1 d1 00 00 40 80     .....@........@.
    1b5c:	80 80 80 80 00 00 00 40 40 40 40 40 e0 00 00 00     .......@@@@@....
    1b6c:	e0 c8 80 00 e0 00 00 00 e0 c8 80 00 00 00 00 00     ................
    1b7c:	e0 c8 80 00 00 00 00 e0 c8 80 00 00 f0 f0 e0 c8     ................
    1b8c:	80 00 00 00 d1 d1 c8 80 00 00 00 00 80 80 80 00     ................
    1b9c:	00 00 00 00 40 40 00 00 00 00 00 00 00 00 00 e0     ....@@..........
    1bac:	c8 80 00 00 e0 e0 e0 e0 c8 80 00 00 00 00 00 00     ................
    1bbc:	e0 c8 80 00 00 00 00 00 e0 c8 80 00 f0 f0 f0 f0     ................
    1bcc:	d1 80 40 00 d1 d1 d1 d1 80 40 00 00 80 80 80 80     ..@......@......
    1bdc:	40 00 00 00 40 40 40 40 00 00 00 00 00 00 00 e0     @...@@@@........
    1bec:	c8 80 00 00 e0 e0 e0 c8 80 00 00 00 c8 c8 c8 80     ................
    1bfc:	00 00 00 00 80 80 80 00 00 00 00 00 40 00 00 00     ............@...
	...
    1c28:	80 c8 e0 00 00 00 e0 f0 80 c8 e0 00 00 00 e0 e0     ................
    1c38:	80 c8 e0 00 00 00 00 00 00 80 c8 e0 00 00 00 00     ................
    1c48:	00 00 80 c8 e0 f0 f0 f0 00 00 00 80 c8 d1 d1 d1     ................
    1c58:	00 00 00 00 80 80 80 80 00 00 00 00 00 40 40 40     .............@@@
    1c68:	00 00 00 00 e0 c8 80 00 e0 00 00 00 e0 c8 80 00     ................
    1c78:	00 00 00 00 e0 c8 80 00 00 00 00 00 e0 c8 80 00     ................
    1c88:	f0 f0 f0 f0 d1 80 40 00 d1 d1 d1 d1 80 40 00 00     ......@......@..
    1c98:	80 80 80 80 40 00 00 00 40 40 40 40 00 00 00 00     ....@...@@@@....
    1ca8:	00 00 40 80 c8 e0 00 00 00 40 80 d1 e0 e0 00 00     ..@......@......
    1cb8:	40 80 d1 f0 00 00 00 00 40 80 d1 f0 00 00 00 00     @.......@.......
    1cc8:	00 80 c8 e0 f0 f0 f0 f0 00 00 80 c8 d1 d1 d1 d1     ................
    1cd8:	00 00 00 80 80 80 80 80 00 00 00 00 40 40 40 40     ............@@@@
    1ce8:	00 e0 c8 80 40 00 00 00 00 e0 e0 d1 80 40 00 00     ....@........@..
    1cf8:	00 00 00 f0 d1 80 40 00 00 00 00 f0 d1 80 40 00     ......@.......@.
    1d08:	f0 f0 f0 e0 c8 80 00 00 d1 d1 d1 c8 80 00 00 00     ................
    1d18:	80 80 80 80 00 00 00 00 40 40 40 00 00 00 00 00     ........@@@.....
    1d28:	40 80 d1 f0 f0 f0 d1 c8 80 c8 e0 00 00 00 e0 e0     @...............
    1d38:	80 c8 e0 00 00 00 00 00 00 80 c8 e0 00 00 00 00     ................
    1d48:	00 00 80 c8 e0 f0 f0 f0 00 00 00 80 c8 d1 d1 d1     ................
    1d58:	00 00 00 00 80 80 80 80 00 00 00 00 00 40 40 40     .............@@@
    1d68:	00 00 00 80 80 80 00 00 00 00 80 c8 c8 c8 80 00     ................
    1d78:	00 80 c8 e0 e0 e0 c8 80 80 c8 e0 00 00 00 e0 c8     ................
    1d88:	80 c8 e0 00 00 00 e0 e0 80 c8 e0 00 00 00 e0 00     ................
    1d98:	80 c8 e0 00 00 00 00 00 80 c8 e0 00 00 00 00 00     ................
    1da8:	00 80 80 80 00 00 00 00 80 c8 c8 c8 80 00 00 00     ................
    1db8:	c8 e0 e0 e0 c8 80 00 00 e0 00 00 00 e0 c8 80 00     ................
    1dc8:	00 00 00 f0 d1 80 40 00 00 00 f0 d1 80 40 00 00     ......@......@..
    1dd8:	00 f0 d1 80 40 00 00 00 f0 d1 80 40 00 00 00 00     ....@......@....
    1de8:	00 00 00 80 80 80 00 00 00 00 80 c8 c8 c8 80 00     ................
    1df8:	00 80 c8 e0 e0 e0 c8 80 80 c8 e0 00 00 00 e0 c8     ................
    1e08:	80 c8 e0 00 00 00 e0 c8 80 c8 e0 00 00 00 e0 c8     ................
    1e18:	80 c8 e0 00 00 00 e0 c8 80 c8 e0 00 00 00 e0 c8     ................
	...
    1e40:	80 00 00 00 00 00 00 00 80 00 00 00 00 00 00 00     ................
    1e50:	80 00 00 00 00 00 00 00 80 00 00 00 00 00 00 00     ................
    1e60:	80 80 80 80 00 00 00 00 00 00 00 80 80 80 00 00     ................
    1e70:	00 00 80 c8 c8 c8 80 00 00 80 c8 e0 e0 e0 c8 80     ................
    1e80:	80 c8 e0 00 00 00 e0 c8 80 c8 e0 00 00 00 00 e0     ................
    1e90:	80 c8 e0 00 00 00 00 00 80 c8 e0 00 00 00 00 00     ................
    1ea0:	80 c8 e0 00 00 00 f0 00 00 80 80 80 00 00 00 00     ................
    1eb0:	80 c8 c8 c8 80 00 00 00 c8 e0 e0 e0 c8 80 00 00     ................
    1ec0:	e0 00 00 00 e0 c8 80 00 00 00 00 00 e0 c8 80 00     ................
    1ed0:	00 00 00 00 e0 c8 80 00 00 00 00 00 e0 c8 80 00     ................
    1ee0:	f0 00 00 00 e0 c8 80 00 00 80 80 80 00 00 00 00     ................
    1ef0:	80 c8 c8 c8 80 00 00 00 c8 e0 e0 e0 c8 80 00 00     ................
    1f00:	e0 00 00 00 e0 c8 80 00 e0 00 00 00 e0 c8 80 00     ................
    1f10:	e0 00 00 00 e0 c8 80 00 00 00 00 00 e0 c8 80 00     ................
    1f20:	00 00 00 00 e0 c8 80 00 80 80 80 00 00 00 00 00     ................
    1f30:	c8 c8 c8 80 00 00 00 00 e0 e0 e0 c8 80 00 00 00     ................
    1f40:	00 00 00 e0 c8 80 00 00 00 00 00 00 e0 c8 80 00     ................
    1f50:	f0 00 00 00 e0 c8 80 00 f0 f0 e0 e0 c8 80 00 00     ................
    1f60:	00 00 00 e0 c8 80 00 00 00 00 00 80 80 80 80 80     ................
    1f70:	00 00 80 c8 c8 c8 c8 c8 00 80 c8 e0 e0 e0 e0 e0     ................
    1f80:	80 c8 e0 00 00 00 00 00 80 c8 e0 00 00 00 00 00     ................
    1f90:	40 80 d1 f0 f0 f0 00 00 00 40 80 d1 d1 e0 00 00     @........@......
    1fa0:	00 00 40 80 c8 e0 00 00 80 80 80 80 00 00 00 00     ..@.............
    1fb0:	c8 c8 c8 c8 80 00 00 00 e0 e0 e0 e0 c8 80 00 00     ................
    1fc0:	00 00 00 00 e0 c8 80 00 00 00 00 00 e0 c8 80 00     ................
    1fd0:	00 f0 f0 f0 d1 80 40 00 00 e0 d1 d1 80 40 00 00     ......@......@..
    1fe0:	00 e0 c8 80 40 00 00 00 80 c8 e0 00 00 00 00 00     ....@...........
    1ff0:	80 c8 e0 00 00 00 f0 00 80 c8 e0 00 00 00 e0 f0     ................
    2000:	80 c8 e0 00 00 00 e0 d1 40 80 d1 f0 f0 f0 d1 80     ........@.......
    2010:	00 40 80 d1 d1 d1 80 40 00 00 40 80 80 80 40 00     .@.....@..@...@.
    2020:	00 00 00 40 40 40 00 00 00 e0 c8 80 00 00 00 00     ...@@@..........
    2030:	00 00 e0 c8 80 00 00 00 00 00 00 e0 c8 80 00 00     ................
    2040:	f0 00 00 00 e0 c8 80 00 d1 f0 f0 f0 d1 80 40 00     ..............@.
    2050:	80 d1 d1 d1 80 40 00 00 40 80 80 80 40 00 00 00     .....@..@...@...
    2060:	00 40 40 40 00 00 00 00 80 c8 e0 00 00 00 e0 f0     .@@@............
    2070:	80 c8 e0 00 00 00 e0 d1 80 c8 e0 00 00 00 e0 c8     ................
    2080:	80 c8 e0 00 00 00 e0 c8 40 80 d1 f0 f0 f0 d1 80     ........@.......
    2090:	00 40 80 d1 d1 d1 80 40 00 00 40 80 80 80 40 00     .@.....@..@...@.
    20a0:	00 00 00 40 40 40 00 00 e0 00 00 00 e0 c8 80 00     ...@@@..........
    20b0:	e0 00 00 00 e0 c8 80 00 e0 00 00 00 e0 c8 80 00     ................
    20c0:	e0 00 00 00 e0 c8 80 00 d1 f0 f0 f0 d1 80 40 00     ..............@.
    20d0:	80 d1 d1 d1 80 40 00 00 40 80 80 80 40 00 00 00     .....@..@...@...
    20e0:	00 40 40 40 00 00 00 00 00 00 00 00 e0 c8 80 00     .@@@............
    20f0:	f0 00 00 00 e0 c8 80 00 e0 00 00 00 e0 c8 80 00     ................
    2100:	e0 00 00 00 e0 c8 80 00 d1 f0 f0 f0 d1 80 40 00     ..............@.
    2110:	80 d1 d1 d1 80 40 00 00 40 80 80 80 40 00 00 00     .....@..@...@...
    2120:	00 40 40 40 00 00 00 00 00 00 f0 d1 80 40 00 00     .@@@.........@..
    2130:	e0 e0 d1 80 40 00 00 00 c8 c8 80 40 00 00 00 00     ....@......@....
    2140:	80 80 40 00 00 00 00 00 40 00 00 00 00 00 00 00     ..@.....@.......
	...
    2168:	80 c8 e0 00 00 00 e0 e0 80 c8 e0 00 00 00 e0 f0     ................
    2178:	80 c8 e0 00 00 00 00 00 00 80 c8 e0 00 00 00 00     ................
    2188:	00 00 80 c8 e0 f0 f0 f0 00 00 00 80 c8 d1 d1 d1     ................
    2198:	00 00 00 00 80 80 80 80 00 00 00 00 00 40 40 40     .............@@@
    21a8:	f0 00 00 00 e0 c8 80 00 00 00 00 00 e0 c8 80 00     ................
    21b8:	00 00 00 00 e0 c8 80 00 00 00 00 00 e0 c8 80 00     ................
    21c8:	f0 f0 f0 f0 d1 80 40 00 d1 d1 d1 d1 80 40 00 00     ......@......@..
    21d8:	80 80 80 80 40 00 00 00 40 40 40 40 00 00 00 00     ....@...@@@@....
    21e8:	00 00 f0 d1 80 40 00 00 00 00 e0 c8 80 00 00 00     .....@..........
    21f8:	00 00 00 e0 c8 80 00 00 f0 00 00 00 e0 c8 80 00     ................
    2208:	d1 f0 f0 f0 d1 80 40 00 80 d1 d1 d1 80 40 00 00     ......@......@..
    2218:	40 80 80 80 40 00 00 00 00 40 40 40 00 00 00 00     @...@....@@@....
    2228:	00 40 80 d1 f0 00 00 00 40 80 d1 f0 f0 f0 e0 e0     .@......@.......
    2238:	80 c8 e0 00 00 00 00 00 40 80 d1 f0 00 00 00 00     ........@.......
    2248:	00 40 80 d1 f0 f0 f0 f0 00 00 40 80 d1 d1 d1 d1     .@........@.....
    2258:	00 00 00 40 80 80 80 80 00 00 00 00 40 40 40 40     ...@........@@@@
    2268:	00 00 00 80 80 80 00 00 00 00 80 c8 c8 c8 80 00     ................
    2278:	00 80 c8 e0 e0 e0 c8 80 80 c8 e0 00 00 00 e0 c8     ................
    2288:	80 c8 e0 00 00 00 e0 c8 80 c8 e0 00 00 00 e0 c8     ................
    2298:	80 c8 e0 00 00 00 e0 e0 80 c8 e0 00 00 00 e0 00     ................
    22a8:	00 00 00 80 80 00 00 00 00 00 80 c8 c8 80 00 00     ................
    22b8:	00 80 c8 e0 e0 c8 80 00 80 c8 e0 00 00 e0 c8 80     ................
    22c8:	80 c8 e0 00 00 00 e0 c8 40 80 d1 f0 00 00 00 e0     ........@.......
    22d8:	00 40 80 d1 f0 00 00 00 00 00 40 80 d1 f0 00 00     .@........@.....
    22e8:	00 00 80 80 00 00 00 00 00 80 c8 c8 80 00 00 00     ................
    22f8:	80 c8 e0 e0 c8 80 00 00 c8 e0 00 00 e0 c8 80 00     ................
    2308:	e0 00 00 00 e0 c8 80 00 00 00 00 f0 d1 80 40 00     ..............@.
    2318:	00 00 f0 d1 80 40 00 00 00 f0 d1 80 40 00 00 00     .....@......@...
    2328:	00 00 00 80 80 40 00 00 00 00 80 c8 c8 80 40 00     .....@........@.
    2338:	00 80 c8 e0 e0 d1 80 40 80 c8 e0 00 00 f0 d1 80     .......@........
    2348:	80 c8 e0 00 00 00 f0 d1 00 80 c8 e0 00 00 00 f0     ................
    2358:	00 00 80 c8 e0 00 00 00 00 00 00 80 c8 e0 00 00     ................
    2368:	00 40 80 80 00 00 00 00 40 80 c8 c8 80 00 00 00     .@......@.......
    2378:	80 d1 e0 e0 c8 80 00 00 d1 f0 00 00 e0 c8 80 00     ................
    2388:	f0 00 00 00 e0 c8 80 00 00 00 00 e0 c8 80 00 00     ................
    2398:	00 00 e0 c8 80 00 00 00 00 e0 c8 80 00 00 00 00     ................
    23a8:	00 00 00 80 80 80 80 80 00 00 80 c8 c8 c8 c8 c8     ................
    23b8:	00 80 c8 e0 e0 e0 e0 e0 80 c8 e0 00 00 00 00 00     ................
    23c8:	80 c8 e0 00 00 00 00 00 40 80 d1 f0 f0 f0 f0 f0     ........@.......
    23d8:	00 40 80 d1 d1 d1 e0 00 00 00 40 80 c8 e0 00 00     .@........@.....
    23e8:	80 80 80 80 00 00 00 00 c8 c8 c8 c8 80 00 00 00     ................
    23f8:	e0 e0 e0 e0 c8 80 00 00 00 00 00 00 e0 c8 80 00     ................
    2408:	00 00 00 00 e0 c8 80 00 00 00 00 f0 d1 80 40 00     ..............@.
    2418:	00 00 f0 d1 80 40 00 00 00 f0 d1 80 40 00 00 00     .....@......@...
    2428:	00 00 00 00 00 00 80 80 00 00 00 00 00 80 c8 c8     ................
    2438:	00 00 00 00 80 c8 e0 e0 00 00 00 80 c8 e0 00 00     ................
    2448:	00 00 00 80 c8 e0 00 00 00 00 00 80 c8 e0 00 00     ................
    2458:	00 00 00 80 c8 e0 00 00 00 00 00 80 c8 e0 00 00     ................
    2468:	00 00 00 00 00 00 40 80 00 00 00 00 00 40 80 c8     ......@......@..
    2478:	00 00 00 00 40 80 d1 e0 00 00 00 40 80 d1 f0 00     ....@......@....
    2488:	00 00 40 80 d1 f0 00 00 00 00 40 80 d1 f0 00 00     ..@.......@.....
    2498:	00 00 40 80 d1 f0 00 00 00 00 40 80 d1 f0 00 00     ..@.......@.....
    24a8:	80 80 00 00 00 00 00 00 c8 c8 80 00 00 00 00 00     ................
    24b8:	e0 e0 c8 80 00 00 00 00 00 00 e0 c8 80 00 00 00     ................
    24c8:	00 00 e0 c8 80 00 00 00 f0 f0 d1 80 40 00 00 00     ............@...
    24d8:	f0 d1 80 40 00 00 00 00 f0 d1 80 40 00 00 00 00     ...@.......@....
    24e8:	00 00 00 00 80 80 80 80 00 00 00 80 c8 c8 c8 c8     ................
    24f8:	00 00 80 c8 e0 e0 e0 e0 00 80 c8 e0 00 00 00 00     ................
    2508:	80 c8 e0 00 00 00 00 00 80 c8 e0 00 00 00 f0 f0     ................
    2518:	00 80 c8 e0 e0 e0 e0 f0 00 00 80 c8 c8 e0 00 00     ................
    2528:	00 00 00 00 00 80 80 80 00 00 00 00 80 c8 c8 c8     ................
    2538:	00 00 00 80 c8 e0 e0 e0 00 00 80 c8 e0 00 00 00     ................
    2548:	00 00 80 c8 e0 00 00 00 00 00 40 80 d1 f0 f0 00     ..........@.....
    2558:	00 00 00 40 80 d1 f0 00 00 00 00 40 80 d1 f0 00     ...@.......@....
    2568:	40 00 00 00 00 00 00 00 80 40 00 00 00 00 00 00     @........@......
    2578:	d1 80 40 00 00 00 00 00 f0 d1 80 40 00 00 00 00     ..@........@....
    2588:	00 f0 d1 80 40 00 00 00 00 f0 d1 80 40 00 00 00     ....@.......@...
    2598:	00 f0 d1 80 40 00 00 00 00 f0 d1 80 40 00 00 00     ....@.......@...
    25a8:	80 c8 e0 00 00 00 e0 c8 40 80 d1 f0 00 00 00 e0     ........@.......
    25b8:	00 40 80 d1 f0 00 00 00 00 00 40 80 d1 f0 00 00     .@........@.....
    25c8:	00 00 00 40 80 d1 f0 f0 00 00 00 00 40 80 d1 d1     ...@........@...
    25d8:	00 00 00 00 00 40 80 80 00 00 00 00 00 00 40 40     .....@........@@
    25e8:	e0 00 00 00 e0 c8 80 00 00 00 00 f0 d1 80 40 00     ..............@.
    25f8:	00 00 f0 d1 80 40 00 00 00 f0 d1 80 40 00 00 00     .....@......@...
    2608:	f0 d1 80 40 00 00 00 00 d1 80 40 00 00 00 00 00     ...@......@.....
    2618:	80 40 00 00 00 00 00 00 40 00 00 00 00 00 00 00     .@......@.......
    2628:	80 c8 e0 00 00 00 00 00 80 c8 e0 00 00 00 00 00     ................
    2638:	80 c8 e0 00 00 00 00 f0 80 c8 e0 00 00 00 f0 d1     ................
    2648:	40 80 d1 f0 f0 f0 d1 80 00 40 80 d1 d1 d1 80 40     @........@.....@
    2658:	00 00 40 80 80 80 40 00 00 00 00 40 40 40 00 00     ..@...@....@@@..
    2668:	00 00 00 00 e0 c8 80 00 00 00 00 00 e0 c8 80 00     ................
    2678:	00 00 00 00 e0 c8 80 00 f0 00 00 00 e0 c8 80 00     ................
    2688:	d1 f0 f0 f0 d1 80 40 00 80 d1 d1 d1 80 40 00 00     ......@......@..
    2698:	40 80 80 80 40 00 00 00 00 40 40 40 00 00 00 00     @...@....@@@....
    26a8:	00 00 80 c8 e0 00 00 00 00 80 c8 e0 00 00 00 f0     ................
    26b8:	80 c8 e0 00 00 00 f0 d1 80 c8 e0 00 00 f0 d1 80     ................
    26c8:	40 80 d1 f0 f0 d1 80 40 00 40 80 d1 d1 80 40 00     @......@.@....@.
    26d8:	00 00 40 80 80 40 00 00 00 00 00 40 40 00 00 00     ..@..@.....@@...
    26e8:	00 00 e0 c8 80 00 00 00 00 00 00 e0 c8 80 00 00     ................
    26f8:	f0 00 00 00 e0 c8 80 00 d1 f0 00 00 e0 c8 80 00     ................
    2708:	80 d1 f0 f0 d1 80 40 00 40 80 d1 d1 80 40 00 00     ......@.@....@..
    2718:	00 40 80 80 40 00 00 00 00 00 40 40 00 00 00 00     .@..@.....@@....
    2728:	00 00 80 c8 e0 00 00 00 00 80 c8 e0 00 00 00 f0     ................
    2738:	80 c8 e0 00 00 00 00 00 80 c8 e0 00 00 00 00 00     ................
    2748:	40 80 d1 f0 f0 f0 f0 f0 00 40 80 d1 d1 d1 d1 d1     @........@......
    2758:	00 00 40 80 80 80 80 80 00 00 00 40 40 40 40 40     ..@........@@@@@
    2768:	f0 d1 c8 c8 80 00 00 00 e0 e0 e0 e0 c8 80 00 00     ................
    2778:	00 00 00 00 e0 c8 80 00 00 00 00 00 e0 c8 80 00     ................
    2788:	f0 f0 f0 f0 d1 80 40 00 d1 d1 d1 d1 80 40 00 00     ......@......@..
    2798:	80 80 80 80 40 00 00 00 40 40 40 40 00 00 00 00     ....@...@@@@....
    27a8:	00 00 00 80 c8 e0 e0 e0 00 00 00 80 c8 e0 00 00     ................
    27b8:	00 00 00 80 c8 e0 00 00 00 00 00 80 c8 e0 00 00     ................
    27c8:	00 00 00 40 80 d1 f0 f0 00 00 00 00 40 80 d1 d1     ...@........@...
    27d8:	00 00 00 00 00 40 80 80 00 00 00 00 00 00 40 40     .....@........@@
    27e8:	e0 e0 c8 80 00 00 00 00 00 e0 c8 80 00 00 00 00     ................
    27f8:	00 e0 c8 80 00 00 00 00 00 e0 c8 80 00 00 00 00     ................
    2808:	f0 d1 80 40 00 00 00 00 d1 80 40 00 00 00 00 00     ...@......@.....
    2818:	80 40 00 00 00 00 00 00 40 00 00 00 00 00 00 00     .@......@.......
    2828:	00 00 40 80 d1 f0 00 00 00 00 40 80 d1 f0 00 00     ..@.......@.....
    2838:	00 00 40 80 d1 f0 00 00 00 00 00 80 c8 e0 00 00     ..@.............
    2848:	00 00 00 00 80 c8 e0 f0 00 00 00 00 00 80 c8 d1     ................
    2858:	00 00 00 00 00 00 80 80 00 00 00 00 00 00 00 40     ...............@
    2868:	f0 d1 80 40 00 00 00 00 f0 e0 c8 80 00 00 00 00     ...@............
    2878:	00 00 e0 c8 80 00 00 00 00 00 e0 c8 80 00 00 00     ................
    2888:	f0 f0 d1 80 40 00 00 00 d1 d1 80 40 00 00 00 00     ....@......@....
    2898:	80 80 40 00 00 00 00 00 40 40 00 00 00 00 00 00     ..@.....@@......
    28a8:	00 00 40 80 d1 f0 00 00 00 00 40 80 d1 f0 e0 e0     ..@.......@.....
    28b8:	00 00 40 80 d1 f0 00 00 00 00 40 80 d1 f0 00 00     ..@.......@.....
    28c8:	00 00 00 80 c8 e0 f0 f0 00 00 00 00 80 c8 d1 d1     ................
    28d8:	00 00 00 00 00 80 80 80 00 00 00 00 00 00 40 40     ..............@@
    28e8:	00 00 f0 d1 80 40 00 00 f0 e0 d1 80 40 00 00 00     .....@......@...
    28f8:	f0 d1 80 40 00 00 00 00 f0 d1 80 40 00 00 00 00     ...@.......@....
    2908:	e0 c8 80 00 00 00 00 00 c8 80 00 00 00 00 00 00     ................
    2918:	80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2928:	00 00 00 40 80 d1 f0 00 00 00 00 80 c8 e0 f0 00     ...@............
    2938:	00 00 80 c8 e0 00 00 00 00 00 80 c8 e0 00 00 00     ................
    2948:	00 00 40 80 d1 f0 f0 f0 00 00 00 40 80 d1 d1 d1     ..@........@....
    2958:	00 00 00 00 40 80 80 80 00 00 00 00 00 40 40 40     ....@........@@@
    2968:	00 f0 d1 80 40 00 00 00 00 f0 d1 80 40 00 00 00     ....@.......@...
    2978:	00 f0 d1 80 40 00 00 00 00 e0 c8 80 00 00 00 00     ....@...........
    2988:	e0 c8 80 00 00 00 00 00 c8 80 00 00 00 00 00 00     ................
    2998:	80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................

000029a8 <extra_graphics_data>:
	...
    29c4:	00 00 24 3f 00 00 00 00 00 24 3f 00 00 00 00 00     ..$?.....$?.....
    29d4:	24 3f 00 ff 00 00 00 24 3f 00 ff ff 00 00 24 3f     $?.....$?.....$?
    29e4:	00 ff ff ff 00 00 00 00 00 24 3f 3f 00 00 24 3f     .........$??..$?
    29f4:	3f 3f 00 00 24 3f 3f 00 00 00 ff ff 3f 00 00 ff     ??..$??.....?...
    2a04:	ff ff ff ff 00 ff ff ff ff ff ff ff ff ff ff ff     ................
    2a14:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    2a24:	ff ff ff ff 3f 3f 3f 3f 3f 3f 3f 3f 00 00 00 00     ....????????....
    2a34:	00 00 00 00 ff ff ff ff ff ff ff ff ff ff ff ff     ................
    2a44:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    2a54:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    2a64:	ff ff ff ff 3f 3f 24 00 00 00 00 00 00 00 3f 3f     ....??$.......??
    2a74:	3f 24 00 00 ff ff 00 00 00 3f 3f 24 ff ff ff ff     ?$.......??$....
    2a84:	ff 00 00 3f ff ff ff ff ff ff ff 00 ff ff ff ff     ...?............
    2a94:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    2aa4:	ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2ac0:	3f 24 00 00 00 00 00 00 00 3f 24 00 00 00 00 00     ?$.......?$.....
    2ad0:	ff 00 3f 24 00 00 00 00 ff ff 00 3f 24 00 00 00     ..?$.......?$...
    2ae0:	ff ff ff 00 3f 24 00 00 3f 3f 24 00 00 00 00 00     ....?$..??$.....
    2af0:	00 00 3f 3f 24 00 00 00 ff ff 00 00 3f 24 00 00     ..??$.......?$..
    2b00:	ff ff ff ff 00 3f 24 00 ff ff ff ff ff 00 3f 00     .....?$.......?.
    2b10:	ff ff ff ff ff 00 3f 24 ff ff ff ff ff ff 00 3f     ......?$.......?
    2b20:	ff ff ff ff ff ff 00 3f 2c 3f 3f 3f 3f 3f 3f 3f     .......?,???????
    2b30:	3f 00 00 00 00 00 00 00 3f 00 ad ff ff ff ff ff     ?.......?.......
    2b40:	3f 00 ff ff ff ff ff ff 3f 00 ff ff ff ff ff ff     ?.......?.......
    2b50:	3f 00 ff ff ff ff ff ff 3f 00 ff ff ff ff ff ff     ?.......?.......
    2b60:	3f 00 ff ff ff ff ff ff 3f 3f 3f 3f 3f 3f 3f 2c     ?.......???????,
    2b70:	00 00 00 00 00 00 00 3f ff ff ff ff ff ad 00 3f     .......?.......?
    2b80:	ff ff ff ff ff ff 00 3f ff ff ff ff ff ff 00 3f     .......?.......?
    2b90:	ff ff ff ff ff ff 00 3f ff ff ff ff ff ff 00 3f     .......?.......?
    2ba0:	ff ff ff ff ff ff 00 3f 00 24 3f 00 ff ff ff ff     .......?.$?.....
    2bb0:	00 3f 00 ff ff ff ff ff 24 3f 00 ff ff ff ff ff     .?......$?......
    2bc0:	3f 00 ff ff ff ff ff ff 3f 00 ff ff ff ff ff ff     ?.......?.......
    2bd0:	3f 00 ff ff ff ff ff ff 3f 00 ff ff ff ff ff ff     ?.......?.......
    2be0:	3f 00 ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ?...............
    2bf0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    2c00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    2c10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    2c20:	ff ff ff ff ff ff ff ff ff ff ff ff 00 3f 24 00     .............?$.
    2c30:	ff ff ff ff ff 00 3f 00 ff ff ff ff ff 00 3f 24     ......?.......?$
    2c40:	ff ff ff ff ff ff 00 3f ff ff ff ff ff ff 00 3f     .......?.......?
    2c50:	ff ff ff ff ff ff 00 3f ff ff ff ff ff ff 00 3f     .......?.......?
    2c60:	ff ff ff ff ff ff 00 3f ff ff ff ff ff ff ff ff     .......?........
    2c70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    2c80:	ff ff ff ff ff ff ff ff ff ff 00 00 00 00 00 00     ................
    2c90:	ff 00 2c 3f 3f 3f 3f 3f 00 00 3f 2c 00 00 00 00     ..,?????..?,....
    2ca0:	00 00 3f 2c 00 00 00 00 ff ff ff ff ff ff 00 3f     ..?,...........?
    2cb0:	ff ff ff ff ff ff 00 3f ff ff ff ff ff ff 00 3f     .......?.......?
    2cc0:	ff ff ff ff ff ad 00 3f 00 00 00 00 00 00 00 3f     .......?.......?
    2cd0:	3f 3f 3f 3f 3f 3f 3f 2c 00 00 00 00 00 00 00 00     ???????,........
	...
    2ce8:	3f 00 ff ff ff ff ff ff 3f 00 ff ff ff ff ff ff     ?.......?.......
    2cf8:	3f 00 ff ff ff ff ff ff 3f 00 ad ff ff ff ff ff     ?.......?.......
    2d08:	3f 00 00 00 00 00 00 00 2c 3f 3f 3f 3f 3f 3f 3f     ?.......,???????
	...
    2d28:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    2d38:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    2d48:	00 00 ff ff ff ff ff ff 3f 00 ff ff ff ff ff ff     ........?.......
    2d58:	3f 00 ff ff ff ff ff ff 3f 00 ff ff ff ff ff ff     ?.......?.......
    2d68:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    2d78:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    2d88:	ff ff ff ff ff ff 00 00 ff ff ff ff ff ff 00 3f     ...............?
    2d98:	ff ff ff ff ff ff 00 3f ff ff ff ff ff ff 00 3f     .......?.......?
    2da8:	3f 00 ff ff ff ff ff ff 3f 00 ff ff ff ff ff ff     ?.......?.......
    2db8:	3f 00 ff ff ff ff ff ff 3f 00 ff ff ff ff ff ff     ?.......?.......
    2dc8:	3f 00 ff ff ff ff ff ff 3f 00 ff ff ff ff ff ff     ?.......?.......
    2dd8:	3f 00 ff ff ff ff ff ff 3f 00 ff ff ff ff ff ff     ?.......?.......
    2de8:	ff ff ff ff ff ff 00 3f ff ff ff ff ff ff 00 3f     .......?.......?
    2df8:	ff ff ff ff ff ff 00 3f ff ff ff ff ff ff 00 3f     .......?.......?
    2e08:	ff ff ff ff ff ff 00 3f ff ff ff ff ff ff 00 3f     .......?.......?
    2e18:	ff ff ff ff ff ff 00 3f ff ff ff ff ff ff 00 3f     .......?.......?
    2e28:	3f 00 ff ff ff ff ff ff 3f 00 ff ff ff ff ff ff     ?.......?.......
    2e38:	24 3f 00 ff ff ff ff ff 00 3f 00 ff ff ff ff ff     $?.......?......
    2e48:	00 24 3f 00 ff ff ff ff 00 00 3f 00 ff ff ff ff     .$?.......?.....
    2e58:	00 00 24 3f 00 ff ff ff 00 00 00 24 3f 00 ff ff     ..$?.......$?...
    2e68:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    2e78:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    2e88:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    2e98:	ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00     ................
    2ea8:	ff 00 2c 3f 3f 3f 3f 3f ff ff 00 00 00 00 00 00     ..,?????........
    2eb8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    2ec8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    2ed8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
	...
    2f28:	ff ff ff ff ff ff 00 3f ff ff ff ff ff ff 00 3f     .......?.......?
    2f38:	ff ff ff ff ff 00 3f 24 ff ff ff ff ff 00 3f 00     ......?$......?.
    2f48:	ff ff ff ff 00 3f 24 00 ff ff ff ff 00 3f 00 00     .....?$......?..
    2f58:	ff ff ff 00 3f 24 00 00 ff ff 00 3f 24 00 00 00     ....?$.....?$...
    2f68:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    2f78:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    2f88:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff 00 00     ................
    2f98:	ff ff ff ff ff ff 00 3f ff ff ff ff ff ff 00 3f     .......?.......?
    2fa8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    2fb8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    2fc8:	ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00     ................
    2fd8:	3f 3f 3f 3f 3f 3f 3f 3f 00 00 00 00 00 00 00 00     ????????........
    2fe8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    2ff8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3008:	ff ff ff ff ff ff ff ff 00 00 ff ff ff ff ff ff     ................
    3018:	3f 00 ff ff ff ff ff ff 3f 00 ff ff ff ff ff ff     ?.......?.......
    3028:	00 00 00 00 3f 3f 00 00 00 00 00 00 24 3f 3f 3f     ....??......$???
	...
    3068:	00 ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3078:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3088:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3098:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    30a8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    30b8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    30c8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 00     ................
    30d8:	ff ff ff ff ff ff 00 3f ff ff ff ff ff ff 00 3f     .......?.......?
    30e8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    30f8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3108:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3118:	00 ff ff ff ff ff ff ff 00 ff ff ff ff ff ff ff     ................
    3128:	ff ff 00 3f 00 00 00 00 ff ff 00 3f 00 00 00 00     ...?.......?....
    3138:	ff ff 00 3f 00 00 00 00 ff ff 00 3f 00 00 00 00     ...?.......?....
    3148:	ff ff ff 00 3f 00 00 00 ff ff ff 00 3f 00 00 00     ....?.......?...
    3158:	ff ff ff ff 00 3f 00 00 ff ff ff ff ff 00 3f 00     .....?........?.
    3168:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3178:	ff ff ff ff ff ff 00 00 ff ff ff ff 00 00 3f 3f     ..............??
    3188:	00 00 00 00 3f 3f 24 00 3f 3f 3f 3f 24 00 00 00     ....??$.????$...
	...
    31a8:	ff 00 3f 24 00 00 00 00 00 3f 24 00 00 00 00 00     ..?$.....?$.....
    31b8:	3f 24 00 00 00 00 00 00 24 00 00 00 00 00 00 00     ?$......$.......
	...
    31e8:	00 ff ff ff ff ff ff ff 00 ff ff ff ff ff ff ff     ................
    31f8:	2c 00 ff ff ff ff ff ff 3f 00 ad ff ff ff ff ff     ,.......?.......
    3208:	3f 2c 00 00 00 00 00 00 3f 3f 3f 3f 3f 3f 3f 3f     ?,......????????
	...
    322c:	24 3f 00 ff 00 00 00 00 00 24 3f 00 00 00 00 00     $?.......$?.....
    323c:	00 00 24 3f 00 00 00 00 00 00 00 24 00 00 00 00     ..$?.......$....
	...
    3268:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3278:	00 00 ff ff ff ff ff ff 3f 3f 00 00 ff ff ff ff     ........??......
    3288:	00 24 3f 3f 00 00 00 00 00 00 00 24 3f 3f 3f 3f     .$??.......$????
	...
    32a8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    32b8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
	...
    32d0:	3f 3f 3f 3f 3f 3f 3f 3f 00 00 00 00 00 00 00 00     ????????........
	...
    32e8:	ff ff ff ff ff ff 00 3f ff ff ff ff ff ff 00 3f     .......?.......?
    32f8:	ff ff ff ff ff ff 00 3f ff ff ff ff ff ff 00 3f     .......?.......?
    3308:	ff ff ff ff ff ff 00 3f ff ff ff ff ff ff ad 00     .......?........
    3318:	ff ff ff ff ff ff ff 00 ff ff ff ff ff ff ff ff     ................
    3328:	00 00 00 00 00 00 00 3f 00 00 00 00 00 00 00 3f     .......?.......?
    3338:	00 00 00 00 00 00 00 3f 00 00 00 00 00 00 00 3f     .......?.......?
    3348:	00 00 00 00 00 00 3f 00 3f 3f 3f 3f 3f 3f 00 ff     ......?.??????..
    3358:	00 00 00 00 00 00 ff ff ff ff ff ff ff ff ff ff     ................
    3368:	00 ff ff ff ff ff ff ff 00 ff ff ff ff ff ff ff     ................
    3378:	00 ff ff ff ff ff ff ff 00 ff ff ff ff ff ff ff     ................
    3388:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3398:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    33a8:	ff ff ff ff ff ff 00 3f ff ff ff ff ff ff 00 3f     .......?.......?
    33b8:	ff ff ff ff ff ff 00 3f ff ff ff ff ff 00 3f 24     .......?......?$
    33c8:	ff ff ff ff ff 00 3f 00 ff ff ff ff 00 3f 24 00     ......?......?$.
    33d8:	ff ff ff ff 00 3f 00 00 ff ff ff 00 3f 24 00 00     .....?......?$..
    33e8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    33f8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3408:	ff ff ff ff ff ff 00 00 ff ff ff ff 00 00 3f 3f     ..............??
    3418:	ff ff ff ff ff ff 00 00 ff ff ff ff ff ff ff ff     ................
    3428:	ff ff 00 3f 24 00 00 00 ff ff 00 3f 00 00 00 00     ...?$......?....
    3438:	ff 00 3f 2c 00 00 00 00 00 3f 2c 00 00 00 00 00     ..?,.....?,.....
    3448:	3f 2c 00 00 00 00 00 00 3f 2c 00 00 00 00 00 00     ?,......?,......
    3458:	3f 2c 00 00 00 00 00 00 00 3f 2c 00 00 00 00 00     ?,.......?,.....
    3468:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3478:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3488:	ff ff ff ff ff ff ff 00 ff ff ff ff ff ff ad 00     ................
    3498:	ff ff ff ff ff ff 00 3f ff ff ff ff ff ff 00 3f     .......?.......?
    34a8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    34b8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    34c8:	00 00 00 00 00 00 ff ff 3f 3f 3f 3f 3f 3f 00 ff     ........??????..
    34d8:	00 00 00 00 00 00 3f 00 00 00 00 00 00 00 00 3f     ......?........?
    34e8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    34f8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3508:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3518:	ff ff ff ff ff ff ff ff 00 ff ff ff ff ff ff ff     ................
    3528:	ff 00 3f 2c 00 00 00 00 ff ff 00 3f 00 00 00 00     ..?,.......?....
    3538:	ff ff 00 3f 24 00 00 00 ff ff ff 00 3f 24 00 00     ...?$.......?$..
    3548:	ff ff ff ff 00 3f 00 00 ff ff ff ff 00 3f 24 00     .....?.......?$.
    3558:	ff ff ff ff ff 00 3f 00 ff ff ff ff ff 00 3f 24     ......?.......?$

00003568 <sprite_tiles>:
    3568:	95 ff ff ff 00 ff ff 95 ff ff ff 00 00 ff ff ff     ................
    3578:	ff ff ff ff 00 ff ff ff ff ff ff ff 00 ff ff ff     ................
    3588:	ff ff ff ff 00 ff ff ff ff ff ff 00 00 00 ff ff     ................
    3598:	95 ff ff ff ff ff ff 95 95 95 95 95 95 95 95 95     ................
    35a8:	95 ff ff ff 00 ff ff 95 ff ff ff 00 ff 00 ff ff     ................
    35b8:	ff ff ff ff ff 00 ff ff ff ff ff ff 00 ff ff ff     ................
    35c8:	ff ff ff 00 ff ff ff ff ff ff ff 00 00 00 ff ff     ................
    35d8:	95 ff ff ff ff ff ff 95 95 95 95 95 95 95 95 95     ................
    35e8:	95 ff ff ff 00 ff ff 95 ff ff ff 00 ff 00 ff ff     ................
    35f8:	ff ff ff ff 00 ff ff ff ff ff ff ff ff 00 ff ff     ................
    3608:	ff ff ff 00 ff 00 ff ff ff ff ff ff 00 ff ff ff     ................
    3618:	95 ff ff ff ff ff ff 95 95 95 95 95 95 95 95 95     ................
    3628:	95 ff ff 00 ff 00 ff 95 ff ff ff 00 ff 00 ff ff     ................
    3638:	ff ff ff 00 00 00 ff ff ff ff ff ff ff 00 ff ff     ................
    3648:	ff ff ff ff ff 00 ff ff ff ff ff ff ff 00 ff ff     ................
    3658:	95 ff ff ff ff ff ff 95 95 95 95 95 95 95 95 95     ................
    3668:	95 ff ff 00 00 00 ff 95 ff ff ff 00 ff ff ff ff     ................
    3678:	ff ff ff 00 00 ff ff ff ff ff ff ff ff 00 ff ff     ................
    3688:	ff ff ff 00 ff 00 ff ff ff ff ff ff 00 ff ff ff     ................
    3698:	95 ff ff ff ff ff ff 95 95 95 95 95 95 95 95 95     ................
    36a8:	95 ff ff ff 00 00 ff 95 ff ff ff 00 ff ff ff ff     ................
    36b8:	ff ff ff 00 00 ff ff ff ff ff ff 00 ff 00 ff ff     ................
    36c8:	ff ff ff 00 ff 00 ff ff ff ff ff ff 00 ff ff ff     ................
    36d8:	95 ff ff ff ff ff ff 95 95 95 95 95 95 95 95 95     ................
    36e8:	95 ff ff 00 00 00 ff 95 ff ff ff ff ff 00 ff ff     ................
    36f8:	ff ff ff ff ff 00 ff ff ff ff ff ff 00 ff ff ff     ................
    3708:	ff ff ff 00 ff ff ff ff ff ff ff 00 ff ff ff ff     ................
    3718:	95 ff ff ff ff ff ff 95 95 95 95 95 95 95 95 95     ................
    3728:	95 ff ff ff 00 ff ff 95 ff ff ff 00 ff 00 ff ff     ................
    3738:	ff ff ff ff 00 ff ff ff ff ff ff 00 ff 00 ff ff     ................
    3748:	ff ff ff 00 ff 00 ff ff ff ff ff ff 00 ff ff ff     ................
    3758:	95 ff ff ff ff ff ff 95 95 95 95 95 95 95 95 95     ................
    3768:	95 ff ff ff 00 ff ff 95 ff ff ff 00 ff 00 ff ff     ................
    3778:	ff ff ff 00 ff 00 ff ff ff ff ff ff 00 00 ff ff     ................
    3788:	ff ff ff 00 ff 00 ff ff ff ff ff ff 00 ff ff ff     ................
    3798:	95 ff ff ff ff ff ff 95 95 95 95 95 95 95 95 95     ................
    37a8:	95 ff 00 ff ff 00 ff 95 ff 00 00 ff 00 ff 00 ff     ................
    37b8:	ff ff 00 ff 00 ff 00 ff ff ff 00 ff 00 ff 00 ff     ................
    37c8:	ff ff 00 ff 00 ff 00 ff ff 00 00 00 ff 00 ff ff     ................
    37d8:	95 ff ff ff ff ff ff 95 95 95 95 95 95 95 95 95     ................
    37e8:	95 ff 00 ff ff 00 ff 95 ff 00 00 ff 00 00 ff ff     ................
    37f8:	ff ff 00 ff ff 00 ff ff ff ff 00 ff ff 00 ff ff     ................
    3808:	ff ff 00 ff ff 00 ff ff ff 00 00 00 00 00 00 ff     ................
    3818:	95 ff ff ff ff ff ff 95 95 95 95 95 95 95 95 95     ................
    3828:	95 ff 00 ff ff 00 ff 95 ff 00 00 ff 00 ff 00 ff     ................
    3838:	ff ff 00 ff ff ff 00 ff ff ff 00 ff ff 00 ff ff     ................
    3848:	ff ff 00 ff 00 ff ff ff ff 00 00 00 00 00 00 ff     ................
    3858:	95 ff ff ff ff ff ff 95 95 95 95 95 95 95 95 95     ................
    3868:	95 ff 00 ff ff 00 ff 95 ff 00 00 ff 00 ff 00 ff     ................
    3878:	ff ff 00 ff ff 00 ff ff ff ff 00 ff ff ff 00 ff     ................
    3888:	ff ff 00 ff 00 ff 00 ff ff 00 00 00 ff 00 ff ff     ................
    3898:	95 ff ff ff ff ff ff 95 95 95 95 95 95 95 95 95     ................
    38a8:	95 ff 00 ff 00 ff 00 95 ff 00 00 ff 00 ff 00 ff     ................
    38b8:	ff ff 00 ff 00 00 00 ff ff ff 00 ff ff ff 00 ff     ................
    38c8:	ff ff 00 ff ff ff 00 ff ff 00 00 00 ff ff 00 ff     ................
    38d8:	95 ff ff ff ff ff ff 95 95 95 95 95 95 95 95 95     ................
    38e8:	95 ff 00 ff 00 00 00 95 ff 00 00 ff 00 ff ff ff     ................
    38f8:	ff ff 00 ff 00 00 ff ff ff ff 00 ff ff ff 00 ff     ................
    3908:	ff ff 00 ff 00 ff 00 ff ff 00 00 00 ff 00 ff ff     ................
    3918:	95 ff ff ff ff ff ff 95 95 95 95 95 95 95 95 95     ................
    3928:	95 ff 00 ff ff 00 00 95 ff 00 00 ff 00 ff ff ff     ................
    3938:	ff ff 00 ff 00 00 ff ff ff ff 00 ff 00 ff 00 ff     ................
    3948:	ff ff 00 ff 00 ff 00 ff ff 00 00 00 ff 00 ff ff     ................
    3958:	95 ff ff ff ff ff ff 95 95 95 95 95 95 95 95 95     ................

00003968 <big_font_maps>:
    3968:	52 53 65 66 54 55 67 68 56 57 69 6a 58 59 6b 66     RSefTUghVWijXYkf
    3978:	5a 5b 6c 6d 5c 5d 6e 6f 5e 5d 70 6f 5f 60 71 72     Z[lm\]no^]po_`qr
    3988:	61 62 73 74 63 64 75 6f 5e 64 83 84 5c 62 69 74     abstcduo^d..\bit
    3998:	76 77 85 86 78 79 87 88 5c 7a 69 89 5c 7a 83 8a     vw..xy..\zi.\z..
    39a8:	7b 7c 8b 8c 7d 7e 83 84 7f 80 8d 8e 81 82 8f 88     {|..}~..........
    39b8:	90 91 9a 9b 92 93 87 86 94 95 9c 9d 94 96 9c 9e     ................
    39c8:	76 79 85 88 5c 57 83 9f 76 79 a0 a1 5c 57 9a a2     vy..\W..vy..\W..
    39d8:	63 97 a3 6f 98 99 71 72 92 82 85 88 92 82 b1 b2     c..o..qr........
    39e8:	a4 82 b3 b4 a5 a6 b5 b6 a7 a8 71 72 a9 aa b7 b8     ..........qr....
    39f8:	ab 55 b9 ba ac ad bb bc ae 57 bd be af b0 bf c0     .U.......W......

00003a08 <title_map>:
    3a08:	16 0a 00 01 02 03 04 00 01 02 05 06 02 02 07 06     ................
    3a18:	02 03 04 00 01 02 03 04 08 09 09 09 0a 08 09 0b     ................
    3a28:	0c 0d 0e 0f 0c 10 09 09 0a 08 09 09 09 0a 10 09     ................
    3a38:	09 09 11 12 13 14 07 15 10 11 15 10 09 09 16 10     ................
    3a48:	09 09 09 11 10 17 18 19 11 1a 06 1b 16 15 10 11     ................
    3a58:	15 10 1c 1d 1e 12 09 09 09 16 0d 0c 15 0d 0c 15     ................
    3a68:	0d 1f 20 15 0d 0c 15 0d 0c 21 0c 22 23 24 1f 20     .. ......!."#$. 
    3a78:	00 01 02 05 06 02 02 07 00 01 02 03 04 00 01 02     ................
    3a88:	07 06 07 15 06 07 08 09 0b 0c 0d 0e 0f 0c 08 09     ................
    3a98:	09 09 0a 08 09 09 11 10 25 26 27 28 12 13 14 07     ........%&'(....
    3aa8:	15 10 11 15 10 09 09 09 11 10 09 0b 0c 10 09 09     ................
    3ab8:	29 2a 1a 06 1b 16 15 10 11 15 10 17 18 19 11 12     )*..............
    3ac8:	09 14 07 10 2b 2c 2d 2e 15 0d 1f 20 15 0d 0c 15     ....+,-.... ....
    3ad8:	0d 0c 15 0d 0c 22 23 24 0c 0d 0c 15 0d 0c           ....."#$......

00003ae6 <patch00>:
    3ae6:	00 02 05 00 07 39 00 0a cb 00 09 9e 03 00 ff 03     .....9..........
    3af6:	00 fe 03 00 f9 00 ff                                .......

00003afd <patch01>:
    3afd:	00 02 01 00 07 00 00 00 0b 00 0a df 00 09 aa 05     ................
    3b0d:	00 ff 0a 00 fc 00 02 03 05 00 f8 00 ff              .............

00003b1a <patch02>:
    3b1a:	00 02 03 00 07 57 00 0a 78 00 09 63 01 07 57 04     .....W..x..c..W.
    3b2a:	07 59 00 02 05 01 0a 8c 02 00 f7 00 00 f6 01 0a     .Y..............
    3b3a:	b3 00 ff                                            ...

00003b3d <patch03>:
    3b3d:	00 01 12 00 07 00 00 00 fc 01 01 17 01 01 12 01     ................
    3b4d:	00 f4 00 ff                                         ....

00003b51 <patch04>:
    3b51:	00 01 02 00 07 00 00 00 ff 01 01 01 01 01 02 02     ................
    3b61:	01 01 05 00 fe 40 ff                                .....@.

00003b68 <patch05>:
    3b68:	00 01 05 00 07 00 00 00 f8 02 01 07 02 01 03 01     ................
    3b78:	01 01 02 00 f4 00 ff                                .......

00003b7f <patch06>:
    3b7f:	00 01 05 00 07 00 00 00 f8 02 01 07 02 01 03 01     ................
    3b8f:	01 01 02 00 f4 00 ff                                .......

00003b96 <patch07>:
    3b96:	00 ff                                               ..

00003b98 <patch08>:
    3b98:	00 02 04 00 03 0c 00 07 43 00 0a cb 00 09 9e 03     ........C.......
    3ba8:	00 ff 03 00 fe 03 00 f9 03 00 f3 0b 05 00 00 ff     ................

00003bb8 <patch09>:
    3bb8:	00 02 05 00 07 48 00 00 08 01 06 00 00 00 f9 00     .....H..........
    3bc8:	ff                                                  .

00003bc9 <patch10>:
    3bc9:	00 02 03 00 07 0a 01 00 07 00 0a df 00 09 aa 07     ................
    3bd9:	00 ff 13 00 fc 00 06 00 03 00 f6 04 00 f4 00 ff     ................

00003be9 <patch11>:
    3be9:	00 ff                                               ..

00003beb <patch12>:
    3beb:	00 01 12 00 07 2e 00 00 fc 01 01 17 01 01 12 01     ................
    3bfb:	00 f4 00 ff                                         ....

00003bff <patch13>:
    3bff:	00 01 02 00 07 22 00 00 ff 01 01 01 01 01 02 02     ....."..........
    3c0f:	01 01 05 00 fe 40 ff                                .....@.

00003c16 <patch14>:
    3c16:	00 01 05 00 07 20 00 00 f8 02 01 07 02 01 03 01     ..... ..........
    3c26:	01 01 02 00 f4 00 ff                                .......

00003c2d <patch15>:
    3c2d:	00 01 01 00 07 90 00 00 e2 00 ff                    ...........

00003c38 <patch16>:
    3c38:	00 02 02 00 07 46 00 0a b4 00 09 63 03 00 ff 03     .....F.....c....
    3c48:	00 fe 03 00 f9 03 00 f3 00 ff                       ..........

00003c52 <patch17>:
    3c52:	00 02 04 00 07 3e 00 00 08 00 00 f9 00 ff           .....>........

00003c60 <patch18>:
    3c60:	00 02 03 00 07 1b 03 00 ff 03 00 fe 03 00 f9 03     ................
    3c70:	00 f3 0b 05 00 00 ff                                .......

00003c77 <patch19>:
    3c77:	00 ff                                               ..

00003c79 <patch20>:
    3c79:	00 ff                                               ..

00003c7b <patch21>:
    3c7b:	00 ff                                               ..

00003c7d <patch22>:
    3c7d:	00 ff                                               ..

00003c7f <patch23>:
    3c7f:	00 ff                                               ..

00003c81 <patch24>:
    3c81:	00 02 04 00 07 43 00 00 ff 04 00 fe 07 00 f9 06     .....C..........
    3c91:	00 f3 0b 05 00 00 ff                                .......

00003c98 <patch25>:
    3c98:	00 02 04 00 0a df 00 09 de 00 07 49 00 00 03 02     ...........I....
    3ca8:	00 ff 0c 00 fe 00 ff                                .......

00003caf <patch26>:
    3caf:	00 02 04 00 07 32 00 0a f4 00 09 aa 00 00 ff 0c     .....2..........
    3cbf:	00 fe 08 00 fd 04 00 fc 00 ff                       ..........

00003cc9 <patch27>:
    3cc9:	00 01 12 00 07 2e 00 00 fc 01 01 17 01 01 12 01     ................
    3cd9:	00 f4 00 ff                                         ....

00003cdd <patch28>:
    3cdd:	00 01 02 00 07 22 00 00 ff 01 01 01 01 01 02 02     ....."..........
    3ced:	01 01 05 00 fe 40 ff                                .....@.

00003cf4 <patch29>:
    3cf4:	00 01 01 00 07 22 00 00 ff 01 01 01 01 01 02 02     ....."..........
    3d04:	01 01 05 00 fe 40 ff                                .....@.

00003d0b <patch30>:
    3d0b:	00 01 05 00 07 20 00 00 f8 02 01 07 02 01 03 01     ..... ..........
    3d1b:	01 01 02 00 f4 00 ff                                .......

00003d22 <patch31>:
    3d22:	00 ff                                               ..

00003d24 <patch32>:
    3d24:	00 02 04 00 07 46 00 08 40 03 08 47 03 08 4c 00     .....F..@..G..L.
    3d34:	00 fa 09 ff                                         ....

00003d38 <patch33>:
    3d38:	00 02 01 00 07 2a 00 00 1b 00 08 47 00 0d 0a 00     .....*.....G....
    3d48:	02 04 00 09 c7 00 0a ac 02 03 09 00 00 fe 03 04     ................
    3d58:	09 00 0a 2c 00 02 04 00 0a 85 01 00 ff 00 0e 0a     ...,............
    3d68:	00 00 fb 09 ff                                      .....

00003d6d <patch34>:
    3d6d:	00 07 24 00 08 22 02 08 27 01 08 35 02 08 3b 03     ..$.."..'..5..;.
    3d7d:	08 42 00 00 fd 04 08 4a 02 08 4f 00 00 f3 01 08     .B.....J..O.....
    3d8d:	50 00 ff                                            P..

00003d90 <patch35>:
    3d90:	00 07 4a 00 08 45 01 08 3e 02 08 3a 00 00 f7 01     ..J..E..>..:....
    3da0:	08 37 03 08 2f 00 ff                                .7../..

00003da7 <patch36>:
    3da7:	00 02 00 00 08 28 00 07 be 00 0c e0 00 0b e2 0f     .....(..........
    3db7:	00 ff b4 ff                                         ....

00003dbb <patch37>:
    3dbb:	00 07 00 00 02 03 00 08 27 01 07 50 00 0c e0 00     ........'..P....
    3dcb:	0b e2 00 00 ff b4 ff                                .......

00003dd2 <patches>:
    3dd2:	00 00 00 e6 3a 00 00 00 00 00 00 00 fd 3a 00 00     ....:........:..
    3de2:	00 00 00 00 00 1a 3b 00 00 00 00 01 00 00 3d 3b     ......;.......=;
    3df2:	00 00 00 00 01 00 00 51 3b 00 00 00 00 01 00 00     .......Q;.......
    3e02:	68 3b 00 00 00 00 01 00 00 7f 3b 00 00 00 00 01     h;........;.....
    3e12:	00 00 96 3b 00 00 00 00 00 00 00 98 3b 00 00 00     ...;........;...
    3e22:	00 00 00 00 b8 3b 00 00 00 00 00 00 00 c9 3b 00     .....;........;.
    3e32:	00 00 00 00 00 00 e9 3b 00 00 00 00 01 00 00 eb     .......;........
    3e42:	3b 00 00 00 00 01 00 00 ff 3b 00 00 00 00 01 00     ;........;......
    3e52:	00 16 3c 00 00 00 00 01 00 00 2d 3c 00 00 00 00     ..<.......-<....
    3e62:	00 00 00 38 3c 00 00 00 00 00 00 00 52 3c 00 00     ...8<.......R<..
    3e72:	00 00 00 00 00 60 3c 00 00 00 00 00 00 00 77 3c     .....`<.......w<
    3e82:	00 00 00 00 01 00 00 79 3c 00 00 00 00 01 00 00     .......y<.......
    3e92:	7b 3c 00 00 00 00 01 00 00 7d 3c 00 00 00 00 01     {<.......}<.....
    3ea2:	00 00 7f 3c 00 00 00 00 00 00 00 81 3c 00 00 00     ...<........<...
    3eb2:	00 00 00 00 98 3c 00 00 00 00 00 00 00 af 3c 00     .....<........<.
    3ec2:	00 00 00 00 00 00 c9 3c 00 00 00 00 01 00 00 dd     .......<........
    3ed2:	3c 00 00 00 00 01 00 00 f4 3c 00 00 00 00 01 00     <........<......
    3ee2:	00 0b 3d 00 00 00 00 01 00 00 22 3d 00 00 00 00     ..=......."=....
    3ef2:	00 00 00 24 3d 00 00 00 00 00 00 00 38 3d 00 00     ...$=.......8=..
    3f02:	00 00 00 00 00 6d 3d 00 00 00 00                    .....m=....

00003f0d <Song1>:
    3f0d:	00 c0 00 00 c1 01 00 c2 02 00 c3 00 00 b0 07 7f     ................
    3f1d:	00 64 00 00 90 40 64 00 b1 07 7f 00 64 00 00 91     .d...@d.....d...
    3f2d:	3e 46 00 b2 64 00 00 07 7f 00 92 28 64 00 b3 07     >F..d......(d...
    3f3d:	7f 00 93 04 40 00 ff 06 01 53 06 90 42 64 06 43     ....@....S..Bd.C
    3f4d:	64 00 91 40 64 00 92 28 64 07 90 40 64 00 91 42     d..@d..(d..@d..B
    3f5d:	64 00 92 28 64 06 90 47 64 00 91 43 64 00 92 34     d..(d..Gd..Cd..4
    3f6d:	64 00 93 05 40 07 91 40 64 00 93 03 40 06 90 40     d...@..@d...@..@
    3f7d:	64 00 91 47 64 00 92 28 64 00 93 05 40 07 90 42     d..Gd..(d...@..B
    3f8d:	64 00 92 28 64 00 93 05 40 06 90 43 64 00 91 40     d..(d...@..Cd..@
    3f9d:	64 00 92 28 64 00 93 05 40 06 90 40 64 00 91 42     d..(d...@..@d..B
    3fad:	64 00 92 28 64 07 90 48 64 00 91 43 64 00 92 34     d..(d..Hd..Cd..4
    3fbd:	64 00 93 03 40 06 91 40 64 00 93 05 40 07 90 40     d...@..@d...@..@
    3fcd:	64 00 91 48 64 00 92 28 64 06 90 42 64 00 93 05     d..Hd..(d..Bd...
    3fdd:	40 07 90 43 64 00 91 40 64 00 92 28 64 06 90 40     @..Cd..@d..(d..@
    3fed:	64 00 91 42 64 00 92 28 64 00 93 05 40 06 90 4a     d..Bd..(d...@..J
    3ffd:	64 00 91 43 64 00 92 28 64 00 93 03 40 07 91 40     d..Cd..(d...@..@
    400d:	64 06 90 40 64 00 91 4a 64 00 92 28 64 00 93 03     d..@d..Jd..(d...
    401d:	40 07 90 42 64 00 92 28 64 00 93 03 40 06 90 43     @..Bd..(d...@..C
    402d:	64 00 91 40 64 00 92 34 64 00 93 05 40 07 90 42     d..@d..4d...@..B
    403d:	64 00 91 42 64 00 93 03 40 06 90 48 64 00 91 43     d..Bd...@..Hd..C
    404d:	64 00 92 28 64 00 93 05 40 06 91 42 64 00 92 28     d..(d...@..Bd..(
    405d:	64 00 93 05 40 07 90 40 64 00 91 48 64 00 92 28     d...@..@d..Hd..(
    406d:	64 00 93 05 40 06 90 42 64 00 92 28 64 07 90 43     d...@..Bd..(d..C
    407d:	64 00 91 40 64 00 92 34 64 00 93 03 40 06 90 42     d..@d..4d...@..B
    408d:	64 00 91 42 64 00 93 05 40 07 90 40 64 00 91 43     d..Bd...@..@d..C
    409d:	64 00 92 28 64 06 90 3e 64 00 91 42 64 00 93 05     d..(d..>d..Bd...
    40ad:	40 06 90 40 64 00 91 40 64 00 92 28 64 00 93 05     @..@d..@d..(d...
    40bd:	40 07 90 42 64 00 91 3e 64 00 92 28 64 00 93 05     @..Bd..>d..(d...
    40cd:	40 06 90 43 64 00 91 40 64 00 92 2b 64 00 93 04     @..Cd..@d..+d...
    40dd:	40 07 90 40 64 00 91 42 64 06 90 47 64 00 91 43     @..@d..Bd..Gd..C
    40ed:	64 00 92 2b 64 07 91 40 64 00 92 2b 64 06 90 40     d..+d..@d..+d..@
    40fd:	64 00 91 47 64 00 92 37 64 00 93 05 40 06 90 42     d..Gd..7d...@..B
    410d:	64 00 93 03 40 07 90 43 64 00 91 40 64 00 92 2b     d...@..Cd..@d..+
    411d:	64 00 93 05 40 06 90 40 64 00 91 42 64 00 92 2b     d...@..@d..Bd..+
    412d:	64 00 93 05 40 07 90 48 64 00 91 43 64 00 92 2b     d...@..Hd..Cd..+
    413d:	64 00 93 05 40 06 91 40 64 00 92 2b 64 07 90 40     d...@..@d..+d..@
    414d:	64 00 91 48 64 00 92 37 64 00 93 03 40 06 90 42     d..Hd..7d...@..B
    415d:	64 00 93 05 40 06 90 43 64 00 91 40 64 00 92 2b     d...@..Cd..@d..+
    416d:	64 07 90 40 64 00 91 42 64 00 93 05 40 06 90 4a     d..@d..Bd...@..J
    417d:	64 00 91 43 64 00 92 2b 64 07 91 40 64 00 92 2b     d..Cd..+d..@d..+
    418d:	64 00 93 05 40 06 90 40 64 00 91 4a 64 00 92 2b     d...@..@d..Jd..+
    419d:	64 00 93 03 40 07 90 42 64 06 43 64 00 91 40 64     d...@..Bd.Cd..@d
    41ad:	00 92 2b 64 00 93 03 40 06 90 40 64 00 91 42 64     ..+d...@..@d..Bd
    41bd:	00 92 2b 64 00 93 03 40 07 90 48 64 00 91 43 64     ..+d...@..Hd..Cd
    41cd:	00 92 37 64 00 93 05 40 06 91 40 64 00 93 03 40     ..7d...@..@d...@
    41dd:	07 90 40 64 00 91 48 64 00 92 2b 64 00 93 05 40     ..@d..Hd..+d...@
    41ed:	06 90 42 64 00 92 2b 64 00 93 05 40 07 90 43 64     ..Bd..+d...@..Cd
    41fd:	00 91 40 64 00 92 2b 64 00 93 05 40 06 90 42 64     ..@d..+d...@..Bd
    420d:	00 91 42 64 00 92 2b 64 07 90 40 64 00 91 43 64     ..Bd..+d..@d..Cd
    421d:	00 92 37 64 00 93 03 40 06 90 3e 64 00 91 42 64     ..7d...@..>d..Bd
    422d:	00 93 05 40 06 90 40 64 00 91 40 64 00 92 2b 64     ...@..@d..@d..+d
    423d:	07 90 42 64 00 91 3e 64 00 93 05 40 06 90 43 64     ..Bd..>d...@..Cd
    424d:	00 91 40 64 00 92 2b 64 00 93 05 40 07 90 45 64     ..@d..+d...@..Ed
    425d:	00 91 42 64 00 92 2b 64 00 93 05 40 06 90 40 64     ..Bd..+d...@..@d
    426d:	00 91 43 64 00 92 28 64 00 93 03 40 07 90 42 64     ..Cd..(d...@..Bd
    427d:	00 91 45 64 06 90 43 64 00 91 40 64 00 92 28 64     ..Ed..Cd..@d..(d
    428d:	00 93 03 40 06 90 40 64 00 91 42 64 00 92 28 64     ...@..@d..Bd..(d
    429d:	00 93 03 40 07 90 47 64 00 91 43 64 00 92 34 64     ...@..Gd..Cd..4d
    42ad:	00 93 05 40 06 91 40 64 00 93 03 40 07 90 40 64     ...@..@d...@..@d
    42bd:	00 91 47 64 00 92 28 64 00 93 05 40 06 90 42 64     ..Gd..(d...@..Bd
    42cd:	00 92 28 64 00 93 05 40 07 90 43 64 00 91 40 64     ..(d...@..Cd..@d
    42dd:	00 92 28 64 00 93 05 40 06 90 40 64 00 91 42 64     ..(d...@..@d..Bd
    42ed:	00 92 28 64 06 90 48 64 00 91 43 64 00 92 34 64     ..(d..Hd..Cd..4d
    42fd:	00 93 03 40 07 91 40 64 00 93 05 40 06 90 40 64     ...@..@d...@..@d
    430d:	00 91 48 64 00 92 28 64 07 90 42 64 00 93 05 40     ..Hd..(d..Bd...@
    431d:	06 90 43 64 00 91 40 64 00 92 28 64 07 90 40 64     ..Cd..@d..(d..@d
    432d:	00 91 42 64 00 92 28 64 00 93 05 40 06 90 4a 64     ..Bd..(d...@..Jd
    433d:	00 91 43 64 00 92 28 64 00 93 03 40 06 91 40 64     ..Cd..(d...@..@d
    434d:	07 90 40 64 00 91 4a 64 00 92 28 64 00 93 03 40     ..@d..Jd..(d...@
    435d:	06 90 42 64 00 92 28 64 00 93 03 40 07 90 43 64     ..Bd..(d...@..Cd
    436d:	00 91 40 64 00 92 34 64 00 93 05 40 06 90 42 64     ..@d..4d...@..Bd
    437d:	00 91 42 64 00 93 03 40 07 90 48 64 00 91 43 64     ..Bd...@..Hd..Cd
    438d:	00 92 28 64 00 93 05 40 06 91 42 64 00 92 28 64     ..(d...@..Bd..(d
    439d:	00 93 05 40 06 90 40 64 00 91 48 64 00 92 28 64     ...@..@d..Hd..(d
    43ad:	00 93 05 40 07 90 42 64 00 92 28 64 06 90 43 64     ...@..Bd..(d..Cd
    43bd:	00 91 40 64 00 92 34 64 00 93 03 40 07 90 42 64     ..@d..4d...@..Bd
    43cd:	00 91 42 64 00 93 05 40 06 90 40 64 00 91 43 64     ..Bd...@..@d..Cd
    43dd:	00 92 28 64 07 90 3e 64 00 91 42 64 00 93 05 40     ..(d..>d..Bd...@
    43ed:	06 90 40 64 00 91 40 64 00 92 28 64 00 93 05 40     ..@d..@d..(d...@
    43fd:	06 90 42 64 00 91 3e 64 00 92 28 64 00 93 05 40     ..Bd..>d..(d...@
    440d:	07 90 43 64 00 91 40 64 00 92 2b 64 00 93 04 40     ..Cd..@d..+d...@
    441d:	06 90 40 64 00 91 42 64 07 90 47 64 00 91 43 64     ..@d..Bd..Gd..Cd
    442d:	00 92 2b 64 06 91 40 64 00 92 2b 64 07 90 40 64     ..+d..@d..+d..@d
    443d:	00 91 47 64 00 92 37 64 00 93 05 40 06 90 42 64     ..Gd..7d...@..Bd
    444d:	00 93 03 40 06 90 43 64 00 91 40 64 00 92 2b 64     ...@..Cd..@d..+d
    445d:	00 93 05 40 07 90 40 64 00 91 42 64 00 92 2b 64     ...@..@d..Bd..+d
    446d:	00 93 05 40 06 90 48 64 00 91 43 64 00 92 2b 64     ...@..Hd..Cd..+d
    447d:	00 93 05 40 07 91 40 64 00 92 2b 64 06 90 40 64     ...@..@d..+d..@d
    448d:	00 91 48 64 00 92 37 64 00 93 03 40 07 90 42 64     ..Hd..7d...@..Bd
    449d:	00 93 05 40 06 90 43 64 00 91 40 64 00 92 2b 64     ...@..Cd..@d..+d
    44ad:	07 90 40 64 00 91 42 64 00 93 05 40 06 90 4a 64     ..@d..Bd...@..Jd
    44bd:	00 91 43 64 00 92 2b 64 06 91 40 64 00 92 2b 64     ..Cd..+d..@d..+d
    44cd:	00 93 05 40 07 90 40 64 00 91 4a 64 00 92 26 64     ...@..@d..Jd..&d
    44dd:	00 93 03 40 06 90 42 64 07 43 64 00 91 40 64 00     ...@..Bd.Cd..@d.
    44ed:	92 26 64 00 93 03 40 06 90 40 64 00 91 42 64 00     .&d...@..@d..Bd.
    44fd:	92 26 64 00 93 03 40 07 90 48 64 00 91 43 64 00     .&d...@..Hd..Cd.
    450d:	92 32 64 00 93 05 40 06 91 40 64 00 93 03 40 06     .2d...@..@d...@.
    451d:	90 40 64 00 91 48 64 00 92 26 64 00 93 05 40 07     .@d..Hd..&d...@.
    452d:	90 42 64 00 92 26 64 00 93 05 40 06 90 43 64 00     .Bd..&d...@..Cd.
    453d:	91 40 64 00 92 26 64 00 93 05 40 07 90 42 64 00     .@d..&d...@..Bd.
    454d:	91 42 64 00 92 26 64 06 90 40 64 00 91 43 64 00     .Bd..&d..@d..Cd.
    455d:	92 28 64 00 93 03 40 07 90 3e 64 00 91 42 64 00     .(d...@..>d..Bd.
    456d:	92 26 64 00 93 05 40 06 90 40 64 00 91 40 64 00     .&d...@..@d..@d.
    457d:	92 28 64 06 90 42 64 00 91 3e 64 00 92 2a 64 00     .(d..Bd..>d..*d.
    458d:	93 05 40 07 90 43 64 00 91 40 64 00 92 2b 64 00     ..@..Cd..@d..+d.
    459d:	93 05 40 06 90 45 64 00 91 42 64 00 92 39 64 00     ..@..Ed..Bd..9d.
    45ad:	93 05 40 07 90 4c 64 00 91 43 64 00 92 28 64 00     ..@..Ld..Cd..(d.
    45bd:	93 03 40 06 91 45 64 00 93 03 40 07 90 4f 64 00     ..@..Ed...@..Od.
    45cd:	91 4c 64 00 92 28 64 00 93 03 40 06 92 28 64 00     .Ld..(d...@..(d.
    45dd:	93 03 40 06 91 4f 64 00 92 34 64 00 93 05 40 0d     ..@..Od..4d...@.
    45ed:	90 4c 64 00 92 28 64 00 93 05 40 07 92 28 64 00     .Ld..(d...@..(d.
    45fd:	93 05 40 06 90 51 64 00 91 4c 64 00 92 28 64 00     ..@..Qd..Ld..(d.
    460d:	93 03 40 07 92 28 64 00 93 03 40 06 91 51 64 00     ..@..(d...@..Qd.
    461d:	92 34 64 00 93 03 40 06 03 40 07 90 4c 64 00 92     .4d...@..@..Ld..
    462d:	28 64 00 93 05 40 06 05 40 07 90 4f 64 00 91 4c     (d...@..@..Od..L
    463d:	64 00 92 28 64 06 28 64 00 93 05 40 07 91 4f 64     d..(d.(d...@..Od
    464d:	00 92 28 64 00 93 03 40 06 03 40 06 90 4c 64 00     ..(d...@..@..Ld.
    465d:	92 28 64 00 93 03 40 07 92 28 64 00 93 03 40 06     .(d...@..(d...@.
    466d:	90 51 64 00 91 4c 64 00 92 34 64 00 93 05 40 07     .Qd..Ld..4d...@.
    467d:	03 40 06 91 51 64 00 92 28 64 00 93 03 40 07 92     .@..Qd..(d...@..
    468d:	28 64 06 90 4f 64 00 92 28 64 00 93 05 40 06 92     (d..Od..(d...@..
    469d:	28 64 00 93 03 40 07 90 4e 64 00 91 4f 64 00 92     (d...@..Nd..Od..
    46ad:	34 64 00 93 03 40 0d 90 4c 64 00 91 4e 64 00 92     4d...@..Ld..Nd..
    46bd:	28 64 00 93 03 40 06 05 40 07 90 4e 64 00 91 4c     (d...@..@..Nd..L
    46cd:	64 00 92 28 64 00 93 03 40 06 92 28 64 00 93 05     d..(d...@..(d...
    46dd:	40 06 90 4c 64 00 91 4e 64 00 92 2b 64 00 93 03     @..Ld..Nd..+d...
    46ed:	40 07 03 40 06 90 4f 64 00 91 4c 64 00 92 2b 64     @..@..Od..Ld..+d
    46fd:	00 93 03 40 07 92 2b 64 00 93 03 40 06 91 4f 64     ...@..+d...@..Od
    470d:	00 92 37 64 00 93 05 40 0d 90 4c 64 00 92 2b 64     ..7d...@..Ld..+d
    471d:	00 93 05 40 07 92 2b 64 00 93 05 40 06 90 51 64     ...@..+d...@..Qd
    472d:	00 91 4c 64 00 92 2b 64 00 93 03 40 06 92 2b 64     ..Ld..+d...@..+d
    473d:	00 93 03 40 07 91 51 64 00 92 37 64 00 93 03 40     ...@..Qd..7d...@
    474d:	06 03 40 07 90 4c 64 00 92 2b 64 00 93 05 40 06     ..@..Ld..+d...@.
    475d:	05 40 07 90 4f 64 00 91 4c 64 00 92 2b 64 06 2b     .@..Od..Ld..+d.+
    476d:	64 00 93 05 40 06 91 4f 64 00 92 2b 64 00 93 03     d...@..Od..+d...
    477d:	40 07 03 40 06 90 4c 64 00 92 2b 64 00 93 03 40     @..@..Ld..+d...@
    478d:	07 92 2b 64 00 93 03 40 06 90 53 64 00 91 4c 64     ..+d...@..Sd..Ld
    479d:	00 92 37 64 00 93 05 40 07 03 40 06 91 53 64 00     ..7d...@..@..Sd.
    47ad:	92 2b 64 00 93 03 40 06 92 2b 64 07 90 51 64 00     .+d...@..+d..Qd.
    47bd:	92 2b 64 00 93 05 40 06 92 2b 64 00 93 03 40 07     .+d...@..+d...@.
    47cd:	90 4f 64 00 91 51 64 00 92 37 64 00 93 03 40 0d     .Od..Qd..7d...@.
    47dd:	90 4e 64 00 91 4f 64 00 92 2b 64 00 93 03 40 06     .Nd..Od..+d...@.
    47ed:	05 40 06 90 4a 64 00 91 4e 64 00 92 2b 64 00 93     .@..Jd..Nd..+d..
    47fd:	03 40 07 92 2b 64 00 93 05 40 06 90 4c 64 00 91     .@..+d...@..Ld..
    480d:	4a 64 00 92 28 64 00 93 03 40 07 03 40 06 90 4f     Jd..(d...@..@..O
    481d:	64 00 91 4c 64 00 92 28 64 00 93 03 40 07 92 28     d..Ld..(d...@..(
    482d:	64 00 93 03 40 06 91 4f 64 00 92 34 64 00 93 05     d...@..Od..4d...
    483d:	40 0d 90 4c 64 00 92 28 64 00 93 05 40 06 92 28     @..Ld..(d...@..(
    484d:	64 00 93 05 40 07 90 51 64 00 91 4c 64 00 92 28     d...@..Qd..Ld..(
    485d:	64 00 93 03 40 06 92 28 64 00 93 03 40 07 91 51     d...@..(d...@..Q
    486d:	64 00 92 34 64 00 93 03 40 06 03 40 06 90 4c 64     d..4d...@..@..Ld
    487d:	00 92 28 64 00 93 05 40 07 05 40 06 90 4f 64 00     ..(d...@..@..Od.
    488d:	91 4c 64 00 92 28 64 07 28 64 00 93 05 40 06 91     .Ld..(d.(d...@..
    489d:	4f 64 00 92 28 64 00 93 03 40 07 03 40 06 90 4c     Od..(d...@..@..L
    48ad:	64 00 92 28 64 00 93 03 40 06 92 28 64 00 93 03     d..(d...@..(d...
    48bd:	40 07 90 51 64 00 91 4c 64 00 92 34 64 00 93 05     @..Qd..Ld..4d...
    48cd:	40 06 03 40 07 91 51 64 00 92 28 64 00 93 03 40     @..@..Qd..(d...@
    48dd:	06 92 28 64 07 90 4f 64 00 92 28 64 00 93 05 40     ..(d..Od..(d...@
    48ed:	06 92 28 64 00 93 03 40 07 90 4e 64 00 91 4f 64     ..(d...@..Nd..Od
    48fd:	00 92 34 64 00 93 03 40 0c 90 4c 64 00 91 4e 64     ..4d...@..Ld..Nd
    490d:	00 92 28 64 00 93 03 40 07 05 40 06 90 4e 64 00     ..(d...@..@..Nd.
    491d:	91 4c 64 00 92 28 64 00 93 03 40 07 92 28 64 00     .Ld..(d...@..(d.
    492d:	93 05 40 06 90 4c 64 00 91 4e 64 00 92 2b 64 00     ..@..Ld..Nd..+d.
    493d:	93 03 40 07 03 40 06 90 4f 64 00 91 4c 64 00 92     ..@..@..Od..Ld..
    494d:	2b 64 00 93 03 40 06 92 2b 64 00 93 03 40 07 91     +d...@..+d...@..
    495d:	4f 64 00 92 37 64 00 93 05 40 0d 90 4c 64 00 92     Od..7d...@..Ld..
    496d:	2b 64 00 93 05 40 06 92 2b 64 00 93 05 40 07 90     +d...@..+d...@..
    497d:	51 64 00 91 4c 64 00 92 2b 64 00 93 03 40 06 92     Qd..Ld..+d...@..
    498d:	2b 64 00 93 03 40 06 91 51 64 00 92 37 64 00 93     +d...@..Qd..7d..
    499d:	03 40 07 03 40 06 90 4c 64 00 92 2b 64 00 93 05     .@..@..Ld..+d...
    49ad:	40 07 05 40 06 90 4f 64 00 91 4c 64 00 92 2b 64     @..@..Od..Ld..+d
    49bd:	07 2b 64 00 93 05 40 06 91 4f 64 00 92 26 64 00     .+d...@..Od..&d.
    49cd:	93 03 40 06 03 40 07 90 4c 64 00 92 26 64 00 93     ..@..@..Ld..&d..
    49dd:	03 40 06 92 26 64 00 93 03 40 07 90 53 64 00 91     .@..&d...@..Sd..
    49ed:	4c 64 00 92 32 64 00 93 05 40 06 03 40 07 91 53     Ld..2d...@..@..S
    49fd:	64 00 92 26 64 00 93 03 40 06 92 26 64 06 90 51     d..&d...@..&d..Q
    4a0d:	64 00 92 26 64 00 93 05 40 07 92 26 64 00 93 03     d..&d...@..&d...
    4a1d:	40 06 90 4f 64 00 91 51 64 00 92 28 64 00 93 03     @..Od..Qd..(d...
    4a2d:	40 07 92 26 64 06 90 4e 64 00 91 4f 64 00 92 28     @..&d..Nd..Od..(
    4a3d:	64 00 93 03 40 07 92 2a 64 00 93 05 40 06 90 4a     d...@..*d...@..J
    4a4d:	64 00 91 4e 64 00 92 2b 64 00 93 03 40 06 92 39     d..Nd..+d...@..9
    4a5d:	64 00 93 05 40 07 90 40 64 00 91 4a 64 00 92 28     d...@..@d..Jd..(
    4a6d:	64 00 93 04 40 06 90 43 64 07 47 64 00 91 40 64     d...@..Cd.Gd..@d
    4a7d:	00 92 28 64 06 90 4a 64 00 91 43 64 00 92 28 64     ..(d..Jd..Cd..(d
    4a8d:	07 90 48 64 00 91 47 64 00 92 34 64 00 93 03 40     ..Hd..Gd..4d...@
    4a9d:	06 90 47 64 00 91 4a 64 06 90 45 64 00 91 48 64     ..Gd..Jd..Ed..Hd
    4aad:	00 92 28 64 00 93 05 40 07 90 43 64 00 91 47 64     ..(d...@..Cd..Gd
    4abd:	00 92 28 64 00 93 05 40 06 90 47 64 00 91 45 64     ..(d...@..Gd..Ed
    4acd:	00 92 28 64 00 93 03 40 07 90 45 64 00 91 43 64     ..(d...@..Ed..Cd
    4add:	00 92 28 64 00 93 03 40 06 90 47 64 00 91 47 64     ..(d...@..Gd..Gd
    4aed:	00 92 34 64 00 93 03 40 07 90 43 64 00 91 45 64     ..4d...@..Cd..Ed
    4afd:	00 93 03 40 06 90 45 64 00 91 47 64 00 92 28 64     ...@..Ed..Gd..(d
    4b0d:	00 93 05 40 06 90 42 64 00 91 43 64 07 90 43 64     ...@..Bd..Cd..Cd
    4b1d:	00 91 45 64 00 92 28 64 00 93 03 40 06 90 40 64     ..Ed..(d...@..@d
    4b2d:	00 91 42 64 00 92 28 64 00 93 05 40 07 90 42 64     ..Bd..(d...@..Bd
    4b3d:	00 91 43 64 00 92 28 64 00 93 03 40 06 90 40 64     ..Cd..(d...@..@d
    4b4d:	00 91 40 64 07 90 42 64 00 91 42 64 00 92 28 64     ..@d..Bd..Bd..(d
    4b5d:	00 93 05 40 06 90 3e 64 00 91 40 64 00 92 28 64     ...@..>d..@d..(d
    4b6d:	00 93 05 40 07 90 40 64 00 91 42 64 00 92 34 64     ...@..@d..Bd..4d
    4b7d:	00 93 03 40 06 90 3c 64 00 91 3e 64 06 90 3e 64     ...@..<d..>d..>d
    4b8d:	00 91 40 64 00 92 28 64 00 93 05 40 07 90 3b 64     ..@d..(d...@..;d
    4b9d:	00 91 3c 64 00 92 28 64 00 93 05 40 06 90 3c 64     ..<d..(d...@..<d
    4bad:	00 91 3e 64 00 92 28 64 00 93 03 40 07 90 39 64     ..>d..(d...@..9d
    4bbd:	00 91 3b 64 00 92 28 64 00 93 03 40 06 90 3b 64     ..;d..(d...@..;d
    4bcd:	00 91 3c 64 00 92 34 64 00 93 03 40 07 90 37 64     ..<d..4d...@..7d
    4bdd:	00 91 39 64 00 93 03 40 06 b0 64 00 00 90 3a 64     ..9d...@..d...:d
    4bed:	00 91 3b 64 00 92 28 64 06 90 36 64 00 91 37 64     ..;d..(d..6d..7d
    4bfd:	00 93 03 40 07 90 39 64 00 b1 64 00 00 91 3a 64     ...@..9d..d...:d
    4c0d:	00 92 28 64 00 93 05 40 06 90 35 64 00 91 36 64     ..(d...@..5d..6d
    4c1d:	00 92 28 64 00 93 05 40 07 90 36 64 00 91 39 64     ..(d...@..6d..9d
    4c2d:	00 92 2b 64 00 93 03 40 06 91 35 64 07 36 64 00     ..+d...@..5d.6d.
    4c3d:	92 2b 64 00 93 05 40 06 92 2b 64 00 93 05 40 06     .+d...@..+d...@.
    4c4d:	92 37 64 00 93 03 40 0d 90 34 64 00 92 2b 64 00     .7d...@..4d..+d.
    4c5d:	93 05 40 07 90 32 64 00 92 2b 64 00 93 05 40 06     ..@..2d..+d...@.
    4c6d:	90 34 64 00 91 34 64 00 92 2b 64 00 93 03 40 07     .4d..4d..+d...@.
    4c7d:	91 32 64 00 92 2b 64 00 93 03 40 06 90 36 64 00     .2d..+d...@..6d.
    4c8d:	91 34 64 00 92 37 64 00 93 03 40 06 03 40 07 91     .4d..7d...@..@..
    4c9d:	36 64 00 92 2b 64 00 93 05 40 0d 92 2b 64 00 93     6d..+d...@..+d..
    4cad:	03 40 06 92 2b 64 00 93 05 40 07 90 36 64 00 92     .@..+d...@..6d..
    4cbd:	2b 64 00 93 03 40 0c 91 36 64 00 92 2b 64 00 93     +d...@..6d..+d..
    4ccd:	05 40 07 92 2b 64 00 93 05 40 06 92 37 64 00 93     .@..+d...@..7d..
    4cdd:	03 40 0d 90 34 64 00 92 2b 64 00 93 05 40 07 90     .@..4d..+d...@..
    4ced:	32 64 00 92 2b 64 00 93 05 40 06 90 34 64 00 91     2d..+d...@..4d..
    4cfd:	34 64 00 92 2b 64 00 93 03 40 06 91 32 64 00 92     4d..+d...@..2d..
    4d0d:	2b 64 00 93 03 40 07 90 36 64 00 91 34 64 00 92     +d...@..6d..4d..
    4d1d:	37 64 00 93 03 40 06 03 40 07 90 37 64 00 91 36     7d...@..@..7d..6
    4d2d:	64 00 92 2b 64 00 93 05 40 06 90 39 64 07 3b 64     d..+d...@..9d.;d
    4d3d:	00 91 37 64 00 92 2b 64 00 93 03 40 06 90 3c 64     ..7d..+d...@..<d
    4d4d:	00 91 39 64 00 92 2b 64 00 93 05 40 06 90 3b 64     ..9d..+d...@..;d
    4d5d:	00 91 3b 64 00 92 28 64 00 93 03 40 07 91 3c 64     ..;d..(d...@..<d
    4d6d:	06 3b 64 00 92 28 64 00 93 05 40 07 92 28 64 00     .;d..(d...@..(d.
    4d7d:	93 05 40 06 92 34 64 00 93 03 40 0d 90 3b 64 00     ..@..4d...@..;d.
    4d8d:	92 28 64 00 93 05 40 07 90 3c 64 00 92 28 64 00     .(d...@..<d..(d.
    4d9d:	93 05 40 06 90 39 64 00 91 3b 64 00 92 28 64 00     ..@..9d..;d..(d.
    4dad:	93 03 40 06 91 3c 64 00 92 28 64 00 93 03 40 07     ..@..<d..(d...@.
    4dbd:	91 39 64 00 92 34 64 00 93 03 40 06 03 40 07 92     .9d..4d...@..@..
    4dcd:	28 64 06 93 03 40 07 90 39 64 00 92 28 64 00 93     (d...@..9d..(d..
    4ddd:	05 40 06 90 3b 64 00 92 28 64 00 93 05 40 06 90     .@..;d..(d...@..
    4ded:	37 64 00 91 39 64 00 92 28 64 00 93 03 40 07 91     7d..9d..(d...@..
    4dfd:	3b 64 06 37 64 00 92 28 64 00 93 05 40 07 92 28     ;d.7d..(d...@..(
    4e0d:	64 00 93 05 40 06 92 34 64 00 93 03 40 0d 90 37     d...@..4d...@..7
    4e1d:	64 00 92 28 64 00 93 05 40 06 90 39 64 00 92 28     d..(d...@..9d..(
    4e2d:	64 00 93 05 40 07 90 36 64 00 91 37 64 00 92 28     d...@..6d..7d..(
    4e3d:	64 00 93 03 40 06 91 39 64 00 92 28 64 00 93 03     d...@..9d..(d...
    4e4d:	40 07 91 36 64 00 92 34 64 00 93 03 40 06 03 40     @..6d..4d...@..@
    4e5d:	07 92 28 64 00 93 05 40 0c 90 34 64 00 92 28 64     ..(d...@..4d..(d
    4e6d:	00 93 03 40 07 90 32 64 00 92 28 64 00 93 05 40     ...@..2d..(d...@
    4e7d:	06 90 34 64 00 91 34 64 00 92 2b 64 00 93 03 40     ..4d..4d..+d...@
    4e8d:	07 91 32 64 02 90 34 64 04 91 34 64 00 92 2b 64     ..2d..4d..4d..+d
    4e9d:	00 93 05 40 04 90 36 64 03 92 2b 64 00 93 05 40     ...@..6d..+d...@
    4ead:	02 91 34 64 04 90 36 64 00 92 37 64 00 93 03 40     ..4d..6d..7d...@
    4ebd:	04 91 36 64 05 90 37 64 04 91 36 64 00 92 2b 64     ..6d..7d..6d..+d
    4ecd:	00 93 05 40 04 90 37 64 02 92 2b 64 00 93 05 40     ...@..7d..+d...@
    4edd:	02 91 37 64 05 90 39 64 00 92 2b 64 00 93 03 40     ..7d..9d..+d...@
    4eed:	04 91 37 64 02 92 2b 64 00 93 03 40 02 90 39 64     ..7d..+d...@..9d
    4efd:	05 91 39 64 00 92 37 64 00 93 03 40 04 90 37 64     ..9d..7d...@..7d
    4f0d:	02 93 03 40 02 91 39 64 04 90 37 64 00 92 2b 64     ...@..9d..7d..+d
    4f1d:	00 93 05 40 05 91 37 64 04 90 36 64 04 91 37 64     ...@..7d..6d..7d
    4f2d:	00 92 2b 64 00 93 03 40 05 90 36 64 02 92 2b 64     ..+d...@..6d..+d
    4f3d:	00 93 05 40 02 91 36 64 04 b0 64 00 00 90 32 64     ...@..6d..d...2d
    4f4d:	00 92 26 64 00 93 03 40 04 91 36 64 09 b1 64 00     ..&d...@..6d..d.
    4f5d:	00 91 32 64 00 92 26 64 00 93 05 40 06 92 26 64     ..2d..&d...@..&d
    4f6d:	00 93 05 40 07 90 32 64 00 92 32 64 00 93 03 40     ...@..2d..2d...@
    4f7d:	0d 91 32 64 00 92 26 64 00 93 05 40 06 92 26 64     ..2d..&d...@..&d
    4f8d:	00 93 05 40 07 92 26 64 00 93 03 40 06 92 26 64     ...@..&d...@..&d
    4f9d:	00 93 03 40 06 92 28 64 00 93 03 40 07 92 26 64     ...@..(d...@..&d
    4fad:	00 93 03 40 06 92 28 64 07 2a 64 00 93 03 40 06     ...@..(d.*d...@.
    4fbd:	92 2b 64 00 93 05 40 07 92 39 64 00 93 05 40 06     .+d...@..9d...@.
    4fcd:	90 3e 64 00 92 28 64 00 93 03 40 07 90 43 64 06     .>d..(d...@..Cd.
    4fdd:	47 64 00 91 3e 64 00 92 28 64 00 93 05 40 06 90     Gd..>d..(d...@..
    4fed:	3e 64 00 91 43 64 00 92 28 64 00 93 05 40 07 90     >d..Cd..(d...@..
    4ffd:	42 64 00 91 47 64 00 92 34 64 00 93 03 40 06 90     Bd..Gd..4d...@..
    500d:	45 64 00 91 3e 64 07 90 3e 64 00 91 42 64 00 92     Ed..>d..>d..Bd..
    501d:	28 64 00 93 05 40 06 90 43 64 00 91 45 64 00 92     (d...@..Cd..Ed..
    502d:	28 64 00 93 05 40 07 90 47 64 00 91 3e 64 00 92     (d...@..Gd..>d..
    503d:	28 64 00 93 03 40 06 90 3e 64 00 91 43 64 00 92     (d...@..>d..Cd..
    504d:	28 64 00 93 03 40 06 90 42 64 00 91 47 64 00 92     (d...@..Bd..Gd..
    505d:	34 64 00 93 03 40 07 90 45 64 00 91 3e 64 00 93     4d...@..Ed..>d..
    506d:	03 40 06 90 3e 64 00 91 42 64 00 92 28 64 00 93     .@..>d..Bd..(d..
    507d:	05 40 07 90 43 64 00 91 45 64 06 90 47 64 00 91     .@..Cd..Ed..Gd..
    508d:	3e 64 00 92 28 64 00 93 03 40 07 90 3e 64 00 91     >d..(d...@..>d..
    509d:	43 64 00 92 28 64 00 93 05 40 06 90 42 64 00 91     Cd..(d...@..Bd..
    50ad:	47 64 00 92 28 64 00 93 03 40 06 90 45 64 00 91     Gd..(d...@..Ed..
    50bd:	3e 64 07 90 3e 64 00 91 42 64 00 92 28 64 00 93     >d..>d..Bd..(d..
    50cd:	05 40 06 90 43 64 00 91 45 64 00 92 28 64 00 93     .@..Cd..Ed..(d..
    50dd:	05 40 07 90 47 64 00 91 3e 64 00 92 34 64 00 93     .@..Gd..>d..4d..
    50ed:	03 40 06 90 3e 64 00 91 43 64 07 90 42 64 00 91     .@..>d..Cd..Bd..
    50fd:	47 64 00 92 28 64 00 93 05 40 06 90 45 64 00 91     Gd..(d...@..Ed..
    510d:	3e 64 00 92 28 64 00 93 05 40 06 90 3e 64 00 91     >d..(d...@..>d..
    511d:	42 64 00 92 28 64 00 93 03 40 07 90 43 64 00 91     Bd..(d...@..Cd..
    512d:	45 64 00 92 28 64 00 93 03 40 06 90 47 64 00 91     Ed..(d...@..Gd..
    513d:	3e 64 00 92 34 64 00 93 03 40 07 90 3e 64 00 91     >d..4d...@..>d..
    514d:	43 64 00 93 03 40 06 90 42 64 00 91 47 64 00 92     Cd...@..Bd..Gd..
    515d:	28 64 07 90 45 64 00 91 3e 64 00 93 03 40 06 90     (d..Ed..>d...@..
    516d:	3e 64 00 91 42 64 00 92 28 64 00 93 05 40 06 90     >d..Bd..(d...@..
    517d:	43 64 00 91 45 64 00 92 28 64 00 93 05 40 07 90     Cd..Ed..(d...@..
    518d:	47 64 00 91 3e 64 00 92 2b 64 00 93 03 40 06 90     Gd..>d..+d...@..
    519d:	3e 64 00 91 43 64 07 90 42 64 00 91 47 64 00 92     >d..Cd..Bd..Gd..
    51ad:	2b 64 00 93 05 40 06 90 45 64 00 91 3e 64 00 92     +d...@..Ed..>d..
    51bd:	2b 64 00 93 05 40 07 90 3e 64 00 91 42 64 00 92     +d...@..>d..Bd..
    51cd:	37 64 00 93 03 40 06 90 43 64 00 91 45 64 06 90     7d...@..Cd..Ed..
    51dd:	47 64 00 91 3e 64 00 92 2b 64 00 93 05 40 07 90     Gd..>d..+d...@..
    51ed:	3e 64 00 91 43 64 00 92 2b 64 00 93 05 40 06 90     >d..Cd..+d...@..
    51fd:	42 64 00 91 47 64 00 92 2b 64 00 93 03 40 07 90     Bd..Gd..+d...@..
    520d:	45 64 00 91 3e 64 00 92 2b 64 00 93 03 40 06 90     Ed..>d..+d...@..
    521d:	3e 64 00 91 42 64 00 92 37 64 00 93 03 40 07 90     >d..Bd..7d...@..
    522d:	43 64 00 91 45 64 00 93 03 40 06 90 47 64 00 91     Cd..Ed...@..Gd..
    523d:	3e 64 00 92 2b 64 00 93 05 40 06 90 3e 64 00 91     >d..+d...@..>d..
    524d:	43 64 07 90 42 64 00 91 47 64 00 92 2b 64 00 93     Cd..Bd..Gd..+d..
    525d:	03 40 06 90 45 64 00 91 3e 64 00 92 2b 64 00 93     .@..Ed..>d..+d..
    526d:	05 40 07 90 47 64 00 91 42 64 00 92 2b 64 00 93     .@..Gd..Bd..+d..
    527d:	03 40 06 90 4a 64 00 91 45 64 07 90 48 64 00 91     .@..Jd..Ed..Hd..
    528d:	47 64 00 92 2b 64 00 93 05 40 06 90 47 64 00 91     Gd..+d...@..Gd..
    529d:	4a 64 00 92 2b 64 00 93 05 40 07 90 45 64 00 91     Jd..+d...@..Ed..
    52ad:	48 64 00 92 37 64 00 93 03 40 06 90 48 64 00 91     Hd..7d...@..Hd..
    52bd:	47 64 06 90 47 64 00 91 45 64 00 92 2b 64 00 93     Gd..Gd..Ed..+d..
    52cd:	05 40 07 90 45 64 00 91 48 64 00 92 2b 64 00 93     .@..Ed..Hd..+d..
    52dd:	05 40 06 90 43 64 00 91 47 64 00 92 2b 64 00 93     .@..Cd..Gd..+d..
    52ed:	03 40 07 90 47 64 00 91 45 64 00 92 2b 64 00 93     .@..Gd..Ed..+d..
    52fd:	03 40 06 90 45 64 00 91 43 64 00 92 37 64 00 93     .@..Ed..Cd..7d..
    530d:	03 40 07 90 43 64 00 91 47 64 00 93 03 40 06 90     .@..Cd..Gd...@..
    531d:	42 64 00 91 45 64 00 92 2b 64 00 93 05 40 06 90     Bd..Ed..+d...@..
    532d:	45 64 00 91 43 64 07 90 43 64 00 91 42 64 00 92     Ed..Cd..Cd..Bd..
    533d:	2b 64 00 93 03 40 06 90 42 64 00 91 45 64 00 92     +d...@..Bd..Ed..
    534d:	2b 64 00 93 05 40 07 90 40 64 00 91 43 64 00 92     +d...@..@d..Cd..
    535d:	28 64 00 93 03 40 06 90 3e 64 00 91 42 64 07 90     (d...@..>d..Bd..
    536d:	40 64 00 91 40 64 00 92 28 64 00 93 05 40 06 90     @d..@d..(d...@..
    537d:	42 64 00 91 3e 64 00 92 28 64 00 93 05 40 06 90     Bd..>d..(d...@..
    538d:	43 64 00 91 40 64 00 92 34 64 00 93 03 40 07 91     Cd..@d..4d...@..
    539d:	42 64 06 43 64 00 92 28 64 00 93 05 40 07 90 42     Bd.Cd..(d...@..B
    53ad:	64 00 92 28 64 00 93 05 40 06 90 43 64 00 92 28     d..(d...@..Cd..(
    53bd:	64 00 93 03 40 07 90 45 64 00 91 42 64 00 92 28     d...@..Ed..Bd..(
    53cd:	64 00 93 03 40 06 90 47 64 00 91 43 64 00 92 34     d...@..Gd..Cd..4
    53dd:	64 00 93 03 40 06 91 45 64 00 93 03 40 07 90 45     d...@..Ed...@..E
    53ed:	64 00 91 47 64 00 92 28 64 06 90 47 64 00 93 03     d..Gd..(d..Gd...
    53fd:	40 07 90 48 64 00 91 45 64 00 92 28 64 00 93 05     @..Hd..Ed..(d...
    540d:	40 06 90 3e 64 00 91 47 64 00 92 28 64 00 93 05     @..>d..Gd..(d...
    541d:	40 07 90 42 64 00 91 48 64 00 92 28 64 00 93 03     @..Bd..Hd..(d...
    542d:	40 06 90 45 64 00 91 3e 64 06 90 3e 64 00 91 42     @..Ed..>d..>d..B
    543d:	64 00 92 28 64 00 93 05 40 07 90 42 64 00 91 45     d..(d...@..Bd..E
    544d:	64 00 92 28 64 00 93 05 40 06 90 47 64 00 91 3e     d..(d...@..Gd..>
    545d:	64 00 92 34 64 00 93 03 40 07 90 3e 64 00 91 42     d..4d...@..>d..B
    546d:	64 06 90 42 64 00 91 47 64 00 92 28 64 00 93 05     d..Bd..Gd..(d...
    547d:	40 07 90 45 64 00 91 3e 64 00 92 28 64 00 93 05     @..Ed..>d..(d...
    548d:	40 06 90 3e 64 00 91 42 64 00 92 28 64 00 93 03     @..>d..Bd..(d...
    549d:	40 06 90 43 64 00 91 45 64 00 92 28 64 00 93 03     @..Cd..Ed..(d...
    54ad:	40 07 90 47 64 00 91 3e 64 00 92 34 64 00 93 03     @..Gd..>d..4d...
    54bd:	40 06 90 3e 64 00 91 43 64 00 93 03 40 07 90 42     @..>d..Cd...@..B
    54cd:	64 00 91 47 64 00 92 28 64 00 93 05 40 06 90 45     d..Gd..(d...@..E
    54dd:	64 00 91 3e 64 07 90 3e 64 00 91 42 64 00 92 28     d..>d..>d..Bd..(
    54ed:	64 00 93 03 40 06 90 42 64 00 91 45 64 00 92 28     d...@..Bd..Ed..(
    54fd:	64 00 93 05 40 06 90 43 64 00 91 3e 64 00 92 2b     d...@..Cd..>d..+
    550d:	64 00 93 03 40 07 90 3c 64 00 91 42 64 06 90 40     d...@..<d..Bd..@
    551d:	64 00 91 43 64 00 92 2b 64 00 93 05 40 07 90 43     d..Cd..+d...@..C
    552d:	64 00 91 3c 64 00 92 2b 64 00 93 05 40 06 90 3c     d..<d..+d...@..<
    553d:	64 00 91 40 64 00 92 37 64 00 93 03 40 07 90 40     d..@d..7d...@..@
    554d:	64 00 91 43 64 06 90 45 64 00 91 3c 64 00 92 2b     d..Cd..Ed..<d..+
    555d:	64 00 93 05 40 06 90 3c 64 00 91 40 64 00 92 2b     d...@..<d..@d..+
    556d:	64 00 93 05 40 07 90 40 64 00 91 45 64 00 92 2b     d...@..@d..Ed..+
    557d:	64 00 93 03 40 06 90 43 64 00 91 3c 64 00 92 2b     d...@..Cd..<d..+
    558d:	64 00 93 03 40 07 90 3c 64 00 91 40 64 00 92 37     d...@..<d..@d..7
    559d:	64 00 93 03 40 06 90 40 64 00 91 43 64 00 93 03     d...@..@d..Cd...
    55ad:	40 07 90 45 64 00 91 3c 64 00 92 2b 64 00 93 05     @..Ed..<d..+d...
    55bd:	40 06 90 3c 64 00 91 40 64 07 90 40 64 00 91 45     @..<d..@d..@d..E
    55cd:	64 00 92 2b 64 00 93 03 40 06 90 43 64 00 91 3c     d..+d...@..Cd..<
    55dd:	64 00 92 2b 64 00 93 05 40 06 90 3c 64 00 91 40     d..+d...@..<d..@
    55ed:	64 00 92 26 64 00 93 03 40 07 90 40 64 00 91 43     d..&d...@..@d..C
    55fd:	64 06 90 42 64 00 91 3c 64 00 92 26 64 00 93 05     d..Bd..<d..&d...
    560d:	40 07 90 3b 64 00 91 40 64 00 92 26 64 00 93 05     @..;d..@d..&d...
    561d:	40 06 90 3e 64 00 91 42 64 00 92 32 64 00 93 03     @..>d..Bd..2d...
    562d:	40 07 90 42 64 00 91 3b 64 06 90 3b 64 00 91 3e     @..Bd..;d..;d..>
    563d:	64 00 92 26 64 00 93 05 40 06 90 3e 64 00 91 42     d..&d...@..>d..B
    564d:	64 00 92 26 64 00 93 05 40 07 90 51 64 00 91 3b     d..&d...@..Qd..;
    565d:	64 00 92 26 64 00 93 03 40 02 90 4f 64 02 4d 64     d..&d...@..Od.Md
    566d:	02 4c 64 00 91 3e 64 00 92 26 64 00 93 03 40 02     .Ld..>d..&d...@.
    567d:	90 4a 64 03 48 64 02 47 64 00 91 51 64 00 92 28     .Jd.Hd.Gd..Qd..(
    568d:	64 00 93 03 40 02 90 45 64 00 91 4f 64 02 90 43     d...@..Ed..Od..C
    569d:	64 00 91 4d 64 02 90 41 64 00 91 4c 64 00 92 26     d..Md..Ad..Ld..&
    56ad:	64 00 93 03 40 02 90 40 64 00 91 4a 64 02 90 3e     d...@..@d..Jd..>
    56bd:	64 00 91 48 64 03 90 3c 64 00 91 47 64 00 92 28     d..Hd..<d..Gd..(
    56cd:	64 02 90 3b 64 00 91 45 64 02 90 39 64 00 91 43     d..;d..Ed..9d..C
    56dd:	64 02 90 37 64 00 91 41 64 00 92 2a 64 00 93 03     d..7d..Ad..*d...
    56ed:	40 02 90 35 64 00 91 40 64 02 90 34 64 00 91 3e     @..5d..@d..4d..>
    56fd:	64 02 90 32 64 00 91 3c 64 00 92 2b 64 00 93 05     d..2d..<d..+d...
    570d:	40 03 90 30 64 00 91 3b 64 02 90 2f 64 00 91 39     @..0d..;d../d..9
    571d:	64 02 90 2d 64 00 91 37 64 00 92 39 64 00 93 05     d..-d..7d..9d...
    572d:	40 02 90 2b 64 00 91 35 64 02 90 29 64 00 91 34     @..+d..5d..)d..4
    573d:	64 02 32 64 00 93 03 40 02 91 30 64 03 2f 64 02     d.2d...@..0d./d.
    574d:	90 45 64 00 91 2d 64 00 92 35 64 02 91 2b 64 02     .Ed..-d..5d..+d.
    575d:	29 64 02 93 05 40 07 91 45 64 00 93 05 40 06 90     )d...@..Ed...@..
    576d:	43 64 00 92 34 64 00 93 03 40 0d 91 43 64 00 93     Cd..4d...@..Cd..
    577d:	05 40 06 90 41 64 00 92 32 64 00 93 05 40 07 03     .@..Ad..2d...@..
    578d:	40 06 91 41 64 00 93 03 40 07 90 40 64 00 92 30     @..Ad...@..@d..0
    579d:	64 00 93 03 40 06 03 40 06 91 40 64 00 93 05 40     d...@..@..@d...@
    57ad:	07 90 3e 64 00 92 2f 64 06 93 03 40 07 91 3e 64     ..>d../d...@..>d
    57bd:	00 93 05 40 06 03 40 07 90 43 64 00 92 34 64 06     ...@..@..Cd..4d.
    57cd:	93 05 40 06 91 43 64 00 93 05 40 07 90 41 64 00     ..@..Cd...@..Ad.
    57dd:	92 32 64 00 93 03 40 0d 91 41 64 00 93 05 40 06     .2d...@..Ad...@.
    57ed:	90 40 64 00 92 30 64 00 93 05 40 07 03 40 06 91     .@d..0d...@..@..
    57fd:	40 64 00 93 03 40 06 90 3e 64 00 92 2f 64 00 93     @d...@..>d../d..
    580d:	03 40 07 03 40 06 91 3e 64 00 93 05 40 07 90 3c     .@..@..>d...@..<
    581d:	64 00 92 2d 64 06 93 03 40 07 91 3c 64 00 93 05     d..-d...@..<d...
    582d:	40 06 03 40 07 90 41 64 00 92 32 64 06 93 05 40     @..@..Ad..2d...@
    583d:	06 91 41 64 00 93 05 40 07 90 40 64 00 92 30 64     ..Ad...@..@d..0d
    584d:	00 93 03 40 0d 91 40 64 00 93 05 40 06 90 3e 64     ...@..@d...@..>d
    585d:	00 92 2f 64 00 93 05 40 07 03 40 06 91 3e 64 00     ../d...@..@..>d.
    586d:	93 03 40 06 90 3c 64 00 92 2d 64 00 93 03 40 07     ..@..<d..-d...@.
    587d:	03 40 06 91 3c 64 07 90 3b 64 00 92 2b 64 00 93     .@..<d..;d..+d..
    588d:	03 40 06 05 40 07 91 3b 64 00 93 05 40 06 03 40     .@..@..;d...@..@
    589d:	06 90 40 64 00 92 30 64 07 93 05 40 06 91 40 64     ..@d..0d...@..@d
    58ad:	00 93 05 40 07 90 3e 64 00 92 2f 64 00 93 03 40     ...@..>d../d...@
    58bd:	0d 91 3e 64 00 93 05 40 06 90 3c 64 00 92 2d 64     ..>d...@..<d..-d
    58cd:	00 93 05 40 06 03 40 07 91 3c 64 00 93 03 40 06     ...@..@..<d...@.
    58dd:	90 3b 64 00 92 2b 64 00 93 03 40 07 03 40 06 91     .;d..+d...@..@..
    58ed:	3b 64 00 93 05 40 07 90 39 64 00 92 29 64 06 93     ;d...@..9d..)d..
    58fd:	03 40 06 91 39 64 00 93 05 40 07 ff 06 01 45 00     .@..9d...@....E.
    590d:	ff 2f 00                                            ./.

00005910 <Song2>:
    5910:	00 c0 08 00 c1 09 00 c2 0a 00 c3 0b 00 b0 07 76     ...............v
    5920:	00 90 2e 40 00 91 22 40 00 b2 07 7f 00 92 2e 40     ...@.."@.......@
    5930:	00 93 0c 40 00 ff 06 01 53 0f 90 2e 40 00 92 2e     ...@....S...@...
    5940:	40 0f 90 2e 40 00 91 26 40 00 92 2e 40 00 93 0e     @...@..&@...@...
    5950:	40 0f 90 2c 40 00 91 26 40 00 92 2c 40 0f 90 2e     @..,@..&@..,@...
    5960:	40 00 91 22 40 00 92 2e 40 00 93 0c 40 1a 90 34     @.."@...@...@..4
    5970:	40 00 92 35 40 04 90 35 40 00 91 26 40 00 92 35     @..5@..5@..&@..5
    5980:	40 00 93 0e 40 1e 90 2e 40 00 91 22 40 00 92 2e     @...@...@.."@...
    5990:	40 00 93 0c 40 0f 90 2e 40 00 92 2e 40 0f 90 2e     @...@...@...@...
    59a0:	40 00 91 26 40 00 92 2e 40 00 93 0e 40 0f 90 2c     @..&@...@...@..,
    59b0:	40 00 91 26 40 00 92 2c 40 0f 90 2e 40 00 91 22     @..&@..,@...@.."
    59c0:	40 00 92 2e 40 00 93 0c 40 1a 90 35 40 00 92 32     @...@...@..5@..2
    59d0:	40 04 90 32 40 00 91 26 40 00 92 32 40 00 93 0e     @..2@..&@..2@...
    59e0:	40 1e 90 2e 40 00 91 22 40 00 92 2e 40 00 93 0c     @...@.."@...@...
    59f0:	40 0f 90 2e 40 00 92 2e 40 0f 90 2e 40 00 91 26     @...@...@...@..&
    5a00:	40 00 92 2e 40 00 93 0e 40 0f 90 2c 40 00 91 26     @...@...@..,@..&
    5a10:	40 00 92 2c 40 0f 90 2e 40 00 91 22 40 00 92 2e     @..,@...@.."@...
    5a20:	40 00 93 0c 40 1a 90 34 40 00 92 35 40 04 90 35     @...@..4@..5@..5
    5a30:	40 00 91 26 40 00 92 35 40 00 93 0e 40 1e 90 35     @..&@..5@...@..5
    5a40:	40 00 91 29 40 00 92 35 40 00 93 0e 40 0f 90 33     @..)@..5@...@..3
    5a50:	40 00 91 27 40 00 92 33 40 0f 90 32 40 00 91 26     @..'@..3@..2@..&
    5a60:	40 00 92 32 40 00 93 0c 40 0f 90 30 40 00 91 24     @..2@...@..0@..$
    5a70:	40 00 92 30 40 0f 90 2e 40 00 91 22 40 00 92 2e     @..0@...@.."@...
    5a80:	40 00 93 0e 40 1a 91 15 40 04 90 34 40 00 92 35     @...@...@..4@..5
    5a90:	40 00 93 0c 40 03 90 35 40 00 92 35 40 04 90 34     @...@..5@..5@..4
    5aa0:	40 00 92 34 40 04 90 35 40 00 92 35 40 04 90 34     @..4@..5@..5@..4
    5ab0:	40 00 92 35 40 00 93 0c 40 03 90 35 40 00 92 35     @..5@...@..5@..5
    5ac0:	40 0c 90 2e 40 00 91 22 40 00 92 2e 40 00 93 0c     @...@.."@...@...
    5ad0:	40 0f 90 2e 40 00 92 2e 40 0f 90 2e 40 00 91 26     @...@...@...@..&
    5ae0:	40 00 92 2e 40 00 93 0e 40 0f 90 2c 40 00 91 26     @...@...@..,@..&
    5af0:	40 00 92 2c 40 0f 90 2e 40 00 91 22 40 00 92 2e     @..,@...@.."@...
    5b00:	40 00 93 0c 40 1a 90 34 40 00 92 35 40 04 90 35     @...@..4@..5@..5
    5b10:	40 00 91 26 40 00 92 35 40 00 93 0e 40 1e 90 2e     @..&@..5@...@...
    5b20:	40 00 91 22 40 00 92 2e 40 00 93 0c 40 0f 90 2e     @.."@...@...@...
    5b30:	40 00 92 2e 40 0f 90 2e 40 00 91 26 40 00 92 2e     @...@...@..&@...
    5b40:	40 00 93 0e 40 0f 90 2c 40 00 91 26 40 00 92 2c     @...@..,@..&@..,
    5b50:	40 0f 90 2e 40 00 91 22 40 00 92 2e 40 00 93 0c     @...@.."@...@...
    5b60:	40 1a 90 35 40 00 92 32 40 04 90 32 40 00 91 26     @..5@..2@..2@..&
    5b70:	40 00 92 32 40 00 93 0e 40 1e 90 2e 40 00 91 22     @..2@...@...@.."
    5b80:	40 00 92 2e 40 00 93 0c 40 0f 90 2e 40 00 92 2e     @...@...@...@...
    5b90:	40 0f 90 2e 40 00 91 26 40 00 92 2e 40 00 93 0e     @...@..&@...@...
    5ba0:	40 0f 90 2c 40 00 91 26 40 00 92 2c 40 0f 90 2e     @..,@..&@..,@...
    5bb0:	40 00 91 22 40 00 92 2e 40 00 93 0c 40 1a 90 34     @.."@...@...@..4
    5bc0:	40 00 92 35 40 04 90 35 40 00 91 26 40 00 92 35     @..5@..5@..&@..5
    5bd0:	40 00 93 0e 40 1e 90 35 40 00 91 29 40 00 92 35     @...@..5@..)@..5
    5be0:	40 00 93 0d 40 0f 90 33 40 00 91 27 40 00 92 33     @...@..3@..'@..3
    5bf0:	40 0f 90 32 40 00 91 26 40 00 92 32 40 00 93 0c     @..2@..&@..2@...
    5c00:	40 07 0c 40 08 90 30 40 00 91 24 40 00 92 30 40     @..@..0@..$@..0@
    5c10:	00 93 0e 40 07 0c 40 08 90 2e 40 00 91 22 40 00     ...@..@...@.."@.
    5c20:	92 2e 40 0f 93 0e 40 0f 90 34 40 00 91 18 40 00     ..@...@..4@...@.
    5c30:	92 35 40 03 90 35 40 00 92 35 40 04 90 34 40 00     .5@..5@..5@..4@.
    5c40:	92 34 40 04 90 35 40 00 92 35 40 04 90 34 40 00     .4@..5@..5@..4@.
    5c50:	92 35 40 00 93 0e 40 03 90 35 40 00 92 35 40 0c     .5@...@..5@..5@.
    5c60:	90 2e 40 00 91 22 40 00 92 2e 40 00 93 0c 40 0f     ..@.."@...@...@.
    5c70:	90 2e 40 00 91 22 40 00 92 2e 40 00 93 0c 40 07     ..@.."@...@...@.
    5c80:	0c 40 08 90 30 40 00 91 26 40 00 92 30 40 00 93     .@..0@..&@..0@..
    5c90:	0e 40 0f 90 32 40 00 92 32 40 0f 90 35 40 00 91     .@..2@..2@..5@..
    5ca0:	22 40 00 92 35 40 00 93 0c 40 0f 90 33 40 00 91     "@..5@...@..3@..
    5cb0:	22 40 00 92 33 40 00 93 0c 40 07 0c 40 08 90 32     "@..3@...@..@..2
    5cc0:	40 00 91 29 40 00 92 32 40 00 93 0e 40 1e 90 2e     @..)@..2@...@...
    5cd0:	40 00 91 22 40 00 92 2e 40 00 93 0c 40 0f 90 2e     @.."@...@...@...
    5ce0:	40 00 91 22 40 00 92 2e 40 00 93 0c 40 07 0c 40     @.."@...@...@..@
    5cf0:	08 90 30 40 00 91 26 40 00 92 30 40 00 93 0e 40     ..0@..&@..0@...@
    5d00:	0f 90 32 40 00 91 22 40 00 92 32 40 0f 90 30 40     ..2@.."@..2@..0@
    5d10:	00 91 29 40 00 92 30 40 00 93 0e 40 07 0c 40 08     ..)@..0@...@..@.
    5d20:	90 33 40 00 91 27 40 00 92 33 40 00 93 0c 40 07     .3@..'@..3@...@.
    5d30:	0c 40 08 90 30 40 00 91 26 40 00 92 30 40 00 93     .@..0@..&@..0@..
    5d40:	0e 40 07 0c 40 08 90 35 40 00 92 35 40 00 93 0c     .@..@..5@..5@...
    5d50:	40 07 0c 40 08 90 2e 40 00 91 22 40 00 92 2e 40     @..@...@.."@...@
    5d60:	00 93 0c 40 0f 90 2e 40 00 91 22 40 00 92 2e 40     ...@...@.."@...@
    5d70:	00 93 0c 40 07 0c 40 08 90 30 40 00 91 26 40 00     ...@..@..0@..&@.
    5d80:	92 30 40 00 93 0e 40 0f 90 32 40 00 92 32 40 0f     .0@...@..2@..2@.
    5d90:	90 35 40 00 91 22 40 00 92 35 40 00 93 0c 40 0f     .5@.."@..5@...@.
    5da0:	90 33 40 00 91 22 40 00 92 33 40 00 93 0c 40 07     .3@.."@..3@...@.
    5db0:	0c 40 08 90 32 40 00 91 29 40 00 92 32 40 00 93     .@..2@..)@..2@..
    5dc0:	0e 40 1e 90 35 40 00 91 29 40 00 92 35 40 00 93     .@..5@..)@..5@..
    5dd0:	0c 40 07 90 2e 40 00 92 2e 40 08 90 33 40 00 91     .@...@...@..3@..
    5de0:	27 40 00 92 33 40 00 93 0c 40 07 90 2e 40 00 92     '@..3@...@...@..
    5df0:	2e 40 00 93 0c 40 08 90 32 40 00 91 26 40 00 92     .@...@..2@..&@..
    5e00:	32 40 00 93 0d 40 07 90 2e 40 00 92 2e 40 08 91     2@...@...@...@..
    5e10:	24 40 07 90 2e 40 00 92 2e 40 08 91 22 40 00 93     $@...@...@.."@..
    5e20:	0c 40 07 90 2e 40 00 92 2e 40 00 93 0c 40 08 90     .@...@...@...@..
    5e30:	2e 40 00 92 2e 40 00 93 0c 40 07 0c 40 08 90 34     .@...@...@..@..4
    5e40:	40 00 91 29 40 00 92 35 40 00 93 0d 40 03 90 35     @..)@..5@...@..5
    5e50:	40 00 92 35 40 04 91 29 40 04 90 34 40 00 92 34     @..5@..)@..4@..4
    5e60:	40 04 90 35 40 00 91 29 40 00 92 35 40 07 90 34     @..5@..)@..5@..4
    5e70:	40 00 92 34 40 04 90 35 40 00 92 35 40 04 90 35     @..4@..5@..5@..5
    5e80:	40 00 91 22 40 00 92 35 40 00 93 0c 40 0f 90 33     @.."@..5@...@..3
    5e90:	40 00 91 22 40 00 92 33 40 00 93 0c 40 07 90 32     @.."@..3@...@..2
    5ea0:	40 00 91 22 40 00 92 32 40 00 93 0c 40 08 90 35     @.."@..2@...@..5
    5eb0:	40 00 91 26 40 00 92 35 40 00 93 0e 40 0f 90 35     @..&@..5@...@..5
    5ec0:	40 00 91 22 40 00 92 35 40 00 93 0e 40 0f 90 32     @.."@..5@...@..2
    5ed0:	40 00 91 24 40 00 92 32 40 00 93 0c 40 0f 90 35     @..$@..2@...@..5
    5ee0:	40 00 91 22 40 00 92 35 40 00 93 0c 40 07 0c 40     @.."@..5@...@..@
    5ef0:	08 90 37 40 00 91 29 40 00 92 37 40 00 93 0e 40     ..7@..)@..7@...@
    5f00:	0f 0e 40 0b 90 34 40 00 92 34 40 04 90 35 40 00     ..@..4@..4@..5@.
    5f10:	91 22 40 00 92 35 40 00 93 0c 40 0f 90 33 40 00     ."@..5@...@..3@.
    5f20:	91 22 40 00 92 33 40 00 93 0c 40 07 90 32 40 00     ."@..3@...@..2@.
    5f30:	91 22 40 00 92 32 40 00 93 0c 40 08 90 35 40 00     ."@..2@...@..5@.
    5f40:	91 26 40 00 92 35 40 00 93 0e 40 0f 90 35 40 00     .&@..5@...@..5@.
    5f50:	91 22 40 00 92 35 40 00 93 0e 40 0f 90 37 40 00     ."@..5@...@..7@.
    5f60:	91 29 40 00 92 37 40 00 93 0e 40 0f 90 35 40 00     .)@..7@...@..5@.
    5f70:	91 27 40 00 92 35 40 0f 90 32 40 00 91 26 40 00     .'@..5@..2@..&@.
    5f80:	92 32 40 00 93 0c 40 0f 0c 40 0b 90 32 40 00 92     .2@...@..@..2@..
    5f90:	32 40 04 90 35 40 00 91 22 40 00 92 35 40 00 93     2@..5@.."@..5@..
    5fa0:	0c 40 0f 90 33 40 00 91 22 40 00 92 33 40 00 93     .@..3@.."@..3@..
    5fb0:	0c 40 07 90 32 40 00 91 22 40 00 92 32 40 00 93     .@..2@.."@..2@..
    5fc0:	0c 40 08 90 35 40 00 91 26 40 00 92 35 40 00 93     .@..5@..&@..5@..
    5fd0:	0e 40 0f 90 35 40 00 91 22 40 00 92 35 40 00 93     .@..5@.."@..5@..
    5fe0:	0e 40 0f 90 32 40 00 91 24 40 00 92 32 40 00 93     .@..2@..$@..2@..
    5ff0:	0c 40 0f 90 35 40 00 91 22 40 00 92 35 40 00 93     .@..5@.."@..5@..
    6000:	0c 40 07 0c 40 08 90 37 40 00 91 29 40 00 92 37     .@..@..7@..)@..7
    6010:	40 00 93 0e 40 0f 0e 40 0b 90 34 40 00 92 34 40     @...@..@..4@..4@
    6020:	04 90 35 40 00 91 22 40 00 92 35 40 00 93 0c 40     ..5@.."@..5@...@
    6030:	0f 90 33 40 00 91 22 40 00 92 33 40 00 93 0c 40     ..3@.."@..3@...@
    6040:	07 91 22 40 00 93 0c 40 08 90 35 40 00 91 26 40     .."@...@..5@..&@
    6050:	00 92 35 40 00 93 0e 40 0f 90 33 40 00 91 22 40     ..5@...@..3@.."@
    6060:	00 92 33 40 00 93 0e 40 0f 90 37 40 00 91 27 40     ..3@...@..7@..'@
    6070:	00 92 37 40 00 93 0e 40 0f 90 35 40 00 91 24 40     ..7@...@..5@..$@
    6080:	00 92 35 40 07 90 34 40 00 92 34 40 08 90 32 40     ..5@..4@..4@..2@
    6090:	00 91 29 40 00 92 32 40 00 93 0c 40 0f 90 32 40     ..)@..2@...@..2@
    60a0:	00 91 29 40 00 92 32 40 00 93 0c 40 0f 90 35 40     ..)@..2@...@..5@
    60b0:	00 91 22 40 00 92 35 40 00 93 0c 40 0f 90 33 40     .."@..5@...@..3@
    60c0:	00 91 22 40 00 92 33 40 00 93 0c 40 07 90 32 40     .."@..3@...@..2@
    60d0:	00 91 22 40 00 92 32 40 00 93 0c 40 08 90 35 40     .."@..2@...@..5@
    60e0:	00 91 26 40 00 92 35 40 00 93 0e 40 0f 90 35 40     ..&@..5@...@..5@
    60f0:	00 91 22 40 00 92 35 40 00 93 0e 40 0f 90 32 40     .."@..5@...@..2@
    6100:	00 91 24 40 00 92 32 40 00 93 0c 40 0f 90 35 40     ..$@..2@...@..5@
    6110:	00 91 22 40 00 92 35 40 00 93 0c 40 07 0c 40 08     .."@..5@...@..@.
    6120:	90 37 40 00 91 29 40 00 92 37 40 00 93 0e 40 0f     .7@..)@..7@...@.
    6130:	0e 40 0b 90 34 40 00 92 34 40 04 90 35 40 00 91     .@..4@..4@..5@..
    6140:	22 40 00 92 35 40 00 93 0c 40 0f 90 33 40 00 91     "@..5@...@..3@..
    6150:	22 40 00 92 33 40 00 93 0c 40 07 90 32 40 00 91     "@..3@...@..2@..
    6160:	22 40 00 92 32 40 00 93 0c 40 08 90 35 40 00 91     "@..2@...@..5@..
    6170:	26 40 00 92 35 40 00 93 0e 40 0f 90 35 40 00 91     &@..5@...@..5@..
    6180:	22 40 00 92 35 40 00 93 0e 40 0f 90 37 40 00 91     "@..5@...@..7@..
    6190:	29 40 00 92 37 40 00 93 0c 40 0f 90 35 40 00 91     )@..7@...@..5@..
    61a0:	27 40 00 92 35 40 00 93 0e 40 07 0e 40 08 90 32     '@..5@...@..@..2
    61b0:	40 00 91 26 40 00 92 32 40 00 93 0c 40 0f 0c 40     @..&@..2@...@..@
    61c0:	0b 90 32 40 00 92 32 40 04 90 35 40 00 91 22 40     ..2@..2@..5@.."@
    61d0:	00 92 35 40 00 93 0c 40 0f 90 33 40 00 91 22 40     ..5@...@..3@.."@
    61e0:	00 92 33 40 00 93 0c 40 07 90 32 40 00 91 22 40     ..3@...@..2@.."@
    61f0:	00 92 32 40 00 93 0c 40 08 90 35 40 00 91 26 40     ..2@...@..5@..&@
    6200:	00 92 35 40 00 93 0e 40 0f 90 35 40 00 91 22 40     ..5@...@..5@.."@
    6210:	00 92 35 40 00 93 0e 40 0f 90 32 40 00 91 24 40     ..5@...@..2@..$@
    6220:	00 92 32 40 00 93 0c 40 0f 90 35 40 00 91 22 40     ..2@...@..5@.."@
    6230:	00 92 35 40 00 93 0c 40 07 0c 40 08 90 37 40 00     ..5@...@..@..7@.
    6240:	91 29 40 00 92 37 40 00 93 0e 40 0f 0e 40 0b 90     .)@..7@...@..@..
    6250:	34 40 00 92 34 40 04 90 35 40 00 91 22 40 00 92     4@..4@..5@.."@..
    6260:	35 40 00 93 0c 40 0f 90 33 40 00 91 22 40 00 92     5@...@..3@.."@..
    6270:	33 40 00 93 0c 40 07 91 22 40 00 93 0c 40 08 90     3@...@.."@...@..
    6280:	35 40 00 91 26 40 00 92 35 40 00 93 0e 40 0f 90     5@..&@..5@...@..
    6290:	33 40 00 91 22 40 00 92 33 40 00 93 0e 40 0f 90     3@.."@..3@...@..
    62a0:	37 40 00 91 27 40 00 92 37 40 00 93 0e 40 0f 90     7@..'@..7@...@..
    62b0:	35 40 00 91 24 40 00 92 35 40 00 93 0e 40 07 90     5@..$@..5@...@..
    62c0:	34 40 00 92 34 40 00 93 0e 40 08 90 32 40 00 91     4@..4@...@..2@..
    62d0:	29 40 00 92 32 40 00 93 0c 40 07 90 33 40 00 92     )@..2@...@..3@..
    62e0:	33 40 08 90 32 40 00 91 29 40 00 92 32 40 00 93     3@..2@..)@..2@..
    62f0:	0c 40 07 90 30 40 00 92 30 40 08 90 2e 40 00 91     .@..0@..0@...@..
    6300:	22 40 00 92 2e 40 00 93 0c 40 07 90 2e 40 00 92     "@...@...@...@..
    6310:	2e 40 08 93 0c 40 07 90 2e 40 00 92 2e 40 00 93     .@...@...@...@..
    6320:	0c 40 08 90 35 40 00 91 26 40 00 92 35 40 00 93     .@..5@..&@..5@..
    6330:	0c 40 0f 90 2c 40 00 91 26 40 00 92 2c 40 00 93     .@..,@..&@..,@..
    6340:	0e 40 0f 90 2e 40 00 91 22 40 00 92 2e 40 00 93     .@...@.."@...@..
    6350:	0c 40 07 90 2e 40 00 92 2e 40 08 93 0c 40 07 90     .@...@...@...@..
    6360:	2e 40 00 92 2e 40 00 93 0c 40 08 90 35 40 00 91     .@...@...@..5@..
    6370:	26 40 00 92 35 40 00 93 0c 40 0f 0e 40 07 0e 40     &@..5@...@..@..@
    6380:	08 90 2e 40 00 91 22 40 00 92 2e 40 00 93 0c 40     ...@.."@...@...@
    6390:	07 90 2e 40 00 92 2e 40 08 93 0c 40 07 90 2e 40     ...@...@...@...@
    63a0:	00 92 2e 40 00 93 0c 40 08 90 35 40 00 91 26 40     ...@...@..5@..&@
    63b0:	00 92 35 40 00 93 0c 40 0f 90 2c 40 00 91 26 40     ..5@...@..,@..&@
    63c0:	00 92 2c 40 00 93 0e 40 0f 90 37 40 00 91 22 40     ..,@...@..7@.."@
    63d0:	00 92 37 40 00 93 0c 40 07 90 2e 40 00 92 2e 40     ..7@...@...@...@
    63e0:	08 90 35 40 00 92 35 40 00 93 0c 40 07 90 2e 40     ..5@..5@...@...@
    63f0:	00 92 2e 40 00 93 0c 40 08 90 32 40 00 91 26 40     ...@...@..2@..&@
    6400:	00 92 32 40 00 93 0c 40 07 90 2e 40 00 92 2e 40     ..2@...@...@...@
    6410:	08 90 32 40 00 92 32 40 00 93 0e 40 07 90 30 40     ..2@..2@...@..0@
    6420:	00 92 30 40 00 93 0e 40 08 90 2e 40 00 91 22 40     ..0@...@...@.."@
    6430:	00 92 2e 40 00 93 0c 40 07 90 2e 40 00 92 2e 40     ...@...@...@...@
    6440:	08 93 0c 40 07 90 2e 40 00 92 2e 40 00 93 0c 40     ...@...@...@...@
    6450:	08 90 35 40 00 91 26 40 00 92 35 40 00 93 0c 40     ..5@..&@..5@...@
    6460:	0f 90 2c 40 00 91 26 40 00 92 2c 40 00 93 0e 40     ..,@..&@..,@...@
    6470:	0f 90 2e 40 00 91 22 40 00 92 2e 40 00 93 0c 40     ...@.."@...@...@
    6480:	07 90 2e 40 00 92 2e 40 08 93 0c 40 07 90 2e 40     ...@...@...@...@
    6490:	00 92 2e 40 00 93 0c 40 08 90 35 40 00 91 26 40     ...@...@..5@..&@
    64a0:	00 92 35 40 00 93 0c 40 0f 0e 40 07 0e 40 08 90     ..5@...@..@..@..
    64b0:	35 40 00 91 22 40 00 92 35 40 00 93 0c 40 07 90     5@.."@..5@...@..
    64c0:	2e 40 00 92 2e 40 08 90 32 40 00 91 22 40 00 92     .@...@..2@.."@..
    64d0:	32 40 00 93 0c 40 07 90 2e 40 00 92 2e 40 00 93     2@...@...@...@..
    64e0:	0c 40 08 90 35 40 00 91 26 40 00 92 35 40 00 93     .@..5@..&@..5@..
    64f0:	0c 40 07 90 2e 40 00 92 2e 40 08 90 32 40 00 92     .@...@...@..2@..
    6500:	32 40 00 93 0e 40 0f 90 30 40 00 91 22 40 00 92     2@...@..0@.."@..
    6510:	30 40 00 93 0c 40 0f 90 33 40 00 91 22 40 00 92     0@...@..3@.."@..
    6520:	33 40 00 93 0c 40 07 0c 40 08 90 32 40 00 91 29     3@...@..@..2@..)
    6530:	40 00 92 32 40 00 93 0c 40 0f 90 32 40 00 92 32     @..2@...@..2@..2
    6540:	40 00 93 0e 40 07 90 30 40 00 92 30 40 00 93 0e     @...@..0@..0@...
    6550:	40 08 90 2e 40 00 91 22 40 00 92 2e 40 00 93 0d     @...@.."@...@...
    6560:	40 0f 90 2e 40 00 91 22 40 00 92 2e 40 0f 90 30     @...@.."@...@..0
    6570:	40 00 91 26 40 00 92 30 40 00 93 0e 40 0f 90 32     @..&@..0@...@..2
    6580:	40 00 92 32 40 0f 90 35 40 00 91 22 40 00 92 35     @..2@..5@.."@..5
    6590:	40 00 93 0c 40 0f 90 33 40 00 91 22 40 00 92 33     @...@..3@.."@..3
    65a0:	40 0f 90 32 40 00 91 29 40 00 92 32 40 00 93 0e     @..2@..)@..2@...
    65b0:	40 1e 90 2e 40 00 91 22 40 00 92 2e 40 00 93 0c     @...@.."@...@...
    65c0:	40 0f 90 2e 40 00 91 22 40 00 92 2e 40 0f 90 30     @...@.."@...@..0
    65d0:	40 00 91 26 40 00 92 30 40 00 93 0e 40 0f 90 32     @..&@..0@...@..2
    65e0:	40 00 91 22 40 00 92 32 40 0f 90 30 40 00 91 29     @.."@..2@..0@..)
    65f0:	40 00 92 30 40 00 93 0c 40 0f 90 33 40 00 91 27     @..0@...@..3@..'
    6600:	40 00 92 33 40 0f 90 30 40 00 91 26 40 00 92 30     @..3@..0@..&@..0
    6610:	40 00 93 0e 40 0f 90 35 40 00 92 35 40 00 93 0e     @...@..5@..5@...
    6620:	40 0f 90 2e 40 00 91 22 40 00 92 2e 40 00 93 0c     @...@.."@...@...
    6630:	40 0f 90 2e 40 00 91 22 40 00 92 2e 40 0f 90 30     @...@.."@...@..0
    6640:	40 00 91 26 40 00 92 30 40 00 93 0e 40 0f 90 32     @..&@..0@...@..2
    6650:	40 00 92 32 40 0f 90 35 40 00 91 22 40 00 92 35     @..2@..5@.."@..5
    6660:	40 00 93 0c 40 0f 90 33 40 00 91 22 40 00 92 33     @...@..3@.."@..3
    6670:	40 0f 90 32 40 00 91 29 40 00 92 32 40 00 93 0e     @..2@..)@..2@...
    6680:	40 1e 90 35 40 00 91 29 40 00 92 35 40 00 93 0c     @..5@..)@..5@...
    6690:	40 07 90 2e 40 00 92 2e 40 08 90 33 40 00 91 27     @...@...@..3@..'
    66a0:	40 00 92 33 40 07 90 2e 40 00 92 2e 40 08 90 32     @..3@...@...@..2
    66b0:	40 00 91 26 40 00 92 32 40 00 93 0e 40 07 90 2e     @..&@..2@...@...
    66c0:	40 00 92 2e 40 08 91 24 40 07 90 2e 40 00 92 2e     @...@..$@...@...
    66d0:	40 08 91 22 40 00 93 0c 40 07 90 2e 40 00 92 2e     @.."@...@...@...
    66e0:	40 08 90 2e 40 00 92 2e 40 0f 90 34 40 00 91 29     @...@...@..4@..)
    66f0:	40 00 92 34 40 00 93 0e 40 03 90 35 40 00 92 35     @..4@...@..5@..5
    6700:	40 04 90 34 40 00 91 29 40 00 93 0c 40 04 90 35     @..4@..)@...@..5
    6710:	40 00 92 34 40 04 90 34 40 00 91 29 40 00 92 35     @..4@..4@..)@..5
    6720:	40 00 93 0e 40 03 90 35 40 03 ff 06 01 45 01 92     @...@..5@....E..
    6730:	34 40 00 93 0e 40 04 92 35 40 04 ff 2f 00           4@...@..5@../.

0000673e <uzebox_string>:
    673e:	55 5a 45 42 4f 58 00                                UZEBOX.

00006745 <chain_star_count>:
    6745:	00 02 04 05 06 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c     ................
	...

00006757 <title_block_coords>:
    6757:	02 01 00 03 04 03 00 05 02 05 04 05 00 07 04 07     ................
    6767:	09 01 07 02 08 04 0a 06 08 07 0c 01 0e 01 0d 03     ................
    6777:	0d 05 0d 07 11 01 13 01 11 03 14 03 11 05 13 05     ................
    6787:	11 07 14 07 18 01 1a 01 17 03 1b 03 17 05 1b 05     ................
    6797:	18 07 1a 07 02 0b 00 0c 01 0e 03 10 01 11 05 0b     ................
    67a7:	07 0b 06 0d 06 0f 06 11 0c 0b 0a 0d 0e 0d 0a 0f     ................
    67b7:	0c 0f 0e 0f 0a 11 0e 11 12 0b 14 0b 11 0d 11 0f     ................
    67c7:	12 11 14 11 17 0b 17 0d 1a 0d 17 0f 19 0f 17 11     ................
    67d7:	1a 11                                               ..

000067d9 <title_star_effect_pos>:
    67d9:	06 04 0e 07 14 07 0e 0d                             ........

000067e1 <spawn_pile>:
    67e1:	06 03 02 01 06 02 03 01 06 03 02 01 01 02 03 06     ................
    67f1:	01 02 03 06 06 03 02 01 03 02 02 01 01 06 03 06     ................
    6801:	01 02 03 06 06 03 02 01 06 03 02 01 01 02 03 06     ................
    6811:	01 02 03 06 06 03 02 01 06 03 02 01 01 02 03 06     ................
    6821:	06 03 02 01 01 02 03 06 03 02 02 01 01 06 03 06     ................
    6831:	03 02 02 01 01 03 06 06 01 02 03 06 06 03 02 01     ................
    6841:	06 03 02 01 01 02 03 06 01 02 03 06 06 03 02 01     ................
    6851:	01 02 03 06 06 03 02 01 06 03 02 01 01 02 03 06     ................

00006861 <orbital_vpos_lookup>:
    6861:	00 fe 02 00 00 02 fe 00                             ........

00006869 <orbital_grid_lookup>:
    6869:	fa 01 06 ff                                         ....

0000686d <garbage_pile>:
    686d:	01 02 03 02 03 06 01 05 01 02 03 02 03 01 07 01     ................
    687d:	02 03 01 02 03 08 03 02 01 03 02 01 02 03 06 01     ................
    688d:	06 01 02 03 02 03 01 07 01 02 03 01 02 03 08 03     ................
    689d:	02 01 03 02 01                                      .....

000068a2 <round_text_rt_map>:
    68a2:	01 02 05 06 09 0a 0d 0e 11 12 15 16 03 04 07 08     ................
    68b2:	0b 0c 0f 10 13 14 17 18                             ........

000068ba <__c.2317>:
    68ba:	52 45 41 44 59 5d 00                                READY].

000068c1 <__c.2319>:
    68c1:	52 45 41 44 59 5b 00                                READY[.

000068c8 <__c.2321>:
    68c8:	47 4f 5b 5b 00                                      GO[[.

000068cd <__c.1842>:
    68cd:	53 49 4e 47 4c 45 00                                SINGLE.

000068d4 <__c.1844>:
    68d4:	56 45 52 53 55 53 00                                VERSUS.

000068db <__c.1846>:
    68db:	55 5a 45 4e 45 54 00                                UZENET.

000068e2 <__c.1737>:
    68e2:	55 5a 45 4e 45 54 00                                UZENET.

000068e9 <__c.1739>:
    68e9:	43 4f 4e 4e 45 43 54 49 4e 47 00                    CONNECTING.

000068f4 <__c.1746>:
    68f4:	45 52 52 4f 52 00                                   ERROR.

000068fa <__c.1748>:
    68fa:	20 52 55 4e 20 45 53 50 38 32 36 36 00               RUN ESP8266.

00006907 <__c.1750>:
    6907:	53 45 54 55 50 20 55 54 49 4c 49 54 59 00           SETUP UTILITY.

00006915 <__c.1753>:
    6915:	43 4f 4e 4e 45 43 54 45 44 5b 00                    CONNECTED[.

00006920 <__c.1762>:
    6920:	43 48 4f 4f 53 45 20 50 4c 41 59 45 52 00           CHOOSE PLAYER.

0000692e <__c.1764>:
    692e:	44 33 54 48 41 44 44 33 52 00                       D3THADD3R.

00006938 <__c.1766>:
    6938:	45 41 53 59 20 43 50 55 00                          EASY CPU.

00006941 <__c.1768>:
    6941:	47 4f 4f 44 20 43 50 55 00                          GOOD CPU.

0000694a <__c.1770>:
    694a:	41 52 54 43 46 4f 58 00                             ARTCFOX.

00006952 <__c.1772>:
    6952:	5c 4d 4f 52 45 5e 00                                \MORE^.

00006959 <__c.1707>:
    6959:	53 4f 55 52 43 45 20 43 4f 44 45 00                 SOURCE CODE.

00006965 <__c.1709>:
    6965:	20 20 20 47 50 4c 20 33 00                             GPL 3.

0000696e <__c.1711>:
    696e:	53 46 58 20 47 46 58 20 4d 55 53 49 43 00           SFX GFX MUSIC.

0000697c <__c.1713>:
    697c:	20 20 43 43 20 53 41 20 34 00                         CC SA 4.

00006986 <__c.1715>:
    6986:	20 4c 45 45 20 57 45 42 45 52 00                     LEE WEBER.

00006991 <__c.1717>:
    6991:	20 20 20 32 30 31 37 00 00                             2017..

0000699a <__ctors_end>:
    699a:	11 24       	eor	r1, r1
    699c:	1f be       	out	0x3f, r1	; 63
    699e:	cf ef       	ldi	r28, 0xFF	; 255
    69a0:	d0 e1       	ldi	r29, 0x10	; 16
    69a2:	de bf       	out	0x3e, r29	; 62
    69a4:	cd bf       	out	0x3d, r28	; 61

000069a6 <__do_copy_data>:
    69a6:	11 e0       	ldi	r17, 0x01	; 1
    69a8:	a0 e0       	ldi	r26, 0x00	; 0
    69aa:	b1 e0       	ldi	r27, 0x01	; 1
    69ac:	e4 ec       	ldi	r30, 0xC4	; 196
    69ae:	ff ea       	ldi	r31, 0xAF	; 175
    69b0:	02 c0       	rjmp	.+4      	; 0x69b6 <.do_copy_data_start>

000069b2 <.do_copy_data_loop>:
    69b2:	05 90       	lpm	r0, Z+
    69b4:	0d 92       	st	X+, r0

000069b6 <.do_copy_data_start>:
    69b6:	a8 30       	cpi	r26, 0x08	; 8
    69b8:	b1 07       	cpc	r27, r17
    69ba:	d9 f7       	brne	.-10     	; 0x69b2 <.do_copy_data_loop>

000069bc <__do_clear_bss>:
    69bc:	1e e0       	ldi	r17, 0x0E	; 14
    69be:	a0 e2       	ldi	r26, 0x20	; 32
    69c0:	b1 e0       	ldi	r27, 0x01	; 1
    69c2:	01 c0       	rjmp	.+2      	; 0x69c6 <.do_clear_bss_start>

000069c4 <.do_clear_bss_loop>:
    69c4:	1d 92       	st	X+, r1

000069c6 <.do_clear_bss_start>:
    69c6:	a2 3e       	cpi	r26, 0xE2	; 226
    69c8:	b1 07       	cpc	r27, r17
    69ca:	e1 f7       	brne	.-8      	; 0x69c4 <.do_clear_bss_loop>

000069cc <wdt_init>:

void wdt_init(void)
{

#if TRUE_RANDOM_GEN == 1	
	wdt_randomize();
    69cc:	0e 94 9c 39 	call	0x7338	; 0x7338 <wdt_randomize>
#endif

    MCUSR = 0;
    69d0:	14 be       	out	0x34, r1	; 52
    wdt_disable();
    69d2:	88 e1       	ldi	r24, 0x18	; 24
    69d4:	0f b6       	in	r0, 0x3f	; 63
    69d6:	f8 94       	cli
    69d8:	80 93 60 00 	sts	0x0060, r24
    69dc:	10 92 60 00 	sts	0x0060, r1
    69e0:	0f be       	out	0x3f, r0	; 63

000069e2 <Initialize>:


void Initialize(void){
	int i;

	if(!isEepromFormatted()) FormatEeprom();
    69e2:	0e 94 7d 3a 	call	0x74fa	; 0x74fa <isEepromFormatted>
    69e6:	88 23       	and	r24, r24
    69e8:	11 f4       	brne	.+4      	; 0x69ee <Initialize+0xc>
    69ea:	0e 94 5a 3a 	call	0x74b4	; 0x74b4 <FormatEeprom>

	cli();
    69ee:	f8 94       	cli
		mix_bank=0;
	#endif
	
	#if MIXER_CHAN4_TYPE == 0
		//initialize LFSR		
		tr4_barrel_lo=1;
    69f0:	91 e0       	ldi	r25, 0x01	; 1
    69f2:	90 93 b5 0c 	sts	0x0CB5, r25
		tr4_barrel_hi=1;		
    69f6:	90 93 b6 0c 	sts	0x0CB6, r25
		tr4_params=0b00000001; //15 bits no divider (1)
    69fa:	90 93 b4 0c 	sts	0x0CB4, r25
		snesMouseEnabled=false;
	#endif

	//silence all sound channels
	for(i=0;i<CHANNELS;i++){
		mixer.channels.all[i].volume=0;
    69fe:	10 92 a1 0c 	sts	0x0CA1, r1
    6a02:	10 92 a7 0c 	sts	0x0CA7, r1
    6a06:	10 92 ad 0c 	sts	0x0CAD, r1
    6a0a:	10 92 b3 0c 	sts	0x0CB3, r1
    6a0e:	10 92 b9 0c 	sts	0x0CB9, r1
	}
	
	//set sync parameters. starts at odd field, in pre-eq pulses, line 1, vsync flag cleared
	sync_phase=0;
    6a12:	10 92 84 0c 	sts	0x0C84, r1
	sync_flags=0;
    6a16:	10 92 86 0c 	sts	0x0C86, r1
	sync_pulse=SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES;
    6a1a:	82 e1       	ldi	r24, 0x12	; 18
    6a1c:	80 93 85 0c 	sts	0x0C85, r24

	//set rendering parameters
	render_lines_count=FRAME_LINES;
    6a20:	80 ed       	ldi	r24, 0xD0	; 208
    6a22:	80 93 8c 0c 	sts	0x0C8C, r24
	first_render_line=FIRST_RENDER_LINE;
    6a26:	8c e1       	ldi	r24, 0x1C	; 28
    6a28:	80 93 8b 0c 	sts	0x0C8B, r24

	joypad1_status_hi=0;
    6a2c:	10 92 90 0c 	sts	0x0C90, r1
    6a30:	10 92 8f 0c 	sts	0x0C8F, r1
	joypad2_status_hi=0;
    6a34:	10 92 94 0c 	sts	0x0C94, r1
    6a38:	10 92 93 0c 	sts	0x0C93, r1
	sound_enabled=1;
    6a3c:	90 93 a0 0c 	sts	0x0CA0, r25

	InitializeVideoMode();
    6a40:	0e 94 e4 44 	call	0x89c8	; 0x89c8 <InitializeVideoMode>
    6a44:	20 e9       	ldi	r18, 0x90	; 144
    6a46:	30 e0       	ldi	r19, 0x00	; 0
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
		val=pgm_read_word(&io_table[j]);
    6a48:	f9 01       	movw	r30, r18
    6a4a:	85 91       	lpm	r24, Z+
    6a4c:	94 91       	lpm	r25, Z+
		ptr=(u8*)(val&0xff);
		*ptr=val>>8;	
    6a4e:	fc 01       	movw	r30, r24
    6a50:	f0 70       	andi	r31, 0x00	; 0
    6a52:	90 83       	st	Z, r25
    6a54:	2e 5f       	subi	r18, 0xFE	; 254
    6a56:	3f 4f       	sbci	r19, 0xFF	; 255
	InitializeVideoMode();
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
    6a58:	80 e0       	ldi	r24, 0x00	; 0
    6a5a:	2e 3b       	cpi	r18, 0xBE	; 190
    6a5c:	38 07       	cpc	r19, r24
    6a5e:	a1 f7       	brne	.-24     	; 0x6a48 <Initialize+0x66>
		val=pgm_read_word(&io_table[j]);
		ptr=(u8*)(val&0xff);
		*ptr=val>>8;	
	}

	sei();
    6a60:	78 94       	sei
	
	DisplayLogo();
    6a62:	0e 94 e3 44 	call	0x89c6	; 0x89c6 <DisplayLogo>
    6a66:	0e 94 4f 4e 	call	0x9c9e	; 0x9c9e <main>
    6a6a:	0c 94 e0 57 	jmp	0xafc0	; 0xafc0 <_exit>

00006a6e <__bad_interrupt>:
    6a6e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00006a72 <sub_video_mode3>:
	; Mode 3 with NO scrolling
	;***************************************************	
	sub_video_mode3:

		;wait cycles to align with next hsync
		WAIT r16,465 //30-3+340+98
    6a72:	0b e9       	ldi	r16, 0x9B	; 155
    6a74:	0a 95       	dec	r16
    6a76:	f1 f7       	brne	.-4      	; 0x6a74 <sub_video_mode3+0x2>

		;Refresh ramtiles indexes in VRAM
		;This has to be done because the main
		;program may have altered the VRAM
		;after vsync and the rendering interrupt.
		lds r16,userRamTilesCount
    6a78:	00 91 c6 0c 	lds	r16, 0x0CC6

		ldi ZL,lo8(ram_tiles_restore);
    6a7c:	ec e1       	ldi	r30, 0x1C	; 28
		ldi ZH,hi8(ram_tiles_restore);
    6a7e:	fc e0       	ldi	r31, 0x0C	; 12
		ldi r18,3
    6a80:	23 e0       	ldi	r18, 0x03	; 3
		mul r16,r18
    6a82:	02 9f       	mul	r16, r18
		add ZL,r0
    6a84:	e0 0d       	add	r30, r0
		adc ZH,r1
    6a86:	f1 1d       	adc	r31, r1

		ldi YL,lo8(vram)
    6a88:	c0 e2       	ldi	r28, 0x20	; 32
		ldi YH,hi8(vram)
    6a8a:	d1 e0       	ldi	r29, 0x01	; 1

		lds r18,free_tile_index
    6a8c:	20 91 74 0d 	lds	r18, 0x0D74
		ldi r19,MAX_RAMTILES		;maximum possible ramtiles
    6a90:	3c e3       	ldi	r19, 0x3C	; 60
		sub r19,r18					;sub free tile
    6a92:	32 1b       	sub	r19, r18
		add r19,r16					;add user tiles
    6a94:	30 0f       	add	r19, r16

		cp r18,r16
    6a96:	20 17       	cp	r18, r16
		breq no_ramtiles
    6a98:	51 f0       	breq	.+20     	; 0x6aae <no_ramtiles>
		nop
    6a9a:	00 00       	nop
	...

00006a9e <upd_loop>:
		nop
upd_loop:
		ld XL,Z+	;load vram offset of ramtile
    6a9e:	a1 91       	ld	r26, Z+
		ld XH,Z+
    6aa0:	b1 91       	ld	r27, Z+

		ld r17,X	;get latest VRAM tile that may have been modified my
    6aa2:	1c 91       	ld	r17, X
		st Z+,r17	;the main program and store it in the restore buffer
    6aa4:	11 93       	st	Z+, r17
		st X,r16	;write the ramtile index back to vram
    6aa6:	0c 93       	st	X, r16

		inc r16
    6aa8:	03 95       	inc	r16
		cp r16,r18
    6aaa:	02 17       	cp	r16, r18
		brlo upd_loop ;loop is 14 cycles
    6aac:	c0 f3       	brcs	.-16     	; 0x6a9e <upd_loop>

00006aae <no_ramtiles>:

no_ramtiles:
		;wait for remaining maximum possible ramtiles
1:
		ldi r17,3
    6aae:	13 e0       	ldi	r17, 0x03	; 3
		dec r17
    6ab0:	1a 95       	dec	r17
		brne .-4
    6ab2:	f1 f7       	brne	.-4      	; 0x6ab0 <no_ramtiles+0x2>
		rjmp .
    6ab4:	00 c0       	rjmp	.+0      	; 0x6ab6 <no_ramtiles+0x8>
		dec r19
    6ab6:	3a 95       	dec	r19
		brne 1b
    6ab8:	d1 f7       	brne	.-12     	; 0x6aae <no_ramtiles>


		lds r2,overlay_tile_table
    6aba:	20 90 82 0c 	lds	r2, 0x0C82
		lds r3,overlay_tile_table+1
    6abe:	30 90 83 0c 	lds	r3, 0x0C83
		lds r16,tile_table_lo 
    6ac2:	00 91 7e 0c 	lds	r16, 0x0C7E
		lds r17,tile_table_hi
    6ac6:	10 91 7f 0c 	lds	r17, 0x0C7F
		movw r12,r16
    6aca:	68 01       	movw	r12, r16
		movw r6,r16
    6acc:	38 01       	movw	r6, r16

		ldi r24,SCREEN_TILES_V
    6ace:	8a e1       	ldi	r24, 0x1A	; 26
		ldi YL,lo8(vram)
    6ad0:	c0 e2       	ldi	r28, 0x20	; 32
		ldi YH,hi8(vram)
    6ad2:	d1 e0       	ldi	r29, 0x01	; 1
		movw r8,YL	
    6ad4:	4e 01       	movw	r8, r28
		clr r0
    6ad6:	00 24       	eor	r0, r0

		;load values for overlay if it's activated (overlay_height>0)
		lds r19,overlay_height	
    6ad8:	30 91 81 0c 	lds	r19, 0x0C81
		cpi r19,0
    6adc:	30 30       	cpi	r19, 0x00	; 0
		
		breq .+2
    6ade:	09 f0       	breq	.+2      	; 0x6ae2 <no_ramtiles+0x34>
		ldi YL,lo8(overlay_vram)
    6ae0:	cc e2       	ldi	r28, 0x2C	; 44
		
		breq .+2
    6ae2:	09 f0       	breq	.+2      	; 0x6ae6 <no_ramtiles+0x38>
		ldi YH,hi8(overlay_vram)
    6ae4:	d4 e0       	ldi	r29, 0x04	; 4
		
		breq .+2
    6ae6:	09 f0       	breq	.+2      	; 0x6aea <no_ramtiles+0x3c>
		mov r24,r19
    6ae8:	83 2f       	mov	r24, r19

		breq .+2
    6aea:	09 f0       	breq	.+2      	; 0x6aee <no_ramtiles+0x40>
		movw r12,r2
    6aec:	61 01       	movw	r12, r2


		ldi r16,SCREEN_TILES_V*TILE_HEIGHT; total scanlines to draw (28*8)
    6aee:	00 ed       	ldi	r16, 0xD0	; 208
		mov r10,r16
    6af0:	a0 2e       	mov	r10, r16
		clr r22
    6af2:	66 27       	eor	r22, r22
		ldi r23,TILE_WIDTH ;tile width in pixels
    6af4:	78 e0       	ldi	r23, 0x08	; 8

00006af6 <next_tile_line>:
	;r12:r13= Main tile table or overlay tile table if overlay_height>0
	;r24	= vertical tiles to draw before reloading vram adress (for overlay)
	;Y      = vram or overlay_ram if overlay_height>0
	;
	next_tile_line:	
		rcall hsync_pulse
    6af6:	0b d3       	rcall	.+1558   	; 0x710e <hsync_pulse>

		WAIT r19,250 - AUDIO_OUT_HSYNC_CYCLES + CENTER_ADJUSTMENT + FILL_DELAY
    6af8:	3c e0       	ldi	r19, 0x0C	; 12
    6afa:	3a 95       	dec	r19
    6afc:	f1 f7       	brne	.-4      	; 0x6afa <next_tile_line+0x4>
    6afe:	00 00       	nop
    6b00:	00 00       	nop

		;***draw line***
		call render_tile_line
    6b02:	0e 94 b2 35 	call	0x6b64	; 0x6b64 <render_tile_line>

		WAIT r19,47 + FILL_DELAY - CENTER_ADJUSTMENT	
    6b06:	3f e0       	ldi	r19, 0x0F	; 15
    6b08:	3a 95       	dec	r19
    6b0a:	f1 f7       	brne	.-4      	; 0x6b08 <next_tile_line+0x12>
    6b0c:	00 00       	nop
    6b0e:	00 00       	nop

		dec r10
    6b10:	aa 94       	dec	r10
		breq frame_end
    6b12:	a9 f0       	breq	.+42     	; 0x6b3e <frame_end>
	
		inc r22
    6b14:	63 95       	inc	r22
		lpm ;3 nop
    6b16:	c8 95       	lpm

		cpi r22,TILE_HEIGHT ;last char line? 1
    6b18:	68 30       	cpi	r22, 0x08	; 8
		breq next_tile_row 
    6b1a:	31 f0       	breq	.+12     	; 0x6b28 <next_tile_row>
	
		;wait to align with next_tile_row instructions (+1 cycle for the breq)
		WAIT r19,11
    6b1c:	33 e0       	ldi	r19, 0x03	; 3
    6b1e:	3a 95       	dec	r19
    6b20:	f1 f7       	brne	.-4      	; 0x6b1e <next_tile_line+0x28>
    6b22:	00 00       	nop
    6b24:	00 00       	nop
		
		rjmp next_tile_line	
    6b26:	e7 cf       	rjmp	.-50     	; 0x6af6 <next_tile_line>

00006b28 <next_tile_row>:

	next_tile_row:
		clr r22		;current char line			;1	
    6b28:	66 27       	eor	r22, r22

		clr r0
    6b2a:	00 24       	eor	r0, r0
		ldi r19,VRAM_TILES_H
    6b2c:	3e e1       	ldi	r19, 0x1E	; 30
		add YL,r19
    6b2e:	c3 0f       	add	r28, r19
		adc YH,r0
    6b30:	d0 1d       	adc	r29, r0

		dec r24		;overlay done?
    6b32:	8a 95       	dec	r24
		brne .+2
    6b34:	09 f4       	brne	.+2      	; 0x6b38 <next_tile_row+0x10>
		movw YL,r8	;main vram
    6b36:	e4 01       	movw	r28, r8
		brne .+2
    6b38:	09 f4       	brne	.+2      	; 0x6b3c <next_tile_row+0x14>
		movw r12,r6	;main tile table
    6b3a:	63 01       	movw	r12, r6

	
		rjmp next_tile_line
    6b3c:	dc cf       	rjmp	.-72     	; 0x6af6 <next_tile_line>

00006b3e <frame_end>:

	frame_end:

		WAIT r19,18
    6b3e:	36 e0       	ldi	r19, 0x06	; 6
    6b40:	3a 95       	dec	r19
    6b42:	f1 f7       	brne	.-4      	; 0x6b40 <frame_end+0x2>

		rcall hsync_pulse ;145
    6b44:	e4 d2       	rcall	.+1480   	; 0x710e <hsync_pulse>
	
		clr r1
    6b46:	11 24       	eor	r1, r1
		call RestoreBackground
    6b48:	0e 94 00 44 	call	0x8800	; 0x8800 <RestoreBackground>

		;set vsync flag & flip field
		lds ZL,sync_flags
    6b4c:	e0 91 86 0c 	lds	r30, 0x0C86
		ldi r20,SYNC_FLAG_FIELD
    6b50:	42 e0       	ldi	r20, 0x02	; 2
		ori ZL,SYNC_FLAG_VSYNC
    6b52:	e1 60       	ori	r30, 0x01	; 1
		eor ZL,r20
    6b54:	e4 27       	eor	r30, r20
		sts sync_flags,ZL
    6b56:	e0 93 86 0c 	sts	0x0C86, r30

		;clear any pending timer int
		ldi ZL,(1<<OCF1A)
    6b5a:	e2 e0       	ldi	r30, 0x02	; 2
		sts _SFR_MEM_ADDR(TIFR1),ZL
    6b5c:	e0 93 36 00 	sts	0x0036, r30



		clr r1
    6b60:	11 24       	eor	r1, r1


		ret
    6b62:	08 95       	ret

00006b64 <render_tile_line>:
	;*************************************************
	render_tile_line:

		;load first tile and determine if its a ROM or RAM tile

		movw XL,YL
    6b64:	de 01       	movw	r26, r28

		mul r22,r23
    6b66:	67 9f       	mul	r22, r23

		movw r16,r12 ;current tile table (main or overlay)
    6b68:	86 01       	movw	r16, r12
		subi r16,lo8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    6b6a:	00 58       	subi	r16, 0x80	; 128
		sbci r17,hi8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    6b6c:	17 40       	sbci	r17, 0x07	; 7

		add r16,r0
    6b6e:	00 0d       	add	r16, r0
		adc r17,r1
    6b70:	11 1d       	adc	r17, r1
		movw r2,r16			;rom tiles
    6b72:	18 01       	movw	r2, r16

		ldi r16,lo8(ram_tiles)
    6b74:	0c e9       	ldi	r16, 0x9C	; 156
		ldi r17,hi8(ram_tiles)
    6b76:	14 e0       	ldi	r17, 0x04	; 4
		add r16,r0
    6b78:	00 0d       	add	r16, r0
		adc r17,r1
    6b7a:	11 1d       	adc	r17, r1
		movw r4,r16			;ram tiles
    6b7c:	28 01       	movw	r4, r16

		ldi r19,TILE_HEIGHT*TILE_WIDTH
    6b7e:	30 e4       	ldi	r19, 0x40	; 64
		ldi r17,SCREEN_TILES_H
    6b80:	1e e1       	ldi	r17, 0x1E	; 30

	    ld r18,X+     	;load next tile # from VRAM
    6b82:	2d 91       	ld	r18, X+

		mul r18,r19 	;tile*width*height
    6b84:	23 9f       	mul	r18, r19
		movw r20,r2		;rom tiles
    6b86:	a1 01       	movw	r20, r2
		
		cpi r18,RAM_TILES_COUNT
    6b88:	2e 31       	cpi	r18, 0x1E	; 30
		brcc .+2
    6b8a:	08 f4       	brcc	.+2      	; 0x6b8e <render_tile_line+0x2a>
		movw r20,r4		;ram tiles
    6b8c:	a2 01       	movw	r20, r4

	    add r0,r20    ;add title table address +row offset
    6b8e:	04 0e       	add	r0, r20
	    adc r1,r21
    6b90:	15 1e       	adc	r1, r21

		movw ZL,r0
    6b92:	f0 01       	movw	r30, r0
		
		cpi r18,RAM_TILES_COUNT
    6b94:	2e 31       	cpi	r18, 0x1E	; 30
		brcs ramloop
    6b96:	f0 f0       	brcs	.+60     	; 0x6bd4 <ramloop>

00006b98 <romloop>:
	

	romloop:
	    lpm r16,Z+
    6b98:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    6b9a:	08 b9       	out	0x08, r16	; 8
	    ld r18,X+     ;load next tile # from VRAM
    6b9c:	2d 91       	ld	r18, X+


	    lpm r16,Z+
    6b9e:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 2
    6ba0:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    6ba2:	23 9f       	mul	r18, r19


	    lpm r16,Z+
    6ba4:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 3
    6ba6:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT		;is tile in RAM or ROM? (RAM tiles have indexes<RAM_TILES_COUNT)
    6ba8:	2e 31       	cpi	r18, 0x1E	; 30
		nop
    6baa:	00 00       	nop

	    lpm r16,Z+
    6bac:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    6bae:	08 b9       	out	0x08, r16	; 8
		brsh .+2		;skip in next tile is in ROM	
    6bb0:	08 f4       	brcc	.+2      	; 0x6bb4 <romloop+0x1c>
		movw r20,r4 	;load RAM title table address +row offset	
    6bb2:	a2 01       	movw	r20, r4
   
	    lpm r16,Z+
    6bb4:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 5
    6bb6:	08 b9       	out	0x08, r16	; 8
		add r0,r20		;add title table address +row offset lsb
    6bb8:	04 0e       	add	r0, r20
	    adc r1,r21		;add title table address +row offset msb
    6bba:	15 1e       	adc	r1, r21

	    lpm r16,Z+
    6bbc:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 6
    6bbe:	08 b9       	out	0x08, r16	; 8
		
		cpi r18,RAM_TILES_COUNT	
    6bc0:	2e 31       	cpi	r18, 0x1E	; 30
		dec r17			;decrement tiles to draw on line
    6bc2:	1a 95       	dec	r17
   
	    lpm r16,Z+
    6bc4:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 7   
    6bc6:	08 b9       	out	0x08, r16	; 8
	    lpm r16,Z+
    6bc8:	05 91       	lpm	r16, Z+

		breq end	
    6bca:	31 f1       	breq	.+76     	; 0x6c18 <end>
	    movw ZL,r0   	;copy next tile adress
    6bcc:	f0 01       	movw	r30, r0

	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    6bce:	08 b9       	out	0x08, r16	; 8
	    brcc romloop
    6bd0:	18 f7       	brcc	.-58     	; 0x6b98 <romloop>
	
		rjmp .
    6bd2:	00 c0       	rjmp	.+0      	; 0x6bd4 <ramloop>

00006bd4 <ramloop>:

	ramloop:

	    ld r16,Z+
    6bd4:	01 91       	ld	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    6bd6:	08 b9       	out	0x08, r16	; 8
	    ld r18,X+     ;load next tile # from VRAM
    6bd8:	2d 91       	ld	r18, X+

	    ld r16,Z+ 
    6bda:	01 91       	ld	r16, Z+
		nop   
    6bdc:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16 		;pixel 2
    6bde:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    6be0:	23 9f       	mul	r18, r19


	    ld r16,Z+
    6be2:	01 91       	ld	r16, Z+
		nop
    6be4:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16         ;pixel 3
    6be6:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT
    6be8:	2e 31       	cpi	r18, 0x1E	; 30
   		rjmp .
    6bea:	00 c0       	rjmp	.+0      	; 0x6bec <ramloop+0x18>

	    ld r16,Z+
    6bec:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    6bee:	08 b9       	out	0x08, r16	; 8
		brcs .+2 
    6bf0:	08 f0       	brcs	.+2      	; 0x6bf4 <ramloop+0x20>
		movw r20,r2 	;ROM title table address +row offset	
    6bf2:	a1 01       	movw	r20, r2
   
   
	    ld r16,Z+
    6bf4:	01 91       	ld	r16, Z+
	    add r0,r20    ;add title table address +row offset
    6bf6:	04 0e       	add	r0, r20
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 5
    6bf8:	08 b9       	out	0x08, r16	; 8
	    adc r1,r21
    6bfa:	15 1e       	adc	r1, r21
		rjmp .
    6bfc:	00 c0       	rjmp	.+0      	; 0x6bfe <ramloop+0x2a>
    
		ld r16,Z+		
    6bfe:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 6
    6c00:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT
    6c02:	2e 31       	cpi	r18, 0x1E	; 30
		rjmp .  
    6c04:	00 c0       	rjmp	.+0      	; 0x6c06 <ramloop+0x32>

	    ld r16,Z+	
    6c06:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16      ;pixel 7   
    6c08:	08 b9       	out	0x08, r16	; 8
	    ld r16,Z+
    6c0a:	01 91       	ld	r16, Z+

	    dec r17
    6c0c:	1a 95       	dec	r17
	    breq end
    6c0e:	21 f0       	breq	.+8      	; 0x6c18 <end>
	
		movw ZL,r0
    6c10:	f0 01       	movw	r30, r0
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    6c12:	08 b9       	out	0x08, r16	; 8
	
	    brcc romloop
    6c14:	08 f6       	brcc	.-126    	; 0x6b98 <romloop>
		rjmp ramloop
    6c16:	de cf       	rjmp	.-68     	; 0x6bd4 <ramloop>

00006c18 <end>:
	
	end:
		out _SFR_IO_ADDR(DATA_PORT),r16  	;pixel 8
    6c18:	08 b9       	out	0x08, r16	; 8
		clr r16	
    6c1a:	00 27       	eor	r16, r16
		lpm	
    6c1c:	c8 95       	lpm
		nop
    6c1e:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16        
    6c20:	08 b9       	out	0x08, r16	; 8

		ret
    6c22:	08 95       	ret

00006c24 <CopyFlashTile>:
; C-callable
; r24=Source ROM tile index
; r22=Dest RAM tile index
;************************************
CopyFlashTile:
	ldi r18,TILE_HEIGHT*TILE_WIDTH
    6c24:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	lds ZL,tile_table_lo
    6c26:	e0 91 7e 0c 	lds	r30, 0x0C7E
	lds ZH,tile_table_hi
    6c2a:	f0 91 7f 0c 	lds	r31, 0x0C7F
	mul r24,r18
    6c2e:	82 9f       	mul	r24, r18
	add ZL,r0
    6c30:	e0 0d       	add	r30, r0
	adc ZH,r1
    6c32:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    6c34:	ac e9       	ldi	r26, 0x9C	; 156
	ldi XH,hi8(ram_tiles)
    6c36:	b4 e0       	ldi	r27, 0x04	; 4
	mul r22,r18
    6c38:	62 9f       	mul	r22, r18
	add XL,r0
    6c3a:	a0 0d       	add	r26, r0
	adc XH,r1
    6c3c:	b1 1d       	adc	r27, r1

	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	lpm r1,Z+
	st X+,r1
.endr
    6c3e:	15 90       	lpm	r1, Z+
    6c40:	1d 92       	st	X+, r1
    6c42:	15 90       	lpm	r1, Z+
    6c44:	1d 92       	st	X+, r1
    6c46:	15 90       	lpm	r1, Z+
    6c48:	1d 92       	st	X+, r1
    6c4a:	15 90       	lpm	r1, Z+
    6c4c:	1d 92       	st	X+, r1
    6c4e:	15 90       	lpm	r1, Z+
    6c50:	1d 92       	st	X+, r1
    6c52:	15 90       	lpm	r1, Z+
    6c54:	1d 92       	st	X+, r1
    6c56:	15 90       	lpm	r1, Z+
    6c58:	1d 92       	st	X+, r1
    6c5a:	15 90       	lpm	r1, Z+
    6c5c:	1d 92       	st	X+, r1
    6c5e:	15 90       	lpm	r1, Z+
    6c60:	1d 92       	st	X+, r1
    6c62:	15 90       	lpm	r1, Z+
    6c64:	1d 92       	st	X+, r1
    6c66:	15 90       	lpm	r1, Z+
    6c68:	1d 92       	st	X+, r1
    6c6a:	15 90       	lpm	r1, Z+
    6c6c:	1d 92       	st	X+, r1
    6c6e:	15 90       	lpm	r1, Z+
    6c70:	1d 92       	st	X+, r1
    6c72:	15 90       	lpm	r1, Z+
    6c74:	1d 92       	st	X+, r1
    6c76:	15 90       	lpm	r1, Z+
    6c78:	1d 92       	st	X+, r1
    6c7a:	15 90       	lpm	r1, Z+
    6c7c:	1d 92       	st	X+, r1
    6c7e:	15 90       	lpm	r1, Z+
    6c80:	1d 92       	st	X+, r1
    6c82:	15 90       	lpm	r1, Z+
    6c84:	1d 92       	st	X+, r1
    6c86:	15 90       	lpm	r1, Z+
    6c88:	1d 92       	st	X+, r1
    6c8a:	15 90       	lpm	r1, Z+
    6c8c:	1d 92       	st	X+, r1
    6c8e:	15 90       	lpm	r1, Z+
    6c90:	1d 92       	st	X+, r1
    6c92:	15 90       	lpm	r1, Z+
    6c94:	1d 92       	st	X+, r1
    6c96:	15 90       	lpm	r1, Z+
    6c98:	1d 92       	st	X+, r1
    6c9a:	15 90       	lpm	r1, Z+
    6c9c:	1d 92       	st	X+, r1
    6c9e:	15 90       	lpm	r1, Z+
    6ca0:	1d 92       	st	X+, r1
    6ca2:	15 90       	lpm	r1, Z+
    6ca4:	1d 92       	st	X+, r1
    6ca6:	15 90       	lpm	r1, Z+
    6ca8:	1d 92       	st	X+, r1
    6caa:	15 90       	lpm	r1, Z+
    6cac:	1d 92       	st	X+, r1
    6cae:	15 90       	lpm	r1, Z+
    6cb0:	1d 92       	st	X+, r1
    6cb2:	15 90       	lpm	r1, Z+
    6cb4:	1d 92       	st	X+, r1
    6cb6:	15 90       	lpm	r1, Z+
    6cb8:	1d 92       	st	X+, r1
    6cba:	15 90       	lpm	r1, Z+
    6cbc:	1d 92       	st	X+, r1
    6cbe:	15 90       	lpm	r1, Z+
    6cc0:	1d 92       	st	X+, r1
    6cc2:	15 90       	lpm	r1, Z+
    6cc4:	1d 92       	st	X+, r1
    6cc6:	15 90       	lpm	r1, Z+
    6cc8:	1d 92       	st	X+, r1
    6cca:	15 90       	lpm	r1, Z+
    6ccc:	1d 92       	st	X+, r1
    6cce:	15 90       	lpm	r1, Z+
    6cd0:	1d 92       	st	X+, r1
    6cd2:	15 90       	lpm	r1, Z+
    6cd4:	1d 92       	st	X+, r1
    6cd6:	15 90       	lpm	r1, Z+
    6cd8:	1d 92       	st	X+, r1
    6cda:	15 90       	lpm	r1, Z+
    6cdc:	1d 92       	st	X+, r1
    6cde:	15 90       	lpm	r1, Z+
    6ce0:	1d 92       	st	X+, r1
    6ce2:	15 90       	lpm	r1, Z+
    6ce4:	1d 92       	st	X+, r1
    6ce6:	15 90       	lpm	r1, Z+
    6ce8:	1d 92       	st	X+, r1
    6cea:	15 90       	lpm	r1, Z+
    6cec:	1d 92       	st	X+, r1
    6cee:	15 90       	lpm	r1, Z+
    6cf0:	1d 92       	st	X+, r1
    6cf2:	15 90       	lpm	r1, Z+
    6cf4:	1d 92       	st	X+, r1
    6cf6:	15 90       	lpm	r1, Z+
    6cf8:	1d 92       	st	X+, r1
    6cfa:	15 90       	lpm	r1, Z+
    6cfc:	1d 92       	st	X+, r1
    6cfe:	15 90       	lpm	r1, Z+
    6d00:	1d 92       	st	X+, r1
    6d02:	15 90       	lpm	r1, Z+
    6d04:	1d 92       	st	X+, r1
    6d06:	15 90       	lpm	r1, Z+
    6d08:	1d 92       	st	X+, r1
    6d0a:	15 90       	lpm	r1, Z+
    6d0c:	1d 92       	st	X+, r1
    6d0e:	15 90       	lpm	r1, Z+
    6d10:	1d 92       	st	X+, r1
    6d12:	15 90       	lpm	r1, Z+
    6d14:	1d 92       	st	X+, r1
    6d16:	15 90       	lpm	r1, Z+
    6d18:	1d 92       	st	X+, r1
    6d1a:	15 90       	lpm	r1, Z+
    6d1c:	1d 92       	st	X+, r1
    6d1e:	15 90       	lpm	r1, Z+
    6d20:	1d 92       	st	X+, r1
    6d22:	15 90       	lpm	r1, Z+
    6d24:	1d 92       	st	X+, r1
    6d26:	15 90       	lpm	r1, Z+
    6d28:	1d 92       	st	X+, r1
    6d2a:	15 90       	lpm	r1, Z+
    6d2c:	1d 92       	st	X+, r1
    6d2e:	15 90       	lpm	r1, Z+
    6d30:	1d 92       	st	X+, r1
    6d32:	15 90       	lpm	r1, Z+
    6d34:	1d 92       	st	X+, r1
    6d36:	15 90       	lpm	r1, Z+
    6d38:	1d 92       	st	X+, r1
    6d3a:	15 90       	lpm	r1, Z+
    6d3c:	1d 92       	st	X+, r1
	clr r1
    6d3e:	11 24       	eor	r1, r1
	ret
    6d40:	08 95       	ret

00006d42 <CopyRamTile>:
; r24=Source RAM tile index
; r22=Dest RAM tile index
;************************************
CopyRamTile:

	ldi r18,TILE_HEIGHT*TILE_WIDTH
    6d42:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	ldi ZL,lo8(ram_tiles)
    6d44:	ec e9       	ldi	r30, 0x9C	; 156
	ldi ZH,hi8(ram_tiles)
    6d46:	f4 e0       	ldi	r31, 0x04	; 4
	mul r24,r18
    6d48:	82 9f       	mul	r24, r18
	add ZL,r0
    6d4a:	e0 0d       	add	r30, r0
	adc ZH,r1
    6d4c:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    6d4e:	ac e9       	ldi	r26, 0x9C	; 156
	ldi XH,hi8(ram_tiles)
    6d50:	b4 e0       	ldi	r27, 0x04	; 4
	mul r22,r18
    6d52:	62 9f       	mul	r22, r18
	add XL,r0
    6d54:	a0 0d       	add	r26, r0
	adc XH,r1
    6d56:	b1 1d       	adc	r27, r1

	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	ld r1,Z+
	st X+,r1
.endr
    6d58:	11 90       	ld	r1, Z+
    6d5a:	1d 92       	st	X+, r1
    6d5c:	11 90       	ld	r1, Z+
    6d5e:	1d 92       	st	X+, r1
    6d60:	11 90       	ld	r1, Z+
    6d62:	1d 92       	st	X+, r1
    6d64:	11 90       	ld	r1, Z+
    6d66:	1d 92       	st	X+, r1
    6d68:	11 90       	ld	r1, Z+
    6d6a:	1d 92       	st	X+, r1
    6d6c:	11 90       	ld	r1, Z+
    6d6e:	1d 92       	st	X+, r1
    6d70:	11 90       	ld	r1, Z+
    6d72:	1d 92       	st	X+, r1
    6d74:	11 90       	ld	r1, Z+
    6d76:	1d 92       	st	X+, r1
    6d78:	11 90       	ld	r1, Z+
    6d7a:	1d 92       	st	X+, r1
    6d7c:	11 90       	ld	r1, Z+
    6d7e:	1d 92       	st	X+, r1
    6d80:	11 90       	ld	r1, Z+
    6d82:	1d 92       	st	X+, r1
    6d84:	11 90       	ld	r1, Z+
    6d86:	1d 92       	st	X+, r1
    6d88:	11 90       	ld	r1, Z+
    6d8a:	1d 92       	st	X+, r1
    6d8c:	11 90       	ld	r1, Z+
    6d8e:	1d 92       	st	X+, r1
    6d90:	11 90       	ld	r1, Z+
    6d92:	1d 92       	st	X+, r1
    6d94:	11 90       	ld	r1, Z+
    6d96:	1d 92       	st	X+, r1
    6d98:	11 90       	ld	r1, Z+
    6d9a:	1d 92       	st	X+, r1
    6d9c:	11 90       	ld	r1, Z+
    6d9e:	1d 92       	st	X+, r1
    6da0:	11 90       	ld	r1, Z+
    6da2:	1d 92       	st	X+, r1
    6da4:	11 90       	ld	r1, Z+
    6da6:	1d 92       	st	X+, r1
    6da8:	11 90       	ld	r1, Z+
    6daa:	1d 92       	st	X+, r1
    6dac:	11 90       	ld	r1, Z+
    6dae:	1d 92       	st	X+, r1
    6db0:	11 90       	ld	r1, Z+
    6db2:	1d 92       	st	X+, r1
    6db4:	11 90       	ld	r1, Z+
    6db6:	1d 92       	st	X+, r1
    6db8:	11 90       	ld	r1, Z+
    6dba:	1d 92       	st	X+, r1
    6dbc:	11 90       	ld	r1, Z+
    6dbe:	1d 92       	st	X+, r1
    6dc0:	11 90       	ld	r1, Z+
    6dc2:	1d 92       	st	X+, r1
    6dc4:	11 90       	ld	r1, Z+
    6dc6:	1d 92       	st	X+, r1
    6dc8:	11 90       	ld	r1, Z+
    6dca:	1d 92       	st	X+, r1
    6dcc:	11 90       	ld	r1, Z+
    6dce:	1d 92       	st	X+, r1
    6dd0:	11 90       	ld	r1, Z+
    6dd2:	1d 92       	st	X+, r1
    6dd4:	11 90       	ld	r1, Z+
    6dd6:	1d 92       	st	X+, r1
    6dd8:	11 90       	ld	r1, Z+
    6dda:	1d 92       	st	X+, r1
    6ddc:	11 90       	ld	r1, Z+
    6dde:	1d 92       	st	X+, r1
    6de0:	11 90       	ld	r1, Z+
    6de2:	1d 92       	st	X+, r1
    6de4:	11 90       	ld	r1, Z+
    6de6:	1d 92       	st	X+, r1
    6de8:	11 90       	ld	r1, Z+
    6dea:	1d 92       	st	X+, r1
    6dec:	11 90       	ld	r1, Z+
    6dee:	1d 92       	st	X+, r1
    6df0:	11 90       	ld	r1, Z+
    6df2:	1d 92       	st	X+, r1
    6df4:	11 90       	ld	r1, Z+
    6df6:	1d 92       	st	X+, r1
    6df8:	11 90       	ld	r1, Z+
    6dfa:	1d 92       	st	X+, r1
    6dfc:	11 90       	ld	r1, Z+
    6dfe:	1d 92       	st	X+, r1
    6e00:	11 90       	ld	r1, Z+
    6e02:	1d 92       	st	X+, r1
    6e04:	11 90       	ld	r1, Z+
    6e06:	1d 92       	st	X+, r1
    6e08:	11 90       	ld	r1, Z+
    6e0a:	1d 92       	st	X+, r1
    6e0c:	11 90       	ld	r1, Z+
    6e0e:	1d 92       	st	X+, r1
    6e10:	11 90       	ld	r1, Z+
    6e12:	1d 92       	st	X+, r1
    6e14:	11 90       	ld	r1, Z+
    6e16:	1d 92       	st	X+, r1
    6e18:	11 90       	ld	r1, Z+
    6e1a:	1d 92       	st	X+, r1
    6e1c:	11 90       	ld	r1, Z+
    6e1e:	1d 92       	st	X+, r1
    6e20:	11 90       	ld	r1, Z+
    6e22:	1d 92       	st	X+, r1
    6e24:	11 90       	ld	r1, Z+
    6e26:	1d 92       	st	X+, r1
    6e28:	11 90       	ld	r1, Z+
    6e2a:	1d 92       	st	X+, r1
    6e2c:	11 90       	ld	r1, Z+
    6e2e:	1d 92       	st	X+, r1
    6e30:	11 90       	ld	r1, Z+
    6e32:	1d 92       	st	X+, r1
    6e34:	11 90       	ld	r1, Z+
    6e36:	1d 92       	st	X+, r1
    6e38:	11 90       	ld	r1, Z+
    6e3a:	1d 92       	st	X+, r1
    6e3c:	11 90       	ld	r1, Z+
    6e3e:	1d 92       	st	X+, r1
    6e40:	11 90       	ld	r1, Z+
    6e42:	1d 92       	st	X+, r1
    6e44:	11 90       	ld	r1, Z+
    6e46:	1d 92       	st	X+, r1
    6e48:	11 90       	ld	r1, Z+
    6e4a:	1d 92       	st	X+, r1
    6e4c:	11 90       	ld	r1, Z+
    6e4e:	1d 92       	st	X+, r1
    6e50:	11 90       	ld	r1, Z+
    6e52:	1d 92       	st	X+, r1
    6e54:	11 90       	ld	r1, Z+
    6e56:	1d 92       	st	X+, r1
	clr r1
    6e58:	11 24       	eor	r1, r1
	ret
    6e5a:	08 95       	ret

00006e5c <BlitSprite>:
; r22=RAM tile index (bt)
; r21:r20=Y:X
; r19:r18=DY:DX
;************************************
BlitSprite:
	push r16
    6e5c:	0f 93       	push	r16
	push r17
    6e5e:	1f 93       	push	r17
	push YL
    6e60:	cf 93       	push	r28
	push YH
    6e62:	df 93       	push	r29

	;src=sprites_tiletable_lo+(sprites[i].tileIndex*TILE_HEIGHT*TILE_WIDTH)
	ldi r25,SPRITE_STRUCT_SIZE
    6e64:	94 e0       	ldi	r25, 0x04	; 4
	mul r24,r25
    6e66:	89 9f       	mul	r24, r25

	ldi ZL,lo8(sprites)	
    6e68:	ec e2       	ldi	r30, 0x2C	; 44
	ldi ZH,hi8(sprites)	
    6e6a:	f4 e0       	ldi	r31, 0x04	; 4
	add ZL,r0
    6e6c:	e0 0d       	add	r30, r0
	adc ZH,r1
    6e6e:	f1 1d       	adc	r31, r1

	ldd r16,Z+sprFlags
    6e70:	03 81       	ldd	r16, Z+3	; 0x03

	;8x16 multiply
	ldd r24,Z+sprTileIndex
    6e72:	82 81       	ldd	r24, Z+2	; 0x02
	ldi r30,TILE_WIDTH*TILE_HEIGHT
    6e74:	e0 e4       	ldi	r30, 0x40	; 64
	mul r24,r30
    6e76:	8e 9f       	mul	r24, r30
	movw r26,r0
    6e78:	d0 01       	movw	r26, r0
	
	;get tile bank addr
	ldi r25,4*2
    6e7a:	98 e0       	ldi	r25, 0x08	; 8
	mul r16,r25
    6e7c:	09 9f       	mul	r16, r25
	ldi YL,lo8(sprites_tile_banks)	
    6e7e:	c6 e7       	ldi	r28, 0x76	; 118
	ldi YH,hi8(sprites_tile_banks)	
    6e80:	dc e0       	ldi	r29, 0x0C	; 12
	clr r0
    6e82:	00 24       	eor	r0, r0
	add YL,r1
    6e84:	c1 0d       	add	r28, r1
	adc YH,r0		
    6e86:	d0 1d       	adc	r29, r0
	ldd ZL,Y+0
    6e88:	e8 81       	ld	r30, Y
	ldd ZH,Y+1
    6e8a:	f9 81       	ldd	r31, Y+1	; 0x01
	add ZL,r26	;tile data src
    6e8c:	ea 0f       	add	r30, r26
	adc ZH,r27
    6e8e:	fb 1f       	adc	r31, r27
	
	;dest=ram_tiles+(bt*TILE_HEIGHT*TILE_WIDTH)
	ldi XL,lo8(ram_tiles)	
    6e90:	ac e9       	ldi	r26, 0x9C	; 156
	ldi XH,hi8(ram_tiles)
    6e92:	b4 e0       	ldi	r27, 0x04	; 4
	ldi r25,TILE_WIDTH*TILE_HEIGHT
    6e94:	90 e4       	ldi	r25, 0x40	; 64
	mul r22,r25
    6e96:	69 9f       	mul	r22, r25
	add XL,r0
    6e98:	a0 0d       	add	r26, r0
	adc XH,r1
    6e9a:	b1 1d       	adc	r27, r1
			srcXdiff=destXdiff;
			src+=destXdiff;
		}
	}
	*/
	clr r1
    6e9c:	11 24       	eor	r1, r1
	clr YH		;hi8(srcXdiff)
    6e9e:	dd 27       	eor	r29, r29

	cpi r20,0	
    6ea0:	40 30       	cpi	r20, 0x00	; 0
	brne x_2nd_tile
    6ea2:	51 f4       	brne	.+20     	; 0x6eb8 <x_2nd_tile>
	
	add XL,r18	;dest+=dx
    6ea4:	a2 0f       	add	r26, r18
	adc XH,r1
    6ea6:	b1 1d       	adc	r27, r1
	mov r24,r18	;destXdiff=dx
    6ea8:	82 2f       	mov	r24, r18
	mov YL,r18	;srcXdiff=dx
    6eaa:	c2 2f       	mov	r28, r18

	sbrs r16,SPRITE_FLIP_X_BIT
    6eac:	00 ff       	sbrs	r16, 0
	rjmp x_check_end
    6eae:	11 c0       	rjmp	.+34     	; 0x6ed2 <x_check_end>

	adiw ZL,(TILE_WIDTH-1)	;src+=7
    6eb0:	37 96       	adiw	r30, 0x07	; 7
	ldi YL,TILE_WIDTH*2		;srcXdiff=((TILE_WIDTH*2)-dx);
    6eb2:	c0 e1       	ldi	r28, 0x10	; 16
	sub YL,r18	
    6eb4:	c2 1b       	sub	r28, r18
	rjmp x_check_end
    6eb6:	0d c0       	rjmp	.+26     	; 0x6ed2 <x_check_end>

00006eb8 <x_2nd_tile>:

x_2nd_tile:
	ldi r24,TILE_WIDTH
    6eb8:	88 e0       	ldi	r24, 0x08	; 8
	sub r24,r18		;8-DX = xdiff for dest
    6eba:	82 1b       	sub	r24, r18

	sbrc r16,SPRITE_FLIP_X_BIT
    6ebc:	00 fd       	sbrc	r16, 0
	rjmp x2_flip_x
    6ebe:	04 c0       	rjmp	.+8      	; 0x6ec8 <x2_flip_x>

	mov YL,r24		;srcXdiff=destXdiff;
    6ec0:	c8 2f       	mov	r28, r24
	add ZL,r24		;src+=destXdiff;
    6ec2:	e8 0f       	add	r30, r24
	adc ZH,r1	
    6ec4:	f1 1d       	adc	r31, r1
	rjmp x_check_end
    6ec6:	05 c0       	rjmp	.+10     	; 0x6ed2 <x_check_end>

00006ec8 <x2_flip_x>:

x2_flip_x:
	ldi YL,TILE_WIDTH
    6ec8:	c8 e0       	ldi	r28, 0x08	; 8
	add YL,r18		;srcXdiff=TILE_WIDTH+dx;	
    6eca:	c2 0f       	add	r28, r18
	add ZL,r18		;src+=dx;
    6ecc:	e2 0f       	add	r30, r18
	adc ZH,r1
    6ece:	f1 1d       	adc	r31, r1
	sbiw ZL,1		;src--;
    6ed0:	31 97       	sbiw	r30, 0x01	; 1

00006ed2 <x_check_end>:
		}else{
			src+=(ydiff*TILE_WIDTH);
		}
	}
	*/
	cpi r21,0
    6ed2:	50 30       	cpi	r21, 0x00	; 0
	brne y_2nd_tile
    6ed4:	51 f4       	brne	.+20     	; 0x6eea <y_2nd_tile>

	ldi r25,TILE_WIDTH	;dest+=(dy*TILE_WIDTH)
    6ed6:	98 e0       	ldi	r25, 0x08	; 8
	mul r25,r19			
    6ed8:	93 9f       	mul	r25, r19
	add XL,r0
    6eda:	a0 0d       	add	r26, r0
	adc XH,r1
    6edc:	b1 1d       	adc	r27, r1

	mov r25,r19			;ydiff=dy
    6ede:	93 2f       	mov	r25, r19

	//sbrc r16,SPRITE_FLIP_Y_BIT
	//adiw ZL,(TILE_WIDTH*(TILE_HEIGHT-1))

	sbrc r16,SPRITE_FLIP_Y_BIT
    6ee0:	01 fd       	sbrc	r16, 1
	subi ZL,lo8(-(TILE_WIDTH*(TILE_HEIGHT-1)));src+=(TILE_WIDTH*(TILE_HEIGHT-1));
    6ee2:	e8 5c       	subi	r30, 0xC8	; 200
	sbrc r16,SPRITE_FLIP_Y_BIT
    6ee4:	01 fd       	sbrc	r16, 1
	sbci ZH,hi8(-(TILE_WIDTH*(TILE_HEIGHT-1)))
    6ee6:	ff 4f       	sbci	r31, 0xFF	; 255


	rjmp y_check_end
    6ee8:	0a c0       	rjmp	.+20     	; 0x6efe <y_check_end>

00006eea <y_2nd_tile>:

y_2nd_tile:
	ldi r25,TILE_HEIGHT	;ydiff=(TILE_HEIGHT-dy)
    6eea:	98 e0       	ldi	r25, 0x08	; 8
	sub r25,r19	
    6eec:	93 1b       	sub	r25, r19
	
	mov r22,r19			;temp=dy-1
    6eee:	63 2f       	mov	r22, r19
	dec r22
    6ef0:	6a 95       	dec	r22
	sbrs r16,SPRITE_FLIP_Y_BIT
    6ef2:	01 ff       	sbrs	r16, 1
	mov r22,r25			;temp=ydiff
    6ef4:	69 2f       	mov	r22, r25

	ldi r21,TILE_WIDTH	;src+=(temp*TILE_WIDTH);
    6ef6:	58 e0       	ldi	r21, 0x08	; 8
	mul r21,r22
    6ef8:	56 9f       	mul	r21, r22
	add ZL,r0
    6efa:	e0 0d       	add	r30, r0
	adc ZH,r1	
    6efc:	f1 1d       	adc	r31, r1

00006efe <y_check_end>:
y_check_end:	
	
	//if(flags&SPRITE_FLIP_X){
	//	step=-1;
	//}
	ser r22		;step=-1
    6efe:	6f ef       	ldi	r22, 0xFF	; 255
	ser r23
    6f00:	7f ef       	ldi	r23, 0xFF	; 255
	sbrs r16,SPRITE_FLIP_X_BIT
    6f02:	00 ff       	sbrs	r16, 0
	ldi r22,1	;step=1
    6f04:	61 e0       	ldi	r22, 0x01	; 1
	sbrs r16,SPRITE_FLIP_X_BIT
    6f06:	00 ff       	sbrs	r16, 0
	clr r23
    6f08:	77 27       	eor	r23, r23

	//if(flags&SPRITE_FLIP_Y){
	//	srcXdiff-=(TILE_WIDTH*2);
	//}
	sbrc r16,SPRITE_FLIP_Y_BIT
    6f0a:	01 fd       	sbrc	r16, 1
	sbiw YL,(TILE_WIDTH*2)
    6f0c:	60 97       	sbiw	r28, 0x10	; 16
	;r24	= destXdiff
	;r25	= ydiff
	;X		= dest
	;Y		= srcXdiff
	;Z		= src
	clr r1
    6f0e:	11 24       	eor	r1, r1
	ldi r19,TRANSLUCENT_COLOR
    6f10:	35 e9       	ldi	r19, 0x95	; 149

	ldi r21,TILE_HEIGHT
    6f12:	58 e0       	ldi	r21, 0x08	; 8
	sub r21,r25 	;yspan=(TILE_HEIGHT-ydiff)
    6f14:	59 1b       	sub	r21, r25

00006f16 <y_loop>:

y_loop:
	ldi r20,TILE_WIDTH
    6f16:	48 e0       	ldi	r20, 0x08	; 8
	sub r20,r24 	;xspan=(TILE_WIDTH-destXdiff)
    6f18:	48 1b       	sub	r20, r24

00006f1a <x_loop>:

x_loop:
	lpm r18,Z		;px=pgm_read_byte(src);
    6f1a:	24 91       	lpm	r18, Z+
	cpse r18,r19	;if(px!=TRANSLUCENT_COLOR)
    6f1c:	23 13       	cpse	r18, r19
	st X,r18		;*dest=px;
    6f1e:	2c 93       	st	X, r18
	adiw XL,1
    6f20:	11 96       	adiw	r26, 0x01	; 1
	add ZL,r22		;src+=step;
    6f22:	e6 0f       	add	r30, r22
	adc ZH,r23
    6f24:	f7 1f       	adc	r31, r23
	dec r20
    6f26:	4a 95       	dec	r20
	brne x_loop
    6f28:	c1 f7       	brne	.-16     	; 0x6f1a <x_loop>

	add ZL,YL		;src+=srcXdiff
    6f2a:	ec 0f       	add	r30, r28
	adc ZH,YH
    6f2c:	fd 1f       	adc	r31, r29
	add XL,r24		;dest+=destXdiff
    6f2e:	a8 0f       	add	r26, r24
	adc XH,r1
    6f30:	b1 1d       	adc	r27, r1
	dec r21
    6f32:	5a 95       	dec	r21
	brne y_loop
    6f34:	81 f7       	brne	.-32     	; 0x6f16 <y_loop>


	pop YH
    6f36:	df 91       	pop	r29
	pop YL
    6f38:	cf 91       	pop	r28
	pop r17
    6f3a:	1f 91       	pop	r17
	pop r16
    6f3c:	0f 91       	pop	r16
	ret
    6f3e:	08 95       	ret

00006f40 <__vector_13>:

;***************************************************************************
; Main Video sync interrupt
;***************************************************************************
TIMER1_COMPA_vect:
	push r0
    6f40:	0f 92       	push	r0
	push r1
    6f42:	1f 92       	push	r1
	push ZL;2
    6f44:	ef 93       	push	r30
	push ZH;2
    6f46:	ff 93       	push	r31
	
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    6f48:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    6f4a:	ef 93       	push	r30

	;Read timer offset since rollover to remove cycles 
	;and conpensate for interrupt latency.
	;This is nessesary to eliminate frame jitter.
	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    6f4c:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,0x12 ;MIN_INT_LATENCY
    6f50:	e2 51       	subi	r30, 0x12	; 18

	ldi ZH,1
    6f52:	f1 e0       	ldi	r31, 0x01	; 1

00006f54 <latency_loop>:
latency_loop:
	cp ZL,ZH
    6f54:	ef 17       	cp	r30, r31
	brlo .		;advance PC to next instruction	
    6f56:	00 f0       	brcs	.+0      	; 0x6f58 <latency_loop+0x4>
	inc ZH
    6f58:	f3 95       	inc	r31
	cpi ZH,10
    6f5a:	fa 30       	cpi	r31, 0x0A	; 10
	brlo latency_loop
    6f5c:	d8 f3       	brcs	.-10     	; 0x6f54 <latency_loop>
	jmp .
    6f5e:	0c 94 b1 37 	jmp	0x6f62	; 0x6f62 <latency_loop+0xe>
	
	;decrement sync pulse counter
	lds ZL,sync_pulse
    6f62:	e0 91 85 0c 	lds	r30, 0x0C85
	dec ZL
    6f66:	ea 95       	dec	r30
	sts sync_pulse,ZL
    6f68:	e0 93 85 0c 	sts	0x0C85, r30

	;process sync phases
	lds ZH,sync_phase
    6f6c:	f0 91 84 0c 	lds	r31, 0x0C84
	sbrc ZH,0
    6f70:	f0 fd       	sbrc	r31, 0
	rjmp sync_hsync
    6f72:	57 c0       	rjmp	.+174    	; 0x7022 <sync_hsync>
; Note: TCNT1 should be equal to 
; 0x68 on the cbi
; 0xAC on the sbi
; pulse duration: 68 clocks
;***************************************************		
	cpi ZL,SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    6f74:	ec 30       	cpi	r30, 0x0C	; 12
	brlo sync_eq
    6f76:	98 f0       	brcs	.+38     	; 0x6f9e <sync_eq>

	;Set HDRIVE to double rate during VSYNC
	ldi ZH,hi8(HDRIVE_CL_TWICE)
    6f78:	f3 e0       	ldi	r31, 0x03	; 3
	sts _SFR_MEM_ADDR(OCR1AH),ZH	
    6f7a:	f0 93 89 00 	sts	0x0089, r31
	ldi ZH,lo8(HDRIVE_CL_TWICE)
    6f7e:	fd e8       	ldi	r31, 0x8D	; 141
	sts _SFR_MEM_ADDR(OCR1AL),ZH
    6f80:	f0 93 88 00 	sts	0x0088, r31

	bst ZL,0
    6f84:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0x68
    6f86:	28 98       	cbi	0x05, 0	; 5
	brtc sync_pre_eq_no_sound_update
    6f88:	26 f4       	brtc	.+8      	; 0x6f92 <sync_pre_eq_no_sound_update>
	ldi ZL,1	;indicate update_sound to generate the SBI for pre-eq
    6f8a:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    6f8c:	0e 94 98 38 	call	0x7130	; 0x7130 <update_sound>
	rjmp sync_end
    6f90:	b7 c0       	rjmp	.+366    	; 0x7100 <sync_end>

00006f92 <sync_pre_eq_no_sound_update>:

sync_pre_eq_no_sound_update:
	WAIT ZL,64
    6f92:	e5 e1       	ldi	r30, 0x15	; 21
    6f94:	ea 95       	dec	r30
    6f96:	f1 f7       	brne	.-4      	; 0x6f94 <sync_pre_eq_no_sound_update+0x2>
    6f98:	00 00       	nop
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    6f9a:	28 9a       	sbi	0x05, 0	; 5
		
	rjmp sync_end
    6f9c:	b1 c0       	rjmp	.+354    	; 0x7100 <sync_end>

00006f9e <sync_eq>:
; 0x68  on the cbi
; 0x36E on the sbi
; low pulse duration: 774 clocks
;***************************************************	
sync_eq:
	cpi ZL,SYNC_POST_EQ_PULSES
    6f9e:	e6 30       	cpi	r30, 0x06	; 6
	brlo sync_post_eq
    6fa0:	38 f1       	brcs	.+78     	; 0x6ff0 <sync_post_eq>

	rjmp .
    6fa2:	00 c0       	rjmp	.+0      	; 0x6fa4 <sync_eq+0x6>
	rjmp .
    6fa4:	00 c0       	rjmp	.+0      	; 0x6fa6 <sync_eq+0x8>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    6fa6:	28 98       	cbi	0x05, 0	; 5

	bst ZL,0
    6fa8:	e0 fb       	bst	r30, 0
	ldi ZL,4
    6faa:	e4 e0       	ldi	r30, 0x04	; 4
	brtc sync_eq_skip
    6fac:	16 f4       	brtc	.+4      	; 0x6fb2 <sync_eq_skip>
	
	call update_sound
    6fae:	0e 94 98 38 	call	0x7130	; 0x7130 <update_sound>

00006fb2 <sync_eq_skip>:
	;enable interupt to bring back sync 
	;level instead of wasting cycles
	;in a big wait loop

 	;clear interrupt flag
	ldi ZL,(1<<OCF1B)
    6fb2:	e4 e0       	ldi	r30, 0x04	; 4
	sts _SFR_MEM_ADDR(TIFR1),ZL 
    6fb4:	e0 93 36 00 	sts	0x0036, r30
	
	;generate interrupt on match
	;for timer1 compare unit b
	ldi ZL,(1<<OCIE1A)+(1<<OCIE1B)
    6fb8:	e6 e0       	ldi	r30, 0x06	; 6
	sts _SFR_MEM_ADDR(TIMSK1),ZL
    6fba:	e0 93 6f 00 	sts	0x006F, r30

	rjmp sync_end
    6fbe:	a0 c0       	rjmp	.+320    	; 0x7100 <sync_end>

00006fc0 <__vector_14>:
; during VSYNC EQ pulses to recover ~5000 cycles per field
; with interrupt latency conpensation
; 37 cycles
;**********************************************************	
TIMER1_COMPB_vect:
	push ZL
    6fc0:	ef 93       	push	r30
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    6fc2:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    6fc4:	ef 93       	push	r30

	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    6fc6:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,62+31 ;0x5D ;MIN_INT_LATENCY
    6fca:	ed 55       	subi	r30, 0x5D	; 93

	cpi ZL,1
    6fcc:	e1 30       	cpi	r30, 0x01	; 1
	brlo .		;advance PC to next instruction
    6fce:	00 f0       	brcs	.+0      	; 0x6fd0 <__vector_14+0x10>

	cpi ZL,2
    6fd0:	e2 30       	cpi	r30, 0x02	; 2
	brlo .		;advance PC to next instruction
    6fd2:	00 f0       	brcs	.+0      	; 0x6fd4 <__vector_14+0x14>

	cpi ZL,3
    6fd4:	e3 30       	cpi	r30, 0x03	; 3
	brlo .		;advance PC to next instruction
    6fd6:	00 f0       	brcs	.+0      	; 0x6fd8 <__vector_14+0x18>

	cpi ZL,4
    6fd8:	e4 30       	cpi	r30, 0x04	; 4
	brlo .		;advance PC to next instruction
    6fda:	00 f0       	brcs	.+0      	; 0x6fdc <__vector_14+0x1c>

	cpi ZL,5
    6fdc:	e5 30       	cpi	r30, 0x05	; 5
	brlo .		;advance PC to next instruction
    6fde:	00 f0       	brcs	.+0      	; 0x6fe0 <__vector_14+0x20>

 	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;68
    6fe0:	28 9a       	sbi	0x05, 0	; 5
	ldi ZL,(1<<OCIE1A) ; disable OCIE1B 
    6fe2:	e2 e0       	ldi	r30, 0x02	; 2
	sts _SFR_MEM_ADDR(TIMSK1),ZL ;stop generate interrupt on match
    6fe4:	e0 93 6f 00 	sts	0x006F, r30
	
	;restore flags
	pop ZL
    6fe8:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL	
    6fea:	ef bf       	out	0x3f, r30	; 63
	pop ZL
    6fec:	ef 91       	pop	r30
	reti
    6fee:	18 95       	reti

00006ff0 <sync_post_eq>:
; 0x68 on the cbi
; 0xAC on the sbi
; pulse cycles: 68 clocks
;***************************************************	
sync_post_eq:	
	rjmp .
    6ff0:	00 c0       	rjmp	.+0      	; 0x6ff2 <sync_post_eq+0x2>

	bst ZL,0
    6ff2:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    6ff4:	28 98       	cbi	0x05, 0	; 5
	brtc sync_post_eq_no_sound_update
    6ff6:	26 f4       	brtc	.+8      	; 0x7000 <sync_post_eq_no_sound_update>
	ldi ZL,1	
    6ff8:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    6ffa:	0e 94 98 38 	call	0x7130	; 0x7130 <update_sound>
	rjmp sync_pre_eq_cont
    6ffe:	05 c0       	rjmp	.+10     	; 0x700a <sync_pre_eq_cont>

00007000 <sync_post_eq_no_sound_update>:

sync_post_eq_no_sound_update:
	WAIT ZL,64
    7000:	e5 e1       	ldi	r30, 0x15	; 21
    7002:	ea 95       	dec	r30
    7004:	f1 f7       	brne	.-4      	; 0x7002 <sync_post_eq_no_sound_update+0x2>
    7006:	00 00       	nop

	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN 
    7008:	28 9a       	sbi	0x05, 0	; 5

0000700a <sync_pre_eq_cont>:

sync_pre_eq_cont:	
	;check if it's the last vsync pulse
	lds ZL,sync_pulse
    700a:	e0 91 85 0c 	lds	r30, 0x0C85
	cpi ZL,0
    700e:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2 ;skip rjmp
    7010:	09 f0       	breq	.+2      	; 0x7014 <sync_pre_eq_cont+0xa>
	rjmp sync_end
    7012:	76 c0       	rjmp	.+236    	; 0x7100 <sync_end>
	
	;update sync flags
	ldi ZL,SYNC_HSYNC_PULSES
    7014:	ed ef       	ldi	r30, 0xFD	; 253
	sts sync_pulse,ZL
    7016:	e0 93 85 0c 	sts	0x0C85, r30
	ldi ZL,1
    701a:	e1 e0       	ldi	r30, 0x01	; 1
	sts sync_phase,ZL
    701c:	e0 93 84 0c 	sts	0x0C84, r30
	
	rjmp sync_end
    7020:	6f c0       	rjmp	.+222    	; 0x7100 <sync_end>

00007022 <sync_hsync>:
; 0xF0 on the sbi
; pulse duration: 136 clocks
;***************************************************	

	; Set HDRIVE to normal rate
	ldi ZL,hi8(HDRIVE_CL)
    7022:	e7 e0       	ldi	r30, 0x07	; 7
	sts _SFR_MEM_ADDR(OCR1AH),ZL	
    7024:	e0 93 89 00 	sts	0x0089, r30
	ldi ZL,lo8(HDRIVE_CL)
    7028:	eb e1       	ldi	r30, 0x1B	; 27
	sts _SFR_MEM_ADDR(OCR1AL),ZL
    702a:	e0 93 88 00 	sts	0x0088, r30
	rjmp .
    702e:	00 c0       	rjmp	.+0      	; 0x7030 <sync_hsync+0xe>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    7030:	28 98       	cbi	0x05, 0	; 5
	
	ldi ZL,2	;indicate update_sound to generate the SBI for pre-eq
    7032:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    7034:	00 c0       	rjmp	.+0      	; 0x7036 <sync_hsync+0x14>
	call update_sound
    7036:	0e 94 98 38 	call	0x7130	; 0x7130 <update_sound>

	;check if we have reached the first line to render
	ldi ZH,SYNC_HSYNC_PULSES
    703a:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    703c:	00 90 8b 0c 	lds	r0, 0x0C8B
	sub ZH,r0				
    7040:	f0 19       	sub	r31, r0
	lds ZL,sync_pulse
    7042:	e0 91 85 0c 	lds	r30, 0x0C85
	cp ZL,ZH
    7046:	ef 17       	cp	r30, r31
	brsh no_render
    7048:	d0 f4       	brcc	.+52     	; 0x707e <no_render>

	ldi ZH,SYNC_HSYNC_PULSES
    704a:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    704c:	00 90 8b 0c 	lds	r0, 0x0C8B
	sub ZH,r0				
    7050:	f0 19       	sub	r31, r0
	lds r0,render_lines_count
    7052:	00 90 8c 0c 	lds	r0, 0x0C8C
	sub ZH,r0			
    7056:	f0 19       	sub	r31, r0
	cp ZL,ZH
    7058:	ef 17       	cp	r30, r31
	brlo no_render
    705a:	88 f0       	brcs	.+34     	; 0x707e <no_render>

	;push r1-r29
	ldi ZL,29
    705c:	ed e1       	ldi	r30, 0x1D	; 29
	clr ZH
    705e:	ff 27       	eor	r31, r31

00007060 <push_loop>:
push_loop:
	ld r0,Z	;load value from register file
    7060:	00 80       	ld	r0, Z
	push r0
    7062:	0f 92       	push	r0
	dec ZL
    7064:	ea 95       	dec	r30
	brne push_loop	
    7066:	e1 f7       	brne	.-8      	; 0x7060 <push_loop>

	;timing compensation
	;to insure we always call the video mode 
	;routine at the same cycle	
	WAIT r16,230-(AUDIO_OUT_HSYNC_CYCLES)
    7068:	06 e0       	ldi	r16, 0x06	; 6
    706a:	0a 95       	dec	r16
    706c:	f1 f7       	brne	.-4      	; 0x706a <push_loop+0xa>

	call VMODE_FUNC		;TCNT1=0x234
    706e:	0e 94 39 35 	call	0x6a72	; 0x6a72 <sub_video_mode3>

	;pop r1-r29
	ldi ZL,1
    7072:	e1 e0       	ldi	r30, 0x01	; 1
	clr ZH
    7074:	ff 27       	eor	r31, r31

00007076 <pop_loop>:
pop_loop:
	pop r0
    7076:	0f 90       	pop	r0
	st Z+,r0 ;store value to register file
    7078:	01 92       	st	Z+, r0
	cpi ZL,30
    707a:	ee 31       	cpi	r30, 0x1E	; 30
	brlo pop_loop	
    707c:	e0 f3       	brcs	.-8      	; 0x7076 <pop_loop>

0000707e <no_render>:

no_render:

	;check if it's the last hsync pulse and we are 
	;ready for VSYNC
	lds ZL,sync_pulse
    707e:	e0 91 85 0c 	lds	r30, 0x0C85
	cpi ZL,0
    7082:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2
    7084:	09 f0       	breq	.+2      	; 0x7088 <no_render+0xa>
	rjmp sync_end
    7086:	3c c0       	rjmp	.+120    	; 0x7100 <sync_end>
;***************************************************
; Process VSYNC stuff
;***************************************************
	
	;push C-call registers
	push r18
    7088:	2f 93       	push	r18
	push r19
    708a:	3f 93       	push	r19
	push r20
    708c:	4f 93       	push	r20
	push r21
    708e:	5f 93       	push	r21
	push r22
    7090:	6f 93       	push	r22
	push r23
    7092:	7f 93       	push	r23
	push r24
    7094:	8f 93       	push	r24
	push r25
    7096:	9f 93       	push	r25
	push r26
    7098:	af 93       	push	r26
	push r27
    709a:	bf 93       	push	r27

	sei ;must enable ints for re-entrant sync pulses
    709c:	78 94       	sei
	clr r1
    709e:	11 24       	eor	r1, r1

	;set vsync flags
	clr ZL
    70a0:	ee 27       	eor	r30, r30
	sts sync_phase,ZL
    70a2:	e0 93 84 0c 	sts	0x0C84, r30
	ldi ZL,SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    70a6:	e2 e1       	ldi	r30, 0x12	; 18
	sts sync_pulse,ZL
    70a8:	e0 93 85 0c 	sts	0x0C85, r30



	;increment the vsync counter
	lds r24,vsync_counter
    70ac:	80 91 95 0c 	lds	r24, 0x0C95
	lds r25,vsync_counter+1
    70b0:	90 91 96 0c 	lds	r25, 0x0C96
	adiw r24,1
    70b4:	01 96       	adiw	r24, 0x01	; 1
	sts vsync_counter,r24
    70b6:	80 93 95 0c 	sts	0x0C95, r24
	sts vsync_counter+1,r25
    70ba:	90 93 96 0c 	sts	0x0C96, r25


	;process user pre callback
	lds ZL,pre_vsync_user_callback+0
    70be:	e0 91 87 0c 	lds	r30, 0x0C87
	lds ZH,pre_vsync_user_callback+1
    70c2:	f0 91 88 0c 	lds	r31, 0x0C88
	cp  ZL,r1
    70c6:	e1 15       	cp	r30, r1
	cpc ZH,r1
    70c8:	f1 05       	cpc	r31, r1
	breq .+2 
    70ca:	09 f0       	breq	.+2      	; 0x70ce <no_render+0x50>
	icall
    70cc:	09 95       	icall

	;refresh buttons states
	#if CONTROLLERS_VSYNC_READ == 1
		call ReadControllers
    70ce:	0e 94 2c 3a 	call	0x7458	; 0x7458 <ReadControllers>
	#endif 
	
	;invoke stuff the video mode may have to do
	call VideoModeVsync	
    70d2:	0e 94 ee 44 	call	0x89dc	; 0x89dc <VideoModeVsync>

	;process music (music, envelopes, etc)
	call process_music
    70d6:	0e 94 92 38 	call	0x7124	; 0x7124 <process_music>
	clr r1
    70da:	11 24       	eor	r1, r1

	;process user post callback
	lds ZL,post_vsync_user_callback+0
    70dc:	e0 91 89 0c 	lds	r30, 0x0C89
	lds ZH,post_vsync_user_callback+1
    70e0:	f0 91 8a 0c 	lds	r31, 0x0C8A
	cp  ZL,r1
    70e4:	e1 15       	cp	r30, r1
	cpc ZH,r1
    70e6:	f1 05       	cpc	r31, r1
	breq .+2 
    70e8:	09 f0       	breq	.+2      	; 0x70ec <no_render+0x6e>
	icall
    70ea:	09 95       	icall
	#if SNES_MOUSE == 1
		call ReadMouseExtendedData
		call ProcessMouseMovement
	#endif

	pop r27
    70ec:	bf 91       	pop	r27
	pop r26
    70ee:	af 91       	pop	r26
	pop r25
    70f0:	9f 91       	pop	r25
	pop r24
    70f2:	8f 91       	pop	r24
	pop r23
    70f4:	7f 91       	pop	r23
	pop r22
    70f6:	6f 91       	pop	r22
	pop r21
    70f8:	5f 91       	pop	r21
	pop r20
    70fa:	4f 91       	pop	r20
	pop r19
    70fc:	3f 91       	pop	r19
	pop r18
    70fe:	2f 91       	pop	r18

00007100 <sync_end>:
	
sync_end:	
	;restore flags
	pop ZL
    7100:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL
    7102:	ef bf       	out	0x3f, r30	; 63
	
	pop ZH
    7104:	ff 91       	pop	r31
	pop ZL
    7106:	ef 91       	pop	r30
	pop r1
    7108:	1f 90       	pop	r1
	pop r0
    710a:	0f 90       	pop	r0
	reti
    710c:	18 95       	reti

0000710e <hsync_pulse>:
; 0xf0 on the sbi 
;	
; Destroys: ZL (r30)
;*************************************************
hsync_pulse:
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    710e:	28 98       	cbi	0x05, 0	; 5
	ldi ZL,2
    7110:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    7112:	00 c0       	rjmp	.+0      	; 0x7114 <hsync_pulse+0x6>
	call update_sound
    7114:	0e 94 98 38 	call	0x7130	; 0x7130 <update_sound>

	lds ZL,sync_pulse
    7118:	e0 91 85 0c 	lds	r30, 0x0C85
	dec ZL
    711c:	ea 95       	dec	r30
	sts sync_pulse,ZL
    711e:	e0 93 85 0c 	sts	0x0C85, r30

	ret
    7122:	08 95       	ret

00007124 <process_music>:
; NOTE: registers r18-r27 are already saved by the caller
;***********************
process_music:
	
#if ENABLE_MIXER==1
	lds ZL,sound_enabled
    7124:	e0 91 a0 0c 	lds	r30, 0x0CA0
	sbrc ZL,0
    7128:	e0 fd       	sbrc	r30, 0
 	call ProcessMusic
    712a:	0e 94 55 3c 	call	0x78aa	; 0x78aa <ProcessMusic>
#endif

	ret
    712e:	08 95       	ret

00007130 <update_sound>:

; Destroys: Z,r0,r1
; cycles: 212+
;****************************
update_sound:
	push r16
    7130:	0f 93       	push	r16
	push r17
    7132:	1f 93       	push	r17
	push r18
    7134:	2f 93       	push	r18
	push r28
    7136:	cf 93       	push	r28
	push r29
    7138:	df 93       	push	r29

	mov r18,ZL
    713a:	2e 2f       	mov	r18, r30

	;channel 1 
	lds r16,tr1_step_lo
    713c:	00 91 a2 0c 	lds	r16, 0x0CA2
	lds r17,tr1_pos_frac
    7140:	10 91 a4 0c 	lds	r17, 0x0CA4
	add	r17,r16	;add step to fractional part of sample pos
    7144:	10 0f       	add	r17, r16
	lds r16,tr1_step_hi	
    7146:	00 91 a3 0c 	lds	r16, 0x0CA3
	lds ZL,tr1_pos_lo
    714a:	e0 91 a5 0c 	lds	r30, 0x0CA5
	lds ZH,tr1_pos_hi 
    714e:	f0 91 a6 0c 	lds	r31, 0x0CA6
	adc ZL,r16	;add step to low byte of sample pos
    7152:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    7154:	04 91       	lpm	r16, Z+
	sts tr1_pos_lo,ZL
    7156:	e0 93 a5 0c 	sts	0x0CA5, r30
	sts tr1_pos_frac,r17
    715a:	10 93 a4 0c 	sts	0x0CA4, r17
	lds r17,tr1_vol
    715e:	10 91 a1 0c 	lds	r17, 0x0CA1
	mulsu r16,r17;(sample*mixing vol)
    7162:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend	
    7164:	00 08       	sbc	r0, r0
	mov r28,r1	;set (sample*vol>>8) to mix buffer lsb
    7166:	c1 2d       	mov	r28, r1
	mov r29,r0	;set mix buffer msb	
    7168:	d0 2d       	mov	r29, r0
	nop
    716a:	00 00       	nop

;38
	
	;channel 2
	lds r16,tr2_step_lo
    716c:	00 91 a8 0c 	lds	r16, 0x0CA8
	lds r17,tr2_pos_frac
    7170:	10 91 aa 0c 	lds	r17, 0x0CAA
	add	r17,r16	;add step to fractional part of sample pos
    7174:	10 0f       	add	r17, r16
	lds r16,tr2_step_hi	
    7176:	00 91 a9 0c 	lds	r16, 0x0CA9
	lds ZL,tr2_pos_lo
    717a:	e0 91 ab 0c 	lds	r30, 0x0CAB
	lds ZH,tr2_pos_hi 
    717e:	f0 91 ac 0c 	lds	r31, 0x0CAC
	adc ZL,r16	;add step to low byte of sample pos
    7182:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    7184:	04 91       	lpm	r16, Z+
	sts tr2_pos_lo,ZL
    7186:	e0 93 ab 0c 	sts	0x0CAB, r30
	sts tr2_pos_frac,r17
    718a:	10 93 aa 0c 	sts	0x0CAA, r17
	lds r17,tr2_vol
    718e:	10 91 a7 0c 	lds	r17, 0x0CA7

	;*** Video sync update ***
	sbrc r18,0								;pre-eq/post-eq sync
    7192:	20 fd       	sbrc	r18, 0
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    7194:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,0								
    7196:	20 ff       	sbrs	r18, 0
	rjmp .
    7198:	00 c0       	rjmp	.+0      	; 0x719a <update_sound+0x6a>
	;*************************

	mulsu r16,r17;(sample*mixing vol)
    719a:	01 03       	mulsu	r16, r17
	clr r0
    719c:	00 24       	eor	r0, r0
	sbc r0,r0	;sign extend
    719e:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    71a0:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb		
    71a2:	d0 1d       	adc	r29, r0
;70
	
	;channel 3
	lds r16,tr3_step_lo
    71a4:	00 91 ae 0c 	lds	r16, 0x0CAE
	lds r17,tr3_pos_frac
    71a8:	10 91 b0 0c 	lds	r17, 0x0CB0
	add	r17,r16				;add step to fractional part of sample pos
    71ac:	10 0f       	add	r17, r16
	lds r16,tr3_step_hi	
    71ae:	00 91 af 0c 	lds	r16, 0x0CAF
	lds ZL,tr3_pos_lo
    71b2:	e0 91 b1 0c 	lds	r30, 0x0CB1
	lds ZH,tr3_pos_hi 
    71b6:	f0 91 b2 0c 	lds	r31, 0x0CB2
	adc ZL,r16				;add step to low byte of sample pos
    71ba:	e0 1f       	adc	r30, r16
	lpm	r16,Z				;load sample
    71bc:	04 91       	lpm	r16, Z+
	sts tr3_pos_lo,ZL
    71be:	e0 93 b1 0c 	sts	0x0CB1, r30
	sts tr3_pos_frac,r17
    71c2:	10 93 b0 0c 	sts	0x0CB0, r17
	lds r17,tr3_vol
    71c6:	10 91 ad 0c 	lds	r17, 0x0CAD
	mulsu r16,r17			;(sample*mixing vol)
    71ca:	01 03       	mulsu	r16, r17
	sbc r0,r0				;sign extend
    71cc:	00 08       	sbc	r0, r0
	add r28,r1				;add (sample*vol>>8) to mix buffer lsb
    71ce:	c1 0d       	add	r28, r1
	adc r29,r0				;ajust mix buffer msb
    71d0:	d0 1d       	adc	r29, r0
;97	

	;channel 4 - 7/15 bit LFSR 
	lds r16,tr4_barrel_lo
    71d2:	00 91 b5 0c 	lds	r16, 0x0CB5
	lds r17,tr4_barrel_hi
    71d6:	10 91 b6 0c 	lds	r17, 0x0CB6
	lds ZL,tr4_divider
    71da:	e0 91 b7 0c 	lds	r30, 0x0CB7
	dec ZL	
    71de:	ea 95       	dec	r30
	brpl ch4_no_shift	
    71e0:	92 f4       	brpl	.+36     	; 0x7206 <ch4_no_shift>

	lds ZH,tr4_params
    71e2:	f0 91 b4 0c 	lds	r31, 0x0CB4
	mov ZL,ZH
    71e6:	ef 2f       	mov	r30, r31
	lsr ZL 			;keep bits7:1
    71e8:	e6 95       	lsr	r30

	mov r0,r16  ;copy barrel shifter
    71ea:	00 2e       	mov	r0, r16
	lsr r0
    71ec:	06 94       	lsr	r0
	eor r0,r16  ;xor bit0 and bit1
    71ee:	00 26       	eor	r0, r16
	bst r0,0
    71f0:	00 fa       	bst	r0, 0
	lsr r17
    71f2:	16 95       	lsr	r17
	ror r16
    71f4:	07 95       	ror	r16
	bld r17,6	;15 bits mode
    71f6:	16 f9       	bld	r17, 6
	sbrs ZH,0
    71f8:	f0 ff       	sbrs	r31, 0
	bld r16,6	;7 bits mode
    71fa:	06 f9       	bld	r16, 6

	sts tr4_barrel_lo,r16
    71fc:	00 93 b5 0c 	sts	0x0CB5, r16
	sts tr4_barrel_hi,r17
    7200:	10 93 b6 0c 	sts	0x0CB6, r17

	rjmp ch4_end
    7204:	03 c0       	rjmp	.+6      	; 0x720c <ch4_end>

00007206 <ch4_no_shift>:
ch4_no_shift:
	;wait loop 21 cycles
	ldi r17,6
    7206:	16 e0       	ldi	r17, 0x06	; 6
	dec r17
    7208:	1a 95       	dec	r17
	brne .-4
    720a:	f1 f7       	brne	.-4      	; 0x7208 <ch4_no_shift+0x2>

0000720c <ch4_end>:
	;rjmp .
ch4_end:

	sts tr4_divider,ZL
    720c:	e0 93 b7 0c 	sts	0x0CB7, r30
	ldi r17,0x80 ;-128
    7210:	10 e8       	ldi	r17, 0x80	; 128
	
	;*** Video sync update ***
	sbrc r18,1								;hsync
    7212:	21 fd       	sbrc	r18, 1
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xF0
    7214:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,1								
    7216:	21 ff       	sbrs	r18, 1
	rjmp .
    7218:	00 c0       	rjmp	.+0      	; 0x721a <ch4_end+0xe>
	;*************************
	
	sbrc r16,0
    721a:	00 fd       	sbrc	r16, 0
	ldi r17,0x7f ;+127
    721c:	1f e7       	ldi	r17, 0x7F	; 127
	
	lds r16,tr4_vol
    721e:	00 91 b3 0c 	lds	r16, 0x0CB3

	mulsu r17,r16;(sample*mixing vol)
    7222:	10 03       	mulsu	r17, r16
	sbc r0,r0	;sign extend
    7224:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    7226:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb
    7228:	d0 1d       	adc	r29, r0
;142
#if SOUND_CHANNEL_5_ENABLE==1
	;channel 5 PCM -- 45 cycles

	;add fractional part
	lds r16,tr5_pos_frac
    722a:	00 91 bc 0c 	lds	r16, 0x0CBC
	lds r17,tr5_step_lo 
    722e:	10 91 ba 0c 	lds	r17, 0x0CBA
	add r16,r17
    7232:	01 0f       	add	r16, r17
	sts tr5_pos_frac,r16
    7234:	00 93 bc 0c 	sts	0x0CBC, r16

	;add lo
	lds ZL,tr5_pos_lo
    7238:	e0 91 bd 0c 	lds	r30, 0x0CBD
	lds r17,tr5_step_hi 
    723c:	10 91 bb 0c 	lds	r17, 0x0CBB
	adc ZL,r17
    7240:	e1 1f       	adc	r30, r17

	;add hi
	lds ZH,tr5_pos_hi
    7242:	f0 91 be 0c 	lds	r31, 0x0CBE
	ldi r16,0
    7246:	00 e0       	ldi	r16, 0x00	; 0
	adc ZH,r16
    7248:	f0 1f       	adc	r31, r16

	movw r16,ZL
    724a:	8f 01       	movw	r16, r30
	lds r0,tr5_loop_len_lo
    724c:	00 90 bf 0c 	lds	r0, 0x0CBF
	lds r1,tr5_loop_len_hi	
    7250:	10 90 c0 0c 	lds	r1, 0x0CC0
	sub r16,r0
    7254:	00 19       	sub	r16, r0
	sbc r17,r1
    7256:	11 09       	sbc	r17, r1
	lds r0,tr5_loop_end_lo
    7258:	00 90 c1 0c 	lds	r0, 0x0CC1
	lds r1,tr5_loop_end_hi
    725c:	10 90 c2 0c 	lds	r1, 0x0CC2

	cp ZL,r0
    7260:	e0 15       	cp	r30, r0
	cpc ZH,r1
    7262:	f1 05       	cpc	r31, r1
	brlo .+2
    7264:	08 f0       	brcs	.+2      	; 0x7268 <ch4_end+0x5c>
	movw ZL,r16
    7266:	f8 01       	movw	r30, r16

	sts tr5_pos_lo,ZL
    7268:	e0 93 bd 0c 	sts	0x0CBD, r30
	sts tr5_pos_hi,ZH
    726c:	f0 93 be 0c 	sts	0x0CBE, r31

	lpm	r16,Z	;load sample
    7270:	04 91       	lpm	r16, Z+
	lds r17,tr5_vol
    7272:	10 91 b9 0c 	lds	r17, 0x0CB9

	mulsu r16,r17;(sample*mixing vol)
    7276:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend
    7278:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    727a:	c1 0d       	add	r28, r1
	adc r29,r0	;adjust mix buffer msb	
    727c:	d0 1d       	adc	r29, r0
#endif
	
	;final processing

	;clip
	clr r0
    727e:	00 24       	eor	r0, r0
	cpi r28,128	;> 127?
    7280:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0	
    7282:	d0 05       	cpc	r29, r0
	brlt .+2
    7284:	0c f0       	brlt	.+2      	; 0x7288 <ch4_end+0x7c>
	ldi r28,127
    7286:	cf e7       	ldi	r28, 0x7F	; 127
	
	dec r0
    7288:	0a 94       	dec	r0
	cpi r28,-128; <-128?
    728a:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0xff
    728c:	d0 05       	cpc	r29, r0
	brge .+2
    728e:	0c f4       	brge	.+2      	; 0x7292 <ch4_end+0x86>
	ldi r28,-128
    7290:	c0 e8       	ldi	r28, 0x80	; 128

	subi r28,128	;convert to unsigned		
    7292:	c0 58       	subi	r28, 0x80	; 128
	sts _SFR_MEM_ADDR(OCR2A),r28 ;output sound byte
    7294:	c0 93 b3 00 	sts	0x00B3, r28

00007298 <update_sound_end>:
#endif


update_sound_end:

	pop r29
    7298:	df 91       	pop	r29
	pop r28
    729a:	cf 91       	pop	r28
	pop r18
    729c:	2f 91       	pop	r18
	pop r17
    729e:	1f 91       	pop	r17
	pop r16
    72a0:	0f 91       	pop	r16
	
	ret
    72a2:	08 95       	ret

000072a4 <SetSpritesTileBank>:
;     r24=bank No (0-3)
; r23:r22=pointer to sprites pixel data.
;*****************************
.section .text.SetSpritesTileBank
SetSpritesTileBank:
	andi r24,3
    72a4:	83 70       	andi	r24, 0x03	; 3
	lsl r24	
    72a6:	88 0f       	add	r24, r24
	ldi ZL,lo8(sprites_tile_banks)
    72a8:	e6 e7       	ldi	r30, 0x76	; 118
	ldi ZH,hi8(sprites_tile_banks)
    72aa:	fc e0       	ldi	r31, 0x0C	; 12
	add ZL,r24
    72ac:	e8 0f       	add	r30, r24
	adc ZH,r1
    72ae:	f1 1d       	adc	r31, r1
	st Z,r22
    72b0:	60 83       	st	Z, r22
	std Z+1,r23
    72b2:	71 83       	std	Z+1, r23	; 0x01
	ret
    72b4:	08 95       	ret

000072b6 <SetTile>:

	ret

#else

	clr r25
    72b6:	99 27       	eor	r25, r25
	clr r23	
    72b8:	77 27       	eor	r23, r23

	ldi r18,VRAM_TILES_H
    72ba:	2e e1       	ldi	r18, 0x1E	; 30

	mul r22,r18		;calculate Y line addr in vram
    72bc:	62 9f       	mul	r22, r18
	add r0,r24		;add X offset
    72be:	08 0e       	add	r0, r24
	adc r1,r25
    72c0:	19 1e       	adc	r1, r25
	ldi XL,lo8(vram)
    72c2:	a0 e2       	ldi	r26, 0x20	; 32
	ldi XH,hi8(vram)
    72c4:	b1 e0       	ldi	r27, 0x01	; 1
	add XL,r0
    72c6:	a0 0d       	add	r26, r0
	adc XH,r1
    72c8:	b1 1d       	adc	r27, r1
	
	subi r20,~(RAM_TILES_COUNT-1)	
    72ca:	42 5e       	subi	r20, 0xE2	; 226
	st X,r20
    72cc:	4c 93       	st	X, r20

	clr r1
    72ce:	11 24       	eor	r1, r1

	ret
    72d0:	08 95       	ret

000072d2 <SetTileTable>:
; C-callable
; r25:r24=pointer to tiles data
;************************************
.section .text.SetTileTable
SetTileTable:
	sts tile_table_lo,r24
    72d2:	80 93 7e 0c 	sts	0x0C7E, r24
	sts tile_table_hi,r25	
    72d6:	90 93 7f 0c 	sts	0x0C7F, r25
	ret
    72da:	08 95       	ret

000072dc <GetVsyncFlag>:
;
; C-callable
;************************************
.section .text.GetVsyncFlag
GetVsyncFlag:
	lds r24,sync_flags
    72dc:	80 91 86 0c 	lds	r24, 0x0C86
	andi r24,SYNC_FLAG_VSYNC
    72e0:	81 70       	andi	r24, 0x01	; 1
	ret
    72e2:	08 95       	ret

000072e4 <ClearVsyncFlag>:
; 
; C-callable
;*****************************
.section .text.ClearVsyncFlag
ClearVsyncFlag:
	lds r18,sync_flags
    72e4:	20 91 86 0c 	lds	r18, 0x0C86
	andi r18,~SYNC_FLAG_VSYNC
    72e8:	2e 7f       	andi	r18, 0xFE	; 254
	sts sync_flags,r18
    72ea:	20 93 86 0c 	sts	0x0C86, r18
	ret
    72ee:	08 95       	ret

000072f0 <ReadJoypad>:
; r24=joypad No (0 or 1)
; returns: (int) r25:r24
;*****************************
.section .text.ReadJoypad
ReadJoypad:	
	tst r24
    72f0:	88 23       	and	r24, r24
	brne rj_p2
    72f2:	29 f4       	brne	.+10     	; 0x72fe <rj_p2>
		
	lds r24,joypad1_status_lo
    72f4:	80 91 8d 0c 	lds	r24, 0x0C8D
	lds r25,joypad1_status_lo+1
    72f8:	90 91 8e 0c 	lds	r25, 0x0C8E
	ret
    72fc:	08 95       	ret

000072fe <rj_p2>:
rj_p2:
	lds r24,joypad2_status_lo
    72fe:	80 91 91 0c 	lds	r24, 0x0C91
	lds r25,joypad2_status_lo+1	
    7302:	90 91 92 0c 	lds	r25, 0x0C92

	ret
    7306:	08 95       	ret

00007308 <WriteEeprom>:
;****************************

.section .text.WriteEeprom
WriteEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    7308:	f9 99       	sbic	0x1f, 1	; 31
   rjmp WriteEeprom
    730a:	fe cf       	rjmp	.-4      	; 0x7308 <WriteEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    730c:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    730e:	81 bd       	out	0x21, r24	; 33
   ; Write data (r22) to Data Register
   out _SFR_IO_ADDR(EEDR),r22
    7310:	60 bd       	out	0x20, r22	; 32
   cli
    7312:	f8 94       	cli
   ; Write logical one to EEMPE
   sbi _SFR_IO_ADDR(EECR),EEMPE
    7314:	fa 9a       	sbi	0x1f, 2	; 31
   ; Start eeprom write by setting EEPE
   sbi _SFR_IO_ADDR(EECR),EEPE
    7316:	f9 9a       	sbi	0x1f, 1	; 31
   sei
    7318:	78 94       	sei
   ret
    731a:	08 95       	ret

0000731c <ReadEeprom>:
; r24 - value read
;****************************
.section .text.ReadEeprom
ReadEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    731c:	f9 99       	sbic	0x1f, 1	; 31
   rjmp ReadEeprom
    731e:	fe cf       	rjmp	.-4      	; 0x731c <ReadEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    7320:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    7322:	81 bd       	out	0x21, r24	; 33
   ; Start eeprom read by writing EERE
   cli
    7324:	f8 94       	cli
   sbi _SFR_IO_ADDR(EECR),EERE
    7326:	f8 9a       	sbi	0x1f, 0	; 31
   ; Read data from Data Register
   in r24,_SFR_IO_ADDR(EEDR)
    7328:	80 b5       	in	r24, 0x20	; 32
   sei
    732a:	78 94       	sei
   ret
    732c:	08 95       	ret

0000732e <SetUserPostVsyncCallback>:
; C callable
; r25:r24 - pointer to C function: void ptr*(void)
;****************************
.section .text.SetUserPostVsyncCallback
SetUserPostVsyncCallback:
	sts post_vsync_user_callback+0,r24
    732e:	80 93 89 0c 	sts	0x0C89, r24
	sts post_vsync_user_callback+1,r25
    7332:	90 93 8a 0c 	sts	0x0C8A, r25
	ret
    7336:	08 95       	ret

00007338 <wdt_randomize>:
	.global wdt_randomize
	.section .text.wdt_randomize
	wdt_randomize:

		;set timer 1 full speed count to 0xffff
		ldi r24,0
    7338:	80 e0       	ldi	r24, 0x00	; 0
		sts sync_pulse,r24
    733a:	80 93 85 0c 	sts	0x0C85, r24


		sts _SFR_MEM_ADDR(TIMSK1),r24
    733e:	80 93 6f 00 	sts	0x006F, r24
		sts _SFR_MEM_ADDR(OCR1AL),r24
    7342:	80 93 88 00 	sts	0x0088, r24
		sts _SFR_MEM_ADDR(OCR1AH),r24
    7346:	80 93 89 00 	sts	0x0089, r24
		sts _SFR_MEM_ADDR(OCR1BL),r24
    734a:	80 93 8a 00 	sts	0x008A, r24
		sts _SFR_MEM_ADDR(OCR1BH),r24
    734e:	80 93 8b 00 	sts	0x008B, r24
		sts _SFR_MEM_ADDR(TCNT1H),r24
    7352:	80 93 85 00 	sts	0x0085, r24
		sts _SFR_MEM_ADDR(TCNT1L),r24
    7356:	80 93 84 00 	sts	0x0084, r24
		
		sts _SFR_MEM_ADDR(TCCR1A),r24	
    735a:	80 93 80 00 	sts	0x0080, r24
		ldi 24,(1<<CS10)
    735e:	81 e0       	ldi	r24, 0x01	; 1
		sts _SFR_MEM_ADDR(TCCR1B),r24
    7360:	80 93 81 00 	sts	0x0081, r24

		cli
    7364:	f8 94       	cli

		;enable watchdog at fastest speed and generate interrupts
		ldi r24,0
    7366:	80 e0       	ldi	r24, 0x00	; 0
		sts _SFR_MEM_ADDR(MCUSR),r24	
    7368:	80 93 54 00 	sts	0x0054, r24
		ldi r25,(1<<WDIE)+(1<<WDE)+(0<<WDP3)+(0<<WDP2)+(0<<WDP1)+(0<<WDP0)
    736c:	98 e4       	ldi	r25, 0x48	; 72
		lds r24,_SFR_MEM_ADDR(WDTCSR)
    736e:	80 91 60 00 	lds	r24, 0x0060
		ori r24,(1<<WDCE)+(1<<WDE)
    7372:	88 61       	ori	r24, 0x18	; 24
		sts _SFR_MEM_ADDR(WDTCSR),r24
    7374:	80 93 60 00 	sts	0x0060, r24
		sts _SFR_MEM_ADDR(WDTCSR),r25
    7378:	90 93 60 00 	sts	0x0060, r25
	
		sei
    737c:	78 94       	sei

0000737e <wait>:

		;generate 8 random cycles
	wait:
		lds r24,sync_pulse ;using the yet unalocated "sync_pulse" as a temp variable
    737e:	80 91 85 0c 	lds	r24, 0x0C85
		cpi r24,8
    7382:	88 30       	cpi	r24, 0x08	; 8
		brlo wait
    7384:	e0 f3       	brcs	.-8      	; 0x737e <wait>

		ret
    7386:	08 95       	ret

00007388 <GetTrueRandomSeed>:
	;********************************

	.global GetTrueRandomSeed
	.section .text.GetTrueRandomSeed
	GetTrueRandomSeed:
		lds r24,random_value
    7388:	80 91 97 0c 	lds	r24, 0x0C97
		lds r25,random_value+1
    738c:	90 91 98 0c 	lds	r25, 0x0C98
		ret
    7390:	08 95       	ret

00007392 <__vector_8>:
	;*************************************
	; Watchdog timer interrupt
	;*************************************
	WDT_vect:
		;save flags & status register
		push r16
    7392:	0f 93       	push	r16
		push r17
    7394:	1f 93       	push	r17

		in r16,_SFR_IO_ADDR(SREG)
    7396:	0f b7       	in	r16, 0x3f	; 63
		push r16
    7398:	0f 93       	push	r16

		lds r16,sync_pulse
    739a:	00 91 85 0c 	lds	r16, 0x0C85
		inc r16
    739e:	03 95       	inc	r16
		sts sync_pulse,r16
    73a0:	00 93 85 0c 	sts	0x0C85, r16

		;XOR succesive timer1 LSB into a int
		sbrc r16,0
    73a4:	00 fd       	sbrc	r16, 0
		rjmp 1f
    73a6:	08 c0       	rjmp	.+16     	; 0x73b8 <__vector_8+0x26>
		lds r17,random_value
    73a8:	10 91 97 0c 	lds	r17, 0x0C97
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    73ac:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    73b0:	10 27       	eor	r17, r16
		sts random_value,r17
    73b2:	10 93 97 0c 	sts	0x0C97, r17
		rjmp 2f
    73b6:	07 c0       	rjmp	.+14     	; 0x73c6 <__vector_8+0x34>
	1:
		lds r17,random_value+1
    73b8:	10 91 98 0c 	lds	r17, 0x0C98
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    73bc:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    73c0:	10 27       	eor	r17, r16
		sts random_value+1,r17
    73c2:	10 93 98 0c 	sts	0x0C98, r17
	2:

		ldi r16,(1<<WDIE)+(1<<WDE)
    73c6:	08 e4       	ldi	r16, 0x48	; 72
		sts _SFR_MEM_ADDR(WDTCSR),r16
    73c8:	00 93 60 00 	sts	0x0060, r16

		;restore flags
		pop r16
    73cc:	0f 91       	pop	r16
		out _SFR_IO_ADDR(SREG),r16
    73ce:	0f bf       	out	0x3f, r16	; 63
	
		pop r17
    73d0:	1f 91       	pop	r17
		pop r16
    73d2:	0f 91       	pop	r16
		reti
    73d4:	18 95       	reti

000073d6 <ReadButtons>:
void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
	unsigned char i;

	//latch controllers
	JOYPAD_OUT_PORT|=_BV(JOYPAD_LATCH_PIN);
    73d6:	12 9a       	sbi	0x02, 2	; 2
		}else{
			Wait200ns();
			Wait200ns();
		}	
	#else
		Wait200ns();
    73d8:	c8 95       	lpm
    73da:	c8 95       	lpm
		Wait200ns();
    73dc:	c8 95       	lpm
    73de:	c8 95       	lpm
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));
    73e0:	12 98       	cbi	0x02, 2	; 2
    73e2:	20 e0       	ldi	r18, 0x00	; 0
    73e4:	30 e0       	ldi	r19, 0x00	; 0
    73e6:	80 e0       	ldi	r24, 0x00	; 0
    73e8:	90 e0       	ldi	r25, 0x00	; 0
    73ea:	40 e0       	ldi	r20, 0x00	; 0


	//read button states
	for(i=0;i<16;i++){

		p1ButtonsLo>>=1;
    73ec:	36 95       	lsr	r19
    73ee:	27 95       	ror	r18
		p2ButtonsLo>>=1;
    73f0:	96 95       	lsr	r25
    73f2:	87 95       	ror	r24
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    73f4:	c8 95       	lpm
    73f6:	c8 95       	lpm
			Wait200ns();
    73f8:	c8 95       	lpm
    73fa:	c8 95       	lpm
		#endif
			
		//pulse clock pin		
		JOYPAD_OUT_PORT&=~(_BV(JOYPAD_CLOCK_PIN));
    73fc:	13 98       	cbi	0x02, 3	; 2
		
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) p1ButtonsLo|=(1<<15);
    73fe:	00 9b       	sbis	0x00, 0	; 0
    7400:	30 68       	ori	r19, 0x80	; 128
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) p2ButtonsLo|=(1<<15);
    7402:	01 9b       	sbis	0x00, 1	; 0
    7404:	90 68       	ori	r25, 0x80	; 128
		
		JOYPAD_OUT_PORT|=_BV(JOYPAD_CLOCK_PIN);
    7406:	13 9a       	sbi	0x02, 3	; 2
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    7408:	c8 95       	lpm
    740a:	c8 95       	lpm
			Wait200ns();
    740c:	c8 95       	lpm
    740e:	c8 95       	lpm
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));


	//read button states
	for(i=0;i<16;i++){
    7410:	4f 5f       	subi	r20, 0xFF	; 255
    7412:	40 31       	cpi	r20, 0x10	; 16
    7414:	59 f7       	brne	.-42     	; 0x73ec <ReadButtons+0x16>
		#endif

	}

	#if JOYSTICK==TYPE_SNES
		joypad1_status_lo=p1ButtonsLo;
    7416:	30 93 8e 0c 	sts	0x0C8E, r19
    741a:	20 93 8d 0c 	sts	0x0C8D, r18
		joypad2_status_lo=p2ButtonsLo;
    741e:	90 93 92 0c 	sts	0x0C92, r25
    7422:	80 93 91 0c 	sts	0x0C91, r24
	#else
		joypad1_status_lo=p1ButtonsLo&0xff;
		joypad2_status_lo=p2ButtonsLo&0xff;	
	#endif

	if(joypad1_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B) || joypad2_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B)){
    7426:	80 91 8d 0c 	lds	r24, 0x0C8D
    742a:	90 91 8e 0c 	lds	r25, 0x0C8E
    742e:	0f 97       	sbiw	r24, 0x0f	; 15
    7430:	31 f0       	breq	.+12     	; 0x743e <ReadButtons+0x68>
    7432:	80 91 91 0c 	lds	r24, 0x0C91
    7436:	90 91 92 0c 	lds	r25, 0x0C92
    743a:	0f 97       	sbiw	r24, 0x0f	; 15
    743c:	61 f4       	brne	.+24     	; 0x7456 <ReadButtons+0x80>

/**
 * Performs a software reset
 */
void SoftReset(void){        
	wdt_enable(WDTO_15MS);  
    743e:	28 e0       	ldi	r18, 0x08	; 8
    7440:	88 e1       	ldi	r24, 0x18	; 24
    7442:	90 e0       	ldi	r25, 0x00	; 0
    7444:	0f b6       	in	r0, 0x3f	; 63
    7446:	f8 94       	cli
    7448:	a8 95       	wdr
    744a:	80 93 60 00 	sts	0x0060, r24
    744e:	0f be       	out	0x3f, r0	; 63
    7450:	20 93 60 00 	sts	0x0060, r18
    7454:	ff cf       	rjmp	.-2      	; 0x7454 <ReadButtons+0x7e>
    7456:	08 95       	ret

00007458 <ReadControllers>:
 * program when CONTROLLERS_VSYNC_READ==0.
*/
void ReadControllers(){

	//Detect if devices are connected.
	joypadsConnectionStatus=0;
    7458:	10 92 ca 0c 	sts	0x0CCA, r1
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) joypadsConnectionStatus|=1;
    745c:	00 99       	sbic	0x00, 0	; 0
    745e:	03 c0       	rjmp	.+6      	; 0x7466 <ReadControllers+0xe>
    7460:	81 e0       	ldi	r24, 0x01	; 1
    7462:	80 93 ca 0c 	sts	0x0CCA, r24
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) joypadsConnectionStatus|=2;
    7466:	01 99       	sbic	0x00, 1	; 0
    7468:	05 c0       	rjmp	.+10     	; 0x7474 <ReadControllers+0x1c>
    746a:	80 91 ca 0c 	lds	r24, 0x0CCA
    746e:	82 60       	ori	r24, 0x02	; 2
    7470:	80 93 ca 0c 	sts	0x0CCA, r24
			
	//read the standard buttons
	ReadButtons();
    7474:	0e 94 eb 39 	call	0x73d6	; 0x73d6 <ReadButtons>
}
    7478:	08 95       	ret

0000747a <DetectControllers>:
 */
unsigned char DetectControllers(){
	//unsigned int joy;
	unsigned char resp=0;

	if(joypadsConnectionStatus&1){
    747a:	80 91 ca 0c 	lds	r24, 0x0CCA
    747e:	38 2f       	mov	r19, r24
    7480:	80 fd       	sbrc	r24, 0
    7482:	02 c0       	rjmp	.+4      	; 0x7488 <DetectControllers+0xe>
    7484:	20 e0       	ldi	r18, 0x00	; 0
    7486:	09 c0       	rjmp	.+18     	; 0x749a <DetectControllers+0x20>

		//joy=ReadJoypad(0);
		if((joypad1_status_lo&0x8000)!=0){
    7488:	80 91 8d 0c 	lds	r24, 0x0C8D
    748c:	90 91 8e 0c 	lds	r25, 0x0C8E
    7490:	29 2f       	mov	r18, r25
    7492:	22 1f       	adc	r18, r18
    7494:	22 27       	eor	r18, r18
    7496:	22 1f       	adc	r18, r18
    7498:	2f 5f       	subi	r18, 0xFF	; 255
			#endif
			resp|=1;
		}
	}

	if(joypadsConnectionStatus&2){
    749a:	31 ff       	sbrs	r19, 1
    749c:	09 c0       	rjmp	.+18     	; 0x74b0 <DetectControllers+0x36>
		//joy=ReadJoypad(1);
		if((joypad2_status_lo&0x8000)!=0){
    749e:	80 91 91 0c 	lds	r24, 0x0C91
    74a2:	90 91 92 0c 	lds	r25, 0x0C92
    74a6:	97 ff       	sbrs	r25, 7
    74a8:	02 c0       	rjmp	.+4      	; 0x74ae <DetectControllers+0x34>
			#if SNES_MOUSE == 1
				playDevice=1;
				playPort=1;
				actionButton=BTN_MOUSE_LEFT;
			#endif
			resp|=8;
    74aa:	28 60       	ori	r18, 0x08	; 8
    74ac:	01 c0       	rjmp	.+2      	; 0x74b0 <DetectControllers+0x36>
		}else{
			//we have a regular controller in P2
			resp|=4;
    74ae:	24 60       	ori	r18, 0x04	; 4
		}
	}

	return resp;
}
    74b0:	82 2f       	mov	r24, r18
    74b2:	08 95       	ret

000074b4 <FormatEeprom>:

	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {
    74b4:	cf 93       	push	r28
    74b6:	df 93       	push	r29
    74b8:	c0 e0       	ldi	r28, 0x00	; 0
    74ba:	d0 e0       	ldi	r29, 0x00	; 0

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
    74bc:	fe 01       	movw	r30, r28
    74be:	e0 59       	subi	r30, 0x90	; 144
    74c0:	ff 4f       	sbci	r31, 0xFF	; 255
    74c2:	e4 91       	lpm	r30, Z+
    74c4:	ce 01       	movw	r24, r28
    74c6:	6e 2f       	mov	r22, r30
    74c8:	0e 94 84 39 	call	0x7308	; 0x7308 <WriteEeprom>
    74cc:	21 96       	adiw	r28, 0x01	; 1
	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
    74ce:	c0 32       	cpi	r28, 0x20	; 32
    74d0:	d1 05       	cpc	r29, r1
    74d2:	a1 f7       	brne	.-24     	; 0x74bc <FormatEeprom+0x8>
    74d4:	c0 e2       	ldi	r28, 0x20	; 32
    74d6:	d0 e0       	ldi	r29, 0x00	; 0
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (EEPROM_MAX_BLOCKS*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
    74d8:	ce 01       	movw	r24, r28
    74da:	6f ef       	ldi	r22, 0xFF	; 255
    74dc:	0e 94 84 39 	call	0x7308	; 0x7308 <WriteEeprom>
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
    74e0:	ce 01       	movw	r24, r28
    74e2:	01 96       	adiw	r24, 0x01	; 1
    74e4:	6f ef       	ldi	r22, 0xFF	; 255
    74e6:	0e 94 84 39 	call	0x7308	; 0x7308 <WriteEeprom>
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (EEPROM_MAX_BLOCKS*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
    74ea:	a0 96       	adiw	r28, 0x20	; 32
    74ec:	88 e0       	ldi	r24, 0x08	; 8
    74ee:	c0 30       	cpi	r28, 0x00	; 0
    74f0:	d8 07       	cpc	r29, r24
    74f2:	91 f7       	brne	.-28     	; 0x74d8 <FormatEeprom+0x24>
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
   }
   
}
    74f4:	df 91       	pop	r29
    74f6:	cf 91       	pop	r28
    74f8:	08 95       	ret

000074fa <isEepromFormatted>:
	  }
   }
}
	
//returns true if the EEPROM has been setup to work with the kernel.
bool isEepromFormatted(){
    74fa:	1f 93       	push	r17
	unsigned id;
	id=ReadEeprom(0)+(ReadEeprom(1)<<8);
    74fc:	80 e0       	ldi	r24, 0x00	; 0
    74fe:	90 e0       	ldi	r25, 0x00	; 0
    7500:	0e 94 8e 39 	call	0x731c	; 0x731c <ReadEeprom>
    7504:	18 2f       	mov	r17, r24
    7506:	81 e0       	ldi	r24, 0x01	; 1
    7508:	90 e0       	ldi	r25, 0x00	; 0
    750a:	0e 94 8e 39 	call	0x731c	; 0x731c <ReadEeprom>
    750e:	90 e0       	ldi	r25, 0x00	; 0
    7510:	38 2f       	mov	r19, r24
    7512:	20 e0       	ldi	r18, 0x00	; 0
    7514:	21 0f       	add	r18, r17
    7516:	31 1d       	adc	r19, r1
    7518:	2a 55       	subi	r18, 0x5A	; 90
    751a:	35 45       	sbci	r19, 0x55	; 85
    751c:	09 f4       	brne	.+2      	; 0x7520 <isEepromFormatted+0x26>
    751e:	91 e0       	ldi	r25, 0x01	; 1
	return (id==EEPROM_SIGNATURE);
}
    7520:	89 2f       	mov	r24, r25
    7522:	1f 91       	pop	r17
    7524:	08 95       	ret

00007526 <GetPrngNumber>:
 * Input: Zero=return the next random value. Non-zero=Sets the seed value.
 */
u16 GetPrngNumber(u16 seed){
	static u16 prng_state;
  	
	if(seed!=0) prng_state=seed;
    7526:	00 97       	sbiw	r24, 0x00	; 0
    7528:	21 f0       	breq	.+8      	; 0x7532 <GetPrngNumber+0xc>
    752a:	90 93 c4 0c 	sts	0x0CC4, r25
    752e:	80 93 c3 0c 	sts	0x0CC3, r24
	
	u16 bit  = ((prng_state >> 0) ^ (prng_state >> 2) ^ (prng_state >> 3) ^ (prng_state >> 5) ) & 1;
    7532:	80 91 c3 0c 	lds	r24, 0x0CC3
    7536:	90 91 c4 0c 	lds	r25, 0x0CC4
	prng_state =  (prng_state >> 1) | (bit << 15);
    753a:	9c 01       	movw	r18, r24
    753c:	36 95       	lsr	r19
    753e:	27 95       	ror	r18
    7540:	36 95       	lsr	r19
    7542:	27 95       	ror	r18
    7544:	ac 01       	movw	r20, r24
    7546:	73 e0       	ldi	r23, 0x03	; 3
    7548:	56 95       	lsr	r21
    754a:	47 95       	ror	r20
    754c:	7a 95       	dec	r23
    754e:	e1 f7       	brne	.-8      	; 0x7548 <GetPrngNumber+0x22>
    7550:	24 27       	eor	r18, r20
    7552:	35 27       	eor	r19, r21
    7554:	28 27       	eor	r18, r24
    7556:	39 27       	eor	r19, r25
    7558:	ac 01       	movw	r20, r24
    755a:	65 e0       	ldi	r22, 0x05	; 5
    755c:	56 95       	lsr	r21
    755e:	47 95       	ror	r20
    7560:	6a 95       	dec	r22
    7562:	e1 f7       	brne	.-8      	; 0x755c <GetPrngNumber+0x36>
    7564:	24 27       	eor	r18, r20
    7566:	35 27       	eor	r19, r21
    7568:	33 27       	eor	r19, r19
    756a:	26 95       	lsr	r18
    756c:	37 95       	ror	r19
    756e:	22 27       	eor	r18, r18
    7570:	96 95       	lsr	r25
    7572:	87 95       	ror	r24
    7574:	28 2b       	or	r18, r24
    7576:	39 2b       	or	r19, r25
    7578:	30 93 c4 0c 	sts	0x0CC4, r19
    757c:	20 93 c3 0c 	sts	0x0CC3, r18
	return prng_state;   
}
    7580:	c9 01       	movw	r24, r18
    7582:	08 95       	ret

00007584 <song_buffer_add_byte>:
void song_buffer_add_byte(uint8_t t);
u8 song_buffer_read_byte();
u8 song_buffer_bytes_available();
u8 song_buffer_fill();

void song_buffer_add_byte(u8 t){
    7584:	98 2f       	mov	r25, r24
	if(t == 0xFF && song_buffer_last_byte == 0xFF){//0xFF,0xFF = end of data marker, do not store it, and eat the last 0xFF from the stream(it is not real data for the song player)
    7586:	8f 3f       	cpi	r24, 0xFF	; 255
    7588:	71 f4       	brne	.+28     	; 0x75a6 <song_buffer_add_byte+0x22>
    758a:	80 91 45 0d 	lds	r24, 0x0D45
    758e:	8f 3f       	cpi	r24, 0xFF	; 255
    7590:	51 f4       	brne	.+20     	; 0x75a6 <song_buffer_add_byte+0x22>
		if(!song_buffer_head)
    7592:	80 91 71 0d 	lds	r24, 0x0D71
    7596:	88 23       	and	r24, r24
    7598:	11 f4       	brne	.+4      	; 0x759e <song_buffer_add_byte+0x1a>
			song_buffer_head = SD_SONG_BUFFER_SIZE-1;//last 0xFF was at the end of the buffer
    759a:	8f e1       	ldi	r24, 0x1F	; 31
    759c:	01 c0       	rjmp	.+2      	; 0x75a0 <song_buffer_add_byte+0x1c>
		else
			song_buffer_head--;//last byte was somewhere before the end of the buffer
    759e:	81 50       	subi	r24, 0x01	; 1
    75a0:	80 93 71 0d 	sts	0x0D71, r24
    75a4:	08 95       	ret
		//set state to seek to first sector of loop point
	}else{//more data to add
		song_buffer[song_buffer_head++] = t;
    75a6:	80 91 71 0d 	lds	r24, 0x0D71
    75aa:	e8 2f       	mov	r30, r24
    75ac:	f0 e0       	ldi	r31, 0x00	; 0
    75ae:	e9 5b       	subi	r30, 0xB9	; 185
    75b0:	f2 4f       	sbci	r31, 0xF2	; 242
    75b2:	90 83       	st	Z, r25
    75b4:	8f 5f       	subi	r24, 0xFF	; 255
    75b6:	80 93 71 0d 	sts	0x0D71, r24
		if(song_buffer_head >= SD_SONG_BUFFER_SIZE)
    75ba:	80 32       	cpi	r24, 0x20	; 32
    75bc:	10 f0       	brcs	.+4      	; 0x75c2 <song_buffer_add_byte+0x3e>
			song_buffer_head = 0;
    75be:	10 92 71 0d 	sts	0x0D71, r1
    75c2:	08 95       	ret

000075c4 <song_buffer_read_byte>:
	}
}
   
u8 song_buffer_read_byte(){

	if(song_buffer_head == song_buffer_tail){//need to read more bytes
    75c4:	90 91 71 0d 	lds	r25, 0x0D71
    75c8:	80 91 68 0d 	lds	r24, 0x0D68
    75cc:	98 17       	cp	r25, r24
    75ce:	91 f4       	brne	.+36     	; 0x75f4 <song_buffer_read_byte+0x30>
		do{
			if(!song_buffer_fill())//TODO HOW SHOULD THIS BE HANDLED?
    75d0:	0e 94 0a 3b 	call	0x7614	; 0x7614 <song_buffer_fill>
    75d4:	88 23       	and	r24, r24
    75d6:	11 f4       	brne	.+4      	; 0x75dc <song_buffer_read_byte+0x18>
    75d8:	e0 e0       	ldi	r30, 0x00	; 0
    75da:	1a c0       	rjmp	.+52     	; 0x7610 <song_buffer_read_byte+0x4c>

	return t;
}
   
u8 song_buffer_bytes_available(){
	if(song_buffer_head > song_buffer_tail)
    75dc:	90 91 71 0d 	lds	r25, 0x0D71
    75e0:	80 91 68 0d 	lds	r24, 0x0D68
    75e4:	89 17       	cp	r24, r25
    75e6:	18 f4       	brcc	.+6      	; 0x75ee <song_buffer_read_byte+0x2a>
		return song_buffer_head-song_buffer_tail;
    75e8:	98 1b       	sub	r25, r24
    75ea:	89 2f       	mov	r24, r25
    75ec:	01 c0       	rjmp	.+2      	; 0x75f0 <song_buffer_read_byte+0x2c>
	else
		return song_buffer_tail-song_buffer_head;
    75ee:	89 1b       	sub	r24, r25

	if(song_buffer_head == song_buffer_tail){//need to read more bytes
		do{
			if(!song_buffer_fill())//TODO HOW SHOULD THIS BE HANDLED?
				return 0;
		}while(!song_buffer_bytes_available()); 
    75f0:	88 23       	and	r24, r24
    75f2:	71 f3       	breq	.-36     	; 0x75d0 <song_buffer_read_byte+0xc>
	}
      
	//there is some data in the buffer
	uint8_t t = song_buffer[song_buffer_tail++];
    75f4:	80 91 68 0d 	lds	r24, 0x0D68
    75f8:	e8 2f       	mov	r30, r24
    75fa:	f0 e0       	ldi	r31, 0x00	; 0
    75fc:	e9 5b       	subi	r30, 0xB9	; 185
    75fe:	f2 4f       	sbci	r31, 0xF2	; 242
    7600:	e0 81       	ld	r30, Z
    7602:	8f 5f       	subi	r24, 0xFF	; 255
    7604:	80 93 68 0d 	sts	0x0D68, r24
	if(song_buffer_tail >= SD_SONG_BUFFER_SIZE)
    7608:	80 32       	cpi	r24, 0x20	; 32
    760a:	10 f0       	brcs	.+4      	; 0x7610 <song_buffer_read_byte+0x4c>
		song_buffer_tail = 0;
    760c:	10 92 68 0d 	sts	0x0D68, r1

	return t;
}
    7610:	8e 2f       	mov	r24, r30
    7612:	08 95       	ret

00007614 <song_buffer_fill>:
		return song_buffer_head-song_buffer_tail;
	else
		return song_buffer_tail-song_buffer_head;
}
   
u8 song_buffer_fill(){//this would be called every frame unless you were using the SD for something else
    7614:	1f 93       	push	r17

	if(song_buffer_state == SDM_OFF || (song_buffer_state & SDM_WAIT)){//not running a song or something else is using the SD card
    7616:	90 91 40 0d 	lds	r25, 0x0D40
    761a:	99 23       	and	r25, r25
    761c:	11 f0       	breq	.+4      	; 0x7622 <song_buffer_fill+0xe>
    761e:	94 ff       	sbrs	r25, 4
    7620:	05 c0       	rjmp	.+10     	; 0x762c <song_buffer_fill+0x18>
		song_buffer_state = SDM_WAIT;
    7622:	80 e1       	ldi	r24, 0x10	; 16
    7624:	80 93 40 0d 	sts	0x0D40, r24
    7628:	80 e0       	ldi	r24, 0x00	; 0
    762a:	2e c0       	rjmp	.+92     	; 0x7688 <song_buffer_fill+0x74>
		return 0;
	}
	
	if(song_buffer_state & SDM_SEEK){//seeking a sector
    762c:	90 ff       	sbrs	r25, 0
    762e:	04 c0       	rjmp	.+8      	; 0x7638 <song_buffer_fill+0x24>
		//seek to a sector position

		song_buffer_state ^= SDM_SEEK;
    7630:	81 e0       	ldi	r24, 0x01	; 1
    7632:	98 27       	eor	r25, r24
		song_buffer_state |= SDM_EAT;
    7634:	92 60       	ori	r25, 0x02	; 2
    7636:	05 c0       	rjmp	.+10     	; 0x7642 <song_buffer_fill+0x2e>

	}else if(song_buffer_state & SDM_EAT){//reading stuff bytes
    7638:	91 ff       	sbrs	r25, 1
    763a:	06 c0       	rjmp	.+12     	; 0x7648 <song_buffer_fill+0x34>

		//read stuff bytes
		
		song_buffer_state ^= SDM_EAT;
    763c:	82 e0       	ldi	r24, 0x02	; 2
    763e:	98 27       	eor	r25, r24
		song_buffer_state |= SDM_READ;
    7640:	94 60       	ori	r25, 0x04	; 4
    7642:	90 93 40 0d 	sts	0x0D40, r25
    7646:	16 c0       	rjmp	.+44     	; 0x7674 <song_buffer_fill+0x60>

	return t;
}
   
u8 song_buffer_bytes_available(){
	if(song_buffer_head > song_buffer_tail)
    7648:	90 91 71 0d 	lds	r25, 0x0D71
    764c:	80 91 68 0d 	lds	r24, 0x0D68
    7650:	89 17       	cp	r24, r25
    7652:	18 f4       	brcc	.+6      	; 0x765a <song_buffer_fill+0x46>
		return song_buffer_head-song_buffer_tail;
    7654:	98 1b       	sub	r25, r24
    7656:	89 2f       	mov	r24, r25
    7658:	01 c0       	rjmp	.+2      	; 0x765c <song_buffer_fill+0x48>
	else
		return song_buffer_tail-song_buffer_head;
    765a:	89 1b       	sub	r24, r25
		
		song_buffer_state ^= SDM_EAT;
		song_buffer_state |= SDM_READ;
		
	}else{//reading bytes
		uint8_t left = SD_SONG_BUFFER_SIZE-song_buffer_bytes_available();
    765c:	10 e2       	ldi	r17, 0x20	; 32
    765e:	18 1b       	sub	r17, r24
    7660:	07 c0       	rjmp	.+14     	; 0x7670 <song_buffer_fill+0x5c>
		while(left){
			if(GetVsyncFlag())
    7662:	0e 94 6e 39 	call	0x72dc	; 0x72dc <GetVsyncFlag>
    7666:	88 23       	and	r24, r24
    7668:	29 f4       	brne	.+10     	; 0x7674 <song_buffer_fill+0x60>
				break;
			uint8_t t = 0;//read a byte from the SD
			song_buffer_add_byte(t);
    766a:	0e 94 c2 3a 	call	0x7584	; 0x7584 <song_buffer_add_byte>
			left--;
    766e:	11 50       	subi	r17, 0x01	; 1
		song_buffer_state ^= SDM_EAT;
		song_buffer_state |= SDM_READ;
		
	}else{//reading bytes
		uint8_t left = SD_SONG_BUFFER_SIZE-song_buffer_bytes_available();
		while(left){
    7670:	11 23       	and	r17, r17
    7672:	b9 f7       	brne	.-18     	; 0x7662 <song_buffer_fill+0x4e>
			song_buffer_add_byte(t);
			left--;
		}
	}
	
	if(song_buffer_state & SDM_WAIT_AFTER){
    7674:	90 91 40 0d 	lds	r25, 0x0D40
    7678:	93 ff       	sbrs	r25, 3
    767a:	05 c0       	rjmp	.+10     	; 0x7686 <song_buffer_fill+0x72>
		song_buffer_state |= SDM_WAIT;
		song_buffer_state ^= SDM_WAIT_AFTER;
    767c:	90 61       	ori	r25, 0x10	; 16
    767e:	88 e0       	ldi	r24, 0x08	; 8
    7680:	98 27       	eor	r25, r24
    7682:	90 93 40 0d 	sts	0x0D40, r25
    7686:	81 e0       	ldi	r24, 0x01	; 1
	}
	return 1;
}
    7688:	1f 91       	pop	r17
    768a:	08 95       	ret

0000768c <PatchCommand00>:
/*
 * Command 00: Set envelope speed per frame +127/-128, 0=no envelope
 * Param:
 */
void PatchCommand00(Track* track, char param){
	track->envelopeStep=param;
    768c:	fc 01       	movw	r30, r24
    768e:	67 87       	std	Z+15, r22	; 0x0f
}
    7690:	08 95       	ret

00007692 <PatchCommand01>:
 * Param:
 */
void PatchCommand01(Track* track, char param){
	(void)track; //to remove unused warning
	#if MIXER_CHAN4_TYPE == 0
		mixer.channels.type.noise.barrel=0x0101;
    7692:	81 e0       	ldi	r24, 0x01	; 1
    7694:	91 e0       	ldi	r25, 0x01	; 1
    7696:	90 93 b6 0c 	sts	0x0CB6, r25
    769a:	80 93 b5 0c 	sts	0x0CB5, r24
		mixer.channels.type.noise.params=param;
    769e:	60 93 b4 0c 	sts	0x0CB4, r22
	#endif
}
    76a2:	08 95       	ret

000076a4 <PatchCommand02>:
/*
 * Command 02: Set wave
 * Param:
 */
void PatchCommand02(Track* track, char param){
	SetMixerWave(track->channel,param);
    76a4:	fc 01       	movw	r30, r24
    76a6:	82 81       	ldd	r24, Z+2	; 0x02
    76a8:	0e 94 9c 3f 	call	0x7f38	; 0x7f38 <SetMixerWave>
}
    76ac:	08 95       	ret

000076ae <PatchCommand03>:
/*
 * Command 03: Note up * param
 * Param:
 */
void PatchCommand03(Track* track, char param){
    76ae:	fc 01       	movw	r30, r24
	track->note+=param;
    76b0:	81 81       	ldd	r24, Z+1	; 0x01
    76b2:	68 0f       	add	r22, r24
    76b4:	61 83       	std	Z+1, r22	; 0x01
	SetMixerNote(track->channel,track->note);
    76b6:	82 81       	ldd	r24, Z+2	; 0x02
    76b8:	0e 94 85 3f 	call	0x7f0a	; 0x7f0a <SetMixerNote>
}
    76bc:	08 95       	ret

000076be <PatchCommand04>:
/*
 * Command 04: Note down * param
 * Param:
 */
void PatchCommand04(Track* track, char param){
    76be:	fc 01       	movw	r30, r24
    76c0:	86 2f       	mov	r24, r22
	track->note-=param;
    76c2:	61 81       	ldd	r22, Z+1	; 0x01
    76c4:	68 1b       	sub	r22, r24
    76c6:	61 83       	std	Z+1, r22	; 0x01
	SetMixerNote(track->channel,track->note);
    76c8:	82 81       	ldd	r24, Z+2	; 0x02
    76ca:	0e 94 85 3f 	call	0x7f0a	; 0x7f0a <SetMixerNote>
}
    76ce:	08 95       	ret

000076d0 <PatchCommand05>:
/*
 * Command 05: End of note/fx
 * Param:
 */
void PatchCommand05(Track* track, char param){
    76d0:	fc 01       	movw	r30, r24
	(void)param; //to remove unused warning
	track->flags&=~(TRACK_FLAGS_PLAYING+TRACK_FLAGS_PRIORITY);	//patchPlaying=false,priority=0	
    76d2:	80 81       	ld	r24, Z
    76d4:	8f 75       	andi	r24, 0x5F	; 95
    76d6:	80 83       	st	Z, r24
}
    76d8:	08 95       	ret

000076da <PatchCommand06>:

/*
 * Command 06: Note hold
 * Param:
 */
void PatchCommand06(Track* track, char param){
    76da:	fc 01       	movw	r30, r24
	(void)param; //to remove unused warning
	track->flags|=TRACK_FLAGS_HOLD_ENV; //patchEnvelopeHold=true;
    76dc:	80 81       	ld	r24, Z
    76de:	80 64       	ori	r24, 0x40	; 64
    76e0:	80 83       	st	Z, r24
}
    76e2:	08 95       	ret

000076e4 <PatchCommand07>:
 * Command 07: Set envelope volume
 * Param:
 */

void PatchCommand07(Track* track, char param){
	track->envelopeVol=param;
    76e4:	fc 01       	movw	r30, r24
    76e6:	66 87       	std	Z+14, r22	; 0x0e
}
    76e8:	08 95       	ret

000076ea <PatchCommand08>:
/*
 * Command 08: Set Note/Pitch
 * Param:
 */

void PatchCommand08(Track* track, char param){
    76ea:	ff 92       	push	r15
    76ec:	0f 93       	push	r16
    76ee:	1f 93       	push	r17
    76f0:	8c 01       	movw	r16, r24
    76f2:	f6 2e       	mov	r15, r22
	SetMixerNote(track->channel,param);
    76f4:	fc 01       	movw	r30, r24
    76f6:	82 81       	ldd	r24, Z+2	; 0x02
    76f8:	0e 94 85 3f 	call	0x7f0a	; 0x7f0a <SetMixerNote>
	track->note=param;
    76fc:	f8 01       	movw	r30, r16
    76fe:	f1 82       	std	Z+1, r15	; 0x01
	track->flags &= ~(TRACK_FLAGS_SLIDING);	
    7700:	80 81       	ld	r24, Z
    7702:	87 7f       	andi	r24, 0xF7	; 247
    7704:	80 83       	st	Z, r24
}
    7706:	1f 91       	pop	r17
    7708:	0f 91       	pop	r16
    770a:	ff 90       	pop	r15
    770c:	08 95       	ret

0000770e <PatchCommand09>:
 * Command 09: Set tremolo level
 * Param:
*/

void PatchCommand09(Track* track, char param){
	track->tremoloLevel=param;
    770e:	fc 01       	movw	r30, r24
    7710:	62 87       	std	Z+10, r22	; 0x0a
}
    7712:	08 95       	ret

00007714 <PatchCommand10>:
/*
 * Command 10: Set tremolo rate
 * Param:
*/
void PatchCommand10(Track* track, char param){
	track->tremoloRate=param;
    7714:	fc 01       	movw	r30, r24
    7716:	63 87       	std	Z+11, r22	; 0x0b
}
    7718:	08 95       	ret

0000771a <PatchCommand11>:
/*
 * Command 11: Pitch slide (linear) 
 * Param: (+/-) half steps to slide to
*/

void PatchCommand11(Track* track, char param){
    771a:	cf 93       	push	r28
    771c:	df 93       	push	r29
    771e:	ec 01       	movw	r28, r24
    7720:	46 2f       	mov	r20, r22
	//slide to note from current note
	s16 currentStep,targetStep,delta;	
	
	currentStep=pgm_read_word(&(steptable[track->note]));
    7722:	89 81       	ldd	r24, Y+1	; 0x01
    7724:	90 e0       	ldi	r25, 0x00	; 0
    7726:	fc 01       	movw	r30, r24
    7728:	ee 0f       	add	r30, r30
    772a:	ff 1f       	adc	r31, r31
    772c:	e8 5f       	subi	r30, 0xF8	; 248
    772e:	ff 47       	sbci	r31, 0x7F	; 127
    7730:	25 91       	lpm	r18, Z+
    7732:	34 91       	lpm	r19, Z+
	targetStep=pgm_read_word(&(steptable[track->note+param]));	
    7734:	e6 2f       	mov	r30, r22
    7736:	ff 27       	eor	r31, r31
    7738:	e7 fd       	sbrc	r30, 7
    773a:	f0 95       	com	r31
    773c:	e8 0f       	add	r30, r24
    773e:	f9 1f       	adc	r31, r25
    7740:	ee 0f       	add	r30, r30
    7742:	ff 1f       	adc	r31, r31
    7744:	e8 5f       	subi	r30, 0xF8	; 248
    7746:	ff 47       	sbci	r31, 0x7F	; 127
    7748:	85 91       	lpm	r24, Z+
    774a:	94 91       	lpm	r25, Z+
	delta=((targetStep-currentStep)/track->slideSpeed);
    774c:	68 85       	ldd	r22, Y+8	; 0x08
    774e:	82 1b       	sub	r24, r18
    7750:	93 0b       	sbc	r25, r19
    7752:	70 e0       	ldi	r23, 0x00	; 0
    7754:	0e 94 96 57 	call	0xaf2c	; 0xaf2c <__divmodhi4>
    7758:	9b 01       	movw	r18, r22
	if(delta==0)delta++;
    775a:	61 15       	cp	r22, r1
    775c:	71 05       	cpc	r23, r1
    775e:	11 f4       	brne	.+4      	; 0x7764 <PatchCommand11+0x4a>
    7760:	21 e0       	ldi	r18, 0x01	; 1
    7762:	30 e0       	ldi	r19, 0x00	; 0

	mixer.channels.all[track->channel].step+=delta;
    7764:	8a 81       	ldd	r24, Y+2	; 0x02
    7766:	90 e0       	ldi	r25, 0x00	; 0
    7768:	fc 01       	movw	r30, r24
    776a:	ee 0f       	add	r30, r30
    776c:	ff 1f       	adc	r31, r31
    776e:	e8 0f       	add	r30, r24
    7770:	f9 1f       	adc	r31, r25
    7772:	ee 0f       	add	r30, r30
    7774:	ff 1f       	adc	r31, r31
    7776:	ef 55       	subi	r30, 0x5F	; 95
    7778:	f3 4f       	sbci	r31, 0xF3	; 243
    777a:	81 81       	ldd	r24, Z+1	; 0x01
    777c:	92 81       	ldd	r25, Z+2	; 0x02
    777e:	82 0f       	add	r24, r18
    7780:	93 1f       	adc	r25, r19
    7782:	92 83       	std	Z+2, r25	; 0x02
    7784:	81 83       	std	Z+1, r24	; 0x01
	
	track->slideStep=delta;
    7786:	3e 83       	std	Y+6, r19	; 0x06
    7788:	2d 83       	std	Y+5, r18	; 0x05
	track->flags|=TRACK_FLAGS_SLIDING;
    778a:	88 81       	ld	r24, Y
    778c:	88 60       	ori	r24, 0x08	; 8
    778e:	88 83       	st	Y, r24
	track->slideNote=track->note+param;
    7790:	89 81       	ldd	r24, Y+1	; 0x01
    7792:	84 0f       	add	r24, r20
    7794:	8f 83       	std	Y+7, r24	; 0x07
}
    7796:	df 91       	pop	r29
    7798:	cf 91       	pop	r28
    779a:	08 95       	ret

0000779c <PatchCommand12>:
/*
 * Command 12: Pitch slide speed 
 * Param: slide speed (fixed 4:4)
 */
void PatchCommand12(Track* track, char param){
	track->slideSpeed=param;
    779c:	fc 01       	movw	r30, r24
    779e:	60 87       	std	Z+8, r22	; 0x08
}
    77a0:	08 95       	ret

000077a2 <PatchCommand13>:
 *  Command 13: Loop start
 * Description: Defines the start of a loop. Works in conjunction with command 14 (PC_LOOP_END).
 *		 Param: loop count
 */
void PatchCommand13(Track* track, char param){
	track->loopCount=(u8)param;
    77a2:	fc 01       	movw	r30, r24
    77a4:	64 83       	std	Z+4, r22	; 0x04
}
    77a6:	08 95       	ret

000077a8 <PatchCommand14>:
 *					1,PC_NOTE_DOWN,3,
 *					0,PC_LOOP_END,2,
 *					0,PATCH_END  
 *				};
 */
void PatchCommand14(Track* track, char param){
    77a8:	dc 01       	movw	r26, r24
	if(track->loopCount>0){
    77aa:	14 96       	adiw	r26, 0x04	; 4
    77ac:	8c 91       	ld	r24, X
    77ae:	14 97       	sbiw	r26, 0x04	; 4
    77b0:	88 23       	and	r24, r24
    77b2:	31 f1       	breq	.+76     	; 0x7800 <PatchCommand14+0x58>
    77b4:	55 96       	adiw	r26, 0x15	; 21
    77b6:	ed 91       	ld	r30, X+
    77b8:	fc 91       	ld	r31, X
    77ba:	56 97       	sbiw	r26, 0x16	; 22
		//track->patchCommandStreamPos=track->loopStart;
		if(param!=0){
    77bc:	66 23       	and	r22, r22
    77be:	71 f0       	breq	.+28     	; 0x77dc <PatchCommand14+0x34>
			track->patchCommandStreamPos-=((param+1)*3);
    77c0:	26 2f       	mov	r18, r22
    77c2:	33 27       	eor	r19, r19
    77c4:	27 fd       	sbrc	r18, 7
    77c6:	30 95       	com	r19
    77c8:	20 95       	com	r18
    77ca:	30 95       	com	r19
    77cc:	c9 01       	movw	r24, r18
    77ce:	88 0f       	add	r24, r24
    77d0:	99 1f       	adc	r25, r25
    77d2:	82 0f       	add	r24, r18
    77d4:	93 1f       	adc	r25, r19
    77d6:	e8 0f       	add	r30, r24
    77d8:	f9 1f       	adc	r31, r25
    77da:	08 c0       	rjmp	.+16     	; 0x77ec <PatchCommand14+0x44>
 *					1,PC_NOTE_DOWN,3,
 *					0,PC_LOOP_END,2,
 *					0,PATCH_END  
 *				};
 */
void PatchCommand14(Track* track, char param){
    77dc:	33 97       	sbiw	r30, 0x03	; 3
			track->patchCommandStreamPos-=((param+1)*3);
		}else{
			u8 command;
			while(1){
				track->patchCommandStreamPos-=3;
				command=pgm_read_byte(track->patchCommandStreamPos-3+1);
    77de:	32 97       	sbiw	r30, 0x02	; 2
    77e0:	84 91       	lpm	r24, Z+
    77e2:	32 96       	adiw	r30, 0x02	; 2
				
				//if we found the loop point or somehow reached the previous patch, exit
				if(command==PC_LOOP_START || command==PATCH_END) break;				
    77e4:	8d 30       	cpi	r24, 0x0D	; 13
    77e6:	11 f0       	breq	.+4      	; 0x77ec <PatchCommand14+0x44>
    77e8:	8f 3f       	cpi	r24, 0xFF	; 255
    77ea:	c1 f7       	brne	.-16     	; 0x77dc <PatchCommand14+0x34>
    77ec:	56 96       	adiw	r26, 0x16	; 22
    77ee:	fc 93       	st	X, r31
    77f0:	ee 93       	st	-X, r30
    77f2:	55 97       	sbiw	r26, 0x15	; 21
			}
		}
		track->loopCount--;
    77f4:	14 96       	adiw	r26, 0x04	; 4
    77f6:	8c 91       	ld	r24, X
    77f8:	14 97       	sbiw	r26, 0x04	; 4
    77fa:	81 50       	subi	r24, 0x01	; 1
    77fc:	14 96       	adiw	r26, 0x04	; 4
    77fe:	8c 93       	st	X, r24
    7800:	08 95       	ret

00007802 <InitMusicPlayer>:

const Patch *patchPointers;

void InitMusicPlayer(const Patch *patchPointersParam){

	patchPointers=patchPointersParam;
    7802:	90 93 44 0d 	sts	0x0D44, r25
    7806:	80 93 43 0d 	sts	0x0D43, r24

	masterVolume=DEFAULT_MASTER_VOL;
    780a:	8f e6       	ldi	r24, 0x6F	; 111
    780c:	80 93 67 0d 	sts	0x0D67, r24
#if MIDI_IN == ENABLED
	InitUartRxBuffer();
	lastMidiInStatus=0;
#endif

	playSong=false;
    7810:	10 92 c5 0c 	sts	0x0CC5, r1
    7814:	ed ec       	ldi	r30, 0xCD	; 205
    7816:	fc e0       	ldi	r31, 0x0C	; 12
    7818:	80 e0       	ldi	r24, 0x00	; 0

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
		tracks[t].channel=t;
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    781a:	90 e1       	ldi	r25, 0x10	; 16
		tracks[t].noteVol=0;
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    781c:	3f ef       	ldi	r19, 0xFF	; 255
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
    781e:	28 e1       	ldi	r18, 0x18	; 24

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
		tracks[t].channel=t;
    7820:	82 83       	std	Z+2, r24	; 0x02
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    7822:	90 83       	st	Z, r25
		tracks[t].noteVol=0;
    7824:	15 86       	std	Z+13, r1	; 0x0d
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    7826:	34 87       	std	Z+12, r19	; 0x0c
		tracks[t].patchNo=DEFAULT_PATCH;
    7828:	10 8a       	std	Z+16, r1	; 0x10
		tracks[t].tremoloRate=24; //~6hz
    782a:	23 87       	std	Z+11, r18	; 0x0b
		tracks[t].slideSpeed=0x10;
    782c:	90 87       	std	Z+8, r25	; 0x08
#endif

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    782e:	8f 5f       	subi	r24, 0xFF	; 255
    7830:	77 96       	adiw	r30, 0x17	; 23
    7832:	85 30       	cpi	r24, 0x05	; 5
    7834:	a9 f7       	brne	.-22     	; 0x7820 <InitMusicPlayer+0x1e>
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
		tracks[t].slideSpeed=0x10;
	}

}
    7836:	08 95       	ret

00007838 <StartSong>:
		lastStatus=0;
		playSong=true;
	}

#elif MUSIC_ENGINE == SD
	void StartSong(const char *song){
    7838:	9c 01       	movw	r18, r24
    783a:	ed ec       	ldi	r30, 0xCD	; 205
    783c:	fc e0       	ldi	r31, 0x0C	; 12
		for(unsigned char t=0;t<CHANNELS;t++){
			tracks[t].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
			tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    783e:	9f ef       	ldi	r25, 0xFF	; 255
	}

#elif MUSIC_ENGINE == SD
	void StartSong(const char *song){
		for(unsigned char t=0;t<CHANNELS;t++){
			tracks[t].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    7840:	80 81       	ld	r24, Z
    7842:	8f 77       	andi	r24, 0x7F	; 127
    7844:	80 83       	st	Z, r24
			tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    7846:	93 83       	std	Z+3, r25	; 0x03
    7848:	77 96       	adiw	r30, 0x17	; 23
		playSong=true;
	}

#elif MUSIC_ENGINE == SD
	void StartSong(const char *song){
		for(unsigned char t=0;t<CHANNELS;t++){
    784a:	8d e0       	ldi	r24, 0x0D	; 13
    784c:	e0 34       	cpi	r30, 0x40	; 64
    784e:	f8 07       	cpc	r31, r24
    7850:	b9 f7       	brne	.-18     	; 0x7840 <StartSong+0x8>
			tracks[t].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
			tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
		}

		songPos=song+1; //skip first delta-time
    7852:	c9 01       	movw	r24, r18
    7854:	01 96       	adiw	r24, 0x01	; 1
    7856:	90 93 6d 0d 	sts	0x0D6D, r25
    785a:	80 93 6c 0d 	sts	0x0D6C, r24
		songStart=song+1;//skip first delta-time
    785e:	90 93 cc 0c 	sts	0x0CCC, r25
    7862:	80 93 cb 0c 	sts	0x0CCB, r24
		loopStart=song+1;
    7866:	90 93 6f 0d 	sts	0x0D6F, r25
    786a:	80 93 6e 0d 	sts	0x0D6E, r24
		nextDeltaTime=0;
    786e:	10 92 6a 0d 	sts	0x0D6A, r1
    7872:	10 92 69 0d 	sts	0x0D69, r1
		currDeltaTime=0;
    7876:	10 92 42 0d 	sts	0x0D42, r1
    787a:	10 92 41 0d 	sts	0x0D41, r1
		songSpeed=0;
    787e:	10 92 6b 0d 	sts	0x0D6B, r1

		lastStatus=0;
    7882:	10 92 46 0d 	sts	0x0D46, r1
		playSong=true;
    7886:	81 e0       	ldi	r24, 0x01	; 1
    7888:	80 93 c5 0c 	sts	0x0CC5, r24
	}
    788c:	08 95       	ret

0000788e <StopSong>:


void StopSong(){

	for(u8 i=0;i<CHANNELS;i++){
		tracks[i].envelopeStep=-6;
    788e:	8a ef       	ldi	r24, 0xFA	; 250
    7890:	80 93 dc 0c 	sts	0x0CDC, r24
    7894:	80 93 f3 0c 	sts	0x0CF3, r24
    7898:	80 93 0a 0d 	sts	0x0D0A, r24
    789c:	80 93 21 0d 	sts	0x0D21, r24
    78a0:	80 93 38 0d 	sts	0x0D38, r24
	}

	playSong=false;
    78a4:	10 92 c5 0c 	sts	0x0CC5, r1
}
    78a8:	08 95       	ret

000078aa <ProcessMusic>:
	}

#endif


void ProcessMusic(void){
    78aa:	a0 e0       	ldi	r26, 0x00	; 0
    78ac:	b0 e0       	ldi	r27, 0x00	; 0
    78ae:	eb e5       	ldi	r30, 0x5B	; 91
    78b0:	fc e3       	ldi	r31, 0x3C	; 60
    78b2:	0c 94 b3 57 	jmp	0xaf66	; 0xaf66 <__prologue_saves__+0x14>
    78b6:	ad ec       	ldi	r26, 0xCD	; 205
    78b8:	bc e0       	ldi	r27, 0x0C	; 12
    78ba:	c2 ea       	ldi	r28, 0xA2	; 162
    78bc:	dc e0       	ldi	r29, 0x0C	; 12
	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//update envelope
		if(track->envelopeStep!=0){
    78be:	1f 96       	adiw	r26, 0x0f	; 15
    78c0:	8c 91       	ld	r24, X
    78c2:	1f 97       	sbiw	r26, 0x0f	; 15
    78c4:	88 23       	and	r24, r24
    78c6:	b9 f0       	breq	.+46     	; 0x78f6 <ProcessMusic+0x4c>
			vol=track->envelopeVol+track->envelopeStep;		
    78c8:	28 2f       	mov	r18, r24
    78ca:	33 27       	eor	r19, r19
    78cc:	27 fd       	sbrc	r18, 7
    78ce:	30 95       	com	r19
    78d0:	1e 96       	adiw	r26, 0x0e	; 14
    78d2:	8c 91       	ld	r24, X
    78d4:	1e 97       	sbiw	r26, 0x0e	; 14
    78d6:	28 0f       	add	r18, r24
    78d8:	31 1d       	adc	r19, r1
    78da:	2f 3f       	cpi	r18, 0xFF	; 255
    78dc:	31 05       	cpc	r19, r1
    78de:	19 f0       	breq	.+6      	; 0x78e6 <ProcessMusic+0x3c>
    78e0:	14 f0       	brlt	.+4      	; 0x78e6 <ProcessMusic+0x3c>
    78e2:	2f ef       	ldi	r18, 0xFF	; 255
    78e4:	30 e0       	ldi	r19, 0x00	; 0
			if(vol<0){
				vol=0;			
			}else if(vol>0xff){
				vol=0xff;						
			}
			track->envelopeVol=vol;
    78e6:	c9 01       	movw	r24, r18
    78e8:	37 ff       	sbrs	r19, 7
    78ea:	02 c0       	rjmp	.+4      	; 0x78f0 <ProcessMusic+0x46>
    78ec:	80 e0       	ldi	r24, 0x00	; 0
    78ee:	90 e0       	ldi	r25, 0x00	; 0
    78f0:	1e 96       	adiw	r26, 0x0e	; 14
    78f2:	8c 93       	st	X, r24
    78f4:	1e 97       	sbiw	r26, 0x0e	; 14
		}

		//if volumes reaches zero and no more patch command, explicitly end playing on track
		//if(vol==0 && track->patchCommandStreamPos==NULL) track->flags&=~(TRACK_FLAGS_PLAYING);

		if(track->flags & TRACK_FLAGS_SLIDING){
    78f6:	8c 91       	ld	r24, X
    78f8:	83 ff       	sbrs	r24, 3
    78fa:	26 c0       	rjmp	.+76     	; 0x7948 <ProcessMusic+0x9e>

			mixer.channels.all[trackNo].step+=track->slideStep;
    78fc:	15 96       	adiw	r26, 0x05	; 5
    78fe:	4d 91       	ld	r20, X+
    7900:	5c 91       	ld	r21, X
    7902:	16 97       	sbiw	r26, 0x06	; 6
    7904:	28 81       	ld	r18, Y
    7906:	39 81       	ldd	r19, Y+1	; 0x01
    7908:	24 0f       	add	r18, r20
    790a:	35 1f       	adc	r19, r21
    790c:	39 83       	std	Y+1, r19	; 0x01
    790e:	28 83       	st	Y, r18
			u16 tStep=pgm_read_word(&(steptable[track->slideNote]));
    7910:	17 96       	adiw	r26, 0x07	; 7
    7912:	8c 91       	ld	r24, X
    7914:	17 97       	sbiw	r26, 0x07	; 7
    7916:	e8 2f       	mov	r30, r24
    7918:	f0 e0       	ldi	r31, 0x00	; 0
    791a:	ee 0f       	add	r30, r30
    791c:	ff 1f       	adc	r31, r31
    791e:	e8 5f       	subi	r30, 0xF8	; 248
    7920:	ff 47       	sbci	r31, 0x7F	; 127
    7922:	85 91       	lpm	r24, Z+
    7924:	94 91       	lpm	r25, Z+

			if((track->slideStep>0 && mixer.channels.all[trackNo].step>=tStep) || 
    7926:	14 16       	cp	r1, r20
    7928:	15 06       	cpc	r1, r21
    792a:	24 f4       	brge	.+8      	; 0x7934 <ProcessMusic+0x8a>
    792c:	28 17       	cp	r18, r24
    792e:	39 07       	cpc	r19, r25
    7930:	30 f4       	brcc	.+12     	; 0x793e <ProcessMusic+0x94>
    7932:	0a c0       	rjmp	.+20     	; 0x7948 <ProcessMusic+0x9e>
    7934:	45 2b       	or	r20, r21
    7936:	41 f0       	breq	.+16     	; 0x7948 <ProcessMusic+0x9e>
    7938:	82 17       	cp	r24, r18
    793a:	93 07       	cpc	r25, r19
    793c:	28 f0       	brcs	.+10     	; 0x7948 <ProcessMusic+0x9e>
				(track->slideStep<0 && mixer.channels.all[trackNo].step<=tStep))
			{					
				mixer.channels.all[trackNo].step = tStep;					
    793e:	99 83       	std	Y+1, r25	; 0x01
    7940:	88 83       	st	Y, r24
				track->flags &= ~(TRACK_FLAGS_SLIDING);	
    7942:	8c 91       	ld	r24, X
    7944:	87 7f       	andi	r24, 0xF7	; 247
    7946:	8c 93       	st	X, r24
    7948:	57 96       	adiw	r26, 0x17	; 23
    794a:	26 96       	adiw	r28, 0x06	; 6
	u8 channel;
	Track* track;


	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    794c:	4d e0       	ldi	r20, 0x0D	; 13
    794e:	a0 34       	cpi	r26, 0x40	; 64
    7950:	b4 07       	cpc	r27, r20
    7952:	09 f0       	breq	.+2      	; 0x7956 <ProcessMusic+0xac>
    7954:	b4 cf       	rjmp	.-152    	; 0x78be <ProcessMusic+0x14>
	}



	//Process song MIDI notes
	if(playSong){
    7956:	80 91 c5 0c 	lds	r24, 0x0CC5
    795a:	88 23       	and	r24, r24
    795c:	09 f0       	breq	.+2      	; 0x7960 <ProcessMusic+0xb6>
    795e:	0a c1       	rjmp	.+532    	; 0x7b74 <ProcessMusic+0x2ca>
    7960:	20 c1       	rjmp	.+576    	; 0x7ba2 <ProcessMusic+0x2f8>


        //process all simultaneous events
         while(currDeltaTime==nextDeltaTime){

            c1=song_buffer_read_byte();
    7962:	0e 94 e2 3a 	call	0x75c4	; 0x75c4 <song_buffer_read_byte>
    7966:	18 2f       	mov	r17, r24
            songPos++;
    7968:	80 91 6c 0d 	lds	r24, 0x0D6C
    796c:	90 91 6d 0d 	lds	r25, 0x0D6D
    7970:	01 96       	adiw	r24, 0x01	; 1
    7972:	90 93 6d 0d 	sts	0x0D6D, r25
    7976:	80 93 6c 0d 	sts	0x0D6C, r24

            if(c1==0xff){
    797a:	1f 3f       	cpi	r17, 0xFF	; 255
    797c:	f1 f5       	brne	.+124    	; 0x79fa <ProcessMusic+0x150>
               //META data type event
               c1=song_buffer_read_byte();
    797e:	0e 94 e2 3a 	call	0x75c4	; 0x75c4 <song_buffer_read_byte>
    7982:	28 2f       	mov	r18, r24
               songPos++;
    7984:	80 91 6c 0d 	lds	r24, 0x0D6C
    7988:	90 91 6d 0d 	lds	r25, 0x0D6D
    798c:	01 96       	adiw	r24, 0x01	; 1
    798e:	90 93 6d 0d 	sts	0x0D6D, r25
    7992:	80 93 6c 0d 	sts	0x0D6C, r24

            
               if(c1==0x2f){ //end of song
    7996:	2f 32       	cpi	r18, 0x2F	; 47
    7998:	19 f4       	brne	.+6      	; 0x79a0 <ProcessMusic+0xf6>
                  playSong=false;
    799a:	10 92 c5 0c 	sts	0x0CC5, r1
    799e:	f8 c0       	rjmp	.+496    	; 0x7b90 <ProcessMusic+0x2e6>
                  break;   
               }else if(c1==0x6){ //marker
    79a0:	26 30       	cpi	r18, 0x06	; 6
    79a2:	09 f0       	breq	.+2      	; 0x79a6 <ProcessMusic+0xfc>
    79a4:	c6 c0       	rjmp	.+396    	; 0x7b32 <ProcessMusic+0x288>
                  c1=song_buffer_read_byte();//read len
    79a6:	0e 94 e2 3a 	call	0x75c4	; 0x75c4 <song_buffer_read_byte>
                  songPos++;
    79aa:	80 91 6c 0d 	lds	r24, 0x0D6C
    79ae:	90 91 6d 0d 	lds	r25, 0x0D6D
    79b2:	01 96       	adiw	r24, 0x01	; 1
    79b4:	90 93 6d 0d 	sts	0x0D6D, r25
    79b8:	80 93 6c 0d 	sts	0x0D6C, r24
                  c2=song_buffer_read_byte();//read data
    79bc:	0e 94 e2 3a 	call	0x75c4	; 0x75c4 <song_buffer_read_byte>
                  songPos++;
    79c0:	20 91 6c 0d 	lds	r18, 0x0D6C
    79c4:	30 91 6d 0d 	lds	r19, 0x0D6D
    79c8:	2f 5f       	subi	r18, 0xFF	; 255
    79ca:	3f 4f       	sbci	r19, 0xFF	; 255
    79cc:	30 93 6d 0d 	sts	0x0D6D, r19
    79d0:	20 93 6c 0d 	sts	0x0D6C, r18
                  if(c2=='S'){ //loop start
    79d4:	83 35       	cpi	r24, 0x53	; 83
    79d6:	29 f4       	brne	.+10     	; 0x79e2 <ProcessMusic+0x138>
                     loopStart=songPos;
    79d8:	30 93 6f 0d 	sts	0x0D6F, r19
    79dc:	20 93 6e 0d 	sts	0x0D6E, r18
    79e0:	a8 c0       	rjmp	.+336    	; 0x7b32 <ProcessMusic+0x288>
                  }else if(c2=='E'){//loop end
    79e2:	85 34       	cpi	r24, 0x45	; 69
    79e4:	09 f0       	breq	.+2      	; 0x79e8 <ProcessMusic+0x13e>
    79e6:	a5 c0       	rjmp	.+330    	; 0x7b32 <ProcessMusic+0x288>
                     songPos=loopStart;
    79e8:	80 91 6e 0d 	lds	r24, 0x0D6E
    79ec:	90 91 6f 0d 	lds	r25, 0x0D6F
    79f0:	90 93 6d 0d 	sts	0x0D6D, r25
    79f4:	80 93 6c 0d 	sts	0x0D6C, r24
    79f8:	9c c0       	rjmp	.+312    	; 0x7b32 <ProcessMusic+0x288>
               }
            

            }else{

               if(c1&0x80) lastStatus=c1;               
    79fa:	17 ff       	sbrs	r17, 7
    79fc:	02 c0       	rjmp	.+4      	; 0x7a02 <ProcessMusic+0x158>
    79fe:	10 93 46 0d 	sts	0x0D46, r17
               channel=lastStatus&0x0f;
    7a02:	00 91 46 0d 	lds	r16, 0x0D46
    7a06:	0f 70       	andi	r16, 0x0F	; 15
            
               //get next data byte
               //Note: maybe we should not advance the cursor
               //in case we receive an unsupported command            
               if(c1&0x80){
    7a08:	17 ff       	sbrs	r17, 7
    7a0a:	0c c0       	rjmp	.+24     	; 0x7a24 <ProcessMusic+0x17a>
                  c1=song_buffer_read_byte();
    7a0c:	0e 94 e2 3a 	call	0x75c4	; 0x75c4 <song_buffer_read_byte>
    7a10:	18 2f       	mov	r17, r24
                  songPos++;
    7a12:	80 91 6c 0d 	lds	r24, 0x0D6C
    7a16:	90 91 6d 0d 	lds	r25, 0x0D6D
    7a1a:	01 96       	adiw	r24, 0x01	; 1
    7a1c:	90 93 6d 0d 	sts	0x0D6D, r25
    7a20:	80 93 6c 0d 	sts	0x0D6C, r24
               }

               switch(lastStatus&0xf0){
    7a24:	80 91 46 0d 	lds	r24, 0x0D46
    7a28:	90 e0       	ldi	r25, 0x00	; 0
    7a2a:	80 7f       	andi	r24, 0xF0	; 240
    7a2c:	90 70       	andi	r25, 0x00	; 0
    7a2e:	80 3b       	cpi	r24, 0xB0	; 176
    7a30:	91 05       	cpc	r25, r1
    7a32:	39 f1       	breq	.+78     	; 0x7a82 <ProcessMusic+0x1d8>
    7a34:	80 3c       	cpi	r24, 0xC0	; 192
    7a36:	91 05       	cpc	r25, r1
    7a38:	09 f4       	brne	.+2      	; 0x7a3c <ProcessMusic+0x192>
    7a3a:	6f c0       	rjmp	.+222    	; 0x7b1a <ProcessMusic+0x270>
    7a3c:	80 39       	cpi	r24, 0x90	; 144
    7a3e:	91 05       	cpc	r25, r1
    7a40:	09 f0       	breq	.+2      	; 0x7a44 <ProcessMusic+0x19a>
    7a42:	77 c0       	rjmp	.+238    	; 0x7b32 <ProcessMusic+0x288>

                  //note-on
                  case 0x90:
                     //c1 = note                  
                     c2=song_buffer_read_byte()<<1;//get volume
    7a44:	0e 94 e2 3a 	call	0x75c4	; 0x75c4 <song_buffer_read_byte>
                     songPos++;
    7a48:	20 91 6c 0d 	lds	r18, 0x0D6C
    7a4c:	30 91 6d 0d 	lds	r19, 0x0D6D
    7a50:	2f 5f       	subi	r18, 0xFF	; 255
    7a52:	3f 4f       	sbci	r19, 0xFF	; 255
    7a54:	30 93 6d 0d 	sts	0x0D6D, r19
    7a58:	20 93 6c 0d 	sts	0x0D6C, r18
                  
                     if(tracks[channel].flags|TRACK_FLAGS_ALLOCATED){ //allocated==true
                        TriggerNote(channel,tracks[channel].patchNo,c1,c2);
    7a5c:	20 2f       	mov	r18, r16
    7a5e:	30 e0       	ldi	r19, 0x00	; 0
    7a60:	2c 9f       	mul	r18, r28
    7a62:	f0 01       	movw	r30, r0
    7a64:	2d 9f       	mul	r18, r29
    7a66:	f0 0d       	add	r31, r0
    7a68:	3c 9f       	mul	r19, r28
    7a6a:	f0 0d       	add	r31, r0
    7a6c:	11 24       	eor	r1, r1
    7a6e:	e3 53       	subi	r30, 0x33	; 51
    7a70:	f3 4f       	sbci	r31, 0xF3	; 243
    7a72:	28 2f       	mov	r18, r24
    7a74:	22 0f       	add	r18, r18
    7a76:	80 2f       	mov	r24, r16
    7a78:	60 89       	ldd	r22, Z+16	; 0x10
    7a7a:	41 2f       	mov	r20, r17
    7a7c:	0e 94 5b 3f 	call	0x7eb6	; 0x7eb6 <TriggerNote>
    7a80:	58 c0       	rjmp	.+176    	; 0x7b32 <ProcessMusic+0x288>
                     break;

                  //controllers
                  case 0xb0:
                     ///c1 = controller #
                     c2=song_buffer_read_byte();//get controller value
    7a82:	0e 94 e2 3a 	call	0x75c4	; 0x75c4 <song_buffer_read_byte>
    7a86:	28 2f       	mov	r18, r24
                     songPos++;
    7a88:	80 91 6c 0d 	lds	r24, 0x0D6C
    7a8c:	90 91 6d 0d 	lds	r25, 0x0D6D
    7a90:	01 96       	adiw	r24, 0x01	; 1
    7a92:	90 93 6d 0d 	sts	0x0D6D, r25
    7a96:	80 93 6c 0d 	sts	0x0D6C, r24
                  
                     if(c1==CONTROLER_VOL){
    7a9a:	17 30       	cpi	r17, 0x07	; 7
    7a9c:	71 f4       	brne	.+28     	; 0x7aba <ProcessMusic+0x210>
                        tracks[channel].trackVol=c2<<1;
    7a9e:	80 2f       	mov	r24, r16
    7aa0:	90 e0       	ldi	r25, 0x00	; 0
    7aa2:	8c 9f       	mul	r24, r28
    7aa4:	f0 01       	movw	r30, r0
    7aa6:	8d 9f       	mul	r24, r29
    7aa8:	f0 0d       	add	r31, r0
    7aaa:	9c 9f       	mul	r25, r28
    7aac:	f0 0d       	add	r31, r0
    7aae:	11 24       	eor	r1, r1
    7ab0:	e3 53       	subi	r30, 0x33	; 51
    7ab2:	f3 4f       	sbci	r31, 0xF3	; 243
    7ab4:	22 0f       	add	r18, r18
    7ab6:	24 87       	std	Z+12, r18	; 0x0c
    7ab8:	3c c0       	rjmp	.+120    	; 0x7b32 <ProcessMusic+0x288>
                     }else if(c1==CONTROLER_EXPRESSION){
    7aba:	1b 30       	cpi	r17, 0x0B	; 11
    7abc:	71 f4       	brne	.+28     	; 0x7ada <ProcessMusic+0x230>
                        tracks[channel].expressionVol=c2<<1;
    7abe:	80 2f       	mov	r24, r16
    7ac0:	90 e0       	ldi	r25, 0x00	; 0
    7ac2:	8c 9f       	mul	r24, r28
    7ac4:	f0 01       	movw	r30, r0
    7ac6:	8d 9f       	mul	r24, r29
    7ac8:	f0 0d       	add	r31, r0
    7aca:	9c 9f       	mul	r25, r28
    7acc:	f0 0d       	add	r31, r0
    7ace:	11 24       	eor	r1, r1
    7ad0:	e3 53       	subi	r30, 0x33	; 51
    7ad2:	f3 4f       	sbci	r31, 0xF3	; 243
    7ad4:	22 0f       	add	r18, r18
    7ad6:	23 83       	std	Z+3, r18	; 0x03
    7ad8:	2c c0       	rjmp	.+88     	; 0x7b32 <ProcessMusic+0x288>
                     }else if(c1==CONTROLER_TREMOLO){
    7ada:	1c 35       	cpi	r17, 0x5C	; 92
    7adc:	71 f4       	brne	.+28     	; 0x7afa <ProcessMusic+0x250>
                        tracks[channel].tremoloLevel=c2<<1;
    7ade:	80 2f       	mov	r24, r16
    7ae0:	90 e0       	ldi	r25, 0x00	; 0
    7ae2:	8c 9f       	mul	r24, r28
    7ae4:	f0 01       	movw	r30, r0
    7ae6:	8d 9f       	mul	r24, r29
    7ae8:	f0 0d       	add	r31, r0
    7aea:	9c 9f       	mul	r25, r28
    7aec:	f0 0d       	add	r31, r0
    7aee:	11 24       	eor	r1, r1
    7af0:	e3 53       	subi	r30, 0x33	; 51
    7af2:	f3 4f       	sbci	r31, 0xF3	; 243
    7af4:	22 0f       	add	r18, r18
    7af6:	22 87       	std	Z+10, r18	; 0x0a
    7af8:	1c c0       	rjmp	.+56     	; 0x7b32 <ProcessMusic+0x288>
                     }else if(c1==CONTROLER_TREMOLO_RATE){
    7afa:	14 36       	cpi	r17, 0x64	; 100
    7afc:	d1 f4       	brne	.+52     	; 0x7b32 <ProcessMusic+0x288>
                        tracks[channel].tremoloRate=c2<<1;
    7afe:	80 2f       	mov	r24, r16
    7b00:	90 e0       	ldi	r25, 0x00	; 0
    7b02:	8c 9f       	mul	r24, r28
    7b04:	f0 01       	movw	r30, r0
    7b06:	8d 9f       	mul	r24, r29
    7b08:	f0 0d       	add	r31, r0
    7b0a:	9c 9f       	mul	r25, r28
    7b0c:	f0 0d       	add	r31, r0
    7b0e:	11 24       	eor	r1, r1
    7b10:	e3 53       	subi	r30, 0x33	; 51
    7b12:	f3 4f       	sbci	r31, 0xF3	; 243
    7b14:	22 0f       	add	r18, r18
    7b16:	23 87       	std	Z+11, r18	; 0x0b
    7b18:	0c c0       	rjmp	.+24     	; 0x7b32 <ProcessMusic+0x288>
                     break;

                  //program change
                  case 0xc0:
                     // c1 = patch #                  
                     tracks[channel].patchNo=c1;
    7b1a:	80 2f       	mov	r24, r16
    7b1c:	90 e0       	ldi	r25, 0x00	; 0
    7b1e:	8c 9f       	mul	r24, r28
    7b20:	f0 01       	movw	r30, r0
    7b22:	8d 9f       	mul	r24, r29
    7b24:	f0 0d       	add	r31, r0
    7b26:	9c 9f       	mul	r25, r28
    7b28:	f0 0d       	add	r31, r0
    7b2a:	11 24       	eor	r1, r1
    7b2c:	e3 53       	subi	r30, 0x33	; 51
    7b2e:	f3 4f       	sbci	r31, 0xF3	; 243
    7b30:	10 8b       	std	Z+16, r17	; 0x10
            }//end if(c1==0xff)

            //read next delta time
            
///////////////////////////nextDeltaTime=ReadVarLen(&songPos);         
                u16 varlen = song_buffer_read_byte();
    7b32:	0e 94 e2 3a 	call	0x75c4	; 0x75c4 <song_buffer_read_byte>
            songPos++;
    7b36:	20 91 6c 0d 	lds	r18, 0x0D6C
    7b3a:	30 91 6d 0d 	lds	r19, 0x0D6D
    7b3e:	2f 5f       	subi	r18, 0xFF	; 255
    7b40:	3f 4f       	sbci	r19, 0xFF	; 255
    7b42:	30 93 6d 0d 	sts	0x0D6D, r19
    7b46:	20 93 6c 0d 	sts	0x0D6C, r18

            if(varlen & 0x80){
    7b4a:	87 ff       	sbrs	r24, 7
    7b4c:	0e c0       	rjmp	.+28     	; 0x7b6a <ProcessMusic+0x2c0>
               u8 var_t;
               varlen &= 0x7F;
               do{
                  var_t = song_buffer_read_byte();
    7b4e:	0e 94 e2 3a 	call	0x75c4	; 0x75c4 <song_buffer_read_byte>
                  songPos++;
    7b52:	20 91 6c 0d 	lds	r18, 0x0D6C
    7b56:	30 91 6d 0d 	lds	r19, 0x0D6D
    7b5a:	2f 5f       	subi	r18, 0xFF	; 255
    7b5c:	3f 4f       	sbci	r19, 0xFF	; 255
    7b5e:	30 93 6d 0d 	sts	0x0D6D, r19
    7b62:	20 93 6c 0d 	sts	0x0D6C, r18
                  varlen = (varlen<<7)+(var_t & 0x7F);
               }while(var_t & 0x80);
    7b66:	87 fd       	sbrc	r24, 7
    7b68:	f2 cf       	rjmp	.-28     	; 0x7b4e <ProcessMusic+0x2a4>
            }

/////////////////////////////////////

            currDeltaTime=0;
    7b6a:	10 92 42 0d 	sts	0x0D42, r1
    7b6e:	10 92 41 0d 	sts	0x0D41, r1
    7b72:	02 c0       	rjmp	.+4      	; 0x7b78 <ProcessMusic+0x2ce>
                     }else if(c1==CONTROLER_EXPRESSION){
                        tracks[channel].expressionVol=c2<<1;
                     }else if(c1==CONTROLER_TREMOLO){
                        tracks[channel].tremoloLevel=c2<<1;
                     }else if(c1==CONTROLER_TREMOLO_RATE){
                        tracks[channel].tremoloRate=c2<<1;
    7b74:	c7 e1       	ldi	r28, 0x17	; 23
    7b76:	d0 e0       	ldi	r29, 0x00	; 0




        //process all simultaneous events
         while(currDeltaTime==nextDeltaTime){
    7b78:	20 91 41 0d 	lds	r18, 0x0D41
    7b7c:	30 91 42 0d 	lds	r19, 0x0D42
    7b80:	80 91 69 0d 	lds	r24, 0x0D69
    7b84:	90 91 6a 0d 	lds	r25, 0x0D6A
    7b88:	28 17       	cp	r18, r24
    7b8a:	39 07       	cpc	r19, r25
    7b8c:	09 f4       	brne	.+2      	; 0x7b90 <ProcessMusic+0x2e6>
    7b8e:	e9 ce       	rjmp	.-558    	; 0x7962 <ProcessMusic+0xb8>
               }
            #endif

         }//end while
      
         currDeltaTime++;
    7b90:	80 91 41 0d 	lds	r24, 0x0D41
    7b94:	90 91 42 0d 	lds	r25, 0x0D42
    7b98:	01 96       	adiw	r24, 0x01	; 1
    7b9a:	90 93 42 0d 	sts	0x0D42, r25
    7b9e:	80 93 41 0d 	sts	0x0D41, r24
    7ba2:	cd ec       	ldi	r28, 0xCD	; 205
    7ba4:	dc e0       	ldi	r29, 0x0C	; 12
    7ba6:	01 ea       	ldi	r16, 0xA1	; 161
    7ba8:	1c e0       	ldi	r17, 0x0C	; 12
					tmp-=128; //convert to unsigned

					tVol=(track->tremoloLevel*tmp)+0x100;
					tVol>>=8;
					
					uVol=(uVol*(0xff-tVol))+0x100;
    7baa:	bf ef       	ldi	r27, 0xFF	; 255
    7bac:	cb 2e       	mov	r12, r27
    7bae:	d1 2c       	mov	r13, r1
               }
            #endif

         }//end while
      
         currDeltaTime++;
    7bb0:	7e 01       	movw	r14, r28
	//
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//process patch command stream
		if((track->flags & TRACK_FLAGS_PLAYING) && (track->patchCommandStreamPos!=NULL) && ((track->flags & TRACK_FLAGS_HOLD_ENV)==0)){
    7bb2:	88 81       	ld	r24, Y
    7bb4:	28 2f       	mov	r18, r24
    7bb6:	85 ff       	sbrs	r24, 5
    7bb8:	39 c0       	rjmp	.+114    	; 0x7c2c <ProcessMusic+0x382>
    7bba:	8d 89       	ldd	r24, Y+21	; 0x15
    7bbc:	9e 89       	ldd	r25, Y+22	; 0x16
    7bbe:	89 2b       	or	r24, r25
    7bc0:	09 f4       	brne	.+2      	; 0x7bc4 <ProcessMusic+0x31a>
    7bc2:	34 c0       	rjmp	.+104    	; 0x7c2c <ProcessMusic+0x382>
    7bc4:	26 ff       	sbrs	r18, 6
    7bc6:	2b c0       	rjmp	.+86     	; 0x7c1e <ProcessMusic+0x374>
    7bc8:	31 c0       	rjmp	.+98     	; 0x7c2c <ProcessMusic+0x382>

			//process all simultaneous events
			while(track->patchCurrDeltaTime==track->patchNextDeltaTime){

				c1=pgm_read_byte(track->patchCommandStreamPos++);
    7bca:	ed 89       	ldd	r30, Y+21	; 0x15
    7bcc:	fe 89       	ldd	r31, Y+22	; 0x16
    7bce:	cf 01       	movw	r24, r30
    7bd0:	01 96       	adiw	r24, 0x01	; 1
    7bd2:	9e 8b       	std	Y+22, r25	; 0x16
    7bd4:	8d 8b       	std	Y+21, r24	; 0x15
    7bd6:	24 91       	lpm	r18, Z+
				if(c1==PATCH_END){
    7bd8:	2f 3f       	cpi	r18, 0xFF	; 255
    7bda:	31 f4       	brne	.+12     	; 0x7be8 <ProcessMusic+0x33e>
					//end of stream!
					track->flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    7bdc:	88 81       	ld	r24, Y
    7bde:	8f 77       	andi	r24, 0x7F	; 127
    7be0:	88 83       	st	Y, r24
					track->patchCommandStreamPos=NULL;
    7be2:	1e 8a       	std	Y+22, r1	; 0x16
    7be4:	1d 8a       	std	Y+21, r1	; 0x15
    7be6:	1f c0       	rjmp	.+62     	; 0x7c26 <ProcessMusic+0x37c>
					break;

				}else{
					c2=pgm_read_byte(track->patchCommandStreamPos++);
    7be8:	01 96       	adiw	r24, 0x01	; 1
    7bea:	9e 8b       	std	Y+22, r25	; 0x16
    7bec:	8d 8b       	std	Y+21, r24	; 0x15
    7bee:	01 97       	sbiw	r24, 0x01	; 1
    7bf0:	fc 01       	movw	r30, r24
    7bf2:	64 91       	lpm	r22, Z+
					//invoke patch command function
					((PatchCommand)pgm_read_word(&patchCommands[c1]))(track,c2);
    7bf4:	82 2f       	mov	r24, r18
    7bf6:	90 e0       	ldi	r25, 0x00	; 0
    7bf8:	88 0f       	add	r24, r24
    7bfa:	99 1f       	adc	r25, r25
    7bfc:	82 54       	subi	r24, 0x42	; 66
    7bfe:	9f 4f       	sbci	r25, 0xFF	; 255
    7c00:	fc 01       	movw	r30, r24
    7c02:	25 91       	lpm	r18, Z+
    7c04:	34 91       	lpm	r19, Z+
    7c06:	c7 01       	movw	r24, r14
    7c08:	f9 01       	movw	r30, r18
    7c0a:	09 95       	icall
				}

				//read next delta time
				track->patchNextDeltaTime=pgm_read_byte(track->patchCommandStreamPos++);
    7c0c:	ed 89       	ldd	r30, Y+21	; 0x15
    7c0e:	fe 89       	ldd	r31, Y+22	; 0x16
    7c10:	31 96       	adiw	r30, 0x01	; 1
    7c12:	fe 8b       	std	Y+22, r31	; 0x16
    7c14:	ed 8b       	std	Y+21, r30	; 0x15
    7c16:	31 97       	sbiw	r30, 0x01	; 1
    7c18:	e4 91       	lpm	r30, Z+
    7c1a:	ea 8b       	std	Y+18, r30	; 0x12
				track->patchCurrDeltaTime=0;
    7c1c:	1b 8a       	std	Y+19, r1	; 0x13

		//process patch command stream
		if((track->flags & TRACK_FLAGS_PLAYING) && (track->patchCommandStreamPos!=NULL) && ((track->flags & TRACK_FLAGS_HOLD_ENV)==0)){

			//process all simultaneous events
			while(track->patchCurrDeltaTime==track->patchNextDeltaTime){
    7c1e:	9b 89       	ldd	r25, Y+19	; 0x13
    7c20:	8a 89       	ldd	r24, Y+18	; 0x12
    7c22:	98 17       	cp	r25, r24
    7c24:	91 f2       	breq	.-92     	; 0x7bca <ProcessMusic+0x320>
				//read next delta time
				track->patchNextDeltaTime=pgm_read_byte(track->patchCommandStreamPos++);
				track->patchCurrDeltaTime=0;
			}

			track->patchCurrDeltaTime++;
    7c26:	8b 89       	ldd	r24, Y+19	; 0x13
    7c28:	8f 5f       	subi	r24, 0xFF	; 255
    7c2a:	8b 8b       	std	Y+19, r24	; 0x13
		}

		if(track->flags & TRACK_FLAGS_PLAYING){
    7c2c:	88 81       	ld	r24, Y
    7c2e:	85 fd       	sbrc	r24, 5
    7c30:	03 c0       	rjmp	.+6      	; 0x7c38 <ProcessMusic+0x38e>
    7c32:	20 e0       	ldi	r18, 0x00	; 0
    7c34:	30 e0       	ldi	r19, 0x00	; 0
    7c36:	62 c0       	rjmp	.+196    	; 0x7cfc <ProcessMusic+0x452>

			if(track->patchPlayingTime<0xff){
    7c38:	8c 89       	ldd	r24, Y+20	; 0x14
    7c3a:	8f 3f       	cpi	r24, 0xFF	; 255
    7c3c:	11 f0       	breq	.+4      	; 0x7c42 <ProcessMusic+0x398>
				track->patchPlayingTime++;
    7c3e:	8f 5f       	subi	r24, 0xFF	; 255
    7c40:	8c 8b       	std	Y+20, r24	; 0x14
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
    7c42:	88 81       	ld	r24, Y
    7c44:	87 ff       	sbrs	r24, 7
    7c46:	02 c0       	rjmp	.+4      	; 0x7c4c <ProcessMusic+0x3a2>
    7c48:	8f ef       	ldi	r24, 0xFF	; 255
    7c4a:	01 c0       	rjmp	.+2      	; 0x7c4e <ProcessMusic+0x3a4>
				//if an FX, use full track volume.
				trackVol=0xff;
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
    7c4c:	8c 85       	ldd	r24, Y+12	; 0x0c
			}
			if(track->noteVol!=0 && track->envelopeVol!=0 && trackVol!=0 && masterVolume!=0){
    7c4e:	9d 85       	ldd	r25, Y+13	; 0x0d
    7c50:	99 23       	and	r25, r25
    7c52:	09 f4       	brne	.+2      	; 0x7c56 <ProcessMusic+0x3ac>
    7c54:	4d c0       	rjmp	.+154    	; 0x7cf0 <ProcessMusic+0x446>
    7c56:	2e 85       	ldd	r18, Y+14	; 0x0e
    7c58:	22 23       	and	r18, r18
    7c5a:	09 f4       	brne	.+2      	; 0x7c5e <ProcessMusic+0x3b4>
    7c5c:	49 c0       	rjmp	.+146    	; 0x7cf0 <ProcessMusic+0x446>
    7c5e:	88 23       	and	r24, r24
    7c60:	09 f4       	brne	.+2      	; 0x7c64 <ProcessMusic+0x3ba>
    7c62:	46 c0       	rjmp	.+140    	; 0x7cf0 <ProcessMusic+0x446>
    7c64:	40 91 67 0d 	lds	r20, 0x0D67
    7c68:	44 23       	and	r20, r20
    7c6a:	09 f4       	brne	.+2      	; 0x7c6e <ProcessMusic+0x3c4>
    7c6c:	41 c0       	rjmp	.+130    	; 0x7cf0 <ProcessMusic+0x446>

				uVol=(track->noteVol*trackVol)+0x100;
    7c6e:	89 9f       	mul	r24, r25
    7c70:	c0 01       	movw	r24, r0
    7c72:	11 24       	eor	r1, r1
    7c74:	80 50       	subi	r24, 0x00	; 0
    7c76:	9f 4f       	sbci	r25, 0xFF	; 255
				uVol>>=8;
				
				uVol=(uVol*track->envelopeVol)+0x100;
    7c78:	89 2f       	mov	r24, r25
    7c7a:	99 27       	eor	r25, r25
    7c7c:	30 e0       	ldi	r19, 0x00	; 0
    7c7e:	bc 01       	movw	r22, r24
    7c80:	62 9f       	mul	r22, r18
    7c82:	c0 01       	movw	r24, r0
    7c84:	63 9f       	mul	r22, r19
    7c86:	90 0d       	add	r25, r0
    7c88:	72 9f       	mul	r23, r18
    7c8a:	90 0d       	add	r25, r0
    7c8c:	11 24       	eor	r1, r1
    7c8e:	80 50       	subi	r24, 0x00	; 0
    7c90:	9f 4f       	sbci	r25, 0xFF	; 255
				#if MUSIC_ENGINE == MIDI
					uVol=(uVol*track->expressionVol)+0x100;
					uVol>>=8;
				#endif
				
				uVol=(uVol*masterVolume)+0x100;
    7c92:	89 2f       	mov	r24, r25
    7c94:	99 27       	eor	r25, r25
    7c96:	24 2f       	mov	r18, r20
    7c98:	30 e0       	ldi	r19, 0x00	; 0
    7c9a:	fc 01       	movw	r30, r24
    7c9c:	e2 9f       	mul	r30, r18
    7c9e:	c0 01       	movw	r24, r0
    7ca0:	e3 9f       	mul	r30, r19
    7ca2:	90 0d       	add	r25, r0
    7ca4:	f2 9f       	mul	r31, r18
    7ca6:	90 0d       	add	r25, r0
    7ca8:	11 24       	eor	r1, r1
    7caa:	80 50       	subi	r24, 0x00	; 0
    7cac:	9f 4f       	sbci	r25, 0xFF	; 255
				uVol>>=8;
    7cae:	29 2f       	mov	r18, r25
    7cb0:	33 27       	eor	r19, r19

				if(track->tremoloLevel>0){					
    7cb2:	8a 85       	ldd	r24, Y+10	; 0x0a
    7cb4:	88 23       	and	r24, r24
    7cb6:	f1 f0       	breq	.+60     	; 0x7cf4 <ProcessMusic+0x44a>
					tmp=pgm_read_byte(&(waves[track->tremoloPos]));
    7cb8:	e9 85       	ldd	r30, Y+9	; 0x09
    7cba:	f0 e0       	ldi	r31, 0x00	; 0
    7cbc:	e0 50       	subi	r30, 0x00	; 0
    7cbe:	fe 47       	sbci	r31, 0x7E	; 126
    7cc0:	e4 91       	lpm	r30, Z+
					tmp-=128; //convert to unsigned

					tVol=(track->tremoloLevel*tmp)+0x100;
    7cc2:	e0 58       	subi	r30, 0x80	; 128
    7cc4:	e8 9f       	mul	r30, r24
    7cc6:	c0 01       	movw	r24, r0
    7cc8:	11 24       	eor	r1, r1
    7cca:	80 50       	subi	r24, 0x00	; 0
    7ccc:	9f 4f       	sbci	r25, 0xFF	; 255
					tVol>>=8;
					
					uVol=(uVol*(0xff-tVol))+0x100;
    7cce:	89 2f       	mov	r24, r25
    7cd0:	99 27       	eor	r25, r25
    7cd2:	a6 01       	movw	r20, r12
    7cd4:	48 1b       	sub	r20, r24
    7cd6:	59 0b       	sbc	r21, r25
    7cd8:	42 9f       	mul	r20, r18
    7cda:	c0 01       	movw	r24, r0
    7cdc:	43 9f       	mul	r20, r19
    7cde:	90 0d       	add	r25, r0
    7ce0:	52 9f       	mul	r21, r18
    7ce2:	90 0d       	add	r25, r0
    7ce4:	11 24       	eor	r1, r1
    7ce6:	80 50       	subi	r24, 0x00	; 0
    7ce8:	9f 4f       	sbci	r25, 0xFF	; 255
					uVol>>=8;
    7cea:	29 2f       	mov	r18, r25
    7cec:	33 27       	eor	r19, r19
    7cee:	02 c0       	rjmp	.+4      	; 0x7cf4 <ProcessMusic+0x44a>
    7cf0:	20 e0       	ldi	r18, 0x00	; 0
    7cf2:	30 e0       	ldi	r19, 0x00	; 0
			
			}else{
				uVol=0;
			}	

			track->tremoloPos+=track->tremoloRate;	
    7cf4:	89 85       	ldd	r24, Y+9	; 0x09
    7cf6:	9b 85       	ldd	r25, Y+11	; 0x0b
    7cf8:	89 0f       	add	r24, r25
    7cfa:	89 87       	std	Y+9, r24	; 0x09

		}else{
			uVol=0;
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
    7cfc:	f8 01       	movw	r30, r16
    7cfe:	20 83       	st	Z, r18
    7d00:	67 96       	adiw	r28, 0x17	; 23
    7d02:	0a 5f       	subi	r16, 0xFA	; 250
    7d04:	1f 4f       	sbci	r17, 0xFF	; 255


	//
	// Process patches command streams & final volume
	//
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    7d06:	fd e0       	ldi	r31, 0x0D	; 13
    7d08:	c0 34       	cpi	r28, 0x40	; 64
    7d0a:	df 07       	cpc	r29, r31
    7d0c:	09 f0       	breq	.+2      	; 0x7d10 <ProcessMusic+0x466>
    7d0e:	50 cf       	rjmp	.-352    	; 0x7bb0 <ProcessMusic+0x306>
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
	}
	
}
    7d10:	cd b7       	in	r28, 0x3d	; 61
    7d12:	de b7       	in	r29, 0x3e	; 62
    7d14:	e8 e0       	ldi	r30, 0x08	; 8
    7d16:	0c 94 cf 57 	jmp	0xaf9e	; 0xaf9e <__epilogue_restores__+0x14>

00007d1a <TriggerCommon>:
}




void TriggerCommon(Track* track,u8 patch,u8 volume,u8 note){
    7d1a:	ff 92       	push	r15
    7d1c:	0f 93       	push	r16
    7d1e:	1f 93       	push	r17
    7d20:	cf 93       	push	r28
    7d22:	df 93       	push	r29
    7d24:	ec 01       	movw	r28, r24
    7d26:	06 2f       	mov	r16, r22
    7d28:	12 2f       	mov	r17, r18
		
	bool isFx = (track->flags&TRACK_FLAGS_PRIORITY);
    7d2a:	ff 24       	eor	r15, r15
    7d2c:	88 81       	ld	r24, Y
    7d2e:	87 ff       	sbrs	r24, 7
    7d30:	02 c0       	rjmp	.+4      	; 0x7d36 <TriggerCommon+0x1c>
    7d32:	ff 24       	eor	r15, r15
    7d34:	f3 94       	inc	r15

	track->envelopeStep=0; 
    7d36:	1f 86       	std	Y+15, r1	; 0x0f
	track->envelopeVol=0xff; 
    7d38:	8f ef       	ldi	r24, 0xFF	; 255
    7d3a:	8e 87       	std	Y+14, r24	; 0x0e
	track->noteVol=volume;
    7d3c:	4d 87       	std	Y+13, r20	; 0x0d
	track->patchPlayingTime=0;
    7d3e:	1c 8a       	std	Y+20, r1	; 0x14
	track->flags&=(~(TRACK_FLAGS_HOLD_ENV|TRACK_FLAGS_SLIDING));
    7d40:	88 81       	ld	r24, Y
    7d42:	87 7b       	andi	r24, 0xB7	; 183
    7d44:	88 83       	st	Y, r24
	track->tremoloLevel=0;
    7d46:	1a 86       	std	Y+10, r1	; 0x0a
	track->tremoloPos=0;
    7d48:	19 86       	std	Y+9, r1	; 0x09
	track->note=note;
    7d4a:	19 83       	std	Y+1, r17	; 0x01
	track->loopCount=0;
    7d4c:	1c 82       	std	Y+4, r1	; 0x04
	track->expressionVol=DEFAULT_EXPRESSION_VOL;
#endif

	#if SOUND_MIXER == MIXER_TYPE_INLINE

		if(track->channel==3){
    7d4e:	8a 81       	ldd	r24, Y+2	; 0x02
    7d50:	83 30       	cpi	r24, 0x03	; 3
    7d52:	69 f4       	brne	.+26     	; 0x7d6e <TriggerCommon+0x54>
			//noise channel		
			if(!isFx) patch=note;			
    7d54:	ff 20       	and	r15, r15
    7d56:	09 f4       	brne	.+2      	; 0x7d5a <TriggerCommon+0x40>
    7d58:	01 2f       	mov	r16, r17
			mixer.channels.type.noise.barrel=0x0101;				
    7d5a:	81 e0       	ldi	r24, 0x01	; 1
    7d5c:	91 e0       	ldi	r25, 0x01	; 1
    7d5e:	90 93 b6 0c 	sts	0x0CB6, r25
    7d62:	80 93 b5 0c 	sts	0x0CB5, r24
			mixer.channels.type.noise.params=1; //default (15bits,no divider)
    7d66:	81 e0       	ldi	r24, 0x01	; 1
    7d68:	80 93 b4 0c 	sts	0x0CB4, r24
    7d6c:	33 c0       	rjmp	.+102    	; 0x7dd4 <TriggerCommon+0xba>

		#if SOUND_CHANNEL_5_ENABLE==1		

		}else if(track->channel==4){
    7d6e:	84 30       	cpi	r24, 0x04	; 4
    7d70:	51 f5       	brne	.+84     	; 0x7dc6 <TriggerCommon+0xac>
				//PCM channel					
				mixer.channels.type.pcm.positionFrac=0;
    7d72:	10 92 bc 0c 	sts	0x0CBC, r1
				const char *pos=(const char*)pgm_read_word(&(patchPointers[patch].pcmData));
    7d76:	29 e0       	ldi	r18, 0x09	; 9
    7d78:	02 9f       	mul	r16, r18
    7d7a:	90 01       	movw	r18, r0
    7d7c:	11 24       	eor	r1, r1
    7d7e:	80 91 43 0d 	lds	r24, 0x0D43
    7d82:	90 91 44 0d 	lds	r25, 0x0D44
    7d86:	82 0f       	add	r24, r18
    7d88:	93 1f       	adc	r25, r19
    7d8a:	fc 01       	movw	r30, r24
    7d8c:	31 96       	adiw	r30, 0x01	; 1
    7d8e:	25 91       	lpm	r18, Z+
    7d90:	34 91       	lpm	r19, Z+
				mixer.channels.type.pcm.position=pos;				
    7d92:	30 93 be 0c 	sts	0x0CBE, r19
    7d96:	20 93 bd 0c 	sts	0x0CBD, r18
				mixer.pcmLoopLenght=pgm_read_word(&(patchPointers[patch].loopEnd))-pgm_read_word(&(patchPointers[patch].loopStart));
    7d9a:	07 96       	adiw	r24, 0x07	; 7
    7d9c:	fc 01       	movw	r30, r24
    7d9e:	45 91       	lpm	r20, Z+
    7da0:	54 91       	lpm	r21, Z+
    7da2:	fc 01       	movw	r30, r24
    7da4:	32 97       	sbiw	r30, 0x02	; 2
    7da6:	85 91       	lpm	r24, Z+
    7da8:	94 91       	lpm	r25, Z+
    7daa:	ba 01       	movw	r22, r20
    7dac:	68 1b       	sub	r22, r24
    7dae:	79 0b       	sbc	r23, r25
    7db0:	70 93 c0 0c 	sts	0x0CC0, r23
    7db4:	60 93 bf 0c 	sts	0x0CBF, r22
				mixer.pcmLoopEnd=pos+pgm_read_word(&(patchPointers[patch].loopEnd));
    7db8:	24 0f       	add	r18, r20
    7dba:	35 1f       	adc	r19, r21
    7dbc:	30 93 c2 0c 	sts	0x0CC2, r19
    7dc0:	20 93 c1 0c 	sts	0x0CC1, r18
    7dc4:	03 c0       	rjmp	.+6      	; 0x7dcc <TriggerCommon+0xb2>
				SetMixerNote(track->channel,note);
		#endif	

		}else{					
			//wave channels					
			SetMixerWave(track->channel,0);//default wave
    7dc6:	60 e0       	ldi	r22, 0x00	; 0
    7dc8:	0e 94 9c 3f 	call	0x7f38	; 0x7f38 <SetMixerWave>
			SetMixerNote(track->channel,note);
    7dcc:	8a 81       	ldd	r24, Y+2	; 0x02
    7dce:	61 2f       	mov	r22, r17
    7dd0:	0e 94 85 3f 	call	0x7f0a	; 0x7f0a <SetMixerNote>

		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
    7dd4:	ff 20       	and	r15, r15
    7dd6:	11 f0       	breq	.+4      	; 0x7ddc <TriggerCommon+0xc2>
		track->fxPatchNo=patch;
    7dd8:	09 8b       	std	Y+17, r16	; 0x11
    7dda:	01 c0       	rjmp	.+2      	; 0x7dde <TriggerCommon+0xc4>
	}else{
		track->patchNo=patch;	
    7ddc:	08 8b       	std	Y+16, r16	; 0x10
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
    7dde:	89 e0       	ldi	r24, 0x09	; 9
    7de0:	08 9f       	mul	r16, r24
    7de2:	c0 01       	movw	r24, r0
    7de4:	11 24       	eor	r1, r1
    7de6:	e0 91 43 0d 	lds	r30, 0x0D43
    7dea:	f0 91 44 0d 	lds	r31, 0x0D44
    7dee:	e8 0f       	add	r30, r24
    7df0:	f9 1f       	adc	r31, r25
    7df2:	33 96       	adiw	r30, 0x03	; 3
    7df4:	25 91       	lpm	r18, Z+
    7df6:	34 91       	lpm	r19, Z+
	if(pos==NULL){
    7df8:	21 15       	cp	r18, r1
    7dfa:	31 05       	cpc	r19, r1
    7dfc:	19 f4       	brne	.+6      	; 0x7e04 <TriggerCommon+0xea>
		track->patchCommandStreamPos=NULL;
    7dfe:	1e 8a       	std	Y+22, r1	; 0x16
    7e00:	1d 8a       	std	Y+21, r1	; 0x15
    7e02:	08 c0       	rjmp	.+16     	; 0x7e14 <TriggerCommon+0xfa>
	}else{
		track->patchCurrDeltaTime=0;
    7e04:	1b 8a       	std	Y+19, r1	; 0x13
		track->patchNextDeltaTime=pgm_read_byte(pos++);
    7e06:	f9 01       	movw	r30, r18
    7e08:	84 91       	lpm	r24, Z+
    7e0a:	8a 8b       	std	Y+18, r24	; 0x12
		track->patchCommandStreamPos=pos;
    7e0c:	2f 5f       	subi	r18, 0xFF	; 255
    7e0e:	3f 4f       	sbci	r19, 0xFF	; 255
    7e10:	3e 8b       	std	Y+22, r19	; 0x16
    7e12:	2d 8b       	std	Y+21, r18	; 0x15
	}

}
    7e14:	cd b7       	in	r28, 0x3d	; 61
    7e16:	de b7       	in	r29, 0x3e	; 62
    7e18:	e5 e0       	ldi	r30, 0x05	; 5
    7e1a:	0c 94 d2 57 	jmp	0xafa4	; 0xafa4 <__epilogue_restores__+0x1a>

00007e1e <TriggerFx>:

/* Trigger a sound effect.
 * Method allocates the channel based on priority.
 * Retrig: if this fx if already playing on a track, reuse same track.
 */
void TriggerFx(unsigned char patch,unsigned char volume,bool retrig){
    7e1e:	0f 93       	push	r16
    7e20:	1f 93       	push	r17
    7e22:	28 2f       	mov	r18, r24
    7e24:	36 2f       	mov	r19, r22
	unsigned char channel;
	
	unsigned char type=(unsigned char)pgm_read_byte(&(patchPointers[patch].type));
    7e26:	89 e0       	ldi	r24, 0x09	; 9
    7e28:	28 9f       	mul	r18, r24
    7e2a:	c0 01       	movw	r24, r0
    7e2c:	11 24       	eor	r1, r1
    7e2e:	e0 91 43 0d 	lds	r30, 0x0D43
    7e32:	f0 91 44 0d 	lds	r31, 0x0D44
    7e36:	e8 0f       	add	r30, r24
    7e38:	f9 1f       	adc	r31, r25
    7e3a:	84 91       	lpm	r24, Z+

	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || (type==2 && MIXER_CHAN4_TYPE == 1)){
    7e3c:	81 30       	cpi	r24, 0x01	; 1
    7e3e:	11 f4       	brne	.+4      	; 0x7e44 <TriggerFx+0x26>
    7e40:	83 e0       	ldi	r24, 0x03	; 3
    7e42:	21 c0       	rjmp	.+66     	; 0x7e86 <TriggerFx+0x68>
		//noise or PCM channel fx		
		channel=3;
	}else if(type==2){
    7e44:	82 30       	cpi	r24, 0x02	; 2
    7e46:	11 f4       	brne	.+4      	; 0x7e4c <TriggerFx+0x2e>
    7e48:	84 e0       	ldi	r24, 0x04	; 4
    7e4a:	1d c0       	rjmp	.+58     	; 0x7e86 <TriggerFx+0x68>
		channel=4;
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
    7e4c:	80 91 e4 0c 	lds	r24, 0x0CE4
    7e50:	87 ff       	sbrs	r24, 7
    7e52:	16 c0       	rjmp	.+44     	; 0x7e80 <TriggerFx+0x62>
    7e54:	80 91 f5 0c 	lds	r24, 0x0CF5
    7e58:	82 17       	cp	r24, r18
    7e5a:	11 f4       	brne	.+4      	; 0x7e60 <TriggerFx+0x42>
    7e5c:	44 23       	and	r20, r20
    7e5e:	81 f4       	brne	.+32     	; 0x7e80 <TriggerFx+0x62>
		channel=1;
	}else if( (tracks[2].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[2].fxPatchNo==patch && (tracks[2].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing				
    7e60:	80 91 fb 0c 	lds	r24, 0x0CFB
    7e64:	87 ff       	sbrs	r24, 7
    7e66:	0e c0       	rjmp	.+28     	; 0x7e84 <TriggerFx+0x66>
    7e68:	80 91 0c 0d 	lds	r24, 0x0D0C
    7e6c:	82 17       	cp	r24, r18
    7e6e:	11 f4       	brne	.+4      	; 0x7e74 <TriggerFx+0x56>
    7e70:	44 23       	and	r20, r20
    7e72:	41 f4       	brne	.+16     	; 0x7e84 <TriggerFx+0x66>
		channel=2;
	}else{
		//both channels have fx playing, use the oldest one
		if(tracks[1].patchPlayingTime>tracks[2].patchPlayingTime){
    7e74:	90 91 f8 0c 	lds	r25, 0x0CF8
    7e78:	80 91 0f 0d 	lds	r24, 0x0D0F
    7e7c:	89 17       	cp	r24, r25
    7e7e:	10 f4       	brcc	.+4      	; 0x7e84 <TriggerFx+0x66>
    7e80:	81 e0       	ldi	r24, 0x01	; 1
    7e82:	01 c0       	rjmp	.+2      	; 0x7e86 <TriggerFx+0x68>
    7e84:	82 e0       	ldi	r24, 0x02	; 2
		}else{
			channel=2;
		}
	}				

	Track* track=&tracks[channel];
    7e86:	07 e1       	ldi	r16, 0x17	; 23
    7e88:	80 9f       	mul	r24, r16
    7e8a:	80 01       	movw	r16, r0
    7e8c:	11 24       	eor	r1, r1
    7e8e:	03 53       	subi	r16, 0x33	; 51
    7e90:	13 4f       	sbci	r17, 0xF3	; 243
	track->flags=TRACK_FLAGS_PRIORITY; //priority=1;
    7e92:	80 e8       	ldi	r24, 0x80	; 128
    7e94:	f8 01       	movw	r30, r16
    7e96:	80 83       	st	Z, r24
	track->patchCommandStreamPos = NULL;
    7e98:	16 8a       	std	Z+22, r1	; 0x16
    7e9a:	15 8a       	std	Z+21, r1	; 0x15
	TriggerCommon(track,patch,volume,80);
    7e9c:	c8 01       	movw	r24, r16
    7e9e:	62 2f       	mov	r22, r18
    7ea0:	43 2f       	mov	r20, r19
    7ea2:	20 e5       	ldi	r18, 0x50	; 80
    7ea4:	0e 94 8d 3e 	call	0x7d1a	; 0x7d1a <TriggerCommon>
	track->flags|=TRACK_FLAGS_PLAYING;
    7ea8:	f8 01       	movw	r30, r16
    7eaa:	80 81       	ld	r24, Z
    7eac:	80 62       	ori	r24, 0x20	; 32
    7eae:	80 83       	st	Z, r24
}
    7eb0:	1f 91       	pop	r17
    7eb2:	0f 91       	pop	r16
    7eb4:	08 95       	ret

00007eb6 <TriggerNote>:


void TriggerNote(unsigned char channel,unsigned char patch,unsigned char note,unsigned char volume){
    7eb6:	cf 93       	push	r28
    7eb8:	df 93       	push	r29
    7eba:	34 2f       	mov	r19, r20
	Track* track=&tracks[channel];
    7ebc:	97 e1       	ldi	r25, 0x17	; 23
    7ebe:	89 9f       	mul	r24, r25
    7ec0:	e0 01       	movw	r28, r0
    7ec2:	11 24       	eor	r1, r1
    7ec4:	c3 53       	subi	r28, 0x33	; 51
    7ec6:	d3 4f       	sbci	r29, 0xF3	; 243

	//allow only other music notes 
	if((track->flags&TRACK_FLAGS_PLAYING)==0 || (track->flags&TRACK_FLAGS_PRIORITY)==0){
    7ec8:	88 81       	ld	r24, Y
    7eca:	98 2f       	mov	r25, r24
    7ecc:	85 ff       	sbrs	r24, 5
    7ece:	02 c0       	rjmp	.+4      	; 0x7ed4 <TriggerNote+0x1e>
    7ed0:	87 fd       	sbrc	r24, 7
    7ed2:	15 c0       	rjmp	.+42     	; 0x7efe <TriggerNote+0x48>
			
		if(volume==0){ //note-off received
    7ed4:	22 23       	and	r18, r18
    7ed6:	41 f4       	brne	.+16     	; 0x7ee8 <TriggerNote+0x32>

			
			//cut note if there's no envelope & no note hold
			if(track->envelopeStep==0 && !(track->flags&TRACK_FLAGS_HOLD_ENV)){
    7ed8:	8f 85       	ldd	r24, Y+15	; 0x0f
    7eda:	88 23       	and	r24, r24
    7edc:	11 f4       	brne	.+4      	; 0x7ee2 <TriggerNote+0x2c>
    7ede:	96 ff       	sbrs	r25, 6
				track->noteVol=0;
    7ee0:	1d 86       	std	Y+13, r1	; 0x0d
			}

			track->flags&=(~TRACK_FLAGS_HOLD_ENV);//patchEnvelopeHold=false;
    7ee2:	88 81       	ld	r24, Y
    7ee4:	8f 7b       	andi	r24, 0xBF	; 191
    7ee6:	0a c0       	rjmp	.+20     	; 0x7efc <TriggerNote+0x46>
		}else{
		
			track->flags=0;//&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    7ee8:	18 82       	st	Y, r1
			track->patchCommandStreamPos = NULL;
    7eea:	1e 8a       	std	Y+22, r1	; 0x16
    7eec:	1d 8a       	std	Y+21, r1	; 0x15
			TriggerCommon(track,patch,volume,note);
    7eee:	ce 01       	movw	r24, r28
    7ef0:	42 2f       	mov	r20, r18
    7ef2:	23 2f       	mov	r18, r19
    7ef4:	0e 94 8d 3e 	call	0x7d1a	; 0x7d1a <TriggerCommon>
			track->flags|=TRACK_FLAGS_PLAYING;
    7ef8:	88 81       	ld	r24, Y
    7efa:	80 62       	ori	r24, 0x20	; 32
    7efc:	88 83       	st	Y, r24
		}

	}
}
    7efe:	df 91       	pop	r29
    7f00:	cf 91       	pop	r28
    7f02:	08 95       	ret

00007f04 <SetMasterVolume>:



void SetMasterVolume(unsigned char vol){
	masterVolume=vol;
    7f04:	80 93 67 0d 	sts	0x0D67, r24
}
    7f08:	08 95       	ret

00007f0a <SetMixerNote>:
; r22: -MIDI note, 69=A5(440) for waves channels (0,1,2)
;      -Noise params for channel 3
;***********************
.section .text.SetMixerNote
SetMixerNote:
	clr r25
    7f0a:	99 27       	eor	r25, r25
	clr r23
    7f0c:	77 27       	eor	r23, r23
	#if SOUND_MIXER == MIXER_TYPE_VSYNC
		cpi r24,3
		brlo set_note_waves
		ret		
	#else
		cpi r24,3
    7f0e:	83 30       	cpi	r24, 0x03	; 3
		brne set_note_waves		
    7f10:	09 f4       	brne	.+2      	; 0x7f14 <set_note_waves>
		ret
    7f12:	08 95       	ret

00007f14 <set_note_waves>:
	#endif
#endif

set_note_waves:
	;get step for note
	ldi ZL,lo8(steptable)
    7f14:	e8 e0       	ldi	r30, 0x08	; 8
	ldi ZH,hi8(steptable)
    7f16:	f0 e8       	ldi	r31, 0x80	; 128
	lsl r22
    7f18:	66 0f       	add	r22, r22
	rol r23
    7f1a:	77 1f       	adc	r23, r23
	add ZL,r22
    7f1c:	e6 0f       	add	r30, r22
	adc ZH,r23	
    7f1e:	f7 1f       	adc	r31, r23

	lpm r26,Z+
    7f20:	a5 91       	lpm	r26, Z+
	lpm r27,Z
    7f22:	b4 91       	lpm	r27, Z+

	ldi ZL,lo8(mixerStruct)
    7f24:	e1 ea       	ldi	r30, 0xA1	; 161
	ldi ZH,hi8(mixerStruct)
    7f26:	fc e0       	ldi	r31, 0x0C	; 12
	ldi r18,CHANNEL_STRUCT_SIZE
    7f28:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24
    7f2a:	28 9f       	mul	r18, r24
	add ZL,r0
    7f2c:	e0 0d       	add	r30, r0
	adc ZH,r1
    7f2e:	f1 1d       	adc	r31, r1
	
	std Z+step_lo,r26
    7f30:	a1 83       	std	Z+1, r26	; 0x01
	std Z+step_hi,r27
    7f32:	b2 83       	std	Z+2, r27	; 0x02
	
	clr r1
    7f34:	11 24       	eor	r1, r1
	

	ret
    7f36:	08 95       	ret

00007f38 <SetMixerWave>:
;         Noise channel: 0xfe=7 bit lfsr, 0xff=15 bit lfsr
;                 
;***********************
.section .text.SetMixerWave
SetMixerWave:
	clr r25
    7f38:	99 27       	eor	r25, r25
	clr r23
    7f3a:	77 27       	eor	r23, r23

	ldi ZL,lo8(mixerStruct)
    7f3c:	e1 ea       	ldi	r30, 0xA1	; 161
	ldi ZH,hi8(mixerStruct)
    7f3e:	fc e0       	ldi	r31, 0x0C	; 12
	ldi r18,CHANNEL_STRUCT_SIZE
    7f40:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24	
    7f42:	28 9f       	mul	r18, r24
	add ZL,r0
    7f44:	e0 0d       	add	r30, r0
	adc ZH,r1
    7f46:	f1 1d       	adc	r31, r1

#if MIXER_CHAN4_TYPE == 0
	cpi r22,0xfe	;7bit lfsr
    7f48:	6e 3f       	cpi	r22, 0xFE	; 254
	brne smw1
    7f4a:	31 f4       	brne	.+12     	; 0x7f58 <smw1>
	lds r22,tr4_params
    7f4c:	60 91 b4 0c 	lds	r22, 0x0CB4
	andi r22,0xfe;
    7f50:	6e 7f       	andi	r22, 0xFE	; 254
	sts tr4_params,r22
    7f52:	60 93 b4 0c 	sts	0x0CB4, r22
	rjmp esmw	
    7f56:	0b c0       	rjmp	.+22     	; 0x7f6e <esmw>

00007f58 <smw1>:
smw1:
	cpi r22,0xff	;15bit lfsr
    7f58:	6f 3f       	cpi	r22, 0xFF	; 255
	brne smw2
    7f5a:	31 f4       	brne	.+12     	; 0x7f68 <smw2>
	lds r22,tr4_params
    7f5c:	60 91 b4 0c 	lds	r22, 0x0CB4
	ori r22,0xfe;
    7f60:	6e 6f       	ori	r22, 0xFE	; 254
	sts tr4_params,r22	
    7f62:	60 93 b4 0c 	sts	0x0CB4, r22
	rjmp esmw
    7f66:	03 c0       	rjmp	.+6      	; 0x7f6e <esmw>

00007f68 <smw2>:
smw2:
#endif

	ldi r23,hi8(waves)
    7f68:	72 e8       	ldi	r23, 0x82	; 130
	add r23,r22
    7f6a:	76 0f       	add	r23, r22
	std Z+samplepos_hi,r23 ;store path No
    7f6c:	75 83       	std	Z+5, r23	; 0x05

00007f6e <esmw>:

esmw:
	clr r1	
    7f6e:	11 24       	eor	r1, r1
	ret
    7f70:	08 95       	ret
	...

00008000 <DisableSoundEngine>:
; no CPU cycles are consumed.
; C-callable
;*****************************
.section .text.DisableSoundEngine
DisableSoundEngine:	
	ldi r24,0
    8000:	80 e0       	ldi	r24, 0x00	; 0
	sts sound_enabled,r24
    8002:	80 93 a0 0c 	sts	0x0CA0, r24
	ret
    8006:	08 95       	ret

00008008 <steptable>:
    8008:	22 00       	.word	0x0022	; ????
    800a:	24 00       	.word	0x0024	; ????
    800c:	26 00       	.word	0x0026	; ????
    800e:	28 00       	.word	0x0028	; ????
    8010:	2b 00       	.word	0x002b	; ????
    8012:	2d 00       	.word	0x002d	; ????
    8014:	30 00       	.word	0x0030	; ????
    8016:	33 00       	.word	0x0033	; ????
    8018:	36 00       	.word	0x0036	; ????
    801a:	39 00       	.word	0x0039	; ????
    801c:	3d 00       	.word	0x003d	; ????
    801e:	40 00       	.word	0x0040	; ????
    8020:	44 00       	.word	0x0044	; ????
    8022:	48 00       	.word	0x0048	; ????
    8024:	4c 00       	.word	0x004c	; ????
    8026:	51 00       	.word	0x0051	; ????
    8028:	56 00       	.word	0x0056	; ????
    802a:	5b 00       	.word	0x005b	; ????
    802c:	60 00       	.word	0x0060	; ????
    802e:	66 00       	.word	0x0066	; ????
    8030:	6c 00       	.word	0x006c	; ????
    8032:	73 00       	.word	0x0073	; ????
    8034:	79 00       	.word	0x0079	; ????
    8036:	81 00       	.word	0x0081	; ????
    8038:	88 00       	.word	0x0088	; ????
    803a:	90 00       	.word	0x0090	; ????
    803c:	99 00       	.word	0x0099	; ????
    803e:	a2 00       	.word	0x00a2	; ????
    8040:	ac 00       	.word	0x00ac	; ????
    8042:	b6 00       	.word	0x00b6	; ????
    8044:	c1 00       	.word	0x00c1	; ????
    8046:	cc 00       	.word	0x00cc	; ????
    8048:	d8 00       	.word	0x00d8	; ????
    804a:	e5 00       	.word	0x00e5	; ????
    804c:	f3 00       	.word	0x00f3	; ????
    804e:	01 01       	movw	r0, r2
    8050:	10 01       	movw	r2, r0
    8052:	21 01       	movw	r4, r2
    8054:	32 01       	movw	r6, r4
    8056:	44 01       	movw	r8, r8
    8058:	57 01       	movw	r10, r14
    805a:	6c 01       	movw	r12, r24
    805c:	81 01       	movw	r16, r2
    805e:	98 01       	movw	r18, r16
    8060:	b0 01       	movw	r22, r0
    8062:	ca 01       	movw	r24, r20
    8064:	e5 01       	movw	r28, r10
    8066:	02 02       	muls	r16, r18
    8068:	21 02       	muls	r18, r17
    806a:	41 02       	muls	r20, r17
    806c:	64 02       	muls	r22, r20
    806e:	88 02       	muls	r24, r24
    8070:	ae 02       	muls	r26, r30
    8072:	d7 02       	muls	r29, r23
    8074:	03 03       	mulsu	r16, r19
    8076:	30 03       	mulsu	r19, r16
    8078:	61 03       	mulsu	r22, r17
    807a:	94 03       	fmuls	r17, r20
    807c:	cb 03       	fmulsu	r20, r19
    807e:	05 04       	cpc	r0, r5
    8080:	42 04       	cpc	r4, r2
    8082:	83 04       	cpc	r8, r3
    8084:	c7 04       	cpc	r12, r7
    8086:	10 05       	cpc	r17, r0
    8088:	5d 05       	cpc	r21, r13
    808a:	af 05       	cpc	r26, r15
    808c:	05 06       	cpc	r0, r21
    808e:	61 06       	cpc	r6, r17
    8090:	c2 06       	cpc	r12, r18
    8092:	29 07       	cpc	r18, r25
    8094:	96 07       	cpc	r25, r22
    8096:	09 08       	sbc	r0, r9
    8098:	83 08       	sbc	r8, r3
    809a:	05 09       	sbc	r16, r5
    809c:	8e 09       	sbc	r24, r14
    809e:	20 0a       	sbc	r2, r16
    80a0:	ba 0a       	sbc	r11, r26
    80a2:	5d 0b       	sbc	r21, r29
    80a4:	0a 0c       	add	r0, r10
    80a6:	c1 0c       	add	r12, r1
    80a8:	84 0d       	add	r24, r4
    80aa:	51 0e       	add	r5, r17
    80ac:	2b 0f       	add	r18, r27
    80ae:	12 10       	cpse	r1, r2
    80b0:	07 11       	cpse	r16, r7
    80b2:	0a 12       	cpse	r0, r26
    80b4:	1d 13       	cpse	r17, r29
    80b6:	40 14       	cp	r4, r0
    80b8:	74 15       	cp	r23, r4
    80ba:	ba 16       	cp	r11, r26
    80bc:	14 18       	sub	r1, r4
    80be:	83 19       	sub	r24, r3
    80c0:	07 1b       	sub	r16, r23
    80c2:	a3 1c       	adc	r10, r3
    80c4:	57 1e       	adc	r5, r23
    80c6:	24 20       	and	r2, r4
    80c8:	0e 22       	and	r0, r30
    80ca:	14 24       	eor	r1, r4
    80cc:	39 26       	eor	r3, r25
    80ce:	7f 28       	or	r7, r15
    80d0:	e8 2a       	or	r14, r24
    80d2:	75 2d       	mov	r23, r5
    80d4:	29 30       	cpi	r18, 0x09	; 9
    80d6:	06 33       	cpi	r16, 0x36	; 54
    80d8:	0f 36       	cpi	r16, 0x6F	; 111
    80da:	45 39       	cpi	r20, 0x95	; 149
    80dc:	ad 3c       	cpi	r26, 0xCD	; 205
    80de:	49 40       	sbci	r20, 0x09	; 9
    80e0:	1b 44       	sbci	r17, 0x4B	; 75
    80e2:	28 48       	sbci	r18, 0x88	; 136
    80e4:	73 4c       	sbci	r23, 0xC3	; 195
    80e6:	fe 50       	subi	r31, 0x0E	; 14
    80e8:	cf 55       	subi	r28, 0x5F	; 95
    80ea:	ea 5a       	subi	r30, 0xAA	; 170
    80ec:	51 60       	ori	r21, 0x01	; 1
    80ee:	0c 66       	ori	r16, 0x6C	; 108
    80f0:	1d 6c       	ori	r17, 0xCD	; 205
    80f2:	8b 72       	andi	r24, 0x2B	; 43
    80f4:	5a 79       	andi	r21, 0x9A	; 154
    80f6:	92 80       	ldd	r9, Z+2	; 0x02
    80f8:	37 88       	ldd	r3, Z+23	; 0x17
    80fa:	50 90 e5 98 	lds	r5, 0x98E5
    80fe:	fd a1       	ldd	r31, Y+37	; 0x25
    8100:	9f ab       	std	Y+55, r25	; 0x37
    8102:	d3 b5       	in	r29, 0x23	; 35
    8104:	a3 c0       	rjmp	.+326    	; 0x824c <waves+0x4c>
	...

00008200 <waves>:
    8200:	00 03       	mulsu	r16, r16
    8202:	06 09       	sbc	r16, r6
    8204:	0c 10       	cpse	r0, r12
    8206:	13 16       	cp	r1, r19
    8208:	19 1c       	adc	r1, r9
    820a:	1f 22       	and	r1, r31
    820c:	25 28       	or	r2, r5
    820e:	2b 2e       	mov	r2, r27
    8210:	31 33       	cpi	r19, 0x31	; 49
    8212:	36 39       	cpi	r19, 0x96	; 150
    8214:	3c 3f       	cpi	r19, 0xFC	; 252
    8216:	41 44       	sbci	r20, 0x41	; 65
    8218:	47 49       	sbci	r20, 0x97	; 151
    821a:	4c 4e       	sbci	r20, 0xEC	; 236
    821c:	51 53       	subi	r21, 0x31	; 49
    821e:	55 58       	subi	r21, 0x85	; 133
    8220:	5a 5c       	subi	r21, 0xCA	; 202
    8222:	5e 60       	ori	r21, 0x0E	; 14
    8224:	62 64       	ori	r22, 0x42	; 66
    8226:	66 68       	ori	r22, 0x86	; 134
    8228:	6a 6b       	ori	r22, 0xBA	; 186
    822a:	6d 6f       	ori	r22, 0xFD	; 253
    822c:	70 71       	andi	r23, 0x10	; 16
    822e:	73 74       	andi	r23, 0x43	; 67
    8230:	75 76       	andi	r23, 0x65	; 101
    8232:	78 79       	andi	r23, 0x98	; 152
    8234:	7a 7a       	andi	r23, 0xAA	; 170
    8236:	7b 7c       	andi	r23, 0xCB	; 203
    8238:	7d 7d       	andi	r23, 0xDD	; 221
    823a:	7e 7e       	andi	r23, 0xEE	; 238
    823c:	7e 7f       	andi	r23, 0xFE	; 254
    823e:	7f 7f       	andi	r23, 0xFF	; 255
    8240:	7f 7f       	andi	r23, 0xFF	; 255
    8242:	7f 7f       	andi	r23, 0xFF	; 255
    8244:	7e 7e       	andi	r23, 0xEE	; 238
    8246:	7e 7d       	andi	r23, 0xDE	; 222
    8248:	7d 7c       	andi	r23, 0xCD	; 205
    824a:	7b 7a       	andi	r23, 0xAB	; 171
    824c:	7a 79       	andi	r23, 0x9A	; 154
    824e:	78 76       	andi	r23, 0x68	; 104
    8250:	75 74       	andi	r23, 0x45	; 69
    8252:	73 71       	andi	r23, 0x13	; 19
    8254:	70 6f       	ori	r23, 0xF0	; 240
    8256:	6d 6b       	ori	r22, 0xBD	; 189
    8258:	6a 68       	ori	r22, 0x8A	; 138
    825a:	66 64       	ori	r22, 0x46	; 70
    825c:	62 60       	ori	r22, 0x02	; 2
    825e:	5e 5c       	subi	r21, 0xCE	; 206
    8260:	5a 58       	subi	r21, 0x8A	; 138
    8262:	55 53       	subi	r21, 0x35	; 53
    8264:	51 4e       	sbci	r21, 0xE1	; 225
    8266:	4c 49       	sbci	r20, 0x9C	; 156
    8268:	47 44       	sbci	r20, 0x47	; 71
    826a:	41 3f       	cpi	r20, 0xF1	; 241
    826c:	3c 39       	cpi	r19, 0x9C	; 156
    826e:	36 33       	cpi	r19, 0x36	; 54
    8270:	31 2e       	mov	r3, r17
    8272:	2b 28       	or	r2, r11
    8274:	25 22       	and	r2, r21
    8276:	1f 1c       	adc	r1, r15
    8278:	19 16       	cp	r1, r25
    827a:	13 10       	cpse	r1, r3
    827c:	0c 09       	sbc	r16, r12
    827e:	06 03       	mulsu	r16, r22
    8280:	00 fd       	sbrc	r16, 0
    8282:	fa f7       	brpl	.-2      	; 0x8282 <waves+0x82>
    8284:	f4 f0       	brlt	.+60     	; 0x82c2 <waves+0xc2>
    8286:	ed ea       	ldi	r30, 0xAD	; 173
    8288:	e7 e4       	ldi	r30, 0x47	; 71
    828a:	e1 de       	rcall	.-574    	; 0x804e <steptable+0x46>
    828c:	db d8       	rcall	.-3658   	; 0x7444 <ReadButtons+0x6e>
    828e:	d5 d2       	rcall	.+1450   	; 0x883a <ProcessSprites+0xe>
    8290:	cf cd       	rjmp	.-1122   	; 0x7e30 <TriggerFx+0x12>
    8292:	ca c7       	rjmp	.+3988   	; 0x9228 <DrawBlock+0x4e>
    8294:	c4 c1       	rjmp	.+904    	; 0x861e <waves+0x41e>
    8296:	bf bc       	out	0x2f, r11	; 47
    8298:	b9 b7       	in	r27, 0x39	; 57
    829a:	b4 b2       	in	r11, 0x14	; 20
    829c:	af ad       	ldd	r26, Y+63	; 0x3f
    829e:	ab a8       	ldd	r10, Y+51	; 0x33
    82a0:	a6 a4       	ldd	r10, Z+46	; 0x2e
    82a2:	a2 a0       	ldd	r10, Z+34	; 0x22
    82a4:	9e 9c       	mul	r9, r14
    82a6:	9a 98       	cbi	0x13, 2	; 19
    82a8:	96 95       	lsr	r25
    82aa:	93 91       	.word	0x9193	; ????
    82ac:	90 8f       	std	Z+24, r25	; 0x18
    82ae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    82b0:	8b 8a       	std	Y+19, r8	; 0x13
    82b2:	88 87       	std	Y+8, r24	; 0x08
    82b4:	86 86       	std	Z+14, r8	; 0x0e
    82b6:	85 84       	ldd	r8, Z+13	; 0x0d
    82b8:	83 83       	std	Z+3, r24	; 0x03
    82ba:	82 82       	std	Z+2, r8	; 0x02
    82bc:	82 81       	ldd	r24, Z+2	; 0x02
    82be:	81 81       	ldd	r24, Z+1	; 0x01
    82c0:	81 81       	ldd	r24, Z+1	; 0x01
    82c2:	81 81       	ldd	r24, Z+1	; 0x01
    82c4:	82 82       	std	Z+2, r8	; 0x02
    82c6:	82 83       	std	Z+2, r24	; 0x02
    82c8:	83 84       	ldd	r8, Z+11	; 0x0b
    82ca:	85 86       	std	Z+13, r8	; 0x0d
    82cc:	86 87       	std	Z+14, r24	; 0x0e
    82ce:	88 8a       	std	Y+16, r8	; 0x10
    82d0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    82d2:	8d 8f       	std	Y+29, r24	; 0x1d
    82d4:	90 91 93 95 	lds	r25, 0x9593
    82d8:	96 98       	cbi	0x12, 6	; 18
    82da:	9a 9c       	mul	r9, r10
    82dc:	9e a0       	ldd	r9, Y+38	; 0x26
    82de:	a2 a4       	ldd	r10, Z+42	; 0x2a
    82e0:	a6 a8       	ldd	r10, Z+54	; 0x36
    82e2:	ab ad       	ldd	r26, Y+59	; 0x3b
    82e4:	af b2       	in	r10, 0x1f	; 31
    82e6:	b4 b7       	in	r27, 0x34	; 52
    82e8:	b9 bc       	out	0x29, r11	; 41
    82ea:	bf c1       	rjmp	.+894    	; 0x866a <waves+0x46a>
    82ec:	c4 c7       	rjmp	.+3976   	; 0x9276 <ProcessGravity+0xc>
    82ee:	ca cd       	rjmp	.-1132   	; 0x7e84 <TriggerFx+0x66>
    82f0:	cf d2       	rcall	.+1438   	; 0x8890 <ProcessSprites+0x64>
    82f2:	d5 d8       	rcall	.-3670   	; 0x749e <DetectControllers+0x24>
    82f4:	db de       	rcall	.-586    	; 0x80ac <steptable+0xa4>
    82f6:	e1 e4       	ldi	r30, 0x41	; 65
    82f8:	e7 ea       	ldi	r30, 0xA7	; 167
    82fa:	ed f0       	brhs	.+58     	; 0x8336 <waves+0x136>
    82fc:	f4 f7       	brge	.-4      	; 0x82fa <waves+0xfa>
    82fe:	fa fd       	.word	0xfdfa	; ????
    8300:	80 81       	ld	r24, Z
    8302:	82 83       	std	Z+2, r24	; 0x02
    8304:	84 85       	ldd	r24, Z+12	; 0x0c
    8306:	86 87       	std	Z+14, r24	; 0x0e
    8308:	88 89       	ldd	r24, Y+16	; 0x10
    830a:	8a 8b       	std	Y+18, r24	; 0x12
    830c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    830e:	8e 8f       	std	Y+30, r24	; 0x1e
    8310:	90 91 92 93 	lds	r25, 0x9392
    8314:	94 95       	.word	0x9594	; ????
    8316:	96 97       	sbiw	r26, 0x26	; 38
    8318:	98 99       	sbic	0x13, 0	; 19
    831a:	9a 9b       	sbis	0x13, 2	; 19
    831c:	9c 9d       	mul	r25, r12
    831e:	9e 9f       	mul	r25, r30
    8320:	a0 a1       	ldd	r26, Z+32	; 0x20
    8322:	a2 a3       	std	Z+34, r26	; 0x22
    8324:	a4 a5       	ldd	r26, Z+44	; 0x2c
    8326:	a6 a7       	std	Z+46, r26	; 0x2e
    8328:	a8 a9       	ldd	r26, Y+48	; 0x30
    832a:	aa ab       	std	Y+50, r26	; 0x32
    832c:	ac ad       	ldd	r26, Y+60	; 0x3c
    832e:	ae af       	std	Y+62, r26	; 0x3e
    8330:	b0 b1       	in	r27, 0x00	; 0
    8332:	b2 b3       	in	r27, 0x12	; 18
    8334:	b4 b5       	in	r27, 0x24	; 36
    8336:	b6 b7       	in	r27, 0x36	; 54
    8338:	b8 b9       	out	0x08, r27	; 8
    833a:	ba bb       	out	0x1a, r27	; 26
    833c:	bc bd       	out	0x2c, r27	; 44
    833e:	be bf       	out	0x3e, r27	; 62
    8340:	c0 c1       	rjmp	.+896    	; 0x86c2 <waves+0x4c2>
    8342:	c2 c3       	rjmp	.+1924   	; 0x8ac8 <ProcessParticles+0xa>
    8344:	c4 c5       	rjmp	.+2952   	; 0x8ece <FillScreenPattern+0x56>
    8346:	c6 c7       	rjmp	.+3980   	; 0x92d4 <ProcessGravity+0x6a>
    8348:	c8 c9       	rjmp	.-3184   	; 0x76da <PatchCommand06>
    834a:	ca cb       	rjmp	.-2156   	; 0x7ae0 <ProcessMusic+0x236>
    834c:	cc cd       	rjmp	.-1128   	; 0x7ee6 <TriggerNote+0x30>
    834e:	ce cf       	rjmp	.-100    	; 0x82ec <waves+0xec>
    8350:	d0 d1       	rcall	.+928    	; 0x86f2 <waves+0x4f2>
    8352:	d2 d3       	rcall	.+1956   	; 0x8af8 <ProcessParticles+0x3a>
    8354:	d4 d5       	rcall	.+2984   	; 0x8efe <DrawRectangle+0x8>
    8356:	d6 d7       	rcall	.+4012   	; 0x9304 <ProcessGravity+0x9a>
    8358:	d8 d9       	rcall	.-3152   	; 0x770a <PatchCommand08+0x20>
    835a:	da db       	rcall	.-2124   	; 0x7b10 <ProcessMusic+0x266>
    835c:	dc dd       	rcall	.-1096   	; 0x7f16 <set_note_waves+0x2>
    835e:	de df       	rcall	.-68     	; 0x831c <waves+0x11c>
    8360:	e0 e1       	ldi	r30, 0x10	; 16
    8362:	e2 e3       	ldi	r30, 0x32	; 50
    8364:	e4 e5       	ldi	r30, 0x54	; 84
    8366:	e6 e7       	ldi	r30, 0x76	; 118
    8368:	e8 e9       	ldi	r30, 0x98	; 152
    836a:	ea eb       	ldi	r30, 0xBA	; 186
    836c:	ec ed       	ldi	r30, 0xDC	; 220
    836e:	ee ef       	ldi	r30, 0xFE	; 254
    8370:	f0 f1       	brcs	.+124    	; 0x83ee <waves+0x1ee>
    8372:	f2 f3       	brmi	.-4      	; 0x8370 <waves+0x170>
    8374:	f4 f5       	brge	.+124    	; 0x83f2 <waves+0x1f2>
    8376:	f6 f7       	brtc	.-4      	; 0x8374 <waves+0x174>
    8378:	f8 f9       	.word	0xf9f8	; ????
    837a:	fa fb       	.word	0xfbfa	; ????
    837c:	fc fd       	.word	0xfdfc	; ????
    837e:	fe ff       	.word	0xfffe	; ????
    8380:	00 01       	movw	r0, r0
    8382:	02 03       	mulsu	r16, r18
    8384:	04 05       	cpc	r16, r4
    8386:	06 07       	cpc	r16, r22
    8388:	08 09       	sbc	r16, r8
    838a:	0a 0b       	sbc	r16, r26
    838c:	0c 0d       	add	r16, r12
    838e:	0e 0f       	add	r16, r30
    8390:	10 11       	cpse	r17, r0
    8392:	12 13       	cpse	r17, r18
    8394:	14 15       	cp	r17, r4
    8396:	16 17       	cp	r17, r22
    8398:	18 19       	sub	r17, r8
    839a:	1a 1b       	sub	r17, r26
    839c:	1c 1d       	adc	r17, r12
    839e:	1e 1f       	adc	r17, r30
    83a0:	20 21       	and	r18, r0
    83a2:	22 23       	and	r18, r18
    83a4:	24 25       	eor	r18, r4
    83a6:	26 27       	eor	r18, r22
    83a8:	28 29       	or	r18, r8
    83aa:	2a 2b       	or	r18, r26
    83ac:	2c 2d       	mov	r18, r12
    83ae:	2e 2f       	mov	r18, r30
    83b0:	30 31       	cpi	r19, 0x10	; 16
    83b2:	32 33       	cpi	r19, 0x32	; 50
    83b4:	34 35       	cpi	r19, 0x54	; 84
    83b6:	36 37       	cpi	r19, 0x76	; 118
    83b8:	38 39       	cpi	r19, 0x98	; 152
    83ba:	3a 3b       	cpi	r19, 0xBA	; 186
    83bc:	3c 3d       	cpi	r19, 0xDC	; 220
    83be:	3e 3f       	cpi	r19, 0xFE	; 254
    83c0:	40 41       	sbci	r20, 0x10	; 16
    83c2:	42 43       	sbci	r20, 0x32	; 50
    83c4:	44 45       	sbci	r20, 0x54	; 84
    83c6:	46 47       	sbci	r20, 0x76	; 118
    83c8:	48 49       	sbci	r20, 0x98	; 152
    83ca:	4a 4b       	sbci	r20, 0xBA	; 186
    83cc:	4c 4d       	sbci	r20, 0xDC	; 220
    83ce:	4e 4f       	sbci	r20, 0xFE	; 254
    83d0:	50 51       	subi	r21, 0x10	; 16
    83d2:	52 53       	subi	r21, 0x32	; 50
    83d4:	54 55       	subi	r21, 0x54	; 84
    83d6:	56 57       	subi	r21, 0x76	; 118
    83d8:	58 59       	subi	r21, 0x98	; 152
    83da:	5a 5b       	subi	r21, 0xBA	; 186
    83dc:	5c 5d       	subi	r21, 0xDC	; 220
    83de:	5e 5f       	subi	r21, 0xFE	; 254
    83e0:	60 61       	ori	r22, 0x10	; 16
    83e2:	62 63       	ori	r22, 0x32	; 50
    83e4:	64 65       	ori	r22, 0x54	; 84
    83e6:	66 67       	ori	r22, 0x76	; 118
    83e8:	68 69       	ori	r22, 0x98	; 152
    83ea:	6a 6b       	ori	r22, 0xBA	; 186
    83ec:	6c 6d       	ori	r22, 0xDC	; 220
    83ee:	6e 6f       	ori	r22, 0xFE	; 254
    83f0:	70 71       	andi	r23, 0x10	; 16
    83f2:	72 73       	andi	r23, 0x32	; 50
    83f4:	74 75       	andi	r23, 0x54	; 84
    83f6:	76 77       	andi	r23, 0x76	; 118
    83f8:	78 79       	andi	r23, 0x98	; 152
    83fa:	7a 7b       	andi	r23, 0xBA	; 186
    83fc:	7c 7d       	andi	r23, 0xDC	; 220
    83fe:	7e 7f       	andi	r23, 0xFE	; 254
    8400:	00 02       	muls	r16, r16
    8402:	04 06       	cpc	r0, r20
    8404:	08 0a       	sbc	r0, r24
    8406:	0c 0e       	add	r0, r28
    8408:	10 12       	cpse	r1, r16
    840a:	14 16       	cp	r1, r20
    840c:	18 1a       	sub	r1, r24
    840e:	1c 1e       	adc	r1, r28
    8410:	20 22       	and	r2, r16
    8412:	24 26       	eor	r2, r20
    8414:	28 2a       	or	r2, r24
    8416:	2c 2e       	mov	r2, r28
    8418:	30 32       	cpi	r19, 0x20	; 32
    841a:	34 36       	cpi	r19, 0x64	; 100
    841c:	38 3a       	cpi	r19, 0xA8	; 168
    841e:	3c 3e       	cpi	r19, 0xEC	; 236
    8420:	40 42       	sbci	r20, 0x20	; 32
    8422:	44 46       	sbci	r20, 0x64	; 100
    8424:	48 4a       	sbci	r20, 0xA8	; 168
    8426:	4c 4e       	sbci	r20, 0xEC	; 236
    8428:	50 52       	subi	r21, 0x20	; 32
    842a:	54 56       	subi	r21, 0x64	; 100
    842c:	58 5a       	subi	r21, 0xA8	; 168
    842e:	5c 5e       	subi	r21, 0xEC	; 236
    8430:	60 62       	ori	r22, 0x20	; 32
    8432:	64 66       	ori	r22, 0x64	; 100
    8434:	68 6a       	ori	r22, 0xA8	; 168
    8436:	6c 6e       	ori	r22, 0xEC	; 236
    8438:	70 72       	andi	r23, 0x20	; 32
    843a:	74 76       	andi	r23, 0x64	; 100
    843c:	78 7a       	andi	r23, 0xA8	; 168
    843e:	7c 7e       	andi	r23, 0xEC	; 236
    8440:	7f 7d       	andi	r23, 0xDF	; 223
    8442:	7b 79       	andi	r23, 0x9B	; 155
    8444:	77 75       	andi	r23, 0x57	; 87
    8446:	73 71       	andi	r23, 0x13	; 19
    8448:	6f 6d       	ori	r22, 0xDF	; 223
    844a:	6b 69       	ori	r22, 0x9B	; 155
    844c:	67 65       	ori	r22, 0x57	; 87
    844e:	63 61       	ori	r22, 0x13	; 19
    8450:	5f 5d       	subi	r21, 0xDF	; 223
    8452:	5b 59       	subi	r21, 0x9B	; 155
    8454:	57 55       	subi	r21, 0x57	; 87
    8456:	53 51       	subi	r21, 0x13	; 19
    8458:	4f 4d       	sbci	r20, 0xDF	; 223
    845a:	4b 49       	sbci	r20, 0x9B	; 155
    845c:	47 45       	sbci	r20, 0x57	; 87
    845e:	43 41       	sbci	r20, 0x13	; 19
    8460:	3f 3d       	cpi	r19, 0xDF	; 223
    8462:	3b 39       	cpi	r19, 0x9B	; 155
    8464:	37 35       	cpi	r19, 0x57	; 87
    8466:	33 31       	cpi	r19, 0x13	; 19
    8468:	2f 2d       	mov	r18, r15
    846a:	2b 29       	or	r18, r11
    846c:	27 25       	eor	r18, r7
    846e:	23 21       	and	r18, r3
    8470:	1f 1d       	adc	r17, r15
    8472:	1b 19       	sub	r17, r11
    8474:	17 15       	cp	r17, r7
    8476:	13 11       	cpse	r17, r3
    8478:	0f 0d       	add	r16, r15
    847a:	0b 09       	sbc	r16, r11
    847c:	07 05       	cpc	r16, r7
    847e:	03 01       	movw	r0, r6
    8480:	ff fd       	.word	0xfdff	; ????
    8482:	fb f9       	.word	0xf9fb	; ????
    8484:	f7 f5       	brid	.+124    	; 0x8502 <waves+0x302>
    8486:	f3 f1       	brvs	.+124    	; 0x8504 <waves+0x304>
    8488:	ef ed       	ldi	r30, 0xDF	; 223
    848a:	eb e9       	ldi	r30, 0x9B	; 155
    848c:	e7 e5       	ldi	r30, 0x57	; 87
    848e:	e3 e1       	ldi	r30, 0x13	; 19
    8490:	df dd       	rcall	.-1090   	; 0x8050 <steptable+0x48>
    8492:	db d9       	rcall	.-3146   	; 0x784a <StartSong+0x12>
    8494:	d7 d5       	rcall	.+2990   	; 0x9044 <DrawFrame+0xf8>
    8496:	d3 d1       	rcall	.+934    	; 0x883e <ProcessSprites+0x12>
    8498:	cf cd       	rjmp	.-1122   	; 0x8038 <steptable+0x30>
    849a:	cb c9       	rjmp	.-3178   	; 0x7832 <InitMusicPlayer+0x30>
    849c:	c7 c5       	rjmp	.+2958   	; 0x902c <DrawFrame+0xe0>
    849e:	c3 c1       	rjmp	.+902    	; 0x8826 <RestoreBackground+0x26>
    84a0:	bf bd       	out	0x2f, r27	; 47
    84a2:	bb b9       	out	0x0b, r27	; 11
    84a4:	b7 b5       	in	r27, 0x27	; 39
    84a6:	b3 b1       	in	r27, 0x03	; 3
    84a8:	af ad       	ldd	r26, Y+63	; 0x3f
    84aa:	ab a9       	ldd	r26, Y+51	; 0x33
    84ac:	a7 a5       	ldd	r26, Z+47	; 0x2f
    84ae:	a3 a1       	ldd	r26, Z+35	; 0x23
    84b0:	9f 9d       	mul	r25, r15
    84b2:	9b 99       	sbic	0x13, 3	; 19
    84b4:	97 95       	ror	r25
    84b6:	93 91       	.word	0x9193	; ????
    84b8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    84ba:	8b 89       	ldd	r24, Y+19	; 0x13
    84bc:	87 85       	ldd	r24, Z+15	; 0x0f
    84be:	83 81       	ldd	r24, Z+3	; 0x03
    84c0:	80 82       	st	Z, r8
    84c2:	84 86       	std	Z+12, r8	; 0x0c
    84c4:	88 8a       	std	Y+16, r8	; 0x10
    84c6:	8c 8e       	std	Y+28, r8	; 0x1c
    84c8:	90 92 94 96 	sts	0x9694, r9
    84cc:	98 9a       	sbi	0x13, 0	; 19
    84ce:	9c 9e       	mul	r9, r28
    84d0:	a0 a2       	std	Z+32, r10	; 0x20
    84d2:	a4 a6       	std	Z+44, r10	; 0x2c
    84d4:	a8 aa       	std	Y+48, r10	; 0x30
    84d6:	ac ae       	std	Y+60, r10	; 0x3c
    84d8:	b0 b2       	in	r11, 0x10	; 16
    84da:	b4 b6       	in	r11, 0x34	; 52
    84dc:	b8 ba       	out	0x18, r11	; 24
    84de:	bc be       	out	0x3c, r11	; 60
    84e0:	c0 c2       	rjmp	.+1408   	; 0x8a62 <FadeOut+0x1e>
    84e2:	c4 c6       	rjmp	.+3464   	; 0x926c <ProcessGravity+0x2>
    84e4:	c8 ca       	rjmp	.-2672   	; 0x7a76 <ProcessMusic+0x1cc>
    84e6:	cc ce       	rjmp	.-616    	; 0x8280 <waves+0x80>
    84e8:	d0 d2       	rcall	.+1440   	; 0x8a8a <ProcessFading+0x14>
    84ea:	d4 d6       	rcall	.+3496   	; 0x9294 <ProcessGravity+0x2a>
    84ec:	d8 da       	rcall	.-2640   	; 0x7a9e <ProcessMusic+0x1f4>
    84ee:	dc de       	rcall	.-584    	; 0x82a8 <waves+0xa8>
    84f0:	e0 e2       	ldi	r30, 0x20	; 32
    84f2:	e4 e6       	ldi	r30, 0x64	; 100
    84f4:	e8 ea       	ldi	r30, 0xA8	; 168
    84f6:	ec ee       	ldi	r30, 0xEC	; 236
    84f8:	f0 f2       	brcs	.-68     	; 0x84b6 <waves+0x2b6>
    84fa:	f4 f6       	brge	.-68     	; 0x84b8 <waves+0x2b8>
    84fc:	f8 fa       	.word	0xfaf8	; ????
    84fe:	fc fe       	.word	0xfefc	; ????
    8500:	7f 7f       	andi	r23, 0xFF	; 255
    8502:	7f 7f       	andi	r23, 0xFF	; 255
    8504:	7f 7f       	andi	r23, 0xFF	; 255
    8506:	7f 7f       	andi	r23, 0xFF	; 255
    8508:	7f 7f       	andi	r23, 0xFF	; 255
    850a:	7f 7f       	andi	r23, 0xFF	; 255
    850c:	7f 7f       	andi	r23, 0xFF	; 255
    850e:	7f 7f       	andi	r23, 0xFF	; 255
    8510:	7f 7f       	andi	r23, 0xFF	; 255
    8512:	7f 7f       	andi	r23, 0xFF	; 255
    8514:	7f 7f       	andi	r23, 0xFF	; 255
    8516:	7f 7f       	andi	r23, 0xFF	; 255
    8518:	7f 7f       	andi	r23, 0xFF	; 255
    851a:	7f 7f       	andi	r23, 0xFF	; 255
    851c:	7f 7f       	andi	r23, 0xFF	; 255
    851e:	7f 7f       	andi	r23, 0xFF	; 255
    8520:	7f 7f       	andi	r23, 0xFF	; 255
    8522:	7f 7f       	andi	r23, 0xFF	; 255
    8524:	7f 7f       	andi	r23, 0xFF	; 255
    8526:	7f 7f       	andi	r23, 0xFF	; 255
    8528:	7f 7f       	andi	r23, 0xFF	; 255
    852a:	7f 7f       	andi	r23, 0xFF	; 255
    852c:	7f 7f       	andi	r23, 0xFF	; 255
    852e:	7f 7f       	andi	r23, 0xFF	; 255
    8530:	7f 7f       	andi	r23, 0xFF	; 255
    8532:	7f 7f       	andi	r23, 0xFF	; 255
    8534:	7f 7f       	andi	r23, 0xFF	; 255
    8536:	7f 7f       	andi	r23, 0xFF	; 255
    8538:	7f 7f       	andi	r23, 0xFF	; 255
    853a:	7f 7f       	andi	r23, 0xFF	; 255
    853c:	7f 7f       	andi	r23, 0xFF	; 255
    853e:	7f 7f       	andi	r23, 0xFF	; 255
    8540:	80 80       	ld	r8, Z
    8542:	80 80       	ld	r8, Z
    8544:	80 80       	ld	r8, Z
    8546:	80 80       	ld	r8, Z
    8548:	80 80       	ld	r8, Z
    854a:	80 80       	ld	r8, Z
    854c:	80 80       	ld	r8, Z
    854e:	80 80       	ld	r8, Z
    8550:	80 80       	ld	r8, Z
    8552:	80 80       	ld	r8, Z
    8554:	80 80       	ld	r8, Z
    8556:	80 80       	ld	r8, Z
    8558:	80 80       	ld	r8, Z
    855a:	80 80       	ld	r8, Z
    855c:	80 80       	ld	r8, Z
    855e:	80 80       	ld	r8, Z
    8560:	80 80       	ld	r8, Z
    8562:	80 80       	ld	r8, Z
    8564:	80 80       	ld	r8, Z
    8566:	80 80       	ld	r8, Z
    8568:	80 80       	ld	r8, Z
    856a:	80 80       	ld	r8, Z
    856c:	80 80       	ld	r8, Z
    856e:	80 80       	ld	r8, Z
    8570:	80 80       	ld	r8, Z
    8572:	80 80       	ld	r8, Z
    8574:	80 80       	ld	r8, Z
    8576:	80 80       	ld	r8, Z
    8578:	80 80       	ld	r8, Z
    857a:	80 80       	ld	r8, Z
    857c:	80 80       	ld	r8, Z
    857e:	80 80       	ld	r8, Z
    8580:	80 80       	ld	r8, Z
    8582:	80 80       	ld	r8, Z
    8584:	80 80       	ld	r8, Z
    8586:	80 80       	ld	r8, Z
    8588:	80 80       	ld	r8, Z
    858a:	80 80       	ld	r8, Z
    858c:	80 80       	ld	r8, Z
    858e:	80 80       	ld	r8, Z
    8590:	80 80       	ld	r8, Z
    8592:	80 80       	ld	r8, Z
    8594:	80 80       	ld	r8, Z
    8596:	80 80       	ld	r8, Z
    8598:	80 80       	ld	r8, Z
    859a:	80 80       	ld	r8, Z
    859c:	80 80       	ld	r8, Z
    859e:	80 80       	ld	r8, Z
    85a0:	80 80       	ld	r8, Z
    85a2:	80 80       	ld	r8, Z
    85a4:	80 80       	ld	r8, Z
    85a6:	80 80       	ld	r8, Z
    85a8:	80 80       	ld	r8, Z
    85aa:	80 80       	ld	r8, Z
    85ac:	80 80       	ld	r8, Z
    85ae:	80 80       	ld	r8, Z
    85b0:	80 80       	ld	r8, Z
    85b2:	80 80       	ld	r8, Z
    85b4:	80 80       	ld	r8, Z
    85b6:	80 80       	ld	r8, Z
    85b8:	80 80       	ld	r8, Z
    85ba:	80 80       	ld	r8, Z
    85bc:	80 80       	ld	r8, Z
    85be:	80 80       	ld	r8, Z
    85c0:	80 80       	ld	r8, Z
    85c2:	80 80       	ld	r8, Z
    85c4:	80 80       	ld	r8, Z
    85c6:	80 80       	ld	r8, Z
    85c8:	80 80       	ld	r8, Z
    85ca:	80 80       	ld	r8, Z
    85cc:	80 80       	ld	r8, Z
    85ce:	80 80       	ld	r8, Z
    85d0:	80 80       	ld	r8, Z
    85d2:	80 80       	ld	r8, Z
    85d4:	80 80       	ld	r8, Z
    85d6:	80 80       	ld	r8, Z
    85d8:	80 80       	ld	r8, Z
    85da:	80 80       	ld	r8, Z
    85dc:	80 80       	ld	r8, Z
    85de:	80 80       	ld	r8, Z
    85e0:	80 80       	ld	r8, Z
    85e2:	80 80       	ld	r8, Z
    85e4:	80 80       	ld	r8, Z
    85e6:	80 80       	ld	r8, Z
    85e8:	80 80       	ld	r8, Z
    85ea:	80 80       	ld	r8, Z
    85ec:	80 80       	ld	r8, Z
    85ee:	80 80       	ld	r8, Z
    85f0:	80 80       	ld	r8, Z
    85f2:	80 80       	ld	r8, Z
    85f4:	80 80       	ld	r8, Z
    85f6:	80 80       	ld	r8, Z
    85f8:	80 80       	ld	r8, Z
    85fa:	80 80       	ld	r8, Z
    85fc:	80 80       	ld	r8, Z
    85fe:	80 80       	ld	r8, Z
    8600:	7f 7f       	andi	r23, 0xFF	; 255
    8602:	7f 7f       	andi	r23, 0xFF	; 255
    8604:	7f 7f       	andi	r23, 0xFF	; 255
    8606:	7f 7f       	andi	r23, 0xFF	; 255
    8608:	7f 7f       	andi	r23, 0xFF	; 255
    860a:	7f 7f       	andi	r23, 0xFF	; 255
    860c:	7f 7f       	andi	r23, 0xFF	; 255
    860e:	7f 7f       	andi	r23, 0xFF	; 255
    8610:	7f 7f       	andi	r23, 0xFF	; 255
    8612:	7f 7f       	andi	r23, 0xFF	; 255
    8614:	7f 7f       	andi	r23, 0xFF	; 255
    8616:	7f 7f       	andi	r23, 0xFF	; 255
    8618:	7f 7f       	andi	r23, 0xFF	; 255
    861a:	7f 7f       	andi	r23, 0xFF	; 255
    861c:	7f 7f       	andi	r23, 0xFF	; 255
    861e:	7f 7f       	andi	r23, 0xFF	; 255
    8620:	7f 7f       	andi	r23, 0xFF	; 255
    8622:	7f 7f       	andi	r23, 0xFF	; 255
    8624:	7f 7f       	andi	r23, 0xFF	; 255
    8626:	7f 7f       	andi	r23, 0xFF	; 255
    8628:	7f 7f       	andi	r23, 0xFF	; 255
    862a:	7f 7f       	andi	r23, 0xFF	; 255
    862c:	7f 7f       	andi	r23, 0xFF	; 255
    862e:	7f 7f       	andi	r23, 0xFF	; 255
    8630:	7f 7f       	andi	r23, 0xFF	; 255
    8632:	7f 7f       	andi	r23, 0xFF	; 255
    8634:	7f 7f       	andi	r23, 0xFF	; 255
    8636:	7f 7f       	andi	r23, 0xFF	; 255
    8638:	7f 7f       	andi	r23, 0xFF	; 255
    863a:	7f 7f       	andi	r23, 0xFF	; 255
    863c:	7f 7f       	andi	r23, 0xFF	; 255
    863e:	7f 7f       	andi	r23, 0xFF	; 255
    8640:	7f 7f       	andi	r23, 0xFF	; 255
    8642:	7f 7f       	andi	r23, 0xFF	; 255
    8644:	7f 7f       	andi	r23, 0xFF	; 255
    8646:	7f 7f       	andi	r23, 0xFF	; 255
    8648:	7f 7f       	andi	r23, 0xFF	; 255
    864a:	7f 7f       	andi	r23, 0xFF	; 255
    864c:	7f 7f       	andi	r23, 0xFF	; 255
    864e:	7f 7f       	andi	r23, 0xFF	; 255
    8650:	7f 7f       	andi	r23, 0xFF	; 255
    8652:	7f 7f       	andi	r23, 0xFF	; 255
    8654:	7f 7f       	andi	r23, 0xFF	; 255
    8656:	7f 7f       	andi	r23, 0xFF	; 255
    8658:	7f 7f       	andi	r23, 0xFF	; 255
    865a:	7f 7f       	andi	r23, 0xFF	; 255
    865c:	7f 7f       	andi	r23, 0xFF	; 255
    865e:	7f 7f       	andi	r23, 0xFF	; 255
    8660:	7f 7f       	andi	r23, 0xFF	; 255
    8662:	7f 7f       	andi	r23, 0xFF	; 255
    8664:	7f 7f       	andi	r23, 0xFF	; 255
    8666:	7f 7f       	andi	r23, 0xFF	; 255
    8668:	7f 7f       	andi	r23, 0xFF	; 255
    866a:	7f 7f       	andi	r23, 0xFF	; 255
    866c:	7f 7f       	andi	r23, 0xFF	; 255
    866e:	7f 7f       	andi	r23, 0xFF	; 255
    8670:	7f 7f       	andi	r23, 0xFF	; 255
    8672:	7f 7f       	andi	r23, 0xFF	; 255
    8674:	7f 7f       	andi	r23, 0xFF	; 255
    8676:	7f 7f       	andi	r23, 0xFF	; 255
    8678:	7f 7f       	andi	r23, 0xFF	; 255
    867a:	7f 7f       	andi	r23, 0xFF	; 255
    867c:	7f 7f       	andi	r23, 0xFF	; 255
    867e:	7f 7f       	andi	r23, 0xFF	; 255
    8680:	80 80       	ld	r8, Z
    8682:	80 80       	ld	r8, Z
    8684:	80 80       	ld	r8, Z
    8686:	80 80       	ld	r8, Z
    8688:	80 80       	ld	r8, Z
    868a:	80 80       	ld	r8, Z
    868c:	80 80       	ld	r8, Z
    868e:	80 80       	ld	r8, Z
    8690:	80 80       	ld	r8, Z
    8692:	80 80       	ld	r8, Z
    8694:	80 80       	ld	r8, Z
    8696:	80 80       	ld	r8, Z
    8698:	80 80       	ld	r8, Z
    869a:	80 80       	ld	r8, Z
    869c:	80 80       	ld	r8, Z
    869e:	80 80       	ld	r8, Z
    86a0:	80 80       	ld	r8, Z
    86a2:	80 80       	ld	r8, Z
    86a4:	80 80       	ld	r8, Z
    86a6:	80 80       	ld	r8, Z
    86a8:	80 80       	ld	r8, Z
    86aa:	80 80       	ld	r8, Z
    86ac:	80 80       	ld	r8, Z
    86ae:	80 80       	ld	r8, Z
    86b0:	80 80       	ld	r8, Z
    86b2:	80 80       	ld	r8, Z
    86b4:	80 80       	ld	r8, Z
    86b6:	80 80       	ld	r8, Z
    86b8:	80 80       	ld	r8, Z
    86ba:	80 80       	ld	r8, Z
    86bc:	80 80       	ld	r8, Z
    86be:	80 80       	ld	r8, Z
    86c0:	80 80       	ld	r8, Z
    86c2:	80 80       	ld	r8, Z
    86c4:	80 80       	ld	r8, Z
    86c6:	80 80       	ld	r8, Z
    86c8:	80 80       	ld	r8, Z
    86ca:	80 80       	ld	r8, Z
    86cc:	80 80       	ld	r8, Z
    86ce:	80 80       	ld	r8, Z
    86d0:	80 80       	ld	r8, Z
    86d2:	80 80       	ld	r8, Z
    86d4:	80 80       	ld	r8, Z
    86d6:	80 80       	ld	r8, Z
    86d8:	80 80       	ld	r8, Z
    86da:	80 80       	ld	r8, Z
    86dc:	80 80       	ld	r8, Z
    86de:	80 80       	ld	r8, Z
    86e0:	80 80       	ld	r8, Z
    86e2:	80 80       	ld	r8, Z
    86e4:	80 80       	ld	r8, Z
    86e6:	80 80       	ld	r8, Z
    86e8:	80 80       	ld	r8, Z
    86ea:	80 80       	ld	r8, Z
    86ec:	80 80       	ld	r8, Z
    86ee:	80 80       	ld	r8, Z
    86f0:	80 80       	ld	r8, Z
    86f2:	80 80       	ld	r8, Z
    86f4:	80 80       	ld	r8, Z
    86f6:	80 80       	ld	r8, Z
    86f8:	80 80       	ld	r8, Z
    86fa:	80 80       	ld	r8, Z
    86fc:	80 80       	ld	r8, Z
    86fe:	80 80       	ld	r8, Z
    8700:	7f 7f       	andi	r23, 0xFF	; 255
    8702:	7f 7f       	andi	r23, 0xFF	; 255
    8704:	7f 7f       	andi	r23, 0xFF	; 255
    8706:	7f 7f       	andi	r23, 0xFF	; 255
    8708:	7f 7f       	andi	r23, 0xFF	; 255
    870a:	7f 7f       	andi	r23, 0xFF	; 255
    870c:	7f 7f       	andi	r23, 0xFF	; 255
    870e:	7f 7f       	andi	r23, 0xFF	; 255
    8710:	7f 7f       	andi	r23, 0xFF	; 255
    8712:	7f 7f       	andi	r23, 0xFF	; 255
    8714:	7f 7f       	andi	r23, 0xFF	; 255
    8716:	7f 7f       	andi	r23, 0xFF	; 255
    8718:	7f 7f       	andi	r23, 0xFF	; 255
    871a:	7f 7f       	andi	r23, 0xFF	; 255
    871c:	7f 7f       	andi	r23, 0xFF	; 255
    871e:	7f 7f       	andi	r23, 0xFF	; 255
    8720:	7f 7f       	andi	r23, 0xFF	; 255
    8722:	7f 7f       	andi	r23, 0xFF	; 255
    8724:	7f 7f       	andi	r23, 0xFF	; 255
    8726:	7f 7f       	andi	r23, 0xFF	; 255
    8728:	7f 7f       	andi	r23, 0xFF	; 255
    872a:	7f 7f       	andi	r23, 0xFF	; 255
    872c:	7f 7f       	andi	r23, 0xFF	; 255
    872e:	7f 7f       	andi	r23, 0xFF	; 255
    8730:	7f 7f       	andi	r23, 0xFF	; 255
    8732:	7f 7f       	andi	r23, 0xFF	; 255
    8734:	7f 7f       	andi	r23, 0xFF	; 255
    8736:	7f 7f       	andi	r23, 0xFF	; 255
    8738:	7f 7f       	andi	r23, 0xFF	; 255
    873a:	7f 7f       	andi	r23, 0xFF	; 255
    873c:	7f 7f       	andi	r23, 0xFF	; 255
    873e:	7f 7f       	andi	r23, 0xFF	; 255
    8740:	7f 7f       	andi	r23, 0xFF	; 255
    8742:	7f 7f       	andi	r23, 0xFF	; 255
    8744:	7f 7f       	andi	r23, 0xFF	; 255
    8746:	7f 7f       	andi	r23, 0xFF	; 255
    8748:	7f 7f       	andi	r23, 0xFF	; 255
    874a:	7f 7f       	andi	r23, 0xFF	; 255
    874c:	7f 7f       	andi	r23, 0xFF	; 255
    874e:	7f 7f       	andi	r23, 0xFF	; 255
    8750:	7f 7f       	andi	r23, 0xFF	; 255
    8752:	7f 7f       	andi	r23, 0xFF	; 255
    8754:	7f 7f       	andi	r23, 0xFF	; 255
    8756:	7f 7f       	andi	r23, 0xFF	; 255
    8758:	7f 7f       	andi	r23, 0xFF	; 255
    875a:	7f 7f       	andi	r23, 0xFF	; 255
    875c:	7f 7f       	andi	r23, 0xFF	; 255
    875e:	7f 7f       	andi	r23, 0xFF	; 255
    8760:	7f 7f       	andi	r23, 0xFF	; 255
    8762:	7f 7f       	andi	r23, 0xFF	; 255
    8764:	7f 7f       	andi	r23, 0xFF	; 255
    8766:	7f 7f       	andi	r23, 0xFF	; 255
    8768:	7f 7f       	andi	r23, 0xFF	; 255
    876a:	7f 7f       	andi	r23, 0xFF	; 255
    876c:	7f 7f       	andi	r23, 0xFF	; 255
    876e:	7f 7f       	andi	r23, 0xFF	; 255
    8770:	7f 7f       	andi	r23, 0xFF	; 255
    8772:	7f 7f       	andi	r23, 0xFF	; 255
    8774:	7f 7f       	andi	r23, 0xFF	; 255
    8776:	7f 7f       	andi	r23, 0xFF	; 255
    8778:	7f 7f       	andi	r23, 0xFF	; 255
    877a:	7f 7f       	andi	r23, 0xFF	; 255
    877c:	7f 7f       	andi	r23, 0xFF	; 255
    877e:	7f 7f       	andi	r23, 0xFF	; 255
    8780:	7f 7f       	andi	r23, 0xFF	; 255
    8782:	7f 7f       	andi	r23, 0xFF	; 255
    8784:	7f 7f       	andi	r23, 0xFF	; 255
    8786:	7f 7f       	andi	r23, 0xFF	; 255
    8788:	7f 7f       	andi	r23, 0xFF	; 255
    878a:	7f 7f       	andi	r23, 0xFF	; 255
    878c:	7f 7f       	andi	r23, 0xFF	; 255
    878e:	7f 7f       	andi	r23, 0xFF	; 255
    8790:	7f 7f       	andi	r23, 0xFF	; 255
    8792:	7f 7f       	andi	r23, 0xFF	; 255
    8794:	7f 7f       	andi	r23, 0xFF	; 255
    8796:	7f 7f       	andi	r23, 0xFF	; 255
    8798:	7f 7f       	andi	r23, 0xFF	; 255
    879a:	7f 7f       	andi	r23, 0xFF	; 255
    879c:	7f 7f       	andi	r23, 0xFF	; 255
    879e:	7f 7f       	andi	r23, 0xFF	; 255
    87a0:	7f 7f       	andi	r23, 0xFF	; 255
    87a2:	7f 7f       	andi	r23, 0xFF	; 255
    87a4:	7f 7f       	andi	r23, 0xFF	; 255
    87a6:	7f 7f       	andi	r23, 0xFF	; 255
    87a8:	7f 7f       	andi	r23, 0xFF	; 255
    87aa:	7f 7f       	andi	r23, 0xFF	; 255
    87ac:	7f 7f       	andi	r23, 0xFF	; 255
    87ae:	7f 7f       	andi	r23, 0xFF	; 255
    87b0:	7f 7f       	andi	r23, 0xFF	; 255
    87b2:	7f 7f       	andi	r23, 0xFF	; 255
    87b4:	7f 7f       	andi	r23, 0xFF	; 255
    87b6:	7f 7f       	andi	r23, 0xFF	; 255
    87b8:	7f 7f       	andi	r23, 0xFF	; 255
    87ba:	7f 7f       	andi	r23, 0xFF	; 255
    87bc:	7f 7f       	andi	r23, 0xFF	; 255
    87be:	7f 7f       	andi	r23, 0xFF	; 255
    87c0:	80 80       	ld	r8, Z
    87c2:	80 80       	ld	r8, Z
    87c4:	80 80       	ld	r8, Z
    87c6:	80 80       	ld	r8, Z
    87c8:	80 80       	ld	r8, Z
    87ca:	80 80       	ld	r8, Z
    87cc:	80 80       	ld	r8, Z
    87ce:	80 80       	ld	r8, Z
    87d0:	80 80       	ld	r8, Z
    87d2:	80 80       	ld	r8, Z
    87d4:	80 80       	ld	r8, Z
    87d6:	80 80       	ld	r8, Z
    87d8:	80 80       	ld	r8, Z
    87da:	80 80       	ld	r8, Z
    87dc:	80 80       	ld	r8, Z
    87de:	80 80       	ld	r8, Z
    87e0:	80 80       	ld	r8, Z
    87e2:	80 80       	ld	r8, Z
    87e4:	80 80       	ld	r8, Z
    87e6:	80 80       	ld	r8, Z
    87e8:	80 80       	ld	r8, Z
    87ea:	80 80       	ld	r8, Z
    87ec:	80 80       	ld	r8, Z
    87ee:	80 80       	ld	r8, Z
    87f0:	80 80       	ld	r8, Z
    87f2:	80 80       	ld	r8, Z
    87f4:	80 80       	ld	r8, Z
    87f6:	80 80       	ld	r8, Z
    87f8:	80 80       	ld	r8, Z
    87fa:	80 80       	ld	r8, Z
    87fc:	80 80       	ld	r8, Z
    87fe:	80 80       	ld	r8, Z

00008800 <RestoreBackground>:
	unsigned char free_tile_index, userRamTilesCount=0,userRamTilesCount_tmp=0;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=userRamTilesCount;i<free_tile_index;i++){
    8800:	20 91 c6 0c 	lds	r18, 0x0CC6
    8804:	0e c0       	rjmp	.+28     	; 0x8822 <RestoreBackground+0x22>
			//vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
			*ram_tiles_restore[i].addr=ram_tiles_restore[i].tileIndex;
    8806:	82 2f       	mov	r24, r18
    8808:	90 e0       	ldi	r25, 0x00	; 0
    880a:	fc 01       	movw	r30, r24
    880c:	ee 0f       	add	r30, r30
    880e:	ff 1f       	adc	r31, r31
    8810:	e8 0f       	add	r30, r24
    8812:	f9 1f       	adc	r31, r25
    8814:	e4 5e       	subi	r30, 0xE4	; 228
    8816:	f3 4f       	sbci	r31, 0xF3	; 243
    8818:	a0 81       	ld	r26, Z
    881a:	b1 81       	ldd	r27, Z+1	; 0x01
    881c:	82 81       	ldd	r24, Z+2	; 0x02
    881e:	8c 93       	st	X, r24
	unsigned char free_tile_index, userRamTilesCount=0,userRamTilesCount_tmp=0;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=userRamTilesCount;i<free_tile_index;i++){
    8820:	2f 5f       	subi	r18, 0xFF	; 255
    8822:	80 91 74 0d 	lds	r24, 0x0D74
    8826:	28 17       	cp	r18, r24
    8828:	70 f3       	brcs	.-36     	; 0x8806 <RestoreBackground+0x6>
			//vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
			*ram_tiles_restore[i].addr=ram_tiles_restore[i].tileIndex;
		}	
	}
    882a:	08 95       	ret

0000882c <ProcessSprites>:
		}

	}
	*/

	void ProcessSprites(){
    882c:	a4 e0       	ldi	r26, 0x04	; 4
    882e:	b0 e0       	ldi	r27, 0x00	; 0
    8830:	ec e1       	ldi	r30, 0x1C	; 28
    8832:	f4 e4       	ldi	r31, 0x44	; 68
    8834:	0c 94 a9 57 	jmp	0xaf52	; 0xaf52 <__prologue_saves__>
	
		unsigned char i,bx,by,dx,dy,bt,x,y,tx=1,ty=1,wx,wy;
		unsigned int ramPtr,ssx,ssy;

		if(!spritesOn) return;
    8838:	80 91 00 01 	lds	r24, 0x0100
    883c:	88 23       	and	r24, r24
    883e:	09 f4       	brne	.+2      	; 0x8842 <ProcessSprites+0x16>
    8840:	be c0       	rjmp	.+380    	; 0x89be <ProcessSprites+0x192>

		userRamTilesCount=userRamTilesCount_tmp;
    8842:	80 91 c7 0c 	lds	r24, 0x0CC7
    8846:	80 93 c6 0c 	sts	0x0CC6, r24
		free_tile_index=userRamTilesCount;
    884a:	80 93 74 0d 	sts	0x0D74, r24
    884e:	ac e2       	ldi	r26, 0x2C	; 44
    8850:	8a 2e       	mov	r8, r26
    8852:	a4 e0       	ldi	r26, 0x04	; 4
    8854:	9a 2e       	mov	r9, r26
    8856:	66 24       	eor	r6, r6
	
		for(i=0;i<MAX_SPRITES;i++){
			bx=sprites[i].x;
    8858:	f4 01       	movw	r30, r8
    885a:	80 81       	ld	r24, Z

			if(bx!=(SCREEN_TILES_H*TILE_WIDTH)){
    885c:	80 3f       	cpi	r24, 0xF0	; 240
    885e:	09 f4       	brne	.+2      	; 0x8862 <ProcessSprites+0x36>
    8860:	90 c0       	rjmp	.+288    	; 0x8982 <ProcessSprites+0x156>
				#if SCROLLING == 1
					ssx=sprites[i].x+Screen.scrollX;
					ssy=sprites[i].y+Screen.scrollY;
   				#else
					ssx=sprites[i].x;
					ssy=sprites[i].y;
    8862:	91 81       	ldd	r25, Z+1	; 0x01

				tx=1;
				ty=1;

				//get the BG tiles that are overlapped by the sprite
				bx=ssx>>3;
    8864:	f8 2f       	mov	r31, r24
    8866:	f6 95       	lsr	r31
    8868:	f6 95       	lsr	r31
    886a:	f6 95       	lsr	r31
    886c:	f9 83       	std	Y+1, r31	; 0x01
				dx=ssx&0x7;
    886e:	28 2f       	mov	r18, r24
    8870:	27 70       	andi	r18, 0x07	; 7
				if(dx>0) tx++;
    8872:	19 f0       	breq	.+6      	; 0x887a <ProcessSprites+0x4e>
    8874:	f2 e0       	ldi	r31, 0x02	; 2
    8876:	2f 2e       	mov	r2, r31
    8878:	02 c0       	rjmp	.+4      	; 0x887e <ProcessSprites+0x52>
    887a:	22 24       	eor	r2, r2
    887c:	23 94       	inc	r2

				//by=ssy>>3;
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
    887e:	39 2f       	mov	r19, r25
    8880:	36 95       	lsr	r19
    8882:	36 95       	lsr	r19
    8884:	36 95       	lsr	r19
				dy=ssy%TILE_HEIGHT;
    8886:	89 2f       	mov	r24, r25
    8888:	87 70       	andi	r24, 0x07	; 7
				if(dy>0) ty++;			
    888a:	19 f0       	breq	.+6      	; 0x8892 <ProcessSprites+0x66>
    888c:	e2 e0       	ldi	r30, 0x02	; 2
    888e:	3e 2e       	mov	r3, r30
    8890:	02 c0       	rjmp	.+4      	; 0x8896 <ProcessSprites+0x6a>
    8892:	33 24       	eor	r3, r3
    8894:	33 94       	inc	r3
								bt=free_tile_index;
								free_tile_index++;
							}
				
							if(bt<RAM_TILES_COUNT){				
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    8896:	b8 2e       	mov	r11, r24
    8898:	aa 24       	eor	r10, r10
    889a:	25 01       	movw	r4, r10
    889c:	42 0e       	add	r4, r18
    889e:	51 1c       	adc	r5, r1
    88a0:	73 2e       	mov	r7, r19
    88a2:	cc 24       	eor	r12, r12
    88a4:	dd 24       	eor	r13, r13
    88a6:	64 c0       	rjmp	.+200    	; 0x8970 <ProcessSprites+0x144>

							//process X-Y wrapping
                            #if SCROLLING == 0
							    if(wy>=(VRAM_TILES_V*2)){
								    wy-=(VRAM_TILES_V*2);
							    }else if(wy>=VRAM_TILES_V){
    88a8:	29 e1       	ldi	r18, 0x19	; 25
    88aa:	27 15       	cp	r18, r7
    88ac:	10 f0       	brcs	.+4      	; 0x88b2 <ProcessSprites+0x86>
    88ae:	a7 2d       	mov	r26, r7
    88b0:	01 c0       	rjmp	.+2      	; 0x88b4 <ProcessSprites+0x88>
    88b2:	aa 81       	ldd	r26, Y+2	; 0x02
								    wy-=(Screen.scrollHeight*2);
							    }else if(wy>=Screen.scrollHeight){
							    	wy-=Screen.scrollHeight;
							    }
                            #endif
							if(wx>=VRAM_TILES_H)wx-=VRAM_TILES_H; //should always be 32
    88b4:	0e 31       	cpi	r16, 0x1E	; 30
    88b6:	10 f4       	brcc	.+4      	; 0x88bc <ProcessSprites+0x90>
    88b8:	80 2f       	mov	r24, r16
    88ba:	02 c0       	rjmp	.+4      	; 0x88c0 <ProcessSprites+0x94>
    88bc:	80 2f       	mov	r24, r16
    88be:	8e 51       	subi	r24, 0x1E	; 30

							#if SCROLLING == 0
								ramPtr=(wy*VRAM_TILES_H)+wx;
    88c0:	fe e1       	ldi	r31, 0x1E	; 30
    88c2:	af 9f       	mul	r26, r31
    88c4:	f0 01       	movw	r30, r0
    88c6:	11 24       	eor	r1, r1
    88c8:	e8 0f       	add	r30, r24
    88ca:	f1 1d       	adc	r31, r1
    88cc:	fc 83       	std	Y+4, r31	; 0x04
    88ce:	eb 83       	std	Y+3, r30	; 0x03

								ramPtr=((wy>>3)*256)+(wx*8)+(wy&7);	

							#endif

							bt=vram[ramPtr];						
    88d0:	e0 5e       	subi	r30, 0xE0	; 224
    88d2:	fe 4f       	sbci	r31, 0xFE	; 254
    88d4:	10 81       	ld	r17, Z

							if( ((bt>=RAM_TILES_COUNT) | (bt<userRamTilesCount)) && (free_tile_index < RAM_TILES_COUNT) ){ //if no ram free ignore tile
    88d6:	20 e0       	ldi	r18, 0x00	; 0
    88d8:	1e 31       	cpi	r17, 0x1E	; 30
    88da:	08 f0       	brcs	.+2      	; 0x88de <ProcessSprites+0xb2>
    88dc:	21 e0       	ldi	r18, 0x01	; 1
    88de:	90 e0       	ldi	r25, 0x00	; 0
    88e0:	80 91 c6 0c 	lds	r24, 0x0CC6
    88e4:	18 17       	cp	r17, r24
    88e6:	08 f4       	brcc	.+2      	; 0x88ea <ProcessSprites+0xbe>
    88e8:	91 e0       	ldi	r25, 0x01	; 1
    88ea:	22 23       	and	r18, r18
    88ec:	21 f4       	brne	.+8      	; 0x88f6 <ProcessSprites+0xca>
    88ee:	99 23       	and	r25, r25
    88f0:	11 f4       	brne	.+4      	; 0x88f6 <ProcessSprites+0xca>
    88f2:	61 2f       	mov	r22, r17
    88f4:	2b c0       	rjmp	.+86     	; 0x894c <ProcessSprites+0x120>
    88f6:	60 91 74 0d 	lds	r22, 0x0D74
    88fa:	6e 31       	cpi	r22, 0x1E	; 30
    88fc:	10 f0       	brcs	.+4      	; 0x8902 <ProcessSprites+0xd6>
    88fe:	61 2f       	mov	r22, r17
    8900:	23 c0       	rjmp	.+70     	; 0x8948 <ProcessSprites+0x11c>
								if( bt>=RAM_TILES_COUNT ){
    8902:	22 23       	and	r18, r18
    8904:	29 f0       	breq	.+10     	; 0x8910 <ProcessSprites+0xe4>
									//tile is mapped to flash. Copy it to next free RAM tile.
									CopyFlashTile(bt-RAM_TILES_COUNT,free_tile_index);
    8906:	81 2f       	mov	r24, r17
    8908:	8e 51       	subi	r24, 0x1E	; 30
    890a:	0e 94 12 36 	call	0x6c24	; 0x6c24 <CopyFlashTile>
    890e:	05 c0       	rjmp	.+10     	; 0x891a <ProcessSprites+0xee>
								}else if(bt<userRamTilesCount){
    8910:	99 23       	and	r25, r25
    8912:	19 f0       	breq	.+6      	; 0x891a <ProcessSprites+0xee>
									//tile is a user ram tile. Copy it to next free RAM tile.
									CopyRamTile(bt,free_tile_index);
    8914:	81 2f       	mov	r24, r17
    8916:	0e 94 a1 36 	call	0x6d42	; 0x6d42 <CopyRamTile>
								}
								ram_tiles_restore[free_tile_index].addr=(&vram[ramPtr]);
    891a:	60 91 74 0d 	lds	r22, 0x0D74
    891e:	86 2f       	mov	r24, r22
    8920:	90 e0       	ldi	r25, 0x00	; 0
    8922:	fc 01       	movw	r30, r24
    8924:	ee 0f       	add	r30, r30
    8926:	ff 1f       	adc	r31, r31
    8928:	e8 0f       	add	r30, r24
    892a:	f9 1f       	adc	r31, r25
    892c:	e4 5e       	subi	r30, 0xE4	; 228
    892e:	f3 4f       	sbci	r31, 0xF3	; 243
    8930:	ab 81       	ldd	r26, Y+3	; 0x03
    8932:	bc 81       	ldd	r27, Y+4	; 0x04
    8934:	a0 5e       	subi	r26, 0xE0	; 224
    8936:	be 4f       	sbci	r27, 0xFE	; 254
    8938:	b1 83       	std	Z+1, r27	; 0x01
    893a:	a0 83       	st	Z, r26
								ram_tiles_restore[free_tile_index].tileIndex=bt;
    893c:	12 83       	std	Z+2, r17	; 0x02
								vram[ramPtr]=free_tile_index;
    893e:	6c 93       	st	X, r22
								bt=free_tile_index;
								free_tile_index++;
    8940:	6f 5f       	subi	r22, 0xFF	; 255
    8942:	60 93 74 0d 	sts	0x0D74, r22
    8946:	61 50       	subi	r22, 0x01	; 1
							}
				
							if(bt<RAM_TILES_COUNT){				
    8948:	6e 31       	cpi	r22, 0x1E	; 30
    894a:	28 f4       	brcc	.+10     	; 0x8956 <ProcessSprites+0x12a>
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    894c:	86 2d       	mov	r24, r6
    894e:	a7 01       	movw	r20, r14
    8950:	92 01       	movw	r18, r4
    8952:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <BlitSprite>
    8956:	08 94       	sec
    8958:	e1 1c       	adc	r14, r1
    895a:	f1 1c       	adc	r15, r1
    895c:	0f 5f       	subi	r16, 0xFF	; 255
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){

					for(x=0;x<tx;x++){
    895e:	e2 14       	cp	r14, r2
    8960:	08 f4       	brcc	.+2      	; 0x8964 <ProcessSprites+0x138>
    8962:	a2 cf       	rjmp	.-188    	; 0x88a8 <ProcessSprites+0x7c>
    8964:	08 94       	sec
    8966:	c1 1c       	adc	r12, r1
    8968:	d1 1c       	adc	r13, r1
    896a:	73 94       	inc	r7
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){
    896c:	c3 14       	cp	r12, r3
    896e:	48 f4       	brcc	.+18     	; 0x8982 <ProcessSprites+0x156>
								bt=free_tile_index;
								free_tile_index++;
							}
				
							if(bt<RAM_TILES_COUNT){				
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    8970:	80 e0       	ldi	r24, 0x00	; 0
    8972:	9c 2d       	mov	r25, r12
    8974:	9c 01       	movw	r18, r24
    8976:	79 01       	movw	r14, r18
    8978:	09 81       	ldd	r16, Y+1	; 0x01

							//process X-Y wrapping
                            #if SCROLLING == 0
							    if(wy>=(VRAM_TILES_V*2)){
								    wy-=(VRAM_TILES_V*2);
							    }else if(wy>=VRAM_TILES_V){
    897a:	27 2d       	mov	r18, r7
    897c:	2a 51       	subi	r18, 0x1A	; 26
    897e:	2a 83       	std	Y+2, r18	; 0x02
    8980:	93 cf       	rjmp	.-218    	; 0x88a8 <ProcessSprites+0x7c>
		if(!spritesOn) return;

		userRamTilesCount=userRamTilesCount_tmp;
		free_tile_index=userRamTilesCount;
	
		for(i=0;i<MAX_SPRITES;i++){
    8982:	63 94       	inc	r6
    8984:	84 e0       	ldi	r24, 0x04	; 4
    8986:	90 e0       	ldi	r25, 0x00	; 0
    8988:	88 0e       	add	r8, r24
    898a:	99 1e       	adc	r9, r25
    898c:	9c e1       	ldi	r25, 0x1C	; 28
    898e:	69 16       	cp	r6, r25
    8990:	09 f0       	breq	.+2      	; 0x8994 <ProcessSprites+0x168>
    8992:	62 cf       	rjmp	.-316    	; 0x8858 <ProcessSprites+0x2c>
	unsigned char free_tile_index, userRamTilesCount=0,userRamTilesCount_tmp=0;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=userRamTilesCount;i<free_tile_index;i++){
    8994:	20 91 c6 0c 	lds	r18, 0x0CC6
    8998:	0e c0       	rjmp	.+28     	; 0x89b6 <ProcessSprites+0x18a>
			//vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
			*ram_tiles_restore[i].addr=ram_tiles_restore[i].tileIndex;
    899a:	82 2f       	mov	r24, r18
    899c:	90 e0       	ldi	r25, 0x00	; 0
    899e:	fc 01       	movw	r30, r24
    89a0:	ee 0f       	add	r30, r30
    89a2:	ff 1f       	adc	r31, r31
    89a4:	e8 0f       	add	r30, r24
    89a6:	f9 1f       	adc	r31, r25
    89a8:	e4 5e       	subi	r30, 0xE4	; 228
    89aa:	f3 4f       	sbci	r31, 0xF3	; 243
    89ac:	a0 81       	ld	r26, Z
    89ae:	b1 81       	ldd	r27, Z+1	; 0x01
    89b0:	82 81       	ldd	r24, Z+2	; 0x02
    89b2:	8c 93       	st	X, r24
	unsigned char free_tile_index, userRamTilesCount=0,userRamTilesCount_tmp=0;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=userRamTilesCount;i<free_tile_index;i++){
    89b4:	2f 5f       	subi	r18, 0xFF	; 255
    89b6:	80 91 74 0d 	lds	r24, 0x0D74
    89ba:	28 17       	cp	r18, r24
    89bc:	70 f3       	brcs	.-36     	; 0x899a <ProcessSprites+0x16e>


		//restore BG tiles
		RestoreBackground();

	}
    89be:	24 96       	adiw	r28, 0x04	; 4
    89c0:	e2 e1       	ldi	r30, 0x12	; 18
    89c2:	0c 94 c5 57 	jmp	0xaf8a	; 0xaf8a <__epilogue_restores__>

000089c6 <DisplayLogo>:
		
			WaitVsync(65);
			ClearVram();
			WaitVsync(20);
		#endif	
	}
    89c6:	08 95       	ret

000089c8 <InitializeVideoMode>:


	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){
    89c8:	ec e2       	ldi	r30, 0x2C	; 44
    89ca:	f4 e0       	ldi	r31, 0x04	; 4

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
			sprites[i].x=(SCREEN_TILES_H*TILE_WIDTH);		
    89cc:	80 ef       	ldi	r24, 0xF0	; 240
    89ce:	80 83       	st	Z, r24
    89d0:	34 96       	adiw	r30, 0x04	; 4

	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
    89d2:	94 e0       	ldi	r25, 0x04	; 4
    89d4:	ec 39       	cpi	r30, 0x9C	; 156
    89d6:	f9 07       	cpc	r31, r25
    89d8:	d1 f7       	brne	.-12     	; 0x89ce <InitializeVideoMode+0x6>
			screenSections[i].wrapLine=0;
			screenSections[i].flags=SCT_PRIORITY_SPR;
		}
		*/

	}
    89da:	08 95       	ret

000089dc <VideoModeVsync>:

	//Callback invoked during hsync
	void VideoModeVsync(){
		
		ProcessFading();
    89dc:	0e 94 3b 45 	call	0x8a76	; 0x8a76 <ProcessFading>
		ProcessSprites();
    89e0:	0e 94 16 44 	call	0x882c	; 0x882c <ProcessSprites>

	}
    89e4:	08 95       	ret

000089e6 <WaitVsync>:
		}
	}
}

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
    89e6:	0f 93       	push	r16
    89e8:	1f 93       	push	r17
    89ea:	cf 93       	push	r28
    89ec:	df 93       	push	r29
    89ee:	8c 01       	movw	r16, r24
    89f0:	c0 e0       	ldi	r28, 0x00	; 0
    89f2:	d0 e0       	ldi	r29, 0x00	; 0
    89f4:	07 c0       	rjmp	.+14     	; 0x8a04 <WaitVsync+0x1e>
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
		while(!GetVsyncFlag());
    89f6:	0e 94 6e 39 	call	0x72dc	; 0x72dc <GetVsyncFlag>
    89fa:	88 23       	and	r24, r24
    89fc:	e1 f3       	breq	.-8      	; 0x89f6 <WaitVsync+0x10>
		ClearVsyncFlag();		
    89fe:	0e 94 72 39 	call	0x72e4	; 0x72e4 <ClearVsyncFlag>

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    8a02:	21 96       	adiw	r28, 0x01	; 1
    8a04:	c0 17       	cp	r28, r16
    8a06:	d1 07       	cpc	r29, r17
    8a08:	b4 f3       	brlt	.-20     	; 0x89f6 <WaitVsync+0x10>
		while(!GetVsyncFlag());
		ClearVsyncFlag();		
	}
}
    8a0a:	df 91       	pop	r29
    8a0c:	cf 91       	pop	r28
    8a0e:	1f 91       	pop	r17
    8a10:	0f 91       	pop	r16
    8a12:	08 95       	ret

00008a14 <FadeIn>:
	}
	
	
}

void FadeIn(unsigned char speed,bool blocking){
    8a14:	98 2f       	mov	r25, r24
	if(speed==0){
    8a16:	88 23       	and	r24, r24
    8a18:	19 f4       	brne	.+6      	; 0x8a20 <FadeIn+0xc>
		DDRC=0xff;
    8a1a:	8f ef       	ldi	r24, 0xFF	; 255
    8a1c:	87 b9       	out	0x07, r24	; 7
    8a1e:	08 95       	ret
		return;
	}
	fadeStep=1;
    8a20:	81 e0       	ldi	r24, 0x01	; 1
    8a22:	80 93 77 0d 	sts	0x0D77, r24
	fadeDir=1;
    8a26:	80 93 73 0d 	sts	0x0D73, r24
char fadeDir;
bool volatile fadeActive;


void doFade(unsigned char speed,bool blocking){
	fadeSpeed=speed;
    8a2a:	90 93 72 0d 	sts	0x0D72, r25
	currFadeFrame=0;
    8a2e:	10 92 76 0d 	sts	0x0D76, r1
	fadeActive=true;
    8a32:	80 93 75 0d 	sts	0x0D75, r24
		
	if(blocking){
    8a36:	66 23       	and	r22, r22
    8a38:	21 f0       	breq	.+8      	; 0x8a42 <FadeIn+0x2e>
		while(fadeActive==true);
    8a3a:	80 91 75 0d 	lds	r24, 0x0D75
    8a3e:	88 23       	and	r24, r24
    8a40:	e1 f7       	brne	.-8      	; 0x8a3a <FadeIn+0x26>
    8a42:	08 95       	ret

00008a44 <FadeOut>:
	fadeStep=1;
	fadeDir=1;
	doFade(speed,blocking);
}

void FadeOut(unsigned char speed,bool blocking){
    8a44:	98 2f       	mov	r25, r24
	if(speed==0){
    8a46:	88 23       	and	r24, r24
    8a48:	11 f4       	brne	.+4      	; 0x8a4e <FadeOut+0xa>
		DDRC=0;
    8a4a:	17 b8       	out	0x07, r1	; 7
    8a4c:	08 95       	ret
		return;
	}
	
	fadeStep=FADER_STEPS;
    8a4e:	8c e0       	ldi	r24, 0x0C	; 12
    8a50:	80 93 77 0d 	sts	0x0D77, r24
	fadeDir=-1;
    8a54:	8f ef       	ldi	r24, 0xFF	; 255
    8a56:	80 93 73 0d 	sts	0x0D73, r24
char fadeDir;
bool volatile fadeActive;


void doFade(unsigned char speed,bool blocking){
	fadeSpeed=speed;
    8a5a:	90 93 72 0d 	sts	0x0D72, r25
	currFadeFrame=0;
    8a5e:	10 92 76 0d 	sts	0x0D76, r1
	fadeActive=true;
    8a62:	81 e0       	ldi	r24, 0x01	; 1
    8a64:	80 93 75 0d 	sts	0x0D75, r24
		
	if(blocking){
    8a68:	66 23       	and	r22, r22
    8a6a:	21 f0       	breq	.+8      	; 0x8a74 <FadeOut+0x30>
		while(fadeActive==true);
    8a6c:	80 91 75 0d 	lds	r24, 0x0D75
    8a70:	88 23       	and	r24, r24
    8a72:	e1 f7       	brne	.-8      	; 0x8a6c <FadeOut+0x28>
    8a74:	08 95       	ret

00008a76 <ProcessFading>:
}


//called by the kernel at each field end
void ProcessFading(){
	if(fadeActive==true){
    8a76:	80 91 75 0d 	lds	r24, 0x0D75
    8a7a:	88 23       	and	r24, r24
    8a7c:	f9 f0       	breq	.+62     	; 0x8abc <ProcessFading+0x46>
		if(currFadeFrame==0){
    8a7e:	80 91 76 0d 	lds	r24, 0x0D76
    8a82:	88 23       	and	r24, r24
    8a84:	c1 f4       	brne	.+48     	; 0x8ab6 <ProcessFading+0x40>
			currFadeFrame=fadeSpeed;
    8a86:	80 91 72 0d 	lds	r24, 0x0D72
    8a8a:	80 93 76 0d 	sts	0x0D76, r24
			DDRC = pgm_read_byte(&(fader[fadeStep-1]));
    8a8e:	80 91 77 0d 	lds	r24, 0x0D77
    8a92:	e8 2f       	mov	r30, r24
    8a94:	f0 e0       	ldi	r31, 0x00	; 0
    8a96:	e5 52       	subi	r30, 0x25	; 37
    8a98:	ff 4f       	sbci	r31, 0xFF	; 255
    8a9a:	e4 91       	lpm	r30, Z+
    8a9c:	e7 b9       	out	0x07, r30	; 7
			fadeStep+=fadeDir;
    8a9e:	90 91 73 0d 	lds	r25, 0x0D73
    8aa2:	98 0f       	add	r25, r24
    8aa4:	90 93 77 0d 	sts	0x0D77, r25
			if(fadeStep==0 || fadeStep==(FADER_STEPS+1)){
    8aa8:	99 23       	and	r25, r25
    8aaa:	11 f0       	breq	.+4      	; 0x8ab0 <ProcessFading+0x3a>
    8aac:	9d 30       	cpi	r25, 0x0D	; 13
    8aae:	31 f4       	brne	.+12     	; 0x8abc <ProcessFading+0x46>
				fadeActive=false;
    8ab0:	10 92 75 0d 	sts	0x0D75, r1
    8ab4:	08 95       	ret
			}
		}else{
			currFadeFrame--;
    8ab6:	81 50       	subi	r24, 0x01	; 1
    8ab8:	80 93 76 0d 	sts	0x0D76, r24
    8abc:	08 95       	ret

00008abe <ProcessParticles>:

void ProcessParticles(){
    8abe:	cf 93       	push	r28
    8ac0:	df 93       	push	r29
    8ac2:	ec e2       	ldi	r30, 0x2C	; 44
    8ac4:	f4 e0       	ldi	r31, 0x04	; 4
	uint8_t scount = 0;
	for(uint8_t i=0;i<MAX_SPRITES;i++)//hide all sprites
		sprites[i].x = TILE_WIDTH*SCREEN_TILES_H;
    8ac6:	80 ef       	ldi	r24, 0xF0	; 240
    8ac8:	80 83       	st	Z, r24
    8aca:	34 96       	adiw	r30, 0x04	; 4
	particles[low].type = style;
}

void ProcessParticles(){
	uint8_t scount = 0;
	for(uint8_t i=0;i<MAX_SPRITES;i++)//hide all sprites
    8acc:	94 e0       	ldi	r25, 0x04	; 4
    8ace:	ec 39       	cpi	r30, 0x9C	; 156
    8ad0:	f9 07       	cpc	r31, r25
    8ad2:	d1 f7       	brne	.-12     	; 0x8ac8 <ProcessParticles+0xa>
		if(!particles[i].time){
			particles[i].type = 0;//turn off
			continue;
		}else{
			particles[i].time--;
			if((global_frame & 3) == 3)
    8ad4:	80 91 c8 0c 	lds	r24, 0x0CC8
    8ad8:	28 2f       	mov	r18, r24
    8ada:	30 e0       	ldi	r19, 0x00	; 0
    8adc:	23 70       	andi	r18, 0x03	; 3
    8ade:	30 70       	andi	r19, 0x00	; 0
    8ae0:	ca ec       	ldi	r28, 0xCA	; 202
    8ae2:	de e0       	ldi	r29, 0x0E	; 14
    8ae4:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t scount = 0;
	for(uint8_t i=0;i<MAX_SPRITES;i++)//hide all sprites
		sprites[i].x = TILE_WIDTH*SCREEN_TILES_H;
	
	for(uint8_t i=0;i<MAX_PARTICLES;i++){
		if(!particles[i].type)
    8ae6:	8b 81       	ldd	r24, Y+3	; 0x03
    8ae8:	88 23       	and	r24, r24
    8aea:	19 f1       	breq	.+70     	; 0x8b32 <ProcessParticles+0x74>
			continue;
		if(!particles[i].time){
    8aec:	8a 81       	ldd	r24, Y+2	; 0x02
    8aee:	88 23       	and	r24, r24
    8af0:	11 f4       	brne	.+4      	; 0x8af6 <ProcessParticles+0x38>
			particles[i].type = 0;//turn off
    8af2:	1b 82       	std	Y+3, r1	; 0x03
    8af4:	1e c0       	rjmp	.+60     	; 0x8b32 <ProcessParticles+0x74>
			continue;
		}else{
			particles[i].time--;
    8af6:	81 50       	subi	r24, 0x01	; 1
    8af8:	8a 83       	std	Y+2, r24	; 0x02
			if((global_frame & 3) == 3)
    8afa:	23 30       	cpi	r18, 0x03	; 3
    8afc:	31 05       	cpc	r19, r1
    8afe:	19 f4       	brne	.+6      	; 0x8b06 <ProcessParticles+0x48>
				particles[i].y--;
    8b00:	89 81       	ldd	r24, Y+1	; 0x01
    8b02:	81 50       	subi	r24, 0x01	; 1
    8b04:	89 83       	std	Y+1, r24	; 0x01
		}
		sprites[scount].x = particles[i].x;
    8b06:	e9 2f       	mov	r30, r25
    8b08:	f0 e0       	ldi	r31, 0x00	; 0
    8b0a:	ee 0f       	add	r30, r30
    8b0c:	ff 1f       	adc	r31, r31
    8b0e:	ee 0f       	add	r30, r30
    8b10:	ff 1f       	adc	r31, r31
    8b12:	df 01       	movw	r26, r30
    8b14:	a4 5d       	subi	r26, 0xD4	; 212
    8b16:	bb 4f       	sbci	r27, 0xFB	; 251
    8b18:	88 81       	ld	r24, Y
    8b1a:	8c 93       	st	X, r24
		sprites[scount].y = particles[i].y;
    8b1c:	89 81       	ldd	r24, Y+1	; 0x01
    8b1e:	11 96       	adiw	r26, 0x01	; 1
    8b20:	8c 93       	st	X, r24
    8b22:	11 97       	sbiw	r26, 0x01	; 1
		//if(particles[i].type < 16)
			sprites[scount].tileIndex = particles[i].type;
    8b24:	e2 5d       	subi	r30, 0xD2	; 210
    8b26:	fb 4f       	sbci	r31, 0xFB	; 251
    8b28:	8b 81       	ldd	r24, Y+3	; 0x03
    8b2a:	80 83       	st	Z, r24
		sprites[scount++].flags = 0;
    8b2c:	13 96       	adiw	r26, 0x03	; 3
    8b2e:	1c 92       	st	X, r1
    8b30:	9f 5f       	subi	r25, 0xFF	; 255
    8b32:	24 96       	adiw	r28, 0x04	; 4
void ProcessParticles(){
	uint8_t scount = 0;
	for(uint8_t i=0;i<MAX_SPRITES;i++)//hide all sprites
		sprites[i].x = TILE_WIDTH*SCREEN_TILES_H;
	
	for(uint8_t i=0;i<MAX_PARTICLES;i++){
    8b34:	8e e0       	ldi	r24, 0x0E	; 14
    8b36:	c2 3e       	cpi	r28, 0xE2	; 226
    8b38:	d8 07       	cpc	r29, r24
    8b3a:	a9 f6       	brne	.-86     	; 0x8ae6 <ProcessParticles+0x28>
		//if(particles[i].type < 16)
			sprites[scount].tileIndex = particles[i].type;
		sprites[scount++].flags = 0;
		
	}
}
    8b3c:	df 91       	pop	r29
    8b3e:	cf 91       	pop	r28
    8b40:	08 95       	ret

00008b42 <UzenetMenu>:
uint8_t UzenetConnect(){
	WaitVsync(60);
	return 0;
}

uint8_t UzenetMenu(){
    8b42:	1f 93       	push	r17
	FadeIn(1,false);
    8b44:	81 e0       	ldi	r24, 0x01	; 1
    8b46:	60 e0       	ldi	r22, 0x00	; 0
    8b48:	0e 94 0a 45 	call	0x8a14	; 0x8a14 <FadeIn>
    8b4c:	e0 e2       	ldi	r30, 0x20	; 32
    8b4e:	f1 e0       	ldi	r31, 0x01	; 1



void FillVram(uint8_t t){
	for(uint16_t i=0;i<VRAM_SIZE;i++)
		vram[i] = t;
    8b50:	82 e4       	ldi	r24, 0x42	; 66
    8b52:	81 93       	st	Z+, r24




void FillVram(uint8_t t){
	for(uint16_t i=0;i<VRAM_SIZE;i++)
    8b54:	94 e0       	ldi	r25, 0x04	; 4
    8b56:	ec 32       	cpi	r30, 0x2C	; 44
    8b58:	f9 07       	cpc	r31, r25
    8b5a:	d9 f7       	brne	.-10     	; 0x8b52 <UzenetMenu+0x10>
}

uint8_t UzenetMenu(){
	FadeIn(1,false);
	FillVram(BLACK_TILE+RAM_TILES_COUNT);
	DrawBigString(9,2,PSTR("UZENET"));
    8b5c:	89 e0       	ldi	r24, 0x09	; 9
    8b5e:	62 e0       	ldi	r22, 0x02	; 2
    8b60:	42 ee       	ldi	r20, 0xE2	; 226
    8b62:	58 e6       	ldi	r21, 0x68	; 104
    8b64:	0e 94 e1 4c 	call	0x99c2	; 0x99c2 <DrawBigString>
	DrawBigString(5,6,PSTR("CONNECTING"));
    8b68:	85 e0       	ldi	r24, 0x05	; 5
    8b6a:	66 e0       	ldi	r22, 0x06	; 6
    8b6c:	49 ee       	ldi	r20, 0xE9	; 233
    8b6e:	58 e6       	ldi	r21, 0x68	; 104
    8b70:	0e 94 e1 4c 	call	0x99c2	; 0x99c2 <DrawBigString>
	FadeIn(3,false);
	
}

uint8_t UzenetConnect(){
	WaitVsync(60);
    8b74:	8c e3       	ldi	r24, 0x3C	; 60
    8b76:	90 e0       	ldi	r25, 0x00	; 0
    8b78:	0e 94 f3 44 	call	0x89e6	; 0x89e6 <WaitVsync>
    8b7c:	10 e0       	ldi	r17, 0x00	; 0
	DrawBigString(5,6,PSTR("CONNECTING"));
	uint8_t r = UzenetConnect();
	r = 1;
	if(r){
		for(uint8_t i=0;i<SCREEN_TILES_H;i++){
			SetTile(i,6,BLACK_TILE);
    8b7e:	81 2f       	mov	r24, r17
    8b80:	66 e0       	ldi	r22, 0x06	; 6
    8b82:	44 e2       	ldi	r20, 0x24	; 36
    8b84:	50 e0       	ldi	r21, 0x00	; 0
    8b86:	0e 94 5b 39 	call	0x72b6	; 0x72b6 <SetTile>
			SetTile(i,7,BLACK_TILE);
    8b8a:	81 2f       	mov	r24, r17
    8b8c:	67 e0       	ldi	r22, 0x07	; 7
    8b8e:	44 e2       	ldi	r20, 0x24	; 36
    8b90:	50 e0       	ldi	r21, 0x00	; 0
    8b92:	0e 94 5b 39 	call	0x72b6	; 0x72b6 <SetTile>
	DrawBigString(9,2,PSTR("UZENET"));
	DrawBigString(5,6,PSTR("CONNECTING"));
	uint8_t r = UzenetConnect();
	r = 1;
	if(r){
		for(uint8_t i=0;i<SCREEN_TILES_H;i++){
    8b96:	1f 5f       	subi	r17, 0xFF	; 255
    8b98:	1e 31       	cpi	r17, 0x1E	; 30
    8b9a:	89 f7       	brne	.-30     	; 0x8b7e <UzenetMenu+0x3c>
			SetTile(i,6,BLACK_TILE);
			SetTile(i,7,BLACK_TILE);
		}
		DrawBigString(8,6,PSTR("ERROR"));
    8b9c:	88 e0       	ldi	r24, 0x08	; 8
    8b9e:	66 e0       	ldi	r22, 0x06	; 6
    8ba0:	44 ef       	ldi	r20, 0xF4	; 244
    8ba2:	58 e6       	ldi	r21, 0x68	; 104
    8ba4:	0e 94 e1 4c 	call	0x99c2	; 0x99c2 <DrawBigString>
		DrawBigChar(20,6,'0'+r);
    8ba8:	84 e1       	ldi	r24, 0x14	; 20
    8baa:	66 e0       	ldi	r22, 0x06	; 6
    8bac:	41 e3       	ldi	r20, 0x31	; 49
    8bae:	0e 94 a5 4c 	call	0x994a	; 0x994a <DrawBigChar>
		DrawBigString(2,13,	PSTR(" RUN ESP8266"));
    8bb2:	82 e0       	ldi	r24, 0x02	; 2
    8bb4:	6d e0       	ldi	r22, 0x0D	; 13
    8bb6:	4a ef       	ldi	r20, 0xFA	; 250
    8bb8:	58 e6       	ldi	r21, 0x68	; 104
    8bba:	0e 94 e1 4c 	call	0x99c2	; 0x99c2 <DrawBigString>
		DrawBigString(2,15,	PSTR("SETUP UTILITY"));
    8bbe:	82 e0       	ldi	r24, 0x02	; 2
    8bc0:	6f e0       	ldi	r22, 0x0F	; 15
    8bc2:	47 e0       	ldi	r20, 0x07	; 7
    8bc4:	59 e6       	ldi	r21, 0x69	; 105
    8bc6:	0e 94 e1 4c 	call	0x99c2	; 0x99c2 <DrawBigString>
		while(1){
			WaitVsync(1);
    8bca:	81 e0       	ldi	r24, 0x01	; 1
    8bcc:	90 e0       	ldi	r25, 0x00	; 0
    8bce:	0e 94 f3 44 	call	0x89e6	; 0x89e6 <WaitVsync>
			if(p[0].padState & BTN_START && !(p[0].oldPadState & BTN_START))
    8bd2:	80 91 e3 0d 	lds	r24, 0x0DE3
    8bd6:	83 ff       	sbrs	r24, 3
    8bd8:	f8 cf       	rjmp	.-16     	; 0x8bca <UzenetMenu+0x88>
    8bda:	80 91 e4 0d 	lds	r24, 0x0DE4
    8bde:	83 fd       	sbrc	r24, 3
    8be0:	f4 cf       	rjmp	.-24     	; 0x8bca <UzenetMenu+0x88>
				DrawBigString(3,22,PSTR("\\MORE^"));
		}
	}
	while(1);
	return 0;
}
    8be2:	81 e0       	ldi	r24, 0x01	; 1
    8be4:	1f 91       	pop	r17
    8be6:	08 95       	ret

00008be8 <TitleScreen>:
14,13,//A

	
};

void TitleScreen(){
    8be8:	a7 e0       	ldi	r26, 0x07	; 7
    8bea:	b0 e0       	ldi	r27, 0x00	; 0
    8bec:	ea ef       	ldi	r30, 0xFA	; 250
    8bee:	f5 e4       	ldi	r31, 0x45	; 69
    8bf0:	0c 94 a9 57 	jmp	0xaf52	; 0xaf52 <__prologue_saves__>
			SetTile(x+4,y+3,t);
		}
	}
	
	for(uint8_t i=0;i<sizeof(&title_star_effect_pos)/2;i+=2){//set up for the ram tile effect
		uint8_t x = pgm_read_byte(&title_star_effect_pos[i+0]);
    8bf4:	e9 ed       	ldi	r30, 0xD9	; 217
    8bf6:	f7 e6       	ldi	r31, 0x67	; 103
    8bf8:	24 91       	lpm	r18, Z+
		uint8_t y = pgm_read_byte(&title_star_effect_pos[i+1]);
    8bfa:	31 96       	adiw	r30, 0x01	; 1
    8bfc:	e4 91       	lpm	r30, Z+
		uint8_t off = (y*VRAM_TILES_H)+x;
    8bfe:	8e e1       	ldi	r24, 0x1E	; 30
    8c00:	e8 9f       	mul	r30, r24
    8c02:	c0 01       	movw	r24, r0
    8c04:	11 24       	eor	r1, r1
    8c06:	28 0f       	add	r18, r24
		vram[off++] = 0;
    8c08:	42 2e       	mov	r4, r18
    8c0a:	55 24       	eor	r5, r5
    8c0c:	80 e2       	ldi	r24, 0x20	; 32
    8c0e:	91 e0       	ldi	r25, 0x01	; 1
    8c10:	48 0e       	add	r4, r24
    8c12:	59 1e       	adc	r5, r25
    8c14:	2f 5f       	subi	r18, 0xFF	; 255
		vram[off++] = 1;
    8c16:	62 2e       	mov	r6, r18
    8c18:	77 24       	eor	r7, r7
    8c1a:	68 0e       	add	r6, r24
    8c1c:	79 1e       	adc	r7, r25
		off += VRAM_TILES_H-2;
    8c1e:	23 5e       	subi	r18, 0xE3	; 227
		vram[off++] = 2;
    8c20:	82 2e       	mov	r8, r18
    8c22:	99 24       	eor	r9, r9
    8c24:	88 0e       	add	r8, r24
    8c26:	99 1e       	adc	r9, r25
		vram[off++] = 3;
    8c28:	2f 5f       	subi	r18, 0xFF	; 255
    8c2a:	a2 2e       	mov	r10, r18
    8c2c:	bb 24       	eor	r11, r11
    8c2e:	a8 0e       	add	r10, r24
    8c30:	b9 1e       	adc	r11, r25
	for(uint8_t i=0;i<sizeof(title_block_coords);i+=2)
		DrawBlock(pgm_read_byte(&title_block_coords[i]),pgm_read_byte(&title_block_coords[i+1]),BLOCK_STAR);
*/
	uint8_t cursorpos = 1;
	uint8_t stars_x[3] = {2,5,7};
	uint8_t stars_y[3] = {2,3,6};
    8c32:	34 e0       	ldi	r19, 0x04	; 4
    8c34:	23 2e       	mov	r2, r19
    8c36:	31 2c       	mov	r3, r1
    8c38:	2c 0e       	add	r2, r28
    8c3a:	3d 1e       	adc	r3, r29

	
};

void TitleScreen(){
TITLE_SCREEN_TOP:
    8c3c:	ec e2       	ldi	r30, 0x2C	; 44
    8c3e:	f4 e0       	ldi	r31, 0x04	; 4


void ResetSprites(){

	for(uint8_t i=0;i<MAX_SPRITES;i++)
		sprites[i].x = SCREEN_TILES_H*8;
    8c40:	80 ef       	ldi	r24, 0xF0	; 240
    8c42:	80 83       	st	Z, r24
    8c44:	34 96       	adiw	r30, 0x04	; 4



void ResetSprites(){

	for(uint8_t i=0;i<MAX_SPRITES;i++)
    8c46:	94 e0       	ldi	r25, 0x04	; 4
    8c48:	ec 39       	cpi	r30, 0x9C	; 156
    8c4a:	f9 07       	cpc	r31, r25
    8c4c:	d1 f7       	brne	.-12     	; 0x8c42 <TitleScreen+0x5a>
		sprites[i].x = SCREEN_TILES_H*8;
	sprite_count = 0;
    8c4e:	10 92 c9 0e 	sts	0x0EC9, r1
    8c52:	2a e0       	ldi	r18, 0x0A	; 10
    8c54:	e2 2e       	mov	r14, r18
    8c56:	2a e3       	ldi	r18, 0x3A	; 58
    8c58:	f2 2e       	mov	r15, r18
    8c5a:	93 e0       	ldi	r25, 0x03	; 3
    8c5c:	d9 2e       	mov	r13, r25
    8c5e:	17 c0       	rjmp	.+46     	; 0x8c8e <TitleScreen+0xa6>
TITLE_SCREEN_TOP:

	ResetSprites();
	for(uint8_t y=0;y<10;y++){//TODO JUST ADD OFFSETS TO CONST DATA
		for(uint8_t x=0;x<22;x++){
			uint8_t t = pgm_read_byte(&title_map[(y*22)+x+2]);
    8c60:	f8 01       	movw	r30, r16
    8c62:	44 91       	lpm	r20, Z+
			t += sizeof(rom_tiles)/64;
			SetTile(x+4,y+3,t);
    8c64:	4d 55       	subi	r20, 0x5D	; 93
    8c66:	89 2f       	mov	r24, r25
    8c68:	6d 2d       	mov	r22, r13
    8c6a:	50 e0       	ldi	r21, 0x00	; 0
    8c6c:	9f 83       	std	Y+7, r25	; 0x07
    8c6e:	0e 94 5b 39 	call	0x72b6	; 0x72b6 <SetTile>
    8c72:	0f 5f       	subi	r16, 0xFF	; 255
    8c74:	1f 4f       	sbci	r17, 0xFF	; 255
    8c76:	9f 81       	ldd	r25, Y+7	; 0x07
    8c78:	9f 5f       	subi	r25, 0xFF	; 255
void TitleScreen(){
TITLE_SCREEN_TOP:

	ResetSprites();
	for(uint8_t y=0;y<10;y++){//TODO JUST ADD OFFSETS TO CONST DATA
		for(uint8_t x=0;x<22;x++){
    8c7a:	9a 31       	cpi	r25, 0x1A	; 26
    8c7c:	89 f7       	brne	.-30     	; 0x8c60 <TitleScreen+0x78>
    8c7e:	86 e1       	ldi	r24, 0x16	; 22
    8c80:	90 e0       	ldi	r25, 0x00	; 0
    8c82:	e8 0e       	add	r14, r24
    8c84:	f9 1e       	adc	r15, r25
    8c86:	d3 94       	inc	r13

void TitleScreen(){
TITLE_SCREEN_TOP:

	ResetSprites();
	for(uint8_t y=0;y<10;y++){//TODO JUST ADD OFFSETS TO CONST DATA
    8c88:	9d e0       	ldi	r25, 0x0D	; 13
    8c8a:	d9 16       	cp	r13, r25
    8c8c:	19 f0       	breq	.+6      	; 0x8c94 <TitleScreen+0xac>
    8c8e:	87 01       	movw	r16, r14
    8c90:	94 e0       	ldi	r25, 0x04	; 4
    8c92:	e6 cf       	rjmp	.-52     	; 0x8c60 <TitleScreen+0x78>
	
	for(uint8_t i=0;i<sizeof(&title_star_effect_pos)/2;i+=2){//set up for the ram tile effect
		uint8_t x = pgm_read_byte(&title_star_effect_pos[i+0]);
		uint8_t y = pgm_read_byte(&title_star_effect_pos[i+1]);
		uint8_t off = (y*VRAM_TILES_H)+x;
		vram[off++] = 0;
    8c94:	f2 01       	movw	r30, r4
    8c96:	10 82       	st	Z, r1
		vram[off++] = 1;
    8c98:	81 e0       	ldi	r24, 0x01	; 1
    8c9a:	f3 01       	movw	r30, r6
    8c9c:	80 83       	st	Z, r24
		off += VRAM_TILES_H-2;
		vram[off++] = 2;
    8c9e:	82 e0       	ldi	r24, 0x02	; 2
    8ca0:	f4 01       	movw	r30, r8
    8ca2:	80 83       	st	Z, r24
		vram[off++] = 3;
    8ca4:	83 e0       	ldi	r24, 0x03	; 3
    8ca6:	f5 01       	movw	r30, r10
    8ca8:	80 83       	st	Z, r24
	FillVram(BLACK_TILE+RAM_TILES_COUNT);
	for(uint8_t i=0;i<sizeof(title_block_coords);i+=2)
		DrawBlock(pgm_read_byte(&title_block_coords[i]),pgm_read_byte(&title_block_coords[i+1]),BLOCK_STAR);
*/
	uint8_t cursorpos = 1;
	uint8_t stars_x[3] = {2,5,7};
    8caa:	de 01       	movw	r26, r28
    8cac:	11 96       	adiw	r26, 0x01	; 1
    8cae:	e1 e0       	ldi	r30, 0x01	; 1
    8cb0:	f1 e0       	ldi	r31, 0x01	; 1
    8cb2:	01 90       	ld	r0, Z+
    8cb4:	0d 92       	st	X+, r0
    8cb6:	81 50       	subi	r24, 0x01	; 1
    8cb8:	e1 f7       	brne	.-8      	; 0x8cb2 <TitleScreen+0xca>
	uint8_t stars_y[3] = {2,3,6};
    8cba:	d1 01       	movw	r26, r2
    8cbc:	e4 e0       	ldi	r30, 0x04	; 4
    8cbe:	f1 e0       	ldi	r31, 0x01	; 1
    8cc0:	83 e0       	ldi	r24, 0x03	; 3
    8cc2:	01 90       	ld	r0, Z+
    8cc4:	0d 92       	st	X+, r0
    8cc6:	81 50       	subi	r24, 0x01	; 1
    8cc8:	e1 f7       	brne	.-8      	; 0x8cc2 <TitleScreen+0xda>
	
StartSong(Song1);
    8cca:	8d e0       	ldi	r24, 0x0D	; 13
    8ccc:	9f e3       	ldi	r25, 0x3F	; 63
    8cce:	0e 94 1c 3c 	call	0x7838	; 0x7838 <StartSong>
    8cd2:	01 e0       	ldi	r16, 0x01	; 1

	while(1){
		for(uint8_t i=0;i<64*3;i++)
    8cd4:	7e 01       	movw	r14, r28
    8cd6:	08 94       	sec
    8cd8:	e1 1c       	adc	r14, r1
    8cda:	f1 1c       	adc	r15, r1
			ram_tiles[i] = 0;
		for(uint8_t i=0;i<3;i++){
			if(stars_x[i])
				stars_x[i]--;
			else
				stars_x[i] = 7;
    8cdc:	87 e0       	ldi	r24, 0x07	; 7
    8cde:	d8 2e       	mov	r13, r24
			if(stars_y[i])
				stars_y[i]--;
			else
				stars_y[i] = 7;
			ram_tiles[(stars_y[i]*8)+stars_y[i]] = 255;
    8ce0:	cc 24       	eor	r12, r12
    8ce2:	ca 94       	dec	r12
*/
	uint8_t cursorpos = 1;
	uint8_t stars_x[3] = {2,5,7};
	uint8_t stars_y[3] = {2,3,6};
	
StartSong(Song1);
    8ce4:	ec e9       	ldi	r30, 0x9C	; 156
    8ce6:	f4 e0       	ldi	r31, 0x04	; 4

	while(1){
		for(uint8_t i=0;i<64*3;i++)
			ram_tiles[i] = 0;
    8ce8:	11 92       	st	Z+, r1
	uint8_t stars_y[3] = {2,3,6};
	
StartSong(Song1);

	while(1){
		for(uint8_t i=0;i<64*3;i++)
    8cea:	85 e0       	ldi	r24, 0x05	; 5
    8cec:	ec 35       	cpi	r30, 0x5C	; 92
    8cee:	f8 07       	cpc	r31, r24
    8cf0:	d9 f7       	brne	.-10     	; 0x8ce8 <TitleScreen+0x100>
    8cf2:	d7 01       	movw	r26, r14
    8cf4:	91 01       	movw	r18, r2
			ram_tiles[i] = 0;
		for(uint8_t i=0;i<3;i++){
			if(stars_x[i])
    8cf6:	8c 91       	ld	r24, X
    8cf8:	88 23       	and	r24, r24
    8cfa:	19 f0       	breq	.+6      	; 0x8d02 <TitleScreen+0x11a>
				stars_x[i]--;
    8cfc:	81 50       	subi	r24, 0x01	; 1
    8cfe:	8c 93       	st	X, r24
    8d00:	01 c0       	rjmp	.+2      	; 0x8d04 <TitleScreen+0x11c>
			else
				stars_x[i] = 7;
    8d02:	dc 92       	st	X, r13
			if(stars_y[i])
    8d04:	f9 01       	movw	r30, r18
    8d06:	80 81       	ld	r24, Z
    8d08:	88 23       	and	r24, r24
    8d0a:	19 f0       	breq	.+6      	; 0x8d12 <TitleScreen+0x12a>
				stars_y[i]--;
    8d0c:	81 50       	subi	r24, 0x01	; 1
    8d0e:	80 83       	st	Z, r24
    8d10:	02 c0       	rjmp	.+4      	; 0x8d16 <TitleScreen+0x12e>
			else
				stars_y[i] = 7;
    8d12:	f9 01       	movw	r30, r18
    8d14:	d0 82       	st	Z, r13
			ram_tiles[(stars_y[i]*8)+stars_y[i]] = 255;
    8d16:	f9 01       	movw	r30, r18
    8d18:	81 91       	ld	r24, Z+
    8d1a:	9f 01       	movw	r18, r30
    8d1c:	90 e0       	ldi	r25, 0x00	; 0
    8d1e:	fc 01       	movw	r30, r24
    8d20:	13 e0       	ldi	r17, 0x03	; 3
    8d22:	ee 0f       	add	r30, r30
    8d24:	ff 1f       	adc	r31, r31
    8d26:	1a 95       	dec	r17
    8d28:	e1 f7       	brne	.-8      	; 0x8d22 <TitleScreen+0x13a>
    8d2a:	e8 0f       	add	r30, r24
    8d2c:	f9 1f       	adc	r31, r25
    8d2e:	e4 56       	subi	r30, 0x64	; 100
    8d30:	fb 4f       	sbci	r31, 0xFB	; 251
    8d32:	c0 82       	st	Z, r12
    8d34:	11 96       	adiw	r26, 0x01	; 1
StartSong(Song1);

	while(1){
		for(uint8_t i=0;i<64*3;i++)
			ram_tiles[i] = 0;
		for(uint8_t i=0;i<3;i++){
    8d36:	a2 15       	cp	r26, r2
    8d38:	b3 05       	cpc	r27, r3
    8d3a:	e9 f6       	brne	.-70     	; 0x8cf6 <TitleScreen+0x10e>
				stars_y[i]--;
			else
				stars_y[i] = 7;
			ram_tiles[(stars_y[i]*8)+stars_y[i]] = 255;
		}
		DrawBigString(9,20,PSTR("SINGLE"));
    8d3c:	89 e0       	ldi	r24, 0x09	; 9
    8d3e:	64 e1       	ldi	r22, 0x14	; 20
    8d40:	4d ec       	ldi	r20, 0xCD	; 205
    8d42:	58 e6       	ldi	r21, 0x68	; 104
    8d44:	0e 94 e1 4c 	call	0x99c2	; 0x99c2 <DrawBigString>
		DrawBigString(9,22,PSTR("VERSUS"));
    8d48:	89 e0       	ldi	r24, 0x09	; 9
    8d4a:	66 e1       	ldi	r22, 0x16	; 22
    8d4c:	44 ed       	ldi	r20, 0xD4	; 212
    8d4e:	58 e6       	ldi	r21, 0x68	; 104
    8d50:	0e 94 e1 4c 	call	0x99c2	; 0x99c2 <DrawBigString>
		DrawBigString(9,24,PSTR("UZENET"));
    8d54:	89 e0       	ldi	r24, 0x09	; 9
    8d56:	68 e1       	ldi	r22, 0x18	; 24
    8d58:	4b ed       	ldi	r20, 0xDB	; 219
    8d5a:	58 e6       	ldi	r21, 0x68	; 104
    8d5c:	0e 94 e1 4c 	call	0x99c2	; 0x99c2 <DrawBigString>
    8d60:	14 e1       	ldi	r17, 0x14	; 20
		for(uint8_t i=20;i<SCREEN_TILES_V;i++){
			SetTile(7,i,BLACK_TILE);
    8d62:	87 e0       	ldi	r24, 0x07	; 7
    8d64:	61 2f       	mov	r22, r17
    8d66:	44 e2       	ldi	r20, 0x24	; 36
    8d68:	50 e0       	ldi	r21, 0x00	; 0
    8d6a:	0e 94 5b 39 	call	0x72b6	; 0x72b6 <SetTile>
			SetTile(8,i,BLACK_TILE);
    8d6e:	88 e0       	ldi	r24, 0x08	; 8
    8d70:	61 2f       	mov	r22, r17
    8d72:	44 e2       	ldi	r20, 0x24	; 36
    8d74:	50 e0       	ldi	r21, 0x00	; 0
    8d76:	0e 94 5b 39 	call	0x72b6	; 0x72b6 <SetTile>
			ram_tiles[(stars_y[i]*8)+stars_y[i]] = 255;
		}
		DrawBigString(9,20,PSTR("SINGLE"));
		DrawBigString(9,22,PSTR("VERSUS"));
		DrawBigString(9,24,PSTR("UZENET"));
		for(uint8_t i=20;i<SCREEN_TILES_V;i++){
    8d7a:	1f 5f       	subi	r17, 0xFF	; 255
    8d7c:	1a 31       	cpi	r17, 0x1A	; 26
    8d7e:	89 f7       	brne	.-30     	; 0x8d62 <TitleScreen+0x17a>
			SetTile(7,i,BLACK_TILE);
			SetTile(8,i,BLACK_TILE);
		}

		if((p[0].padState & BTN_UP) && !(p[0].oldPadState & BTN_UP))
    8d80:	80 91 e3 0d 	lds	r24, 0x0DE3
    8d84:	98 2f       	mov	r25, r24
    8d86:	84 ff       	sbrs	r24, 4
    8d88:	06 c0       	rjmp	.+12     	; 0x8d96 <TitleScreen+0x1ae>
    8d8a:	80 91 e4 0d 	lds	r24, 0x0DE4
    8d8e:	84 fd       	sbrc	r24, 4
    8d90:	02 c0       	rjmp	.+4      	; 0x8d96 <TitleScreen+0x1ae>
			cursorpos--;
    8d92:	01 50       	subi	r16, 0x01	; 1
    8d94:	07 c0       	rjmp	.+14     	; 0x8da4 <TitleScreen+0x1bc>
		else if((p[0].padState & BTN_DOWN) && !(p[0].oldPadState & BTN_DOWN))
    8d96:	95 ff       	sbrs	r25, 5
    8d98:	09 c0       	rjmp	.+18     	; 0x8dac <TitleScreen+0x1c4>
    8d9a:	80 91 e4 0d 	lds	r24, 0x0DE4
    8d9e:	85 fd       	sbrc	r24, 5
    8da0:	05 c0       	rjmp	.+10     	; 0x8dac <TitleScreen+0x1c4>
			cursorpos++;
    8da2:	0f 5f       	subi	r16, 0xFF	; 255
		if(cursorpos == 4)
    8da4:	04 30       	cpi	r16, 0x04	; 4
    8da6:	11 f4       	brne	.+4      	; 0x8dac <TitleScreen+0x1c4>
    8da8:	01 e0       	ldi	r16, 0x01	; 1
    8daa:	03 c0       	rjmp	.+6      	; 0x8db2 <TitleScreen+0x1ca>
			cursorpos = 1;
		else if(cursorpos < 1)
    8dac:	00 23       	and	r16, r16
    8dae:	09 f4       	brne	.+2      	; 0x8db2 <TitleScreen+0x1ca>
    8db0:	03 e0       	ldi	r16, 0x03	; 3
			cursorpos = 3;

		DrawBlock(7,18+(cursorpos*2),BLOCK_BLUE);
    8db2:	60 2f       	mov	r22, r16
    8db4:	70 e0       	ldi	r23, 0x00	; 0
    8db6:	67 5f       	subi	r22, 0xF7	; 247
    8db8:	7f 4f       	sbci	r23, 0xFF	; 255
    8dba:	66 0f       	add	r22, r22
    8dbc:	77 1f       	adc	r23, r23
    8dbe:	87 e0       	ldi	r24, 0x07	; 7
    8dc0:	43 e0       	ldi	r20, 0x03	; 3
    8dc2:	0e 94 ed 48 	call	0x91da	; 0x91da <DrawBlock>
//p[0].padState = BTN_START;
		if((p[0].padState & BTN_START) && !(p[0].oldPadState & BTN_START)){
    8dc6:	80 91 e3 0d 	lds	r24, 0x0DE3
    8dca:	83 ff       	sbrs	r24, 3
    8dcc:	1f c0       	rjmp	.+62     	; 0x8e0c <TitleScreen+0x224>
    8dce:	80 91 e4 0d 	lds	r24, 0x0DE4
    8dd2:	83 fd       	sbrc	r24, 3
    8dd4:	1b c0       	rjmp	.+54     	; 0x8e0c <TitleScreen+0x224>
			if(cursorpos == 2 && (DetectControllers() & 0b00001100) != 0b00000100){//cannot play 2 player game without a second controller
    8dd6:	02 30       	cpi	r16, 0x02	; 2
    8dd8:	59 f4       	brne	.+22     	; 0x8df0 <TitleScreen+0x208>
    8dda:	0e 94 3d 3a 	call	0x747a	; 0x747a <DetectControllers>
    8dde:	8c 70       	andi	r24, 0x0C	; 12
    8de0:	84 30       	cpi	r24, 0x04	; 4
    8de2:	31 f0       	breq	.+12     	; 0x8df0 <TitleScreen+0x208>
	for(uint16_t i=0;i<VRAM_SIZE;i++)
		vram[i] = t;
}

void AS_TriggerFx(uint8_t patch){//use the 5th channel exclusively to allow music(uses 1-4) to be uninterrupted
TriggerFx(patch,255,1);return;
    8de4:	81 e0       	ldi	r24, 0x01	; 1
    8de6:	6f ef       	ldi	r22, 0xFF	; 255
    8de8:	41 e0       	ldi	r20, 0x01	; 1
    8dea:	0e 94 0f 3f 	call	0x7e1e	; 0x7e1e <TriggerFx>
    8dee:	0e c0       	rjmp	.+28     	; 0x8e0c <TitleScreen+0x224>
//p[0].padState = BTN_START;
		if((p[0].padState & BTN_START) && !(p[0].oldPadState & BTN_START)){
			if(cursorpos == 2 && (DetectControllers() & 0b00001100) != 0b00000100){//cannot play 2 player game without a second controller
				AS_TriggerFx(1);
			}else{
				FadeOut(2,true);
    8df0:	82 e0       	ldi	r24, 0x02	; 2
    8df2:	61 e0       	ldi	r22, 0x01	; 1
    8df4:	0e 94 22 45 	call	0x8a44	; 0x8a44 <FadeOut>
				if(cursorpos == 1){//single
    8df8:	01 30       	cpi	r16, 0x01	; 1
    8dfa:	69 f0       	breq	.+26     	; 0x8e16 <TitleScreen+0x22e>
					return;
				}else if(cursorpos == 2){//vs
    8dfc:	02 30       	cpi	r16, 0x02	; 2
    8dfe:	59 f0       	breq	.+22     	; 0x8e16 <TitleScreen+0x22e>
					return;
				}else{//uzenet
					if(UzenetMenu())
    8e00:	0e 94 a1 45 	call	0x8b42	; 0x8b42 <UzenetMenu>
    8e04:	88 23       	and	r24, r24
    8e06:	09 f4       	brne	.+2      	; 0x8e0a <TitleScreen+0x222>
    8e08:	19 cf       	rjmp	.-462    	; 0x8c3c <TitleScreen+0x54>
    8e0a:	05 c0       	rjmp	.+10     	; 0x8e16 <TitleScreen+0x22e>
						return;
					goto TITLE_SCREEN_TOP;
				}
			}
		}
		WaitVsync(1);
    8e0c:	81 e0       	ldi	r24, 0x01	; 1
    8e0e:	90 e0       	ldi	r25, 0x00	; 0
    8e10:	0e 94 f3 44 	call	0x89e6	; 0x89e6 <WaitVsync>
    8e14:	67 cf       	rjmp	.-306    	; 0x8ce4 <TitleScreen+0xfc>
	}
}
    8e16:	27 96       	adiw	r28, 0x07	; 7
    8e18:	e2 e1       	ldi	r30, 0x12	; 18
    8e1a:	0c 94 c5 57 	jmp	0xaf8a	; 0xaf8a <__epilogue_restores__>

00008e1e <VsyncHook>:




void VsyncHook(){
    8e1e:	1f 93       	push	r17
    8e20:	cf 93       	push	r28
    8e22:	df 93       	push	r29
    8e24:	c3 ee       	ldi	r28, 0xE3	; 227
    8e26:	dd e0       	ldi	r29, 0x0D	; 13
    8e28:	10 e0       	ldi	r17, 0x00	; 0
//	p[0].latest_input_tick = master_input_clock;

	uint16_t buttons = 0;
	for(uint8_t i=0;i<MAX_PLAYERS;i++){

		if(!p[i].network_state){
    8e2a:	8b 81       	ldd	r24, Y+3	; 0x03
    8e2c:	88 23       	and	r24, r24
    8e2e:	29 f4       	brne	.+10     	; 0x8e3a <VsyncHook+0x1c>
			buttons = ReadJoypad(i);
    8e30:	81 2f       	mov	r24, r17
    8e32:	0e 94 78 39 	call	0x72f0	; 0x72f0 <ReadJoypad>
    8e36:	9c 01       	movw	r18, r24
    8e38:	04 c0       	rjmp	.+8      	; 0x8e42 <VsyncHook+0x24>
		}else{//check the data stream for input from the remote side
			buttons = ai[0].padState;//HACK FOR AI!!!!!!!!
    8e3a:	80 91 c8 0e 	lds	r24, 0x0EC8
    8e3e:	28 2f       	mov	r18, r24
    8e40:	30 e0       	ldi	r19, 0x00	; 0
		}
		p[i].oldPadState = p[i].padState;
    8e42:	88 81       	ld	r24, Y
    8e44:	89 83       	std	Y+1, r24	; 0x01
		p[i].padState = (buttons & 0xFF);
    8e46:	42 2f       	mov	r20, r18
    8e48:	28 83       	st	Y, r18
		
		if((buttons & BTN_SL) || (buttons & BTN_Y))
    8e4a:	c9 01       	movw	r24, r18
    8e4c:	82 70       	andi	r24, 0x02	; 2
    8e4e:	94 70       	andi	r25, 0x04	; 4
    8e50:	89 2b       	or	r24, r25
    8e52:	11 f0       	breq	.+4      	; 0x8e58 <VsyncHook+0x3a>
			p[i].padState |= BTN_Y;//this fits within 8 bits, BTN_SL does not
    8e54:	42 60       	ori	r20, 0x02	; 2
    8e56:	48 83       	st	Y, r20
		if((buttons & BTN_SR) || (buttons & BTN_B))
    8e58:	33 fd       	sbrc	r19, 3
    8e5a:	02 c0       	rjmp	.+4      	; 0x8e60 <VsyncHook+0x42>
    8e5c:	20 ff       	sbrs	r18, 0
    8e5e:	03 c0       	rjmp	.+6      	; 0x8e66 <VsyncHook+0x48>
			p[i].padState |= BTN_B;//this fits within 8 bits, BTN_SR does not
    8e60:	88 81       	ld	r24, Y
    8e62:	81 60       	ori	r24, 0x01	; 1
    8e64:	88 83       	st	Y, r24
//	p[0].oldPadState = p[0].padState;
//	p[0].padState = ReadJoypad(0);
//	p[0].latest_input_tick = master_input_clock;

	uint16_t buttons = 0;
	for(uint8_t i=0;i<MAX_PLAYERS;i++){
    8e66:	1f 5f       	subi	r17, 0xFF	; 255
    8e68:	ce 58       	subi	r28, 0x8E	; 142
    8e6a:	df 4f       	sbci	r29, 0xFF	; 255
    8e6c:	12 30       	cpi	r17, 0x02	; 2
    8e6e:	e9 f6       	brne	.-70     	; 0x8e2a <VsyncHook+0xc>
			p[i].padState |= BTN_Y;//this fits within 8 bits, BTN_SL does not
		if((buttons & BTN_SR) || (buttons & BTN_B))
			p[i].padState |= BTN_B;//this fits within 8 bits, BTN_SR does not
	}
	
}
    8e70:	df 91       	pop	r29
    8e72:	cf 91       	pop	r28
    8e74:	1f 91       	pop	r17
    8e76:	08 95       	ret

00008e78 <FillScreenPattern>:

}

#define FIRST_BORDER_TILE 36

void FillScreenPattern(){//return;
    8e78:	a0 e0       	ldi	r26, 0x00	; 0
    8e7a:	b0 e0       	ldi	r27, 0x00	; 0
    8e7c:	e2 e4       	ldi	r30, 0x42	; 66
    8e7e:	f7 e4       	ldi	r31, 0x47	; 71
    8e80:	0c 94 b2 57 	jmp	0xaf64	; 0xaf64 <__prologue_saves__+0x12>
    8e84:	dd 24       	eor	r13, r13
    8e86:	bb 24       	eor	r11, r11
    8e88:	0b 2d       	mov	r16, r11
    8e8a:	4b e2       	ldi	r20, 0x2B	; 43
    8e8c:	c4 2e       	mov	r12, r20
    8e8e:	20 e0       	ldi	r18, 0x00	; 0
	uint8_t drew = 0;

	do{
		drew = 0;
		t = (FIRST_BORDER_TILE+8)-1;
		for(uint8_t i=y;i<y+4;i++){
    8e90:	eb 2c       	mov	r14, r11
    8e92:	ff 24       	eor	r15, r15
    8e94:	83 e0       	ldi	r24, 0x03	; 3
    8e96:	90 e0       	ldi	r25, 0x00	; 0
    8e98:	e8 0e       	add	r14, r24
    8e9a:	f9 1e       	adc	r15, r25
			for(uint8_t j=x;j<x+2;j++){
    8e9c:	cd 2d       	mov	r28, r13
    8e9e:	d0 e0       	ldi	r29, 0x00	; 0
    8ea0:	21 96       	adiw	r28, 0x01	; 1
    8ea2:	13 c0       	rjmp	.+38     	; 0x8eca <FillScreenPattern+0x52>
				t++;
    8ea4:	c3 94       	inc	r12
				if(j >= SCREEN_TILES_H || i >= SCREEN_TILES_V)
    8ea6:	1e 31       	cpi	r17, 0x1E	; 30
    8ea8:	48 f4       	brcc	.+18     	; 0x8ebc <FillScreenPattern+0x44>
    8eaa:	0a 31       	cpi	r16, 0x1A	; 26
    8eac:	38 f4       	brcc	.+14     	; 0x8ebc <FillScreenPattern+0x44>
					continue;
				drew = 1;
				SetTile(j,i,t);
    8eae:	81 2f       	mov	r24, r17
    8eb0:	60 2f       	mov	r22, r16
    8eb2:	4c 2d       	mov	r20, r12
    8eb4:	50 e0       	ldi	r21, 0x00	; 0
    8eb6:	0e 94 5b 39 	call	0x72b6	; 0x72b6 <SetTile>
    8eba:	21 e0       	ldi	r18, 0x01	; 1

	do{
		drew = 0;
		t = (FIRST_BORDER_TILE+8)-1;
		for(uint8_t i=y;i<y+4;i++){
			for(uint8_t j=x;j<x+2;j++){
    8ebc:	1f 5f       	subi	r17, 0xFF	; 255
    8ebe:	81 2f       	mov	r24, r17
    8ec0:	90 e0       	ldi	r25, 0x00	; 0
    8ec2:	c8 17       	cp	r28, r24
    8ec4:	d9 07       	cpc	r29, r25
    8ec6:	74 f7       	brge	.-36     	; 0x8ea4 <FillScreenPattern+0x2c>
	uint8_t drew = 0;

	do{
		drew = 0;
		t = (FIRST_BORDER_TILE+8)-1;
		for(uint8_t i=y;i<y+4;i++){
    8ec8:	0f 5f       	subi	r16, 0xFF	; 255
    8eca:	80 2f       	mov	r24, r16
    8ecc:	90 e0       	ldi	r25, 0x00	; 0
    8ece:	e8 16       	cp	r14, r24
    8ed0:	f9 06       	cpc	r15, r25
    8ed2:	14 f0       	brlt	.+4      	; 0x8ed8 <FillScreenPattern+0x60>
    8ed4:	1d 2d       	mov	r17, r13
    8ed6:	f3 cf       	rjmp	.-26     	; 0x8ebe <FillScreenPattern+0x46>
					continue;
				drew = 1;
				SetTile(j,i,t);
			}
		}
		x += 2;
    8ed8:	92 e0       	ldi	r25, 0x02	; 2
    8eda:	d9 0e       	add	r13, r25
		if(x >= SCREEN_TILES_H){
    8edc:	8d e1       	ldi	r24, 0x1D	; 29
    8ede:	8d 15       	cp	r24, r13
    8ee0:	18 f4       	brcc	.+6      	; 0x8ee8 <FillScreenPattern+0x70>
			x = 0;
			y += 4;
    8ee2:	94 e0       	ldi	r25, 0x04	; 4
    8ee4:	b9 0e       	add	r11, r25
    8ee6:	dd 24       	eor	r13, r13
		}
	}while(drew);
    8ee8:	22 23       	and	r18, r18
    8eea:	71 f6       	brne	.-100    	; 0x8e88 <FillScreenPattern+0x10>
}
    8eec:	cd b7       	in	r28, 0x3d	; 61
    8eee:	de b7       	in	r29, 0x3e	; 62
    8ef0:	e9 e0       	ldi	r30, 0x09	; 9
    8ef2:	0c 94 ce 57 	jmp	0xaf9c	; 0xaf9c <__epilogue_restores__+0x12>

00008ef6 <DrawRectangle>:

void DrawRectangle(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t t){
    8ef6:	a0 e0       	ldi	r26, 0x00	; 0
    8ef8:	b0 e0       	ldi	r27, 0x00	; 0
    8efa:	e1 e8       	ldi	r30, 0x81	; 129
    8efc:	f7 e4       	ldi	r31, 0x47	; 71
    8efe:	0c 94 b3 57 	jmp	0xaf66	; 0xaf66 <__prologue_saves__+0x14>
    8f02:	d8 2e       	mov	r13, r24
    8f04:	c0 2e       	mov	r12, r16
    8f06:	06 2f       	mov	r16, r22
	for(uint8_t i=y;i<y+h;i++)
    8f08:	e6 2e       	mov	r14, r22
    8f0a:	ff 24       	eor	r15, r15
    8f0c:	e2 0e       	add	r14, r18
    8f0e:	f1 1c       	adc	r15, r1
		for(uint8_t j=x;j<x+w;j++)
    8f10:	c8 2f       	mov	r28, r24
    8f12:	d0 e0       	ldi	r29, 0x00	; 0
    8f14:	c4 0f       	add	r28, r20
    8f16:	d1 1d       	adc	r29, r1
    8f18:	0d c0       	rjmp	.+26     	; 0x8f34 <DrawRectangle+0x3e>
			SetTile(j,i,t);
    8f1a:	81 2f       	mov	r24, r17
    8f1c:	60 2f       	mov	r22, r16
    8f1e:	4c 2d       	mov	r20, r12
    8f20:	50 e0       	ldi	r21, 0x00	; 0
    8f22:	0e 94 5b 39 	call	0x72b6	; 0x72b6 <SetTile>
	}while(drew);
}

void DrawRectangle(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t t){
	for(uint8_t i=y;i<y+h;i++)
		for(uint8_t j=x;j<x+w;j++)
    8f26:	1f 5f       	subi	r17, 0xFF	; 255
    8f28:	81 2f       	mov	r24, r17
    8f2a:	90 e0       	ldi	r25, 0x00	; 0
    8f2c:	8c 17       	cp	r24, r28
    8f2e:	9d 07       	cpc	r25, r29
    8f30:	a4 f3       	brlt	.-24     	; 0x8f1a <DrawRectangle+0x24>
		}
	}while(drew);
}

void DrawRectangle(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t t){
	for(uint8_t i=y;i<y+h;i++)
    8f32:	0f 5f       	subi	r16, 0xFF	; 255
    8f34:	80 2f       	mov	r24, r16
    8f36:	90 e0       	ldi	r25, 0x00	; 0
    8f38:	8e 15       	cp	r24, r14
    8f3a:	9f 05       	cpc	r25, r15
    8f3c:	14 f4       	brge	.+4      	; 0x8f42 <DrawRectangle+0x4c>
    8f3e:	1d 2d       	mov	r17, r13
    8f40:	f3 cf       	rjmp	.-26     	; 0x8f28 <DrawRectangle+0x32>
		for(uint8_t j=x;j<x+w;j++)
			SetTile(j,i,t);
}
    8f42:	cd b7       	in	r28, 0x3d	; 61
    8f44:	de b7       	in	r29, 0x3e	; 62
    8f46:	e8 e0       	ldi	r30, 0x08	; 8
    8f48:	0c 94 cf 57 	jmp	0xaf9e	; 0xaf9e <__epilogue_restores__+0x14>

00008f4c <DrawFrame>:
void DrawFrame(uint8_t x, uint8_t y, uint8_t w, uint8_t h){
    8f4c:	a0 e0       	ldi	r26, 0x00	; 0
    8f4e:	b0 e0       	ldi	r27, 0x00	; 0
    8f50:	ec ea       	ldi	r30, 0xAC	; 172
    8f52:	f7 e4       	ldi	r31, 0x47	; 71
    8f54:	0c 94 ae 57 	jmp	0xaf5c	; 0xaf5c <__prologue_saves__+0xa>
    8f58:	b8 2e       	mov	r11, r24
    8f5a:	16 2f       	mov	r17, r22
    8f5c:	94 2e       	mov	r9, r20
    8f5e:	a2 2e       	mov	r10, r18
	w--;h--;
    8f60:	9a 94       	dec	r9
    8f62:	aa 94       	dec	r10
	DrawRectangle(x,y,w,h,FIRST_BORDER_TILE);
    8f64:	49 2d       	mov	r20, r9
    8f66:	2a 2d       	mov	r18, r10
    8f68:	04 e2       	ldi	r16, 0x24	; 36
    8f6a:	0e 94 7b 47 	call	0x8ef6	; 0x8ef6 <DrawRectangle>
    8f6e:	0b 2d       	mov	r16, r11
    8f70:	0f 5f       	subi	r16, 0xFF	; 255
    8f72:	88 24       	eor	r8, r8
    8f74:	83 94       	inc	r8
    8f76:	cc 24       	eor	r12, r12
    8f78:	dd 24       	eor	r13, r13

	for(uint8_t i=1;i<w;i++){//draw horizontal lines
		if(x+i >= SCREEN_TILES_H)
    8f7a:	eb 2c       	mov	r14, r11
    8f7c:	ff 24       	eor	r15, r15
    8f7e:	08 94       	sec
    8f80:	e1 1c       	adc	r14, r1
    8f82:	f1 1c       	adc	r15, r1
			break;

		if(y+0 < SCREEN_TILES_V )
			SetTile(x+i,y+0,FIRST_BORDER_TILE+7);
		if(y+h < SCREEN_TILES_V )
    8f84:	c1 2f       	mov	r28, r17
    8f86:	d0 e0       	ldi	r29, 0x00	; 0
    8f88:	ca 0d       	add	r28, r10
    8f8a:	d1 1d       	adc	r29, r1
			SetTile(x+i,y+h,FIRST_BORDER_TILE+7);
    8f8c:	7a 2c       	mov	r7, r10
    8f8e:	71 0e       	add	r7, r17
    8f90:	2d c0       	rjmp	.+90     	; 0x8fec <DrawFrame+0xa0>
void DrawFrame(uint8_t x, uint8_t y, uint8_t w, uint8_t h){
	w--;h--;
	DrawRectangle(x,y,w,h,FIRST_BORDER_TILE);

	for(uint8_t i=1;i<w;i++){//draw horizontal lines
		if(x+i >= SCREEN_TILES_H)
    8f92:	c7 01       	movw	r24, r14
    8f94:	8c 0d       	add	r24, r12
    8f96:	9d 1d       	adc	r25, r13
    8f98:	4e 97       	sbiw	r24, 0x1e	; 30
    8f9a:	94 f0       	brlt	.+36     	; 0x8fc0 <DrawFrame+0x74>
    8f9c:	01 2f       	mov	r16, r17
    8f9e:	0f 5f       	subi	r16, 0xFF	; 255
    8fa0:	88 24       	eor	r8, r8
    8fa2:	83 94       	inc	r8
    8fa4:	cc 24       	eor	r12, r12
    8fa6:	dd 24       	eor	r13, r13
			SetTile(x+i,y+h,FIRST_BORDER_TILE+7);

	}

	for(uint8_t i=1;i<h;i++){//draw vertical lines
		if(y+i >= SCREEN_TILES_V)
    8fa8:	e1 2e       	mov	r14, r17
    8faa:	ff 24       	eor	r15, r15
    8fac:	08 94       	sec
    8fae:	e1 1c       	adc	r14, r1
    8fb0:	f1 1c       	adc	r15, r1
			break;

		if(x+0 < SCREEN_TILES_H )
			SetTile(x+0,y+i,FIRST_BORDER_TILE+5);
		if(x+w < SCREEN_TILES_H )
    8fb2:	cb 2d       	mov	r28, r11
    8fb4:	d0 e0       	ldi	r29, 0x00	; 0
    8fb6:	c9 0d       	add	r28, r9
    8fb8:	d1 1d       	adc	r29, r1
			SetTile(x+w,y+i,FIRST_BORDER_TILE+6);
    8fba:	79 2c       	mov	r7, r9
    8fbc:	7b 0c       	add	r7, r11
    8fbe:	35 c0       	rjmp	.+106    	; 0x902a <DrawFrame+0xde>

	for(uint8_t i=1;i<w;i++){//draw horizontal lines
		if(x+i >= SCREEN_TILES_H)
			break;

		if(y+0 < SCREEN_TILES_V )
    8fc0:	1a 31       	cpi	r17, 0x1A	; 26
    8fc2:	30 f4       	brcc	.+12     	; 0x8fd0 <DrawFrame+0x84>
			SetTile(x+i,y+0,FIRST_BORDER_TILE+7);
    8fc4:	80 2f       	mov	r24, r16
    8fc6:	61 2f       	mov	r22, r17
    8fc8:	4b e2       	ldi	r20, 0x2B	; 43
    8fca:	50 e0       	ldi	r21, 0x00	; 0
    8fcc:	0e 94 5b 39 	call	0x72b6	; 0x72b6 <SetTile>
		if(y+h < SCREEN_TILES_V )
    8fd0:	ca 31       	cpi	r28, 0x1A	; 26
    8fd2:	d1 05       	cpc	r29, r1
    8fd4:	34 f4       	brge	.+12     	; 0x8fe2 <DrawFrame+0x96>
			SetTile(x+i,y+h,FIRST_BORDER_TILE+7);
    8fd6:	80 2f       	mov	r24, r16
    8fd8:	67 2d       	mov	r22, r7
    8fda:	4b e2       	ldi	r20, 0x2B	; 43
    8fdc:	50 e0       	ldi	r21, 0x00	; 0
    8fde:	0e 94 5b 39 	call	0x72b6	; 0x72b6 <SetTile>
}
void DrawFrame(uint8_t x, uint8_t y, uint8_t w, uint8_t h){
	w--;h--;
	DrawRectangle(x,y,w,h,FIRST_BORDER_TILE);

	for(uint8_t i=1;i<w;i++){//draw horizontal lines
    8fe2:	83 94       	inc	r8
    8fe4:	08 94       	sec
    8fe6:	c1 1c       	adc	r12, r1
    8fe8:	d1 1c       	adc	r13, r1
    8fea:	0f 5f       	subi	r16, 0xFF	; 255
    8fec:	89 14       	cp	r8, r9
    8fee:	88 f2       	brcs	.-94     	; 0x8f92 <DrawFrame+0x46>
    8ff0:	d5 cf       	rjmp	.-86     	; 0x8f9c <DrawFrame+0x50>
			SetTile(x+i,y+h,FIRST_BORDER_TILE+7);

	}

	for(uint8_t i=1;i<h;i++){//draw vertical lines
		if(y+i >= SCREEN_TILES_V)
    8ff2:	c7 01       	movw	r24, r14
    8ff4:	8c 0d       	add	r24, r12
    8ff6:	9d 1d       	adc	r25, r13
    8ff8:	4a 97       	sbiw	r24, 0x1a	; 26
    8ffa:	cc f4       	brge	.+50     	; 0x902e <DrawFrame+0xe2>
			break;

		if(x+0 < SCREEN_TILES_H )
    8ffc:	8d e1       	ldi	r24, 0x1D	; 29
    8ffe:	8b 15       	cp	r24, r11
    9000:	30 f0       	brcs	.+12     	; 0x900e <DrawFrame+0xc2>
			SetTile(x+0,y+i,FIRST_BORDER_TILE+5);
    9002:	8b 2d       	mov	r24, r11
    9004:	60 2f       	mov	r22, r16
    9006:	49 e2       	ldi	r20, 0x29	; 41
    9008:	50 e0       	ldi	r21, 0x00	; 0
    900a:	0e 94 5b 39 	call	0x72b6	; 0x72b6 <SetTile>
		if(x+w < SCREEN_TILES_H )
    900e:	ce 31       	cpi	r28, 0x1E	; 30
    9010:	d1 05       	cpc	r29, r1
    9012:	34 f4       	brge	.+12     	; 0x9020 <DrawFrame+0xd4>
			SetTile(x+w,y+i,FIRST_BORDER_TILE+6);
    9014:	87 2d       	mov	r24, r7
    9016:	60 2f       	mov	r22, r16
    9018:	4a e2       	ldi	r20, 0x2A	; 42
    901a:	50 e0       	ldi	r21, 0x00	; 0
    901c:	0e 94 5b 39 	call	0x72b6	; 0x72b6 <SetTile>
		if(y+h < SCREEN_TILES_V )
			SetTile(x+i,y+h,FIRST_BORDER_TILE+7);

	}

	for(uint8_t i=1;i<h;i++){//draw vertical lines
    9020:	83 94       	inc	r8
    9022:	08 94       	sec
    9024:	c1 1c       	adc	r12, r1
    9026:	d1 1c       	adc	r13, r1
    9028:	0f 5f       	subi	r16, 0xFF	; 255
    902a:	8a 14       	cp	r8, r10
    902c:	10 f3       	brcs	.-60     	; 0x8ff2 <DrawFrame+0xa6>
			SetTile(x+w,y+i,FIRST_BORDER_TILE+6);

	}

	
	if(x+0 < SCREEN_TILES_H && y+0 < SCREEN_TILES_V)//top left corner
    902e:	8d e1       	ldi	r24, 0x1D	; 29
    9030:	8b 15       	cp	r24, r11
    9032:	40 f0       	brcs	.+16     	; 0x9044 <DrawFrame+0xf8>
    9034:	1a 31       	cpi	r17, 0x1A	; 26
    9036:	30 f4       	brcc	.+12     	; 0x9044 <DrawFrame+0xf8>
		SetTile(x+0,y+0,FIRST_BORDER_TILE+1);
    9038:	8b 2d       	mov	r24, r11
    903a:	61 2f       	mov	r22, r17
    903c:	45 e2       	ldi	r20, 0x25	; 37
    903e:	50 e0       	ldi	r21, 0x00	; 0
    9040:	0e 94 5b 39 	call	0x72b6	; 0x72b6 <SetTile>
	if(x+w < SCREEN_TILES_H && y+0 < SCREEN_TILES_V)//top right corner
    9044:	cb 2d       	mov	r28, r11
    9046:	d0 e0       	ldi	r29, 0x00	; 0
    9048:	c9 0d       	add	r28, r9
    904a:	d1 1d       	adc	r29, r1
    904c:	ce 31       	cpi	r28, 0x1E	; 30
    904e:	d1 05       	cpc	r29, r1
    9050:	4c f4       	brge	.+18     	; 0x9064 <DrawFrame+0x118>
    9052:	1a 31       	cpi	r17, 0x1A	; 26
    9054:	38 f4       	brcc	.+14     	; 0x9064 <DrawFrame+0x118>
		SetTile(x+w,y+0,FIRST_BORDER_TILE+2);
    9056:	89 2d       	mov	r24, r9
    9058:	8b 0d       	add	r24, r11
    905a:	61 2f       	mov	r22, r17
    905c:	46 e2       	ldi	r20, 0x26	; 38
    905e:	50 e0       	ldi	r21, 0x00	; 0
    9060:	0e 94 5b 39 	call	0x72b6	; 0x72b6 <SetTile>
	if(x+0 < SCREEN_TILES_H && y+h < SCREEN_TILES_V)//bottom left corner
    9064:	8d e1       	ldi	r24, 0x1D	; 29
    9066:	8b 15       	cp	r24, r11
    9068:	68 f0       	brcs	.+26     	; 0x9084 <DrawFrame+0x138>
    906a:	81 2f       	mov	r24, r17
    906c:	90 e0       	ldi	r25, 0x00	; 0
    906e:	8a 0d       	add	r24, r10
    9070:	91 1d       	adc	r25, r1
    9072:	4a 97       	sbiw	r24, 0x1a	; 26
    9074:	3c f4       	brge	.+14     	; 0x9084 <DrawFrame+0x138>
		SetTile(x+0,y+h,FIRST_BORDER_TILE+3);
    9076:	6a 2d       	mov	r22, r10
    9078:	61 0f       	add	r22, r17
    907a:	8b 2d       	mov	r24, r11
    907c:	47 e2       	ldi	r20, 0x27	; 39
    907e:	50 e0       	ldi	r21, 0x00	; 0
    9080:	0e 94 5b 39 	call	0x72b6	; 0x72b6 <SetTile>
	if(x+w < SCREEN_TILES_H && y+h < SCREEN_TILES_V)//bottom right corner
    9084:	6e 97       	sbiw	r28, 0x1e	; 30
    9086:	74 f4       	brge	.+28     	; 0x90a4 <DrawFrame+0x158>
    9088:	81 2f       	mov	r24, r17
    908a:	90 e0       	ldi	r25, 0x00	; 0
    908c:	8a 0d       	add	r24, r10
    908e:	91 1d       	adc	r25, r1
    9090:	4a 97       	sbiw	r24, 0x1a	; 26
    9092:	44 f4       	brge	.+16     	; 0x90a4 <DrawFrame+0x158>
		SetTile(x+w,y+h,FIRST_BORDER_TILE+4);
    9094:	a1 0e       	add	r10, r17
    9096:	89 2d       	mov	r24, r9
    9098:	8b 0d       	add	r24, r11
    909a:	6a 2d       	mov	r22, r10
    909c:	48 e2       	ldi	r20, 0x28	; 40
    909e:	50 e0       	ldi	r21, 0x00	; 0
    90a0:	0e 94 5b 39 	call	0x72b6	; 0x72b6 <SetTile>


}
    90a4:	cd b7       	in	r28, 0x3d	; 61
    90a6:	de b7       	in	r29, 0x3e	; 62
    90a8:	ed e0       	ldi	r30, 0x0D	; 13
    90aa:	0c 94 ca 57 	jmp	0xaf94	; 0xaf94 <__epilogue_restores__+0xa>

000090ae <DrawClearBlockGrid>:

void DrawClearBlockGrid(uint8_t x, uint8_t y, uint8_t i){
    90ae:	58 2f       	mov	r21, r24
	if(y == 0)
    90b0:	66 23       	and	r22, r22
    90b2:	c9 f1       	breq	.+114    	; 0x9126 <DrawClearBlockGrid+0x78>
		return;
	//TODO NO NEED FOR BOUNDS CHECK???
		uint8_t b = p[i].well[(y*WELL_WIDTH)+x];
    90b4:	86 2f       	mov	r24, r22
    90b6:	90 e0       	ldi	r25, 0x00	; 0
    90b8:	24 2f       	mov	r18, r20
    90ba:	30 e0       	ldi	r19, 0x00	; 0
    90bc:	fc 01       	movw	r30, r24
    90be:	ee 0f       	add	r30, r30
    90c0:	ff 1f       	adc	r31, r31
    90c2:	e8 0f       	add	r30, r24
    90c4:	f9 1f       	adc	r31, r25
    90c6:	ee 0f       	add	r30, r30
    90c8:	ff 1f       	adc	r31, r31
    90ca:	82 e7       	ldi	r24, 0x72	; 114
    90cc:	90 e0       	ldi	r25, 0x00	; 0
    90ce:	dc 01       	movw	r26, r24
    90d0:	2a 9f       	mul	r18, r26
    90d2:	c0 01       	movw	r24, r0
    90d4:	2b 9f       	mul	r18, r27
    90d6:	90 0d       	add	r25, r0
    90d8:	3a 9f       	mul	r19, r26
    90da:	90 0d       	add	r25, r0
    90dc:	11 24       	eor	r1, r1
    90de:	e8 0f       	add	r30, r24
    90e0:	f9 1f       	adc	r31, r25
    90e2:	e8 58       	subi	r30, 0x88	; 136
    90e4:	f2 4f       	sbci	r31, 0xF2	; 242
    90e6:	e5 0f       	add	r30, r21
    90e8:	f1 1d       	adc	r31, r1
    90ea:	92 8d       	ldd	r25, Z+26	; 0x1a
		x <<= 1;//convert to vram coords
		x += (i?15:2);//add border offset
    90ec:	44 23       	and	r20, r20
    90ee:	11 f4       	brne	.+4      	; 0x90f4 <DrawClearBlockGrid+0x46>
    90f0:	82 e0       	ldi	r24, 0x02	; 2
    90f2:	01 c0       	rjmp	.+2      	; 0x90f6 <DrawClearBlockGrid+0x48>
    90f4:	8f e0       	ldi	r24, 0x0F	; 15
		y<<= 1;//convert to vram coords
    90f6:	66 0f       	add	r22, r22
		if(b & HALFSTEP)
    90f8:	95 fd       	sbrc	r25, 5
			y++;
    90fa:	6f 5f       	subi	r22, 0xFF	; 255
void DrawClearBlockGrid(uint8_t x, uint8_t y, uint8_t i){
	if(y == 0)
		return;
	//TODO NO NEED FOR BOUNDS CHECK???
		uint8_t b = p[i].well[(y*WELL_WIDTH)+x];
		x <<= 1;//convert to vram coords
    90fc:	55 0f       	add	r21, r21
		x += (i?15:2);//add border offset
		y<<= 1;//convert to vram coords
		if(b & HALFSTEP)
			y++;
		uint16_t voff = (y*VRAM_TILES_H)+x;
    90fe:	ee e1       	ldi	r30, 0x1E	; 30
    9100:	6e 9f       	mul	r22, r30
    9102:	f0 01       	movw	r30, r0
    9104:	11 24       	eor	r1, r1
    9106:	85 0f       	add	r24, r21
    9108:	e8 0f       	add	r30, r24
    910a:	f1 1d       	adc	r31, r1
		vram[voff++]	= BLACK_TILE+RAM_TILES_COUNT;
    910c:	df 01       	movw	r26, r30
    910e:	a0 5e       	subi	r26, 0xE0	; 224
    9110:	be 4f       	sbci	r27, 0xFE	; 254
    9112:	82 e4       	ldi	r24, 0x42	; 66
    9114:	8c 93       	st	X, r24
		vram[voff]		= BLACK_TILE+RAM_TILES_COUNT;
    9116:	df 01       	movw	r26, r30
    9118:	af 5d       	subi	r26, 0xDF	; 223
    911a:	be 4f       	sbci	r27, 0xFE	; 254
    911c:	8c 93       	st	X, r24
		voff += VRAM_TILES_H-1;
		vram[voff++]	= BLACK_TILE+RAM_TILES_COUNT;
    911e:	e2 5c       	subi	r30, 0xC2	; 194
    9120:	fe 4f       	sbci	r31, 0xFE	; 254
    9122:	80 83       	st	Z, r24
		vram[voff]		= BLACK_TILE+RAM_TILES_COUNT;
    9124:	81 83       	std	Z+1, r24	; 0x01
    9126:	08 95       	ret

00009128 <DrawBlockGrid>:
	
}

void DrawBlockGrid(uint8_t x, uint8_t y, uint8_t i){
    9128:	58 2f       	mov	r21, r24
	if(y == 0)
    912a:	66 23       	and	r22, r22
    912c:	09 f4       	brne	.+2      	; 0x9130 <DrawBlockGrid+0x8>
    912e:	54 c0       	rjmp	.+168    	; 0x91d8 <DrawBlockGrid+0xb0>
		return;
	//TODO NO NEED FOR BOUNDS CHECK??
	uint8_t b = p[i].well[(y*WELL_WIDTH)+x];
    9130:	86 2f       	mov	r24, r22
    9132:	90 e0       	ldi	r25, 0x00	; 0
    9134:	24 2f       	mov	r18, r20
    9136:	30 e0       	ldi	r19, 0x00	; 0
    9138:	fc 01       	movw	r30, r24
    913a:	ee 0f       	add	r30, r30
    913c:	ff 1f       	adc	r31, r31
    913e:	e8 0f       	add	r30, r24
    9140:	f9 1f       	adc	r31, r25
    9142:	ee 0f       	add	r30, r30
    9144:	ff 1f       	adc	r31, r31
    9146:	82 e7       	ldi	r24, 0x72	; 114
    9148:	90 e0       	ldi	r25, 0x00	; 0
    914a:	dc 01       	movw	r26, r24
    914c:	2a 9f       	mul	r18, r26
    914e:	c0 01       	movw	r24, r0
    9150:	2b 9f       	mul	r18, r27
    9152:	90 0d       	add	r25, r0
    9154:	3a 9f       	mul	r19, r26
    9156:	90 0d       	add	r25, r0
    9158:	11 24       	eor	r1, r1
    915a:	e8 0f       	add	r30, r24
    915c:	f9 1f       	adc	r31, r25
    915e:	e8 58       	subi	r30, 0x88	; 136
    9160:	f2 4f       	sbci	r31, 0xF2	; 242
    9162:	e5 0f       	add	r30, r21
    9164:	f1 1d       	adc	r31, r1
    9166:	82 8d       	ldd	r24, Z+26	; 0x1a
	x <<= 1;
	x += (i?15:2);
    9168:	44 23       	and	r20, r20
    916a:	11 f4       	brne	.+4      	; 0x9170 <DrawBlockGrid+0x48>
    916c:	22 e0       	ldi	r18, 0x02	; 2
    916e:	01 c0       	rjmp	.+2      	; 0x9172 <DrawBlockGrid+0x4a>
    9170:	2f e0       	ldi	r18, 0x0F	; 15
	y <<= 1;
    9172:	66 0f       	add	r22, r22
	if(b & HALFSTEP)
    9174:	85 fd       	sbrc	r24, 5
		y++;
    9176:	6f 5f       	subi	r22, 0xFF	; 255
	
	b &= 0x0F;//strip flags
    9178:	38 2f       	mov	r19, r24
    917a:	3f 70       	andi	r19, 0x0F	; 15
void DrawBlockGrid(uint8_t x, uint8_t y, uint8_t i){
	if(y == 0)
		return;
	//TODO NO NEED FOR BOUNDS CHECK??
	uint8_t b = p[i].well[(y*WELL_WIDTH)+x];
	x <<= 1;
    917c:	55 0f       	add	r21, r21
	if(b & HALFSTEP)
		y++;
	
	b &= 0x0F;//strip flags
	
	uint16_t voff = (y*VRAM_TILES_H)+x;
    917e:	8e e1       	ldi	r24, 0x1E	; 30
    9180:	68 9f       	mul	r22, r24
    9182:	c0 01       	movw	r24, r0
    9184:	11 24       	eor	r1, r1
    9186:	25 0f       	add	r18, r21
    9188:	82 0f       	add	r24, r18
    918a:	91 1d       	adc	r25, r1
    918c:	fc 01       	movw	r30, r24
    918e:	e0 5e       	subi	r30, 0xE0	; 224
    9190:	fe 4f       	sbci	r31, 0xFE	; 254
    9192:	dc 01       	movw	r26, r24
    9194:	11 96       	adiw	r26, 0x01	; 1
    9196:	bc 01       	movw	r22, r24
    9198:	62 5e       	subi	r22, 0xE2	; 226
    919a:	7f 4f       	sbci	r23, 0xFF	; 255

	if(b){
    919c:	33 23       	and	r19, r19
    919e:	91 f0       	breq	.+36     	; 0x91c4 <DrawBlockGrid+0x9c>
		b--;
		uint8_t toff = (b<<2)+RAM_TILES_COUNT;
    91a0:	83 2f       	mov	r24, r19
    91a2:	81 50       	subi	r24, 0x01	; 1
    91a4:	88 0f       	add	r24, r24
    91a6:	88 0f       	add	r24, r24
    91a8:	82 5e       	subi	r24, 0xE2	; 226
		vram[voff++]	= toff++;
    91aa:	80 83       	st	Z, r24
    91ac:	8f 5f       	subi	r24, 0xFF	; 255
		vram[voff]		= toff++;
    91ae:	a0 5e       	subi	r26, 0xE0	; 224
    91b0:	be 4f       	sbci	r27, 0xFE	; 254
    91b2:	8c 93       	st	X, r24
    91b4:	8f 5f       	subi	r24, 0xFF	; 255
		voff += VRAM_TILES_H-1;
		vram[voff++]	= toff++;
    91b6:	fb 01       	movw	r30, r22
    91b8:	e0 5e       	subi	r30, 0xE0	; 224
    91ba:	fe 4f       	sbci	r31, 0xFE	; 254
    91bc:	80 83       	st	Z, r24
		vram[voff]		= toff;
    91be:	8f 5f       	subi	r24, 0xFF	; 255
    91c0:	81 83       	std	Z+1, r24	; 0x01
    91c2:	08 95       	ret
	}else{
		vram[voff++]	= BLACK_TILE+RAM_TILES_COUNT;
    91c4:	82 e4       	ldi	r24, 0x42	; 66
    91c6:	80 83       	st	Z, r24
		vram[voff]		= BLACK_TILE+RAM_TILES_COUNT;
    91c8:	a0 5e       	subi	r26, 0xE0	; 224
    91ca:	be 4f       	sbci	r27, 0xFE	; 254
    91cc:	8c 93       	st	X, r24
		voff += VRAM_TILES_H-1;
		vram[voff++]	= BLACK_TILE+RAM_TILES_COUNT;
    91ce:	fb 01       	movw	r30, r22
    91d0:	e0 5e       	subi	r30, 0xE0	; 224
    91d2:	fe 4f       	sbci	r31, 0xFE	; 254
    91d4:	80 83       	st	Z, r24
		vram[voff]		= BLACK_TILE+RAM_TILES_COUNT;
    91d6:	81 83       	std	Z+1, r24	; 0x01
    91d8:	08 95       	ret

000091da <DrawBlock>:
	}
}


void DrawBlock(int8_t x, int8_t y, uint8_t b){
    91da:	98 2f       	mov	r25, r24

	if(b & HALFSTEP)
    91dc:	45 fd       	sbrc	r20, 5
		y++;
    91de:	6f 5f       	subi	r22, 0xFF	; 255

	if(x >= SCREEN_TILES_H || y >= SCREEN_TILES_V || y < 1)
    91e0:	9e 31       	cpi	r25, 0x1E	; 30
    91e2:	0c f0       	brlt	.+2      	; 0x91e6 <DrawBlock+0xc>
    91e4:	41 c0       	rjmp	.+130    	; 0x9268 <DrawBlock+0x8e>
    91e6:	6a 31       	cpi	r22, 0x1A	; 26
    91e8:	0c f0       	brlt	.+2      	; 0x91ec <DrawBlock+0x12>
    91ea:	3e c0       	rjmp	.+124    	; 0x9268 <DrawBlock+0x8e>
    91ec:	16 16       	cp	r1, r22
    91ee:	e4 f5       	brge	.+120    	; 0x9268 <DrawBlock+0x8e>
		return;
	uint16_t voff = (y*VRAM_TILES_H)+x;
    91f0:	8e e1       	ldi	r24, 0x1E	; 30
    91f2:	68 02       	muls	r22, r24
    91f4:	d0 01       	movw	r26, r0
    91f6:	11 24       	eor	r1, r1
    91f8:	89 2f       	mov	r24, r25
    91fa:	99 27       	eor	r25, r25
    91fc:	87 fd       	sbrc	r24, 7
    91fe:	90 95       	com	r25
    9200:	a8 0f       	add	r26, r24
    9202:	b9 1f       	adc	r27, r25

//	if(voff < VRAM_TILES_H)//the top and bottom are both inside the top two rows we don't want to draw over
	//	return;
	
	b &= 0x0F;//strip flags
    9204:	4f 70       	andi	r20, 0x0F	; 15
	
	if(b){
    9206:	e1 f0       	breq	.+56     	; 0x9240 <DrawBlock+0x66>
		b--;
		uint8_t toff = (b<<2)+RAM_TILES_COUNT;
    9208:	41 50       	subi	r20, 0x01	; 1
    920a:	44 0f       	add	r20, r20
    920c:	44 0f       	add	r20, r20
    920e:	94 2f       	mov	r25, r20
    9210:	92 5e       	subi	r25, 0xE2	; 226
    9212:	84 2f       	mov	r24, r20
    9214:	80 5e       	subi	r24, 0xE0	; 224
    9216:	9d 01       	movw	r18, r26
    9218:	22 5e       	subi	r18, 0xE2	; 226
    921a:	3f 4f       	sbci	r19, 0xFF	; 255

		if(voff >= VRAM_TILES_H*2){//don't draw piece preview over the border
    921c:	ac 33       	cpi	r26, 0x3C	; 60
    921e:	b1 05       	cpc	r27, r1
    9220:	40 f0       	brcs	.+16     	; 0x9232 <DrawBlock+0x58>
			vram[voff++] = toff++;
    9222:	fd 01       	movw	r30, r26
    9224:	e0 5e       	subi	r30, 0xE0	; 224
    9226:	fe 4f       	sbci	r31, 0xFE	; 254
    9228:	90 83       	st	Z, r25
    922a:	41 5e       	subi	r20, 0xE1	; 225
			vram[voff] = toff++;
    922c:	af 5d       	subi	r26, 0xDF	; 223
    922e:	be 4f       	sbci	r27, 0xFE	; 254
    9230:	4c 93       	st	X, r20
			voff += VRAM_TILES_H-1;
		}else{
			toff += 2;
			voff += VRAM_TILES_H;
		}
		vram[voff++] = toff++;
    9232:	f9 01       	movw	r30, r18
    9234:	e0 5e       	subi	r30, 0xE0	; 224
    9236:	fe 4f       	sbci	r31, 0xFE	; 254
    9238:	80 83       	st	Z, r24
		vram[voff] = toff;
    923a:	8f 5f       	subi	r24, 0xFF	; 255
    923c:	81 83       	std	Z+1, r24	; 0x01
    923e:	08 95       	ret
    9240:	9d 01       	movw	r18, r26
    9242:	22 5e       	subi	r18, 0xE2	; 226
    9244:	3f 4f       	sbci	r19, 0xFF	; 255
	}else{
		if(voff >= VRAM_TILES_H*2){
    9246:	ac 33       	cpi	r26, 0x3C	; 60
    9248:	b1 05       	cpc	r27, r1
    924a:	40 f0       	brcs	.+16     	; 0x925c <DrawBlock+0x82>
			vram[voff++] = BLACK_TILE+RAM_TILES_COUNT;
    924c:	fd 01       	movw	r30, r26
    924e:	e0 5e       	subi	r30, 0xE0	; 224
    9250:	fe 4f       	sbci	r31, 0xFE	; 254
    9252:	82 e4       	ldi	r24, 0x42	; 66
    9254:	80 83       	st	Z, r24
			vram[voff] = BLACK_TILE+RAM_TILES_COUNT;
    9256:	af 5d       	subi	r26, 0xDF	; 223
    9258:	be 4f       	sbci	r27, 0xFE	; 254
    925a:	8c 93       	st	X, r24
			voff += VRAM_TILES_H-1;
		}else
			voff += VRAM_TILES_H;
		
		vram[voff++] = BLACK_TILE+RAM_TILES_COUNT;
    925c:	f9 01       	movw	r30, r18
    925e:	e0 5e       	subi	r30, 0xE0	; 224
    9260:	fe 4f       	sbci	r31, 0xFE	; 254
    9262:	82 e4       	ldi	r24, 0x42	; 66
    9264:	80 83       	st	Z, r24
		vram[voff] = BLACK_TILE+RAM_TILES_COUNT;
    9266:	81 83       	std	Z+1, r24	; 0x01
    9268:	08 95       	ret

0000926a <ProcessGravity>:





uint8_t ProcessGravity(uint8_t i){
    926a:	a0 e0       	ldi	r26, 0x00	; 0
    926c:	b0 e0       	ldi	r27, 0x00	; 0
    926e:	eb e3       	ldi	r30, 0x3B	; 59
    9270:	f9 e4       	ldi	r31, 0x49	; 73
    9272:	0c 94 ae 57 	jmp	0xaf5c	; 0xaf5c <__prologue_saves__+0xa>
    9276:	98 2e       	mov	r9, r24
    9278:	77 24       	eor	r7, r7
    927a:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t off;

	for(uint8_t x=0;x<WELL_WIDTH;x++){
		off = (WELL_SIZE-WELL_WIDTH)+x;//start at the lowest left block
		for(uint8_t y=WELL_HEIGHT-1;y>0;y--){
			uint8_t t = p[i].well[off];//what piece is here?
    927c:	28 2f       	mov	r18, r24
    927e:	30 e0       	ldi	r19, 0x00	; 0
			if(!t){//empty, something above could fall here
    9280:	82 e7       	ldi	r24, 0x72	; 114
    9282:	90 e0       	ldi	r25, 0x00	; 0
    9284:	28 9f       	mul	r18, r24
    9286:	70 01       	movw	r14, r0
    9288:	29 9f       	mul	r18, r25
    928a:	f0 0c       	add	r15, r0
    928c:	38 9f       	mul	r19, r24
    928e:	f0 0c       	add	r15, r0
    9290:	11 24       	eor	r1, r1
    9292:	88 e7       	ldi	r24, 0x78	; 120
    9294:	9d e0       	ldi	r25, 0x0D	; 13
    9296:	e8 0e       	add	r14, r24
    9298:	f9 1e       	adc	r15, r25





uint8_t ProcessGravity(uint8_t i){
    929a:	e8 e4       	ldi	r30, 0x48	; 72
    929c:	8e 2e       	mov	r8, r30
    929e:	81 0e       	add	r8, r17
    92a0:	0c e0       	ldi	r16, 0x0C	; 12
	uint8_t off;

	for(uint8_t x=0;x<WELL_WIDTH;x++){
		off = (WELL_SIZE-WELL_WIDTH)+x;//start at the lowest left block
		for(uint8_t y=WELL_HEIGHT-1;y>0;y--){
			uint8_t t = p[i].well[off];//what piece is here?
    92a2:	28 2d       	mov	r18, r8
    92a4:	30 e0       	ldi	r19, 0x00	; 0
			if(!t){//empty, something above could fall here
    92a6:	67 01       	movw	r12, r14
    92a8:	c2 0e       	add	r12, r18
    92aa:	d3 1e       	adc	r13, r19
    92ac:	f6 01       	movw	r30, r12
    92ae:	82 8d       	ldd	r24, Z+26	; 0x1a
    92b0:	88 23       	and	r24, r24
    92b2:	01 f5       	brne	.+64     	; 0x92f4 <ProcessGravity+0x8a>
				t = p[i].well[(off-WELL_WIDTH)];//what is above?
    92b4:	e9 01       	movw	r28, r18
    92b6:	26 97       	sbiw	r28, 0x06	; 6
    92b8:	ce 0d       	add	r28, r14
    92ba:	df 1d       	adc	r29, r15
    92bc:	ba 8c       	ldd	r11, Y+26	; 0x1a
				if(t){//something!
    92be:	bb 20       	and	r11, r11
    92c0:	c9 f0       	breq	.+50     	; 0x92f4 <ProcessGravity+0x8a>
					moved++;
    92c2:	73 94       	inc	r7
    92c4:	a0 2e       	mov	r10, r16
    92c6:	aa 94       	dec	r10

					DrawClearBlockGrid(x,y-1,i);//blank out the old position
    92c8:	81 2f       	mov	r24, r17
    92ca:	6a 2d       	mov	r22, r10
    92cc:	49 2d       	mov	r20, r9
    92ce:	0e 94 57 48 	call	0x90ae	; 0x90ae <DrawClearBlockGrid>
    92d2:	8a 8d       	ldd	r24, Y+26	; 0x1a
					if(t & HALFSTEP){//was half way there already, put it in the open spot
    92d4:	b5 fe       	sbrs	r11, 5
    92d6:	07 c0       	rjmp	.+14     	; 0x92e6 <ProcessGravity+0x7c>
						p[i].well[off] = (p[i].well[off-WELL_WIDTH]&(0x0F|SCORE));//drop the HALFSTEP, since it is taking a new spot. Keep the score in case it is a falling star(which needs to disappear after)
    92d8:	8f 74       	andi	r24, 0x4F	; 79
    92da:	f6 01       	movw	r30, r12
    92dc:	82 8f       	std	Z+26, r24	; 0x1a
						p[i].well[off-WELL_WIDTH] = 0;
    92de:	1a 8e       	std	Y+26, r1	; 0x1a
						DrawBlockGrid(x,y+0,i);//draw it in the new position
    92e0:	81 2f       	mov	r24, r17
    92e2:	60 2f       	mov	r22, r16
    92e4:	04 c0       	rjmp	.+8      	; 0x92ee <ProcessGravity+0x84>
						
					}else{//this block still has to go through the half step phase before it enters this location
						p[i].well[off-WELL_WIDTH] |= HALFSTEP;
    92e6:	80 62       	ori	r24, 0x20	; 32
    92e8:	8a 8f       	std	Y+26, r24	; 0x1a
						DrawBlockGrid(x,y-1,i);//draw it in the new position
    92ea:	81 2f       	mov	r24, r17
    92ec:	6a 2d       	mov	r22, r10
    92ee:	49 2d       	mov	r20, r9
    92f0:	0e 94 94 48 	call	0x9128	; 0x9128 <DrawBlockGrid>
	uint8_t moved = 0;
	uint8_t off;

	for(uint8_t x=0;x<WELL_WIDTH;x++){
		off = (WELL_SIZE-WELL_WIDTH)+x;//start at the lowest left block
		for(uint8_t y=WELL_HEIGHT-1;y>0;y--){
    92f4:	01 50       	subi	r16, 0x01	; 1
    92f6:	19 f0       	breq	.+6      	; 0x92fe <ProcessGravity+0x94>
						DrawBlockGrid(x,y-1,i);//draw it in the new position
					}
				//	break;//only drop 1 block per column, per tick. Looks a little nicer, and makes worst case scenarios cheaper.
				}//else an empty space above an empty space, which doesn't mean there isn't something further up
			}
			off -= WELL_WIDTH;
    92f8:	fa ef       	ldi	r31, 0xFA	; 250
    92fa:	8f 0e       	add	r8, r31
    92fc:	d2 cf       	rjmp	.-92     	; 0x92a2 <ProcessGravity+0x38>
uint8_t ProcessGravity(uint8_t i){
//return 0;
	uint8_t moved = 0;
	uint8_t off;

	for(uint8_t x=0;x<WELL_WIDTH;x++){
    92fe:	1f 5f       	subi	r17, 0xFF	; 255
    9300:	16 30       	cpi	r17, 0x06	; 6
    9302:	59 f6       	brne	.-106    	; 0x929a <ProcessGravity+0x30>
			p[i].well[x] = 0;
			moved++;
		}
	}*/
	return moved;
}
    9304:	87 2d       	mov	r24, r7
    9306:	cd b7       	in	r28, 0x3d	; 61
    9308:	de b7       	in	r29, 0x3e	; 62
    930a:	ed e0       	ldi	r30, 0x0D	; 13
    930c:	0c 94 ca 57 	jmp	0xaf94	; 0xaf94 <__epilogue_restores__+0xa>

00009310 <SpawnNewPiece>:
BLOCK_STAR,BLOCK_BLUE,BLOCK_GREEN,BLOCK_RED,BLOCK_RED,BLOCK_GREEN,BLOCK_BLUE,BLOCK_STAR,
};



void SpawnNewPiece(uint8_t i){
    9310:	ff 92       	push	r15
    9312:	0f 93       	push	r16
    9314:	1f 93       	push	r17
    9316:	cf 93       	push	r28
    9318:	df 93       	push	r29
    931a:	f8 2e       	mov	r15, r24
	p[i].x = 2;
    931c:	28 2f       	mov	r18, r24
    931e:	30 e0       	ldi	r19, 0x00	; 0
    9320:	82 e7       	ldi	r24, 0x72	; 114
    9322:	90 e0       	ldi	r25, 0x00	; 0
    9324:	28 9f       	mul	r18, r24
    9326:	80 01       	movw	r16, r0
    9328:	29 9f       	mul	r18, r25
    932a:	10 0d       	add	r17, r0
    932c:	38 9f       	mul	r19, r24
    932e:	10 0d       	add	r17, r0
    9330:	11 24       	eor	r1, r1
    9332:	08 58       	subi	r16, 0x88	; 136
    9334:	12 4f       	sbci	r17, 0xF2	; 242
    9336:	82 e0       	ldi	r24, 0x02	; 2
    9338:	d8 01       	movw	r26, r16
    933a:	17 96       	adiw	r26, 0x07	; 7
    933c:	8c 93       	st	X, r24
    933e:	17 97       	sbiw	r26, 0x07	; 7
	p[i].y = 0;
    9340:	18 96       	adiw	r26, 0x08	; 8
    9342:	1c 92       	st	X, r1
    9344:	18 97       	sbiw	r26, 0x08	; 8
	p[i].blocks[0] = p[i].next[0];
    9346:	1c 96       	adiw	r26, 0x0c	; 12
    9348:	8c 91       	ld	r24, X
    934a:	1c 97       	sbiw	r26, 0x0c	; 12
    934c:	1a 96       	adiw	r26, 0x0a	; 10
    934e:	8c 93       	st	X, r24
    9350:	1a 97       	sbiw	r26, 0x0a	; 10
	p[i].blocks[1] = p[i].next[1];
    9352:	1d 96       	adiw	r26, 0x0d	; 13
    9354:	8c 91       	ld	r24, X
    9356:	1d 97       	sbiw	r26, 0x0d	; 13
    9358:	1b 96       	adiw	r26, 0x0b	; 11
    935a:	8c 93       	st	X, r24
    935c:	1b 97       	sbiw	r26, 0x0b	; 11
	GetPrngNumber(p[i].lfsr);//set our existing value from last random usage
    935e:	8d 91       	ld	r24, X+
    9360:	9c 91       	ld	r25, X
    9362:	0e 94 93 3a 	call	0x7526	; 0x7526 <GetPrngNumber>
	p[i].next[0] = pgm_read_byte(&spawn_pile[GetPrngNumber(0)%sizeof(spawn_pile)]);
    9366:	80 e0       	ldi	r24, 0x00	; 0
    9368:	90 e0       	ldi	r25, 0x00	; 0
    936a:	0e 94 93 3a 	call	0x7526	; 0x7526 <GetPrngNumber>
    936e:	fc 01       	movw	r30, r24
    9370:	ef 77       	andi	r30, 0x7F	; 127
    9372:	f0 70       	andi	r31, 0x00	; 0
    9374:	c1 ee       	ldi	r28, 0xE1	; 225
    9376:	d7 e6       	ldi	r29, 0x67	; 103
    9378:	ec 0f       	add	r30, r28
    937a:	fd 1f       	adc	r31, r29
    937c:	e4 91       	lpm	r30, Z+
    937e:	d8 01       	movw	r26, r16
    9380:	1c 96       	adiw	r26, 0x0c	; 12
    9382:	ec 93       	st	X, r30
	p[i].lfsr = GetPrngNumber(0);//get a new value, this method makes the generated pieces the same for both player regardless of how long the game goes(no other use of random)
    9384:	80 e0       	ldi	r24, 0x00	; 0
    9386:	90 e0       	ldi	r25, 0x00	; 0
    9388:	0e 94 93 3a 	call	0x7526	; 0x7526 <GetPrngNumber>
    938c:	f8 01       	movw	r30, r16
    938e:	91 83       	std	Z+1, r25	; 0x01
    9390:	80 83       	st	Z, r24
	p[i].next[1] = pgm_read_byte(&spawn_pile[p[i].lfsr%sizeof(spawn_pile)]);
    9392:	8f 77       	andi	r24, 0x7F	; 127
    9394:	90 70       	andi	r25, 0x00	; 0
    9396:	c8 0f       	add	r28, r24
    9398:	d9 1f       	adc	r29, r25
    939a:	fe 01       	movw	r30, r28
    939c:	84 91       	lpm	r24, Z+
    939e:	d8 01       	movw	r26, r16
    93a0:	1d 96       	adiw	r26, 0x0d	; 13
    93a2:	8c 93       	st	X, r24
    93a4:	1d 97       	sbiw	r26, 0x0d	; 13
	p[i].r = 0;
    93a6:	19 96       	adiw	r26, 0x09	; 9
    93a8:	1c 92       	st	X, r1
	DrawPreview(i);
    93aa:	8f 2d       	mov	r24, r15
    93ac:	0e 94 a6 4d 	call	0x9b4c	; 0x9b4c <DrawPreview>
}
    93b0:	cd b7       	in	r28, 0x3d	; 61
    93b2:	de b7       	in	r29, 0x3e	; 62
    93b4:	e5 e0       	ldi	r30, 0x05	; 5
    93b6:	0c 94 d2 57 	jmp	0xafa4	; 0xafa4 <__epilogue_restores__+0x1a>

000093ba <ProcessScoring>:

uint8_t ProcessScoring(uint8_t i){
    93ba:	a0 e0       	ldi	r26, 0x00	; 0
    93bc:	b0 e0       	ldi	r27, 0x00	; 0
    93be:	e3 ee       	ldi	r30, 0xE3	; 227
    93c0:	f9 e4       	ldi	r31, 0x49	; 73
    93c2:	0c 94 b3 57 	jmp	0xaf66	; 0xaf66 <__prologue_saves__+0x14>
    93c6:	c8 2e       	mov	r12, r24
    93c8:	b6 e0       	ldi	r27, 0x06	; 6
    93ca:	40 e0       	ldi	r20, 0x00	; 0
    93cc:	50 e0       	ldi	r21, 0x00	; 0
    93ce:	dd 24       	eor	r13, r13
    93d0:	ff 24       	eor	r15, r15
    93d2:	fa 94       	dec	r15
    93d4:	ee 24       	eor	r14, r14
    93d6:	ea 94       	dec	r14
    93d8:	01 e0       	ldi	r16, 0x01	; 1

	//scan horizontally
	for(uint8_t y=1;y<WELL_HEIGHT;y++){
		left = right = 255;//clear the markers for a new row
		for(uint8_t x=0;x<WELL_WIDTH;x++){
			t = p[i].well[off++]&0x0F;//drop any flags
    93da:	c8 2f       	mov	r28, r24
    93dc:	d0 e0       	ldi	r29, 0x00	; 0
    93de:	82 e7       	ldi	r24, 0x72	; 114
    93e0:	90 e0       	ldi	r25, 0x00	; 0
    93e2:	c8 9f       	mul	r28, r24
    93e4:	b0 01       	movw	r22, r0
    93e6:	c9 9f       	mul	r28, r25
    93e8:	70 0d       	add	r23, r0
    93ea:	d8 9f       	mul	r29, r24
    93ec:	70 0d       	add	r23, r0
    93ee:	11 24       	eor	r1, r1
    93f0:	68 58       	subi	r22, 0x88	; 136
    93f2:	72 4f       	sbci	r23, 0xF2	; 242
    93f4:	4d c0       	rjmp	.+154    	; 0x9490 <ProcessScoring+0xd6>
    93f6:	fb 01       	movw	r30, r22
    93f8:	e1 0f       	add	r30, r17
    93fa:	f1 1d       	adc	r31, r1
    93fc:	92 8d       	ldd	r25, Z+26	; 0x1a
    93fe:	9f 70       	andi	r25, 0x0F	; 15
    9400:	1f 5f       	subi	r17, 0xFF	; 255
			if(t || right != 255){
    9402:	99 23       	and	r25, r25
    9404:	21 f4       	brne	.+8      	; 0x940e <ProcessScoring+0x54>
    9406:	2f 3f       	cpi	r18, 0xFF	; 255
    9408:	11 f4       	brne	.+4      	; 0x940e <ProcessScoring+0x54>
    940a:	af ef       	ldi	r26, 0xFF	; 255
    940c:	39 c0       	rjmp	.+114    	; 0x9480 <ProcessScoring+0xc6>
				if(left == 255){//we must find a left score marker first
    940e:	af 3f       	cpi	r26, 0xFF	; 255
    9410:	29 f4       	brne	.+10     	; 0x941c <ProcessScoring+0x62>
					if(t <= BLOCK_BLUE && t >= BLOCK_RED){//it is a score marker
    9412:	89 2f       	mov	r24, r25
    9414:	81 50       	subi	r24, 0x01	; 1
    9416:	83 30       	cpi	r24, 0x03	; 3
    9418:	88 f1       	brcs	.+98     	; 0x947c <ProcessScoring+0xc2>
    941a:	32 c0       	rjmp	.+100    	; 0x9480 <ProcessScoring+0xc6>
						left = t;//store it
						leftpos = x;
					}
				}else if(right == 255){//once we have a left, we must find a right
    941c:	2f 3f       	cpi	r18, 0xFF	; 255
    941e:	61 f4       	brne	.+24     	; 0x9438 <ProcessScoring+0x7e>
					if(t <= BLOCK_BLUE && t >= BLOCK_RED){//it is  not a star or anything else, this can make or break the score
    9420:	89 2f       	mov	r24, r25
    9422:	81 50       	subi	r24, 0x01	; 1
    9424:	83 30       	cpi	r24, 0x03	; 3
    9426:	60 f5       	brcc	.+88     	; 0x9480 <ProcessScoring+0xc6>
						if(t != left){//we found a different color marker, so everything to the left is not a score. start a new scan from here
    9428:	9a 17       	cp	r25, r26
    942a:	41 f5       	brne	.+80     	; 0x947c <ProcessScoring+0xc2>
							left = t;//store the new left marker for the new search
							leftpos = x;
						}else{
							right = t;
							rightpos = x;
							if(x == WELL_WIDTH-1)//need to short circuit, otherwise this score wont process. Would need redundant code without the goto
    942c:	35 30       	cpi	r19, 0x05	; 5
    942e:	11 f0       	breq	.+4      	; 0x9434 <ProcessScoring+0x7a>
								goto SCORING_HORIZONTAL_SHORT_CIRCUIT;
    9430:	2a 2f       	mov	r18, r26
    9432:	0c c0       	rjmp	.+24     	; 0x944c <ProcessScoring+0x92>
    9434:	29 2f       	mov	r18, r25
    9436:	55 e0       	ldi	r21, 0x05	; 5
						}
					}
				}else{//we have a left and a right so a score did happen, we just need to see how far it goes(more of the same color on the right or side of well?)
SCORING_HORIZONTAL_SHORT_CIRCUIT:
				//db();
					if(icon_x == 255){//first score we found? set the position for the particle chain counter
    9438:	8f ef       	ldi	r24, 0xFF	; 255
    943a:	f8 16       	cp	r15, r24
    943c:	19 f4       	brne	.+6      	; 0x9444 <ProcessScoring+0x8a>
						icon_x = leftpos+1;
    943e:	f4 2e       	mov	r15, r20
    9440:	f3 94       	inc	r15
    9442:	e0 2e       	mov	r14, r16
						icon_y = y;
					}
					if((x == WELL_WIDTH-1) || (t != right && t <= BLOCK_BLUE)){//the score has ended, found the edge of the well or a different color marker or empty spot
    9444:	35 30       	cpi	r19, 0x05	; 5
    9446:	39 f0       	breq	.+14     	; 0x9456 <ProcessScoring+0x9c>
    9448:	92 17       	cp	r25, r18
    944a:	11 f4       	brne	.+4      	; 0x9450 <ProcessScoring+0x96>
    944c:	53 2f       	mov	r21, r19
    944e:	18 c0       	rjmp	.+48     	; 0x9480 <ProcessScoring+0xc6>
    9450:	94 30       	cpi	r25, 0x04	; 4
    9452:	20 f0       	brcs	.+8      	; 0x945c <ProcessScoring+0xa2>
    9454:	15 c0       	rjmp	.+42     	; 0x9480 <ProcessScoring+0xc6>
						
						if(t == right)//must have found the well edge, don't leave this one behind(not trivial to understand why this is needed..)
    9456:	92 17       	cp	r25, r18
    9458:	09 f4       	brne	.+2      	; 0x945c <ProcessScoring+0xa2>
    945a:	55 e0       	ldi	r21, 0x05	; 5
							rightpos = x;

						leftpos += (y*WELL_WIDTH);
    945c:	4b 0f       	add	r20, r27
						rightpos += (y*WELL_WIDTH);
    945e:	5b 0f       	add	r21, r27
    9460:	08 c0       	rjmp	.+16     	; 0x9472 <ProcessScoring+0xb8>
						
						while(leftpos <= rightpos){
							p[i].well[leftpos++] |= SCORE;//mark everything from the left to rightmost marker(there could be more than 1 right marker, but we store the last found)
    9462:	fb 01       	movw	r30, r22
    9464:	e4 0f       	add	r30, r20
    9466:	f1 1d       	adc	r31, r1
    9468:	82 8d       	ldd	r24, Z+26	; 0x1a
    946a:	80 64       	ori	r24, 0x40	; 64
    946c:	82 8f       	std	Z+26, r24	; 0x1a
    946e:	4f 5f       	subi	r20, 0xFF	; 255
							numscores++;
    9470:	d3 94       	inc	r13
							rightpos = x;

						leftpos += (y*WELL_WIDTH);
						rightpos += (y*WELL_WIDTH);
						
						while(leftpos <= rightpos){
    9472:	54 17       	cp	r21, r20
    9474:	b0 f7       	brcc	.-20     	; 0x9462 <ProcessScoring+0xa8>
    9476:	af ef       	ldi	r26, 0xFF	; 255
    9478:	2f ef       	ldi	r18, 0xFF	; 255
    947a:	02 c0       	rjmp	.+4      	; 0x9480 <ProcessScoring+0xc6>
    947c:	a9 2f       	mov	r26, r25
    947e:	43 2f       	mov	r20, r19
	uint8_t icon_y = 255;

	//scan horizontally
	for(uint8_t y=1;y<WELL_HEIGHT;y++){
		left = right = 255;//clear the markers for a new row
		for(uint8_t x=0;x<WELL_WIDTH;x++){
    9480:	3f 5f       	subi	r19, 0xFF	; 255
    9482:	36 30       	cpi	r19, 0x06	; 6
    9484:	09 f0       	breq	.+2      	; 0x9488 <ProcessScoring+0xce>
    9486:	b7 cf       	rjmp	.-146    	; 0x93f6 <ProcessScoring+0x3c>
    9488:	ba 5f       	subi	r27, 0xFA	; 250
	uint8_t numscores = 0;
	uint8_t icon_x = 255;
	uint8_t icon_y = 255;

	//scan horizontally
	for(uint8_t y=1;y<WELL_HEIGHT;y++){
    948a:	0f 5f       	subi	r16, 0xFF	; 255
    948c:	be 34       	cpi	r27, 0x4E	; 78
    948e:	29 f0       	breq	.+10     	; 0x949a <ProcessScoring+0xe0>
    9490:	1b 2f       	mov	r17, r27
    9492:	af ef       	ldi	r26, 0xFF	; 255
    9494:	2f ef       	ldi	r18, 0xFF	; 255
    9496:	30 e0       	ldi	r19, 0x00	; 0
    9498:	ae cf       	rjmp	.-164    	; 0x93f6 <ProcessScoring+0x3c>
    949a:	30 e0       	ldi	r19, 0x00	; 0
    949c:	50 e0       	ldi	r21, 0x00	; 0
    949e:	60 e0       	ldi	r22, 0x00	; 0
	//scan vertically
	for(uint8_t x=0;x<WELL_WIDTH;x++){
		up = down = 255;//clear the markers for a new column
		off = WELL_WIDTH+x;
		for(uint8_t y=1;y<WELL_HEIGHT;y++){
			t = p[i].well[off]&0x0F;//drop any flags
    94a0:	82 e7       	ldi	r24, 0x72	; 114
    94a2:	90 e0       	ldi	r25, 0x00	; 0
    94a4:	c8 9f       	mul	r28, r24
    94a6:	d0 01       	movw	r26, r0
    94a8:	c9 9f       	mul	r28, r25
    94aa:	b0 0d       	add	r27, r0
    94ac:	d8 9f       	mul	r29, r24
    94ae:	b0 0d       	add	r27, r0
    94b0:	11 24       	eor	r1, r1
    94b2:	a8 58       	subi	r26, 0x88	; 136
    94b4:	b2 4f       	sbci	r27, 0xF2	; 242
						
						if(t == down)//must have found the well edge, don't leave this one behind(not trivial to understand why this is needed..)
							downpos = y;

						//THIS IS THE BROKEN PART??!?
						uppos *= WELL_WIDTH;//uppos += (y*WELL_WIDTH);
    94b6:	06 e0       	ldi	r16, 0x06	; 6
	uint8_t numscores = 0;
	uint8_t icon_x = 255;
	uint8_t icon_y = 255;

	//scan horizontally
	for(uint8_t y=1;y<WELL_HEIGHT;y++){
    94b8:	16 2f       	mov	r17, r22
    94ba:	1a 5f       	subi	r17, 0xFA	; 250
    94bc:	7f ef       	ldi	r23, 0xFF	; 255
    94be:	2f ef       	ldi	r18, 0xFF	; 255
    94c0:	41 e0       	ldi	r20, 0x01	; 1
	//scan vertically
	for(uint8_t x=0;x<WELL_WIDTH;x++){
		up = down = 255;//clear the markers for a new column
		off = WELL_WIDTH+x;
		for(uint8_t y=1;y<WELL_HEIGHT;y++){
			t = p[i].well[off]&0x0F;//drop any flags
    94c2:	fd 01       	movw	r30, r26
    94c4:	e1 0f       	add	r30, r17
    94c6:	f1 1d       	adc	r31, r1
    94c8:	92 8d       	ldd	r25, Z+26	; 0x1a
    94ca:	9f 70       	andi	r25, 0x0F	; 15
			off += WELL_WIDTH;
    94cc:	1a 5f       	subi	r17, 0xFA	; 250
			if(t || down != 255){
    94ce:	99 23       	and	r25, r25
    94d0:	21 f4       	brne	.+8      	; 0x94da <ProcessScoring+0x120>
    94d2:	2f 3f       	cpi	r18, 0xFF	; 255
    94d4:	11 f4       	brne	.+4      	; 0x94da <ProcessScoring+0x120>
    94d6:	7f ef       	ldi	r23, 0xFF	; 255
    94d8:	3f c0       	rjmp	.+126    	; 0x9558 <ProcessScoring+0x19e>
				if(up == 255){//we must find a top score marker first
    94da:	7f 3f       	cpi	r23, 0xFF	; 255
    94dc:	29 f4       	brne	.+10     	; 0x94e8 <ProcessScoring+0x12e>
					if(t <= BLOCK_BLUE && t >= BLOCK_RED){//it is a score marker
    94de:	89 2f       	mov	r24, r25
    94e0:	81 50       	subi	r24, 0x01	; 1
    94e2:	83 30       	cpi	r24, 0x03	; 3
    94e4:	b8 f1       	brcs	.+110    	; 0x9554 <ProcessScoring+0x19a>
    94e6:	38 c0       	rjmp	.+112    	; 0x9558 <ProcessScoring+0x19e>
						up = t;//store it
						uppos = y;
					}
				}else if(down == 255){//once we have a top, we must find a bottom
    94e8:	2f 3f       	cpi	r18, 0xFF	; 255
    94ea:	61 f4       	brne	.+24     	; 0x9504 <ProcessScoring+0x14a>
					if(t <= BLOCK_BLUE && t >= BLOCK_RED){//it is  not a star or anything else, this can make or break the score
    94ec:	89 2f       	mov	r24, r25
    94ee:	81 50       	subi	r24, 0x01	; 1
    94f0:	83 30       	cpi	r24, 0x03	; 3
    94f2:	90 f5       	brcc	.+100    	; 0x9558 <ProcessScoring+0x19e>
						if(t != up){//we found a different color marker, so everything to the top is not a score. start a new scan from here
    94f4:	97 17       	cp	r25, r23
    94f6:	71 f5       	brne	.+92     	; 0x9554 <ProcessScoring+0x19a>
							up = t;//store the new top marker for the new search
							uppos = y;
						}else{
							down = t;
							downpos = y;
							if(y == WELL_HEIGHT-1)//need to short circuit, otherwise this score wont process. Would need redundant code without the goto
    94f8:	4c 30       	cpi	r20, 0x0C	; 12
    94fa:	11 f0       	breq	.+4      	; 0x9500 <ProcessScoring+0x146>
								goto SCORING_VERTICAL_SHORT_CIRCUIT;
    94fc:	27 2f       	mov	r18, r23
    94fe:	0c c0       	rjmp	.+24     	; 0x9518 <ProcessScoring+0x15e>
    9500:	29 2f       	mov	r18, r25
    9502:	5c e0       	ldi	r21, 0x0C	; 12
						}
					}
				}else{//we have an up and a down so a score did happen, we just need to see how far it goes(more of the same color on the bottom or edge of well?)
SCORING_VERTICAL_SHORT_CIRCUIT:
				//db();
					if(icon_y == 255){//first score we found? set the position for the particle chain counter
    9504:	8f ef       	ldi	r24, 0xFF	; 255
    9506:	e8 16       	cp	r14, r24
    9508:	19 f4       	brne	.+6      	; 0x9510 <ProcessScoring+0x156>
						icon_y = uppos+1;
    950a:	e3 2e       	mov	r14, r19
    950c:	e3 94       	inc	r14
    950e:	f6 2e       	mov	r15, r22
						icon_x = x;
					}
					if((y == WELL_HEIGHT-1) || (t != down && t <= BLOCK_BLUE)){//the score has ended, found the edge of the well or a different color marker or empty spot
    9510:	4c 30       	cpi	r20, 0x0C	; 12
    9512:	39 f0       	breq	.+14     	; 0x9522 <ProcessScoring+0x168>
    9514:	92 17       	cp	r25, r18
    9516:	11 f4       	brne	.+4      	; 0x951c <ProcessScoring+0x162>
    9518:	54 2f       	mov	r21, r20
    951a:	1e c0       	rjmp	.+60     	; 0x9558 <ProcessScoring+0x19e>
    951c:	94 30       	cpi	r25, 0x04	; 4
    951e:	20 f0       	brcs	.+8      	; 0x9528 <ProcessScoring+0x16e>
    9520:	1b c0       	rjmp	.+54     	; 0x9558 <ProcessScoring+0x19e>
						
						if(t == down)//must have found the well edge, don't leave this one behind(not trivial to understand why this is needed..)
    9522:	92 17       	cp	r25, r18
    9524:	09 f4       	brne	.+2      	; 0x9528 <ProcessScoring+0x16e>
    9526:	5c e0       	ldi	r21, 0x0C	; 12
							downpos = y;

						//THIS IS THE BROKEN PART??!?
						uppos *= WELL_WIDTH;//uppos += (y*WELL_WIDTH);
    9528:	30 9f       	mul	r19, r16
    952a:	30 2d       	mov	r19, r0
    952c:	11 24       	eor	r1, r1
						downpos *= WELL_WIDTH;//downpos += (y*WELL_WIDTH);
    952e:	50 9f       	mul	r21, r16
    9530:	50 2d       	mov	r21, r0
    9532:	11 24       	eor	r1, r1
						uppos += x;
    9534:	36 0f       	add	r19, r22
						downpos += x;
    9536:	56 0f       	add	r21, r22
    9538:	08 c0       	rjmp	.+16     	; 0x954a <ProcessScoring+0x190>
						
						while(uppos <= downpos){
							p[i].well[uppos] |= SCORE;//mark everything from the top to bottom marker(there could be more than 1 bottom marker, but we store the last found)
    953a:	fd 01       	movw	r30, r26
    953c:	e3 0f       	add	r30, r19
    953e:	f1 1d       	adc	r31, r1
    9540:	82 8d       	ldd	r24, Z+26	; 0x1a
    9542:	80 64       	ori	r24, 0x40	; 64
    9544:	82 8f       	std	Z+26, r24	; 0x1a
							numscores++;
    9546:	d3 94       	inc	r13
							uppos += WELL_WIDTH;
    9548:	3a 5f       	subi	r19, 0xFA	; 250
						uppos *= WELL_WIDTH;//uppos += (y*WELL_WIDTH);
						downpos *= WELL_WIDTH;//downpos += (y*WELL_WIDTH);
						uppos += x;
						downpos += x;
						
						while(uppos <= downpos){
    954a:	53 17       	cp	r21, r19
    954c:	b0 f7       	brcc	.-20     	; 0x953a <ProcessScoring+0x180>
    954e:	7f ef       	ldi	r23, 0xFF	; 255
    9550:	2f ef       	ldi	r18, 0xFF	; 255
    9552:	02 c0       	rjmp	.+4      	; 0x9558 <ProcessScoring+0x19e>
    9554:	79 2f       	mov	r23, r25
    9556:	34 2f       	mov	r19, r20
	off = WELL_WIDTH;
	//scan vertically
	for(uint8_t x=0;x<WELL_WIDTH;x++){
		up = down = 255;//clear the markers for a new column
		off = WELL_WIDTH+x;
		for(uint8_t y=1;y<WELL_HEIGHT;y++){
    9558:	4f 5f       	subi	r20, 0xFF	; 255
    955a:	4d 30       	cpi	r20, 0x0D	; 13
    955c:	09 f0       	breq	.+2      	; 0x9560 <ProcessScoring+0x1a6>
    955e:	b1 cf       	rjmp	.-158    	; 0x94c2 <ProcessScoring+0x108>

	uint8_t up,down;
	uint8_t uppos=0,downpos=0;
	off = WELL_WIDTH;
	//scan vertically
	for(uint8_t x=0;x<WELL_WIDTH;x++){
    9560:	6f 5f       	subi	r22, 0xFF	; 255
    9562:	66 30       	cpi	r22, 0x06	; 6
    9564:	09 f0       	breq	.+2      	; 0x9568 <ProcessScoring+0x1ae>
    9566:	a8 cf       	rjmp	.-176    	; 0x94b8 <ProcessScoring+0xfe>
		}
	}
	
	
	uint8_t pt = PARTICLE_STAR;
	if(numscores){//a score happened, throw a particle
    9568:	dd 20       	and	r13, r13
    956a:	e1 f1       	breq	.+120    	; 0x95e4 <ProcessScoring+0x22a>
		if(true){//p[i].chain > 1){//do the chain counter icon
			pt = p[i].chain;
    956c:	82 e7       	ldi	r24, 0x72	; 114
    956e:	90 e0       	ldi	r25, 0x00	; 0
    9570:	c8 9f       	mul	r28, r24
    9572:	f0 01       	movw	r30, r0
    9574:	c9 9f       	mul	r28, r25
    9576:	f0 0d       	add	r31, r0
    9578:	d8 9f       	mul	r29, r24
    957a:	f0 0d       	add	r31, r0
    957c:	11 24       	eor	r1, r1
    957e:	e8 58       	subi	r30, 0x88	; 136
    9580:	f2 4f       	sbci	r31, 0xF2	; 242
    9582:	46 85       	ldd	r20, Z+14	; 0x0e
			
		}//else first score, draw a flying star instead of the chain counter
		icon_x <<= 1;//convert to tile coords
		icon_y <<= 1;//convert to tile coords
		icon_x += (i?15:2);//add border offset
    9584:	cc 20       	and	r12, r12
    9586:	11 f4       	brne	.+4      	; 0x958c <ProcessScoring+0x1d2>
    9588:	32 e0       	ldi	r19, 0x02	; 2
    958a:	01 c0       	rjmp	.+2      	; 0x958e <ProcessScoring+0x1d4>
    958c:	3f e0       	ldi	r19, 0x0F	; 15
    958e:	a0 ed       	ldi	r26, 0xD0	; 208
    9590:	be e0       	ldi	r27, 0x0E	; 14
    9592:	21 e0       	ldi	r18, 0x01	; 1
    9594:	8f ef       	ldi	r24, 0xFF	; 255
    9596:	e0 e0       	ldi	r30, 0x00	; 0
//void AddParticle{uint8_t x, uint8_t y, uint8_t style, uint8_t life){
void AddParticle(uint8_t x, uint8_t y, uint8_t style, uint8_t life){
	uint8_t low = 0;
	uint8_t mag = 255;
	for(uint8_t i=1;i<MAX_PARTICLES;i++){
		if(particles[i].time < mag){//found a particle that has been around longer/closer to death
    9598:	9c 91       	ld	r25, X
    959a:	98 17       	cp	r25, r24
    959c:	10 f0       	brcs	.+4      	; 0x95a2 <ProcessScoring+0x1e8>
    959e:	98 2f       	mov	r25, r24
    95a0:	01 c0       	rjmp	.+2      	; 0x95a4 <ProcessScoring+0x1ea>
    95a2:	e2 2f       	mov	r30, r18

//void AddParticle{uint8_t x, uint8_t y, uint8_t style, uint8_t life){
void AddParticle(uint8_t x, uint8_t y, uint8_t style, uint8_t life){
	uint8_t low = 0;
	uint8_t mag = 255;
	for(uint8_t i=1;i<MAX_PARTICLES;i++){
    95a4:	2f 5f       	subi	r18, 0xFF	; 255
    95a6:	14 96       	adiw	r26, 0x04	; 4
    95a8:	26 30       	cpi	r18, 0x06	; 6
    95aa:	11 f0       	breq	.+4      	; 0x95b0 <ProcessScoring+0x1f6>
    95ac:	89 2f       	mov	r24, r25
    95ae:	f4 cf       	rjmp	.-24     	; 0x9598 <ProcessScoring+0x1de>
		if(particles[i].time < mag){//found a particle that has been around longer/closer to death
			mag = particles[i].time;
			low = i;
		}
	}
	particles[low].x = x;
    95b0:	f0 e0       	ldi	r31, 0x00	; 0
	if(numscores){//a score happened, throw a particle
		if(true){//p[i].chain > 1){//do the chain counter icon
			pt = p[i].chain;
			
		}//else first score, draw a flying star instead of the chain counter
		icon_x <<= 1;//convert to tile coords
    95b2:	ff 0c       	add	r15, r15
		icon_y <<= 1;//convert to tile coords
		icon_x += (i?15:2);//add border offset
    95b4:	3f 0d       	add	r19, r15
		if(particles[i].time < mag){//found a particle that has been around longer/closer to death
			mag = particles[i].time;
			low = i;
		}
	}
	particles[low].x = x;
    95b6:	ee 0f       	add	r30, r30
    95b8:	ff 1f       	adc	r31, r31
    95ba:	ee 0f       	add	r30, r30
    95bc:	ff 1f       	adc	r31, r31
    95be:	df 01       	movw	r26, r30
    95c0:	a6 53       	subi	r26, 0x36	; 54
    95c2:	b1 4f       	sbci	r27, 0xF1	; 241
    95c4:	33 0f       	add	r19, r19
    95c6:	33 0f       	add	r19, r19
    95c8:	33 0f       	add	r19, r19
    95ca:	3c 93       	st	X, r19
	particles[low].y = y;
    95cc:	e2 94       	swap	r14
    95ce:	90 ef       	ldi	r25, 0xF0	; 240
    95d0:	e9 22       	and	r14, r25
    95d2:	11 96       	adiw	r26, 0x01	; 1
    95d4:	ec 92       	st	X, r14
    95d6:	11 97       	sbiw	r26, 0x01	; 1
	particles[low].time = life;
    95d8:	e4 53       	subi	r30, 0x34	; 52
    95da:	f1 4f       	sbci	r31, 0xF1	; 241
    95dc:	8d e2       	ldi	r24, 0x2D	; 45
    95de:	80 83       	st	Z, r24
	particles[low].type = style;
    95e0:	13 96       	adiw	r26, 0x03	; 3
    95e2:	4c 93       	st	X, r20
		icon_y <<= 3;//convert to sprite coords
		AddParticle(icon_x,icon_y,pt,PARTICLE_NORMAL_TIME);
	}
	
	return numscores;
}
    95e4:	8d 2d       	mov	r24, r13
    95e6:	cd b7       	in	r28, 0x3d	; 61
    95e8:	de b7       	in	r29, 0x3e	; 62
    95ea:	e8 e0       	ldi	r30, 0x08	; 8
    95ec:	0c 94 cf 57 	jmp	0xaf9e	; 0xaf9e <__epilogue_restores__+0x14>

000095f0 <ClearScoredBlocks>:


uint8_t ClearScoredBlocks(uint8_t i){
    95f0:	a0 e0       	ldi	r26, 0x00	; 0
    95f2:	b0 e0       	ldi	r27, 0x00	; 0
    95f4:	ee ef       	ldi	r30, 0xFE	; 254
    95f6:	fa e4       	ldi	r31, 0x4A	; 74
    95f8:	0c 94 b2 57 	jmp	0xaf64	; 0xaf64 <__prologue_saves__+0x12>
    95fc:	f8 2e       	mov	r15, r24

	uint8_t bombs_found = 0;
	uint8_t vx = (i?15:2);
    95fe:	88 23       	and	r24, r24
    9600:	11 f4       	brne	.+4      	; 0x9606 <ClearScoredBlocks+0x16>
    9602:	12 e0       	ldi	r17, 0x02	; 2
    9604:	01 c0       	rjmp	.+2      	; 0x9608 <ClearScoredBlocks+0x18>
    9606:	1f e0       	ldi	r17, 0x0F	; 15
    9608:	82 e7       	ldi	r24, 0x72	; 114
    960a:	f8 9e       	mul	r15, r24
    960c:	c0 01       	movw	r24, r0
    960e:	11 24       	eor	r1, r1
    9610:	ec 01       	movw	r28, r24
    9612:	c8 56       	subi	r28, 0x68	; 104
    9614:	d2 4f       	sbci	r29, 0xF2	; 242
    9616:	ee 24       	eor	r14, r14
    9618:	02 e0       	ldi	r16, 0x02	; 2
		if(t & SCORE){
			if((t&0x0F) == BLOCK_BOMB)
				bombs_found++;
			
			if((t&0x0F) == BLOCK_GARBAGE){//special case, this turns into a star
				p[i].well[j] = BLOCK_STAR;
    961a:	46 e0       	ldi	r20, 0x06	; 6
    961c:	b4 2e       	mov	r11, r20

	uint8_t bombs_found = 0;
	uint8_t vx = (i?15:2);
	uint8_t vy = 2;
	
	for(uint8_t j=WELL_WIDTH;j<WELL_SIZE;j++){//first row is invisible
    961e:	30 ee       	ldi	r19, 0xE0	; 224
    9620:	c3 2e       	mov	r12, r19
    9622:	3d e0       	ldi	r19, 0x0D	; 13
    9624:	d3 2e       	mov	r13, r19
    9626:	c8 0e       	add	r12, r24
    9628:	d9 1e       	adc	r13, r25
		uint8_t t = p[i].well[j];
		if(t & SCORE){
    962a:	88 81       	ld	r24, Y
    962c:	90 e0       	ldi	r25, 0x00	; 0
    962e:	86 ff       	sbrs	r24, 6
    9630:	14 c0       	rjmp	.+40     	; 0x965a <ClearScoredBlocks+0x6a>
			if((t&0x0F) == BLOCK_BOMB)
    9632:	8f 70       	andi	r24, 0x0F	; 15
    9634:	90 70       	andi	r25, 0x00	; 0
    9636:	85 30       	cpi	r24, 0x05	; 5
    9638:	91 05       	cpc	r25, r1
    963a:	11 f4       	brne	.+4      	; 0x9640 <ClearScoredBlocks+0x50>
				bombs_found++;
    963c:	e3 94       	inc	r14
    963e:	07 c0       	rjmp	.+14     	; 0x964e <ClearScoredBlocks+0x5e>
			
			if((t&0x0F) == BLOCK_GARBAGE){//special case, this turns into a star
    9640:	04 97       	sbiw	r24, 0x04	; 4
    9642:	29 f4       	brne	.+10     	; 0x964e <ClearScoredBlocks+0x5e>
				p[i].well[j] = BLOCK_STAR;
    9644:	b8 82       	st	Y, r11
				DrawBlock(vx,vy,BLOCK_STAR);//draw the star
    9646:	81 2f       	mov	r24, r17
    9648:	60 2f       	mov	r22, r16
    964a:	46 e0       	ldi	r20, 0x06	; 6
    964c:	04 c0       	rjmp	.+8      	; 0x9656 <ClearScoredBlocks+0x66>
			}else{
				p[i].well[j] = 0;
    964e:	18 82       	st	Y, r1
				DrawBlock(vx,vy,0);
    9650:	81 2f       	mov	r24, r17
    9652:	60 2f       	mov	r22, r16
    9654:	40 e0       	ldi	r20, 0x00	; 0
    9656:	0e 94 ed 48 	call	0x91da	; 0x91da <DrawBlock>
			}
		}
		vx += 2;
    965a:	1e 5f       	subi	r17, 0xFE	; 254
		if(vx >= (WELL_WIDTH<<1)+(i?15:2)){
    965c:	ff 20       	and	r15, r15
    965e:	19 f4       	brne	.+6      	; 0x9666 <ClearScoredBlocks+0x76>
    9660:	2e e0       	ldi	r18, 0x0E	; 14
    9662:	30 e0       	ldi	r19, 0x00	; 0
    9664:	02 c0       	rjmp	.+4      	; 0x966a <ClearScoredBlocks+0x7a>
    9666:	2b e1       	ldi	r18, 0x1B	; 27
    9668:	30 e0       	ldi	r19, 0x00	; 0
    966a:	81 2f       	mov	r24, r17
    966c:	90 e0       	ldi	r25, 0x00	; 0
    966e:	82 17       	cp	r24, r18
    9670:	93 07       	cpc	r25, r19
    9672:	34 f0       	brlt	.+12     	; 0x9680 <ClearScoredBlocks+0x90>
			vx = (i?15:2);
    9674:	ff 20       	and	r15, r15
    9676:	11 f4       	brne	.+4      	; 0x967c <ClearScoredBlocks+0x8c>
    9678:	12 e0       	ldi	r17, 0x02	; 2
    967a:	01 c0       	rjmp	.+2      	; 0x967e <ClearScoredBlocks+0x8e>
    967c:	1f e0       	ldi	r17, 0x0F	; 15
			vy += 2;
    967e:	0e 5f       	subi	r16, 0xFE	; 254
    9680:	21 96       	adiw	r28, 0x01	; 1

	uint8_t bombs_found = 0;
	uint8_t vx = (i?15:2);
	uint8_t vy = 2;
	
	for(uint8_t j=WELL_WIDTH;j<WELL_SIZE;j++){//first row is invisible
    9682:	cc 15       	cp	r28, r12
    9684:	dd 05       	cpc	r29, r13
    9686:	89 f6       	brne	.-94     	; 0x962a <ClearScoredBlocks+0x3a>
			vx = (i?15:2);
			vy += 2;
		}
	}
	return bombs_found;
}
    9688:	8e 2d       	mov	r24, r14
    968a:	cd b7       	in	r28, 0x3d	; 61
    968c:	de b7       	in	r29, 0x3e	; 62
    968e:	e9 e0       	ldi	r30, 0x09	; 9
    9690:	0c 94 ce 57 	jmp	0xaf9c	; 0xaf9c <__epilogue_restores__+0x12>

00009694 <SynchronizeLFSR>:
			continue;
		}
	}
}
*/
void SynchronizeLFSR(){
    9694:	ff 92       	push	r15
    9696:	0f 93       	push	r16
    9698:	1f 93       	push	r17
    969a:	cf 93       	push	r28
    969c:	df 93       	push	r29
    969e:	08 e7       	ldi	r16, 0x78	; 120
    96a0:	1d e0       	ldi	r17, 0x0D	; 13
    96a2:	c2 ee       	ldi	r28, 0xE2	; 226
    96a4:	da ea       	ldi	r29, 0xAA	; 170
    96a6:	38 c0       	rjmp	.+112    	; 0x9718 <SynchronizeLFSR+0x84>
	uint16_t rolling_lfsr = 0b1010101011100010;
	for(uint8_t i=0;i<MAX_PLAYERS;i++){
		for(uint8_t j=0;j<32;j++){
			GetPrngNumber(p[i].lfsr);
    96a8:	f8 01       	movw	r30, r16
    96aa:	80 81       	ld	r24, Z
    96ac:	91 81       	ldd	r25, Z+1	; 0x01
    96ae:	0e 94 93 3a 	call	0x7526	; 0x7526 <GetPrngNumber>
			p[i].lfsr = GetPrngNumber(0);
    96b2:	80 e0       	ldi	r24, 0x00	; 0
    96b4:	90 e0       	ldi	r25, 0x00	; 0
    96b6:	0e 94 93 3a 	call	0x7526	; 0x7526 <GetPrngNumber>
    96ba:	f8 01       	movw	r30, r16
    96bc:	91 83       	std	Z+1, r25	; 0x01
    96be:	80 83       	st	Z, r24
			rolling_lfsr += p[i].lfsr;
    96c0:	c8 0f       	add	r28, r24
    96c2:	d9 1f       	adc	r29, r25
			if(rolling_lfsr & 0b0000010000000000)
    96c4:	d2 ff       	sbrs	r29, 2
    96c6:	05 c0       	rjmp	.+10     	; 0x96d2 <SynchronizeLFSR+0x3e>
				rolling_lfsr = ((rolling_lfsr&0b1111111100000000)>>8)|((rolling_lfsr&0b0000000011111111)<<8);
    96c8:	8d 2f       	mov	r24, r29
    96ca:	9c 2f       	mov	r25, r28
    96cc:	9c 01       	movw	r18, r24
    96ce:	e9 01       	movw	r28, r18
    96d0:	19 c0       	rjmp	.+50     	; 0x9704 <SynchronizeLFSR+0x70>
			else if(rolling_lfsr & 0b0000000010001000){
    96d2:	9e 01       	movw	r18, r28
    96d4:	28 78       	andi	r18, 0x88	; 136
    96d6:	b1 f0       	breq	.+44     	; 0x9704 <SynchronizeLFSR+0x70>
    96d8:	40 e0       	ldi	r20, 0x00	; 0
    96da:	0c c0       	rjmp	.+24     	; 0x96f4 <SynchronizeLFSR+0x60>
				for(uint8_t k=0;k<(rolling_lfsr&0b11111);k++)
					rolling_lfsr *= (rolling_lfsr+rolling_lfsr);
    96dc:	ce 01       	movw	r24, r28
    96de:	88 0f       	add	r24, r24
    96e0:	99 1f       	adc	r25, r25
    96e2:	fe 01       	movw	r30, r28
    96e4:	e8 9f       	mul	r30, r24
    96e6:	e0 01       	movw	r28, r0
    96e8:	e9 9f       	mul	r30, r25
    96ea:	d0 0d       	add	r29, r0
    96ec:	f8 9f       	mul	r31, r24
    96ee:	d0 0d       	add	r29, r0
    96f0:	11 24       	eor	r1, r1
			p[i].lfsr = GetPrngNumber(0);
			rolling_lfsr += p[i].lfsr;
			if(rolling_lfsr & 0b0000010000000000)
				rolling_lfsr = ((rolling_lfsr&0b1111111100000000)>>8)|((rolling_lfsr&0b0000000011111111)<<8);
			else if(rolling_lfsr & 0b0000000010001000){
				for(uint8_t k=0;k<(rolling_lfsr&0b11111);k++)
    96f2:	4f 5f       	subi	r20, 0xFF	; 255
    96f4:	24 2f       	mov	r18, r20
    96f6:	30 e0       	ldi	r19, 0x00	; 0
    96f8:	ce 01       	movw	r24, r28
    96fa:	8f 71       	andi	r24, 0x1F	; 31
    96fc:	90 70       	andi	r25, 0x00	; 0
    96fe:	28 17       	cp	r18, r24
    9700:	39 07       	cpc	r19, r25
    9702:	60 f3       	brcs	.-40     	; 0x96dc <SynchronizeLFSR+0x48>
}
*/
void SynchronizeLFSR(){
	uint16_t rolling_lfsr = 0b1010101011100010;
	for(uint8_t i=0;i<MAX_PLAYERS;i++){
		for(uint8_t j=0;j<32;j++){
    9704:	f3 94       	inc	r15
    9706:	f0 e2       	ldi	r31, 0x20	; 32
    9708:	ff 16       	cp	r15, r31
    970a:	71 f6       	brne	.-100    	; 0x96a8 <SynchronizeLFSR+0x14>
    970c:	0e 58       	subi	r16, 0x8E	; 142
    970e:	1f 4f       	sbci	r17, 0xFF	; 255
	}
}
*/
void SynchronizeLFSR(){
	uint16_t rolling_lfsr = 0b1010101011100010;
	for(uint8_t i=0;i<MAX_PLAYERS;i++){
    9710:	2e e0       	ldi	r18, 0x0E	; 14
    9712:	0c 35       	cpi	r16, 0x5C	; 92
    9714:	12 07       	cpc	r17, r18
    9716:	11 f0       	breq	.+4      	; 0x971c <SynchronizeLFSR+0x88>
    9718:	ff 24       	eor	r15, r15
    971a:	c6 cf       	rjmp	.-116    	; 0x96a8 <SynchronizeLFSR+0x14>
					rolling_lfsr *= (rolling_lfsr+rolling_lfsr);
			}
		}
	}
	for(uint8_t i=0;i<MAX_PLAYERS;i++)//make sure all players get the same order of blocks throughout the match
		p[i].lfsr = rolling_lfsr;
    971c:	d0 93 79 0d 	sts	0x0D79, r29
    9720:	c0 93 78 0d 	sts	0x0D78, r28
    9724:	d0 93 eb 0d 	sts	0x0DEB, r29
    9728:	c0 93 ea 0d 	sts	0x0DEA, r28
}
    972c:	cd b7       	in	r28, 0x3d	; 61
    972e:	de b7       	in	r29, 0x3e	; 62
    9730:	e5 e0       	ldi	r30, 0x05	; 5
    9732:	0c 94 d2 57 	jmp	0xafa4	; 0xafa4 <__epilogue_restores__+0x1a>

00009736 <AddGarbageLine>:
BLOCK_RED,BLOCK_GREEN,BLOCK_BLUE,
BLOCK_RED,BLOCK_GREEN,BLOCK_BLUE,BLOCK_STAR+2,
BLOCK_BLUE,BLOCK_GREEN,BLOCK_RED,
BLOCK_BLUE,BLOCK_GREEN,BLOCK_RED,
};
void AddGarbageLine(uint8_t i){
    9736:	a0 e0       	ldi	r26, 0x00	; 0
    9738:	b0 e0       	ldi	r27, 0x00	; 0
    973a:	e1 ea       	ldi	r30, 0xA1	; 161
    973c:	fb e4       	ldi	r31, 0x4B	; 75
    973e:	0c 94 b1 57 	jmp	0xaf62	; 0xaf62 <__prologue_saves__+0x10>
    9742:	a8 2e       	mov	r10, r24
	uint8_t off = WELL_WIDTH;
	GetPrngNumber(p[i].rolling_lfsr);
    9744:	e8 2e       	mov	r14, r24
    9746:	ff 24       	eor	r15, r15
    9748:	89 e3       	ldi	r24, 0x39	; 57
    974a:	90 e0       	ldi	r25, 0x00	; 0
    974c:	e8 9e       	mul	r14, r24
    974e:	f0 01       	movw	r30, r0
    9750:	e9 9e       	mul	r14, r25
    9752:	f0 0d       	add	r31, r0
    9754:	f8 9e       	mul	r15, r24
    9756:	f0 0d       	add	r31, r0
    9758:	11 24       	eor	r1, r1
    975a:	ee 0f       	add	r30, r30
    975c:	ff 1f       	adc	r31, r31
    975e:	e6 58       	subi	r30, 0x86	; 134
    9760:	f2 4f       	sbci	r31, 0xF2	; 242
    9762:	80 81       	ld	r24, Z
    9764:	91 81       	ldd	r25, Z+1	; 0x01
    9766:	0e 94 93 3a 	call	0x7526	; 0x7526 <GetPrngNumber>
    976a:	00 e0       	ldi	r16, 0x00	; 0
	
	for(uint8_t x=0;x<WELL_WIDTH;x++){//move all blocks up one space, and redraw if there is anything there
		off = WELL_WIDTH+x;
		for(uint8_t y=1;y<WELL_HEIGHT-1;y++){
			if(p[i].well[off+WELL_WIDTH]){
    976c:	82 e7       	ldi	r24, 0x72	; 114
    976e:	90 e0       	ldi	r25, 0x00	; 0
    9770:	e8 9e       	mul	r14, r24
    9772:	e0 01       	movw	r28, r0
    9774:	e9 9e       	mul	r14, r25
    9776:	d0 0d       	add	r29, r0
    9778:	f8 9e       	mul	r15, r24
    977a:	d0 0d       	add	r29, r0
    977c:	11 24       	eor	r1, r1
    977e:	c8 58       	subi	r28, 0x88	; 136
    9780:	d2 4f       	sbci	r29, 0xF2	; 242
BLOCK_BLUE,BLOCK_GREEN,BLOCK_RED,
BLOCK_BLUE,BLOCK_GREEN,BLOCK_RED,
};
void AddGarbageLine(uint8_t i){
	uint8_t off = WELL_WIDTH;
	GetPrngNumber(p[i].rolling_lfsr);
    9782:	76 e0       	ldi	r23, 0x06	; 6
    9784:	d7 2e       	mov	r13, r23
    9786:	d0 0e       	add	r13, r16
    9788:	11 e0       	ldi	r17, 0x01	; 1
	
	for(uint8_t x=0;x<WELL_WIDTH;x++){//move all blocks up one space, and redraw if there is anything there
		off = WELL_WIDTH+x;
		for(uint8_t y=1;y<WELL_HEIGHT-1;y++){
			if(p[i].well[off+WELL_WIDTH]){
    978a:	fe 01       	movw	r30, r28
    978c:	ed 0d       	add	r30, r13
    978e:	f1 1d       	adc	r31, r1
    9790:	80 a1       	ldd	r24, Z+32	; 0x20
    9792:	88 23       	and	r24, r24
    9794:	31 f0       	breq	.+12     	; 0x97a2 <AddGarbageLine+0x6c>
				p[i].well[off] = p[i].well[off+WELL_WIDTH];
    9796:	82 8f       	std	Z+26, r24	; 0x1a
				DrawBlockGrid(x,y,i);
    9798:	80 2f       	mov	r24, r16
    979a:	61 2f       	mov	r22, r17
    979c:	4a 2d       	mov	r20, r10
    979e:	0e 94 94 48 	call	0x9128	; 0x9128 <DrawBlockGrid>
	uint8_t off = WELL_WIDTH;
	GetPrngNumber(p[i].rolling_lfsr);
	
	for(uint8_t x=0;x<WELL_WIDTH;x++){//move all blocks up one space, and redraw if there is anything there
		off = WELL_WIDTH+x;
		for(uint8_t y=1;y<WELL_HEIGHT-1;y++){
    97a2:	1f 5f       	subi	r17, 0xFF	; 255
    97a4:	1c 30       	cpi	r17, 0x0C	; 12
    97a6:	19 f0       	breq	.+6      	; 0x97ae <AddGarbageLine+0x78>
			if(p[i].well[off+WELL_WIDTH]){
				p[i].well[off] = p[i].well[off+WELL_WIDTH];
				DrawBlockGrid(x,y,i);
			}
			off += WELL_WIDTH;
    97a8:	26 e0       	ldi	r18, 0x06	; 6
    97aa:	d2 0e       	add	r13, r18
    97ac:	ee cf       	rjmp	.-36     	; 0x978a <AddGarbageLine+0x54>
};
void AddGarbageLine(uint8_t i){
	uint8_t off = WELL_WIDTH;
	GetPrngNumber(p[i].rolling_lfsr);
	
	for(uint8_t x=0;x<WELL_WIDTH;x++){//move all blocks up one space, and redraw if there is anything there
    97ae:	0f 5f       	subi	r16, 0xFF	; 255
    97b0:	06 30       	cpi	r16, 0x06	; 6
    97b2:	39 f7       	brne	.-50     	; 0x9782 <AddGarbageLine+0x4c>
    97b4:	82 e7       	ldi	r24, 0x72	; 114
    97b6:	90 e0       	ldi	r25, 0x00	; 0
    97b8:	fc 01       	movw	r30, r24
    97ba:	ee 9e       	mul	r14, r30
    97bc:	c0 01       	movw	r24, r0
    97be:	ef 9e       	mul	r14, r31
    97c0:	90 0d       	add	r25, r0
    97c2:	fe 9e       	mul	r15, r30
    97c4:	90 0d       	add	r25, r0
    97c6:	11 24       	eor	r1, r1
    97c8:	6a ed       	ldi	r22, 0xDA	; 218
    97ca:	c6 2e       	mov	r12, r22
    97cc:	6d e0       	ldi	r22, 0x0D	; 13
    97ce:	d6 2e       	mov	r13, r22
    97d0:	c8 0e       	add	r12, r24
    97d2:	d9 1e       	adc	r13, r25
    97d4:	c0 e0       	ldi	r28, 0x00	; 0
    97d6:	d0 e0       	ldi	r29, 0x00	; 0
			off += WELL_WIDTH;
		}
	}
	
	off = WELL_SIZE-WELL_WIDTH;
	for(uint8_t x=0;x<WELL_WIDTH;x++){
    97d8:	7c 01       	movw	r14, r24
    97da:	40 c0       	rjmp	.+128    	; 0x985c <AddGarbageLine+0x126>
		
		uint8_t first_up = 255;
		uint8_t first_left = 255;
		for(uint8_t y=WELL_HEIGHT-1;y>0;y--){
			uint8_t t = p[i].well[(y*WELL_WIDTH)+x];
    97dc:	20 81       	ld	r18, Z
			if(t >= BLOCK_RED && t <= BLOCK_BLUE){
    97de:	82 2f       	mov	r24, r18
    97e0:	81 50       	subi	r24, 0x01	; 1
    97e2:	83 30       	cpi	r24, 0x03	; 3
    97e4:	10 f4       	brcc	.+4      	; 0x97ea <AddGarbageLine+0xb4>
    97e6:	b2 2e       	mov	r11, r18
    97e8:	06 c0       	rjmp	.+12     	; 0x97f6 <AddGarbageLine+0xc0>
	off = WELL_SIZE-WELL_WIDTH;
	for(uint8_t x=0;x<WELL_WIDTH;x++){
		
		uint8_t first_up = 255;
		uint8_t first_left = 255;
		for(uint8_t y=WELL_HEIGHT-1;y>0;y--){
    97ea:	91 50       	subi	r25, 0x01	; 1
    97ec:	36 97       	sbiw	r30, 0x06	; 6
    97ee:	99 23       	and	r25, r25
    97f0:	a9 f7       	brne	.-22     	; 0x97dc <AddGarbageLine+0xa6>
    97f2:	bb 24       	eor	r11, r11
    97f4:	ba 94       	dec	r11
				first_up = t;
				break;
			}
		}
		
		if(x){
    97f6:	00 23       	and	r16, r16
    97f8:	99 f0       	breq	.+38     	; 0x9820 <AddGarbageLine+0xea>
    97fa:	90 2f       	mov	r25, r16
    97fc:	91 50       	subi	r25, 0x01	; 1
    97fe:	fe 01       	movw	r30, r28
    9800:	ee 0d       	add	r30, r14
    9802:	ff 1d       	adc	r31, r15
    9804:	e7 52       	subi	r30, 0x27	; 39
    9806:	f2 4f       	sbci	r31, 0xF2	; 242
    9808:	09 c0       	rjmp	.+18     	; 0x981c <AddGarbageLine+0xe6>
			for(int8_t xb=x-1;xb>=0;xb--){//scan left looking for the first score marker
				uint8_t t = p[i].well[(WELL_SIZE-WELL_WIDTH)+xb];
    980a:	20 81       	ld	r18, Z
    980c:	31 97       	sbiw	r30, 0x01	; 1
				if(t >= BLOCK_RED && t <= BLOCK_BLUE){
    980e:	82 2f       	mov	r24, r18
    9810:	81 50       	subi	r24, 0x01	; 1
    9812:	83 30       	cpi	r24, 0x03	; 3
    9814:	10 f4       	brcc	.+4      	; 0x981a <AddGarbageLine+0xe4>
    9816:	12 2f       	mov	r17, r18
    9818:	04 c0       	rjmp	.+8      	; 0x9822 <AddGarbageLine+0xec>
				break;
			}
		}
		
		if(x){
			for(int8_t xb=x-1;xb>=0;xb--){//scan left looking for the first score marker
    981a:	91 50       	subi	r25, 0x01	; 1
    981c:	9f 3f       	cpi	r25, 0xFF	; 255
    981e:	a9 f7       	brne	.-22     	; 0x980a <AddGarbageLine+0xd4>
    9820:	1f ef       	ldi	r17, 0xFF	; 255
			}
		}
		
		uint8_t r;
		do{//find a random block, that will not cause a score in either direction
			r = (GetPrngNumber(0)%sizeof(garbage_pile));
    9822:	80 e0       	ldi	r24, 0x00	; 0
    9824:	90 e0       	ldi	r25, 0x00	; 0
    9826:	0e 94 93 3a 	call	0x7526	; 0x7526 <GetPrngNumber>
			r = pgm_read_byte(&garbage_pile[r]);
    982a:	65 e3       	ldi	r22, 0x35	; 53
    982c:	70 e0       	ldi	r23, 0x00	; 0
    982e:	0e 94 82 57 	call	0xaf04	; 0xaf04 <__udivmodhi4>
    9832:	e8 2f       	mov	r30, r24
    9834:	f0 e0       	ldi	r31, 0x00	; 0
    9836:	e3 59       	subi	r30, 0x93	; 147
    9838:	f7 49       	sbci	r31, 0x97	; 151
    983a:	84 91       	lpm	r24, Z+
		}while(r == first_up || r == first_left);
    983c:	8b 15       	cp	r24, r11
    983e:	89 f3       	breq	.-30     	; 0x9822 <AddGarbageLine+0xec>
    9840:	81 17       	cp	r24, r17
    9842:	79 f3       	breq	.-34     	; 0x9822 <AddGarbageLine+0xec>
		
		p[i].well[off++] = r;
    9844:	f6 01       	movw	r30, r12
    9846:	81 93       	st	Z+, r24
    9848:	6f 01       	movw	r12, r30
		DrawBlockGrid(x,WELL_HEIGHT-1,i);
    984a:	80 2f       	mov	r24, r16
    984c:	6c e0       	ldi	r22, 0x0C	; 12
    984e:	4a 2d       	mov	r20, r10
    9850:	0e 94 94 48 	call	0x9128	; 0x9128 <DrawBlockGrid>
    9854:	21 96       	adiw	r28, 0x01	; 1
			off += WELL_WIDTH;
		}
	}
	
	off = WELL_SIZE-WELL_WIDTH;
	for(uint8_t x=0;x<WELL_WIDTH;x++){
    9856:	c6 30       	cpi	r28, 0x06	; 6
    9858:	d1 05       	cpc	r29, r1
    985a:	41 f0       	breq	.+16     	; 0x986c <AddGarbageLine+0x136>
    985c:	0c 2f       	mov	r16, r28
    985e:	fe 01       	movw	r30, r28
    9860:	ee 0d       	add	r30, r14
    9862:	ff 1d       	adc	r31, r15
    9864:	e6 52       	subi	r30, 0x26	; 38
    9866:	f2 4f       	sbci	r31, 0xF2	; 242
    9868:	9c e0       	ldi	r25, 0x0C	; 12
    986a:	b8 cf       	rjmp	.-144    	; 0x97dc <AddGarbageLine+0xa6>
		}while(r == first_up || r == first_left);
		
		p[i].well[off++] = r;
		DrawBlockGrid(x,WELL_HEIGHT-1,i);
	}
}
    986c:	cd b7       	in	r28, 0x3d	; 61
    986e:	de b7       	in	r29, 0x3e	; 62
    9870:	ea e0       	ldi	r30, 0x0A	; 10
    9872:	0c 94 cd 57 	jmp	0xaf9a	; 0xaf9a <__epilogue_restores__+0x10>

00009876 <ResetGame>:
}

	
void ResetGame(){
	for(uint8_t i=0;i<MAX_PLAYERS;i++){
		uint8_t *t = (uint8_t *)&p[i];
    9876:	10 92 78 0d 	sts	0x0D78, r1
		for(uint8_t j=0;j<sizeof(player_t);j++)
			*t = 0;
		
		p[i].x = 2;
    987a:	82 e0       	ldi	r24, 0x02	; 2
    987c:	80 93 7f 0d 	sts	0x0D7F, r24
    9880:	10 92 ea 0d 	sts	0x0DEA, r1
    9884:	80 93 f1 0d 	sts	0x0DF1, r24
	}
}
    9888:	08 95       	ret

0000988a <AnimateStars>:


void AnimateStars(){
    988a:	a0 e0       	ldi	r26, 0x00	; 0
    988c:	b0 e0       	ldi	r27, 0x00	; 0
    988e:	eb e4       	ldi	r30, 0x4B	; 75
    9890:	fc e4       	ldi	r31, 0x4C	; 76
    9892:	0c 94 b1 57 	jmp	0xaf62	; 0xaf62 <__prologue_saves__+0x10>
//return;
	static uint8_t offset = 0;
	uint8_t start = offset;
    9896:	d0 90 c9 0c 	lds	r13, 0x0CC9
    989a:	02 e0       	ldi	r16, 0x02	; 2
    989c:	ee 24       	eor	r14, r14
    989e:	ff 24       	eor	r15, r15

	for(uint8_t i=0;i<MAX_PLAYERS;i++){
		uint8_t vxoff = (i?15:2);
		offset = start;
		for(uint8_t k=0;k<WELL_WIDTH/1;k++){
			uint8_t t = p[i].well[offset];
    98a0:	22 e7       	ldi	r18, 0x72	; 114
    98a2:	a2 2e       	mov	r10, r18
    98a4:	b1 2c       	mov	r11, r1
	uint8_t start = offset;

	for(uint8_t i=0;i<MAX_PLAYERS;i++){
		uint8_t vxoff = (i?15:2);
		offset = start;
		for(uint8_t k=0;k<WELL_WIDTH/1;k++){
    98a6:	96 e0       	ldi	r25, 0x06	; 6
    98a8:	c9 2e       	mov	r12, r25
    98aa:	cd 0c       	add	r12, r13


void AnimateStars(){
//return;
	static uint8_t offset = 0;
	uint8_t start = offset;
    98ac:	1d 2d       	mov	r17, r13

	for(uint8_t i=0;i<MAX_PLAYERS;i++){
		uint8_t vxoff = (i?15:2);
		offset = start;
		for(uint8_t k=0;k<WELL_WIDTH/1;k++){
			uint8_t t = p[i].well[offset];
    98ae:	ea 9c       	mul	r14, r10
    98b0:	e0 01       	movw	r28, r0
    98b2:	eb 9c       	mul	r14, r11
    98b4:	d0 0d       	add	r29, r0
    98b6:	fa 9c       	mul	r15, r10
    98b8:	d0 0d       	add	r29, r0
    98ba:	11 24       	eor	r1, r1
    98bc:	c8 58       	subi	r28, 0x88	; 136
    98be:	d2 4f       	sbci	r29, 0xF2	; 242
    98c0:	a1 2f       	mov	r26, r17
    98c2:	b0 e0       	ldi	r27, 0x00	; 0
    98c4:	fe 01       	movw	r30, r28
    98c6:	ea 0f       	add	r30, r26
    98c8:	fb 1f       	adc	r31, r27
    98ca:	42 8d       	ldd	r20, Z+26	; 0x1a
			if(!(t & SCORE) && (t & 0x0F) >= BLOCK_STAR && (t & 0x0F) < BLOCK_SKULL){
    98cc:	24 2f       	mov	r18, r20
    98ce:	30 e0       	ldi	r19, 0x00	; 0
    98d0:	46 fd       	sbrc	r20, 6
    98d2:	24 c0       	rjmp	.+72     	; 0x991c <AnimateStars+0x92>
    98d4:	2f 70       	andi	r18, 0x0F	; 15
    98d6:	30 70       	andi	r19, 0x00	; 0
    98d8:	26 30       	cpi	r18, 0x06	; 6
    98da:	31 05       	cpc	r19, r1
    98dc:	fc f0       	brlt	.+62     	; 0x991c <AnimateStars+0x92>
    98de:	29 30       	cpi	r18, 0x09	; 9
    98e0:	31 05       	cpc	r19, r1
    98e2:	e4 f4       	brge	.+56     	; 0x991c <AnimateStars+0x92>
				if((++t & 0x0F) == BLOCK_SKULL)//roll over
    98e4:	4f 5f       	subi	r20, 0xFF	; 255
    98e6:	84 2f       	mov	r24, r20
    98e8:	8f 70       	andi	r24, 0x0F	; 15
    98ea:	89 30       	cpi	r24, 0x09	; 9
    98ec:	11 f4       	brne	.+4      	; 0x98f2 <AnimateStars+0x68>
					t = (BLOCK_STAR|(t & HALFSTEP));
    98ee:	40 72       	andi	r20, 0x20	; 32
    98f0:	46 60       	ori	r20, 0x06	; 6
				p[i].well[offset] = t;
    98f2:	ac 0f       	add	r26, r28
    98f4:	bd 1f       	adc	r27, r29
    98f6:	5a 96       	adiw	r26, 0x1a	; 26
    98f8:	4c 93       	st	X, r20
				DrawBlock(vxoff+((offset%WELL_WIDTH)<<1),0+((offset/WELL_WIDTH)<<1),t);
    98fa:	81 2f       	mov	r24, r17
    98fc:	66 e0       	ldi	r22, 0x06	; 6
    98fe:	0e 94 69 57 	call	0xaed2	; 0xaed2 <__udivmodqi4>
    9902:	29 2f       	mov	r18, r25
    9904:	22 0f       	add	r18, r18
    9906:	81 2f       	mov	r24, r17
    9908:	0e 94 69 57 	call	0xaed2	; 0xaed2 <__udivmodqi4>
    990c:	68 2f       	mov	r22, r24
    990e:	70 e0       	ldi	r23, 0x00	; 0
    9910:	66 0f       	add	r22, r22
    9912:	77 1f       	adc	r23, r23
    9914:	82 2f       	mov	r24, r18
    9916:	80 0f       	add	r24, r16
    9918:	0e 94 ed 48 	call	0x91da	; 0x91da <DrawBlock>
    991c:	1f 5f       	subi	r17, 0xFF	; 255
	uint8_t start = offset;

	for(uint8_t i=0;i<MAX_PLAYERS;i++){
		uint8_t vxoff = (i?15:2);
		offset = start;
		for(uint8_t k=0;k<WELL_WIDTH/1;k++){
    991e:	1c 15       	cp	r17, r12
    9920:	79 f6       	brne	.-98     	; 0x98c0 <AnimateStars+0x36>
void AnimateStars(){
//return;
	static uint8_t offset = 0;
	uint8_t start = offset;

	for(uint8_t i=0;i<MAX_PLAYERS;i++){
    9922:	81 e0       	ldi	r24, 0x01	; 1
    9924:	e8 16       	cp	r14, r24
    9926:	f1 04       	cpc	r15, r1
    9928:	29 f0       	breq	.+10     	; 0x9934 <AnimateStars+0xaa>
    992a:	0f e0       	ldi	r16, 0x0F	; 15
    992c:	b1 e0       	ldi	r27, 0x01	; 1
    992e:	eb 2e       	mov	r14, r27
    9930:	f1 2c       	mov	r15, r1
    9932:	bc cf       	rjmp	.-136    	; 0x98ac <AnimateStars+0x22>
    9934:	10 93 c9 0c 	sts	0x0CC9, r17
			}
			offset++;
		}
	}

	if(offset >= WELL_WIDTH*WELL_HEIGHT)
    9938:	1e 34       	cpi	r17, 0x4E	; 78
    993a:	10 f0       	brcs	.+4      	; 0x9940 <AnimateStars+0xb6>
		offset = 0;
    993c:	10 92 c9 0c 	sts	0x0CC9, r1
}
    9940:	cd b7       	in	r28, 0x3d	; 61
    9942:	de b7       	in	r29, 0x3e	; 62
    9944:	ea e0       	ldi	r30, 0x0A	; 10
    9946:	0c 94 cd 57 	jmp	0xaf9a	; 0xaf9a <__epilogue_restores__+0x10>

0000994a <DrawBigChar>:
		for(uint8_t dx=0;dx<mapWidth;dx++)
			vram[((y+dy)*VRAM_TILES_H)+(x+dx)] = pgm_read_byte(&map[(dy*mapWidth)+dx+2]);					

}
*/
void DrawBigChar(uint8_t x, uint8_t y, uint8_t c){
    994a:	28 2f       	mov	r18, r24
	if(c >= '0' && c <= '9')
    994c:	e4 2f       	mov	r30, r20
    994e:	e0 53       	subi	r30, 0x30	; 48
    9950:	ea 30       	cpi	r30, 0x0A	; 10
    9952:	40 f0       	brcs	.+16     	; 0x9964 <DrawBigChar+0x1a>
		c -= '0';
	else if(c >= 'A' && c <= '^')
    9954:	84 2f       	mov	r24, r20
    9956:	81 54       	subi	r24, 0x41	; 65
    9958:	8e 31       	cpi	r24, 0x1E	; 30
    995a:	10 f0       	brcs	.+4      	; 0x9960 <DrawBigChar+0x16>
    995c:	e4 2f       	mov	r30, r20
    995e:	02 c0       	rjmp	.+4      	; 0x9964 <DrawBigChar+0x1a>
		c -= '7';
    9960:	e4 2f       	mov	r30, r20
    9962:	e7 53       	subi	r30, 0x37	; 55
	uint16_t moff = c*4;
    9964:	f0 e0       	ldi	r31, 0x00	; 0
    9966:	ee 0f       	add	r30, r30
    9968:	ff 1f       	adc	r31, r31
    996a:	ee 0f       	add	r30, r30
    996c:	ff 1f       	adc	r31, r31
	uint16_t voff = (y*VRAM_TILES_H)+x;
    996e:	8e e1       	ldi	r24, 0x1E	; 30
    9970:	68 9f       	mul	r22, r24
    9972:	c0 01       	movw	r24, r0
    9974:	11 24       	eor	r1, r1
    9976:	82 0f       	add	r24, r18
    9978:	91 1d       	adc	r25, r1
	
	vram[voff++]	= pgm_read_byte(&big_font_maps[moff++]);
    997a:	9f 01       	movw	r18, r30
    997c:	2f 5f       	subi	r18, 0xFF	; 255
    997e:	3f 4f       	sbci	r19, 0xFF	; 255
    9980:	e8 59       	subi	r30, 0x98	; 152
    9982:	f6 4c       	sbci	r31, 0xC6	; 198
    9984:	e4 91       	lpm	r30, Z+
    9986:	dc 01       	movw	r26, r24
    9988:	a0 5e       	subi	r26, 0xE0	; 224
    998a:	be 4f       	sbci	r27, 0xFE	; 254
    998c:	ec 93       	st	X, r30
	vram[voff]		= pgm_read_byte(&big_font_maps[moff++]);
    998e:	a9 01       	movw	r20, r18
    9990:	4f 5f       	subi	r20, 0xFF	; 255
    9992:	5f 4f       	sbci	r21, 0xFF	; 255
    9994:	28 59       	subi	r18, 0x98	; 152
    9996:	36 4c       	sbci	r19, 0xC6	; 198
    9998:	f9 01       	movw	r30, r18
    999a:	24 91       	lpm	r18, Z+
    999c:	fc 01       	movw	r30, r24
    999e:	ef 5d       	subi	r30, 0xDF	; 223
    99a0:	fe 4f       	sbci	r31, 0xFE	; 254
    99a2:	20 83       	st	Z, r18
	
	voff += VRAM_TILES_H-1;
	vram[voff++]	= pgm_read_byte(&big_font_maps[moff++]);
    99a4:	fa 01       	movw	r30, r20
    99a6:	e8 59       	subi	r30, 0x98	; 152
    99a8:	f6 4c       	sbci	r31, 0xC6	; 198
    99aa:	e4 91       	lpm	r30, Z+
    99ac:	82 5c       	subi	r24, 0xC2	; 194
    99ae:	9e 4f       	sbci	r25, 0xFE	; 254
    99b0:	dc 01       	movw	r26, r24
    99b2:	ec 93       	st	X, r30
	vram[voff]		= pgm_read_byte(&big_font_maps[moff]);
    99b4:	47 59       	subi	r20, 0x97	; 151
    99b6:	56 4c       	sbci	r21, 0xC6	; 198
    99b8:	fa 01       	movw	r30, r20
    99ba:	24 91       	lpm	r18, Z+
    99bc:	11 96       	adiw	r26, 0x01	; 1
    99be:	2c 93       	st	X, r18

}
    99c0:	08 95       	ret

000099c2 <DrawBigString>:

void DrawBigString(uint8_t x, uint8_t y, const char *str){
    99c2:	0f 93       	push	r16
    99c4:	1f 93       	push	r17
    99c6:	cf 93       	push	r28
    99c8:	df 93       	push	r29
    99ca:	06 2f       	mov	r16, r22
    99cc:	ea 01       	movw	r28, r20
    99ce:	18 2f       	mov	r17, r24
    99d0:	1e 5f       	subi	r17, 0xFE	; 254
    99d2:	81 2f       	mov	r24, r17
    99d4:	82 50       	subi	r24, 0x02	; 2
    99d6:	fe 01       	movw	r30, r28
//	int i=0;
	char c;

	while(1){
		c=pgm_read_byte(str++);//&(str[i++]));		
    99d8:	21 96       	adiw	r28, 0x01	; 1
    99da:	44 91       	lpm	r20, Z+
		if(c!=0){
    99dc:	44 23       	and	r20, r20
    99de:	31 f0       	breq	.+12     	; 0x99ec <DrawBigString+0x2a>
			if(c == ' '){
    99e0:	40 32       	cpi	r20, 0x20	; 32
    99e2:	b1 f3       	breq	.-20     	; 0x99d0 <DrawBigString+0xe>
				x += 2;
				continue;
			}
			//c&= 127;//c=((c&127)-32);			

			DrawBigChar(x,y,c);
    99e4:	60 2f       	mov	r22, r16
    99e6:	0e 94 a5 4c 	call	0x994a	; 0x994a <DrawBigChar>
    99ea:	f2 cf       	rjmp	.-28     	; 0x99d0 <DrawBigString+0xe>
			x += 2;
		}else{
			break;
		}
	}
}
    99ec:	df 91       	pop	r29
    99ee:	cf 91       	pop	r28
    99f0:	1f 91       	pop	r17
    99f2:	0f 91       	pop	r16
    99f4:	08 95       	ret

000099f6 <DrawWell>:
void DrawWell(uint8_t i){
    99f6:	ef 92       	push	r14
    99f8:	ff 92       	push	r15
    99fa:	0f 93       	push	r16
    99fc:	1f 93       	push	r17
    99fe:	cf 93       	push	r28
    9a00:	df 93       	push	r29
    9a02:	56 e0       	ldi	r21, 0x06	; 6
    9a04:	f5 2e       	mov	r15, r21
    9a06:	42 e0       	ldi	r20, 0x02	; 2
    9a08:	e4 2e       	mov	r14, r20
	uint8_t woff = WELL_WIDTH;//first row is invisible
	for(uint8_t y=0+2;y<2+24;y+=2){
		for(uint8_t x=0+2;x<2+12;x+=2){
			uint8_t t = p[i].well[woff++];
    9a0a:	90 e0       	ldi	r25, 0x00	; 0
    9a0c:	22 e7       	ldi	r18, 0x72	; 114
    9a0e:	30 e0       	ldi	r19, 0x00	; 0
    9a10:	82 9f       	mul	r24, r18
    9a12:	e0 01       	movw	r28, r0
    9a14:	83 9f       	mul	r24, r19
    9a16:	d0 0d       	add	r29, r0
    9a18:	92 9f       	mul	r25, r18
    9a1a:	d0 0d       	add	r29, r0
    9a1c:	11 24       	eor	r1, r1
    9a1e:	c8 58       	subi	r28, 0x88	; 136
    9a20:	d2 4f       	sbci	r29, 0xF2	; 242
    9a22:	13 c0       	rjmp	.+38     	; 0x9a4a <DrawWell+0x54>
    9a24:	fe 01       	movw	r30, r28
    9a26:	e0 0f       	add	r30, r16
    9a28:	f1 1d       	adc	r31, r1
    9a2a:	42 8d       	ldd	r20, Z+26	; 0x1a
    9a2c:	0f 5f       	subi	r16, 0xFF	; 255
			DrawBlock(x,y,t);
    9a2e:	81 2f       	mov	r24, r17
    9a30:	6e 2d       	mov	r22, r14
    9a32:	0e 94 ed 48 	call	0x91da	; 0x91da <DrawBlock>
	}
}
void DrawWell(uint8_t i){
	uint8_t woff = WELL_WIDTH;//first row is invisible
	for(uint8_t y=0+2;y<2+24;y+=2){
		for(uint8_t x=0+2;x<2+12;x+=2){
    9a36:	1e 5f       	subi	r17, 0xFE	; 254
    9a38:	1e 30       	cpi	r17, 0x0E	; 14
    9a3a:	a1 f7       	brne	.-24     	; 0x9a24 <DrawWell+0x2e>
    9a3c:	86 e0       	ldi	r24, 0x06	; 6
    9a3e:	f8 0e       	add	r15, r24
		}
	}
}
void DrawWell(uint8_t i){
	uint8_t woff = WELL_WIDTH;//first row is invisible
	for(uint8_t y=0+2;y<2+24;y+=2){
    9a40:	82 e0       	ldi	r24, 0x02	; 2
    9a42:	e8 0e       	add	r14, r24
    9a44:	8e e4       	ldi	r24, 0x4E	; 78
    9a46:	f8 16       	cp	r15, r24
    9a48:	19 f0       	breq	.+6      	; 0x9a50 <DrawWell+0x5a>
    9a4a:	0f 2d       	mov	r16, r15
    9a4c:	12 e0       	ldi	r17, 0x02	; 2
    9a4e:	ea cf       	rjmp	.-44     	; 0x9a24 <DrawWell+0x2e>
		for(uint8_t x=0+2;x<2+12;x+=2){
			uint8_t t = p[i].well[woff++];
			DrawBlock(x,y,t);
		}
	}
}
    9a50:	cd b7       	in	r28, 0x3d	; 61
    9a52:	de b7       	in	r29, 0x3e	; 62
    9a54:	e6 e0       	ldi	r30, 0x06	; 6
    9a56:	0c 94 d1 57 	jmp	0xafa2	; 0xafa2 <__epilogue_restores__+0x18>

00009a5a <DrawScored>:

void DrawScored(uint8_t i){
    9a5a:	a0 e0       	ldi	r26, 0x00	; 0
    9a5c:	b0 e0       	ldi	r27, 0x00	; 0
    9a5e:	e3 e3       	ldi	r30, 0x33	; 51
    9a60:	fd e4       	ldi	r31, 0x4D	; 77
    9a62:	0c 94 b4 57 	jmp	0xaf68	; 0xaf68 <__prologue_saves__+0x16>
	uint8_t woff = WELL_WIDTH;//first row is invisible
	uint8_t voff = (i?13:0);
    9a66:	88 23       	and	r24, r24
    9a68:	11 f4       	brne	.+4      	; 0x9a6e <DrawScored+0x14>
    9a6a:	dd 24       	eor	r13, r13
    9a6c:	02 c0       	rjmp	.+4      	; 0x9a72 <DrawScored+0x18>
    9a6e:	ed e0       	ldi	r30, 0x0D	; 13
    9a70:	de 2e       	mov	r13, r30
    9a72:	76 e0       	ldi	r23, 0x06	; 6
    9a74:	f7 2e       	mov	r15, r23
    9a76:	62 e0       	ldi	r22, 0x02	; 2
    9a78:	e6 2e       	mov	r14, r22
	
	for(uint8_t y=0+2;y<2+24;y+=2){
		for(uint8_t x=0+2;x<2+12;x+=2){
			uint8_t t = p[i].well[woff++];
    9a7a:	28 2f       	mov	r18, r24
    9a7c:	30 e0       	ldi	r19, 0x00	; 0
    9a7e:	82 e7       	ldi	r24, 0x72	; 114
    9a80:	90 e0       	ldi	r25, 0x00	; 0
    9a82:	28 9f       	mul	r18, r24
    9a84:	e0 01       	movw	r28, r0
    9a86:	29 9f       	mul	r18, r25
    9a88:	d0 0d       	add	r29, r0
    9a8a:	38 9f       	mul	r19, r24
    9a8c:	d0 0d       	add	r29, r0
    9a8e:	11 24       	eor	r1, r1
    9a90:	c8 58       	subi	r28, 0x88	; 136
    9a92:	d2 4f       	sbci	r29, 0xF2	; 242
    9a94:	17 c0       	rjmp	.+46     	; 0x9ac4 <DrawScored+0x6a>
    9a96:	fe 01       	movw	r30, r28
    9a98:	e0 0f       	add	r30, r16
    9a9a:	f1 1d       	adc	r31, r1
    9a9c:	42 8d       	ldd	r20, Z+26	; 0x1a
    9a9e:	0f 5f       	subi	r16, 0xFF	; 255
			if(t & SCORE){
    9aa0:	46 ff       	sbrs	r20, 6
    9aa2:	06 c0       	rjmp	.+12     	; 0x9ab0 <DrawScored+0x56>
				t = 0|(t&HALFSTEP);
				DrawBlock(x+voff,y,t);
    9aa4:	40 72       	andi	r20, 0x20	; 32
    9aa6:	81 2f       	mov	r24, r17
    9aa8:	8d 0d       	add	r24, r13
    9aaa:	6e 2d       	mov	r22, r14
    9aac:	0e 94 ed 48 	call	0x91da	; 0x91da <DrawBlock>
void DrawScored(uint8_t i){
	uint8_t woff = WELL_WIDTH;//first row is invisible
	uint8_t voff = (i?13:0);
	
	for(uint8_t y=0+2;y<2+24;y+=2){
		for(uint8_t x=0+2;x<2+12;x+=2){
    9ab0:	1e 5f       	subi	r17, 0xFE	; 254
    9ab2:	1e 30       	cpi	r17, 0x0E	; 14
    9ab4:	81 f7       	brne	.-32     	; 0x9a96 <DrawScored+0x3c>
    9ab6:	86 e0       	ldi	r24, 0x06	; 6
    9ab8:	f8 0e       	add	r15, r24

void DrawScored(uint8_t i){
	uint8_t woff = WELL_WIDTH;//first row is invisible
	uint8_t voff = (i?13:0);
	
	for(uint8_t y=0+2;y<2+24;y+=2){
    9aba:	82 e0       	ldi	r24, 0x02	; 2
    9abc:	e8 0e       	add	r14, r24
    9abe:	8e e4       	ldi	r24, 0x4E	; 78
    9ac0:	f8 16       	cp	r15, r24
    9ac2:	19 f0       	breq	.+6      	; 0x9aca <DrawScored+0x70>
    9ac4:	0f 2d       	mov	r16, r15
    9ac6:	12 e0       	ldi	r17, 0x02	; 2
    9ac8:	e6 cf       	rjmp	.-52     	; 0x9a96 <DrawScored+0x3c>
				t = 0|(t&HALFSTEP);
				DrawBlock(x+voff,y,t);
			}
		}
	}
}
    9aca:	cd b7       	in	r28, 0x3d	; 61
    9acc:	de b7       	in	r29, 0x3e	; 62
    9ace:	e7 e0       	ldi	r30, 0x07	; 7
    9ad0:	0c 94 d0 57 	jmp	0xafa0	; 0xafa0 <__epilogue_restores__+0x16>

00009ad4 <UndrawScored>:

void UndrawScored(uint8_t i){
    9ad4:	a0 e0       	ldi	r26, 0x00	; 0
    9ad6:	b0 e0       	ldi	r27, 0x00	; 0
    9ad8:	e0 e7       	ldi	r30, 0x70	; 112
    9ada:	fd e4       	ldi	r31, 0x4D	; 77
    9adc:	0c 94 b4 57 	jmp	0xaf68	; 0xaf68 <__prologue_saves__+0x16>
	uint8_t woff = WELL_WIDTH;//first row is invisible
	uint8_t voff = (i?13:0);
    9ae0:	88 23       	and	r24, r24
    9ae2:	11 f4       	brne	.+4      	; 0x9ae8 <UndrawScored+0x14>
    9ae4:	dd 24       	eor	r13, r13
    9ae6:	02 c0       	rjmp	.+4      	; 0x9aec <UndrawScored+0x18>
    9ae8:	bd e0       	ldi	r27, 0x0D	; 13
    9aea:	db 2e       	mov	r13, r27
    9aec:	a6 e0       	ldi	r26, 0x06	; 6
    9aee:	fa 2e       	mov	r15, r26
    9af0:	f2 e0       	ldi	r31, 0x02	; 2
    9af2:	ef 2e       	mov	r14, r31
	
	for(uint8_t y=0+2;y<2+24;y+=2){
		for(uint8_t x=0+2;x<2+12;x+=2){
			uint8_t t = p[i].well[woff++];
    9af4:	28 2f       	mov	r18, r24
    9af6:	30 e0       	ldi	r19, 0x00	; 0
    9af8:	82 e7       	ldi	r24, 0x72	; 114
    9afa:	90 e0       	ldi	r25, 0x00	; 0
    9afc:	28 9f       	mul	r18, r24
    9afe:	e0 01       	movw	r28, r0
    9b00:	29 9f       	mul	r18, r25
    9b02:	d0 0d       	add	r29, r0
    9b04:	38 9f       	mul	r19, r24
    9b06:	d0 0d       	add	r29, r0
    9b08:	11 24       	eor	r1, r1
    9b0a:	c8 58       	subi	r28, 0x88	; 136
    9b0c:	d2 4f       	sbci	r29, 0xF2	; 242
    9b0e:	16 c0       	rjmp	.+44     	; 0x9b3c <UndrawScored+0x68>
    9b10:	fe 01       	movw	r30, r28
    9b12:	e0 0f       	add	r30, r16
    9b14:	f1 1d       	adc	r31, r1
    9b16:	42 8d       	ldd	r20, Z+26	; 0x1a
    9b18:	0f 5f       	subi	r16, 0xFF	; 255
			if(!(t & SCORE)){
    9b1a:	46 ff       	sbrs	r20, 6
    9b1c:	05 c0       	rjmp	.+10     	; 0x9b28 <UndrawScored+0x54>
//while(1);			
			continue;
			}
			DrawBlock(x+voff,y,t);
    9b1e:	81 2f       	mov	r24, r17
    9b20:	8d 0d       	add	r24, r13
    9b22:	6e 2d       	mov	r22, r14
    9b24:	0e 94 ed 48 	call	0x91da	; 0x91da <DrawBlock>
void UndrawScored(uint8_t i){
	uint8_t woff = WELL_WIDTH;//first row is invisible
	uint8_t voff = (i?13:0);
	
	for(uint8_t y=0+2;y<2+24;y+=2){
		for(uint8_t x=0+2;x<2+12;x+=2){
    9b28:	1e 5f       	subi	r17, 0xFE	; 254
    9b2a:	1e 30       	cpi	r17, 0x0E	; 14
    9b2c:	89 f7       	brne	.-30     	; 0x9b10 <UndrawScored+0x3c>
    9b2e:	86 e0       	ldi	r24, 0x06	; 6
    9b30:	f8 0e       	add	r15, r24

void UndrawScored(uint8_t i){
	uint8_t woff = WELL_WIDTH;//first row is invisible
	uint8_t voff = (i?13:0);
	
	for(uint8_t y=0+2;y<2+24;y+=2){
    9b32:	82 e0       	ldi	r24, 0x02	; 2
    9b34:	e8 0e       	add	r14, r24
    9b36:	8e e4       	ldi	r24, 0x4E	; 78
    9b38:	f8 16       	cp	r15, r24
    9b3a:	19 f0       	breq	.+6      	; 0x9b42 <UndrawScored+0x6e>
    9b3c:	0f 2d       	mov	r16, r15
    9b3e:	12 e0       	ldi	r17, 0x02	; 2
    9b40:	e7 cf       	rjmp	.-50     	; 0x9b10 <UndrawScored+0x3c>
			continue;
			}
			DrawBlock(x+voff,y,t);
		}
	}
}
    9b42:	cd b7       	in	r28, 0x3d	; 61
    9b44:	de b7       	in	r29, 0x3e	; 62
    9b46:	e7 e0       	ldi	r30, 0x07	; 7
    9b48:	0c 94 d0 57 	jmp	0xafa0	; 0xafa0 <__epilogue_restores__+0x16>

00009b4c <DrawPreview>:
};



void DrawPreview(uint8_t i){
	uint16_t voff = (1*VRAM_TILES_H)+(i?19:6);
    9b4c:	88 23       	and	r24, r24
    9b4e:	19 f4       	brne	.+6      	; 0x9b56 <DrawPreview+0xa>
    9b50:	44 e2       	ldi	r20, 0x24	; 36
    9b52:	50 e0       	ldi	r21, 0x00	; 0
    9b54:	02 c0       	rjmp	.+4      	; 0x9b5a <DrawPreview+0xe>
    9b56:	41 e3       	ldi	r20, 0x31	; 49
    9b58:	50 e0       	ldi	r21, 0x00	; 0
	uint8_t toff = ((p[i].next[0]-1)<<2)+RAM_TILES_COUNT+2;
    9b5a:	28 2f       	mov	r18, r24
    9b5c:	30 e0       	ldi	r19, 0x00	; 0
    9b5e:	82 e7       	ldi	r24, 0x72	; 114
    9b60:	90 e0       	ldi	r25, 0x00	; 0
    9b62:	b9 01       	movw	r22, r18
    9b64:	68 9f       	mul	r22, r24
    9b66:	90 01       	movw	r18, r0
    9b68:	69 9f       	mul	r22, r25
    9b6a:	30 0d       	add	r19, r0
    9b6c:	78 9f       	mul	r23, r24
    9b6e:	30 0d       	add	r19, r0
    9b70:	11 24       	eor	r1, r1
    9b72:	28 58       	subi	r18, 0x88	; 136
    9b74:	32 4f       	sbci	r19, 0xF2	; 242
    9b76:	d9 01       	movw	r26, r18
    9b78:	1c 96       	adiw	r26, 0x0c	; 12
    9b7a:	8c 91       	ld	r24, X
    9b7c:	81 50       	subi	r24, 0x01	; 1
    9b7e:	88 0f       	add	r24, r24
    9b80:	88 0f       	add	r24, r24
    9b82:	80 5e       	subi	r24, 0xE0	; 224

	vram[voff++] = toff++;
    9b84:	fa 01       	movw	r30, r20
    9b86:	e0 5e       	subi	r30, 0xE0	; 224
    9b88:	fe 4f       	sbci	r31, 0xFE	; 254
    9b8a:	80 83       	st	Z, r24
    9b8c:	fa 01       	movw	r30, r20
    9b8e:	31 96       	adiw	r30, 0x01	; 1
	vram[voff++] = toff;
    9b90:	df 01       	movw	r26, r30
    9b92:	a0 5e       	subi	r26, 0xE0	; 224
    9b94:	be 4f       	sbci	r27, 0xFE	; 254
    9b96:	8f 5f       	subi	r24, 0xFF	; 255
    9b98:	8c 93       	st	X, r24
	
	toff = ((p[i].next[1]-1)<<2)+RAM_TILES_COUNT+2;
    9b9a:	d9 01       	movw	r26, r18
    9b9c:	1d 96       	adiw	r26, 0x0d	; 13
    9b9e:	8c 91       	ld	r24, X
    9ba0:	81 50       	subi	r24, 0x01	; 1
    9ba2:	88 0f       	add	r24, r24
    9ba4:	88 0f       	add	r24, r24
    9ba6:	80 5e       	subi	r24, 0xE0	; 224

	vram[voff++] = toff++;
    9ba8:	ef 5d       	subi	r30, 0xDF	; 223
    9baa:	fe 4f       	sbci	r31, 0xFE	; 254
    9bac:	80 83       	st	Z, r24
	vram[voff] = toff;
    9bae:	8f 5f       	subi	r24, 0xFF	; 255
    9bb0:	81 83       	std	Z+1, r24	; 0x01
}
    9bb2:	08 95       	ret

00009bb4 <DrawScreen>:


void DrawScreen(){
	FillScreenPattern();
    9bb4:	0e 94 3c 47 	call	0x8e78	; 0x8e78 <FillScreenPattern>
	DrawFrame(5,0,6,2);	
    9bb8:	85 e0       	ldi	r24, 0x05	; 5
    9bba:	60 e0       	ldi	r22, 0x00	; 0
    9bbc:	46 e0       	ldi	r20, 0x06	; 6
    9bbe:	22 e0       	ldi	r18, 0x02	; 2
    9bc0:	0e 94 a6 47 	call	0x8f4c	; 0x8f4c <DrawFrame>
	DrawFrame(1,1,14,26);
    9bc4:	81 e0       	ldi	r24, 0x01	; 1
    9bc6:	61 e0       	ldi	r22, 0x01	; 1
    9bc8:	4e e0       	ldi	r20, 0x0E	; 14
    9bca:	2a e1       	ldi	r18, 0x1A	; 26
    9bcc:	0e 94 a6 47 	call	0x8f4c	; 0x8f4c <DrawFrame>

	DrawFrame(18,0,6,2);
    9bd0:	82 e1       	ldi	r24, 0x12	; 18
    9bd2:	60 e0       	ldi	r22, 0x00	; 0
    9bd4:	46 e0       	ldi	r20, 0x06	; 6
    9bd6:	22 e0       	ldi	r18, 0x02	; 2
    9bd8:	0e 94 a6 47 	call	0x8f4c	; 0x8f4c <DrawFrame>
	DrawFrame(14,1,14,26);
    9bdc:	8e e0       	ldi	r24, 0x0E	; 14
    9bde:	61 e0       	ldi	r22, 0x01	; 1
    9be0:	4e e0       	ldi	r20, 0x0E	; 14
    9be2:	2a e1       	ldi	r18, 0x1A	; 26
    9be4:	0e 94 a6 47 	call	0x8f4c	; 0x8f4c <DrawFrame>

	for(uint8_t i=6;i<6+4;i++){
		SetTile(i+0,1,FIRST_BORDER_TILE);
    9be8:	86 e0       	ldi	r24, 0x06	; 6
    9bea:	61 e0       	ldi	r22, 0x01	; 1
    9bec:	44 e2       	ldi	r20, 0x24	; 36
    9bee:	50 e0       	ldi	r21, 0x00	; 0
    9bf0:	0e 94 5b 39 	call	0x72b6	; 0x72b6 <SetTile>
		SetTile(i+13,1,FIRST_BORDER_TILE);
    9bf4:	83 e1       	ldi	r24, 0x13	; 19
    9bf6:	61 e0       	ldi	r22, 0x01	; 1
    9bf8:	44 e2       	ldi	r20, 0x24	; 36
    9bfa:	50 e0       	ldi	r21, 0x00	; 0
    9bfc:	0e 94 5b 39 	call	0x72b6	; 0x72b6 <SetTile>

	DrawFrame(18,0,6,2);
	DrawFrame(14,1,14,26);

	for(uint8_t i=6;i<6+4;i++){
		SetTile(i+0,1,FIRST_BORDER_TILE);
    9c00:	87 e0       	ldi	r24, 0x07	; 7
    9c02:	61 e0       	ldi	r22, 0x01	; 1
    9c04:	44 e2       	ldi	r20, 0x24	; 36
    9c06:	50 e0       	ldi	r21, 0x00	; 0
    9c08:	0e 94 5b 39 	call	0x72b6	; 0x72b6 <SetTile>
		SetTile(i+13,1,FIRST_BORDER_TILE);
    9c0c:	84 e1       	ldi	r24, 0x14	; 20
    9c0e:	61 e0       	ldi	r22, 0x01	; 1
    9c10:	44 e2       	ldi	r20, 0x24	; 36
    9c12:	50 e0       	ldi	r21, 0x00	; 0
    9c14:	0e 94 5b 39 	call	0x72b6	; 0x72b6 <SetTile>

	DrawFrame(18,0,6,2);
	DrawFrame(14,1,14,26);

	for(uint8_t i=6;i<6+4;i++){
		SetTile(i+0,1,FIRST_BORDER_TILE);
    9c18:	88 e0       	ldi	r24, 0x08	; 8
    9c1a:	61 e0       	ldi	r22, 0x01	; 1
    9c1c:	44 e2       	ldi	r20, 0x24	; 36
    9c1e:	50 e0       	ldi	r21, 0x00	; 0
    9c20:	0e 94 5b 39 	call	0x72b6	; 0x72b6 <SetTile>
		SetTile(i+13,1,FIRST_BORDER_TILE);
    9c24:	85 e1       	ldi	r24, 0x15	; 21
    9c26:	61 e0       	ldi	r22, 0x01	; 1
    9c28:	44 e2       	ldi	r20, 0x24	; 36
    9c2a:	50 e0       	ldi	r21, 0x00	; 0
    9c2c:	0e 94 5b 39 	call	0x72b6	; 0x72b6 <SetTile>

	DrawFrame(18,0,6,2);
	DrawFrame(14,1,14,26);

	for(uint8_t i=6;i<6+4;i++){
		SetTile(i+0,1,FIRST_BORDER_TILE);
    9c30:	89 e0       	ldi	r24, 0x09	; 9
    9c32:	61 e0       	ldi	r22, 0x01	; 1
    9c34:	44 e2       	ldi	r20, 0x24	; 36
    9c36:	50 e0       	ldi	r21, 0x00	; 0
    9c38:	0e 94 5b 39 	call	0x72b6	; 0x72b6 <SetTile>
		SetTile(i+13,1,FIRST_BORDER_TILE);
    9c3c:	86 e1       	ldi	r24, 0x16	; 22
    9c3e:	61 e0       	ldi	r22, 0x01	; 1
    9c40:	44 e2       	ldi	r20, 0x24	; 36
    9c42:	50 e0       	ldi	r21, 0x00	; 0
    9c44:	0e 94 5b 39 	call	0x72b6	; 0x72b6 <SetTile>
	}

	SetTile(14,1,FIRST_BORDER_TILE+7);
    9c48:	8e e0       	ldi	r24, 0x0E	; 14
    9c4a:	61 e0       	ldi	r22, 0x01	; 1
    9c4c:	4b e2       	ldi	r20, 0x2B	; 43
    9c4e:	50 e0       	ldi	r21, 0x00	; 0
    9c50:	0e 94 5b 39 	call	0x72b6	; 0x72b6 <SetTile>
	//SetTile(14,SCREEN_TILES_V-1,FIRST_BORDER_TILE+7);
	SetTile(5,1,FIRST_BORDER_TILE+4);
    9c54:	85 e0       	ldi	r24, 0x05	; 5
    9c56:	61 e0       	ldi	r22, 0x01	; 1
    9c58:	48 e2       	ldi	r20, 0x28	; 40
    9c5a:	50 e0       	ldi	r21, 0x00	; 0
    9c5c:	0e 94 5b 39 	call	0x72b6	; 0x72b6 <SetTile>
	SetTile(10,1,FIRST_BORDER_TILE+3);
    9c60:	8a e0       	ldi	r24, 0x0A	; 10
    9c62:	61 e0       	ldi	r22, 0x01	; 1
    9c64:	47 e2       	ldi	r20, 0x27	; 39
    9c66:	50 e0       	ldi	r21, 0x00	; 0
    9c68:	0e 94 5b 39 	call	0x72b6	; 0x72b6 <SetTile>
	SetTile(18,1,FIRST_BORDER_TILE+4);
    9c6c:	82 e1       	ldi	r24, 0x12	; 18
    9c6e:	61 e0       	ldi	r22, 0x01	; 1
    9c70:	48 e2       	ldi	r20, 0x28	; 40
    9c72:	50 e0       	ldi	r21, 0x00	; 0
    9c74:	0e 94 5b 39 	call	0x72b6	; 0x72b6 <SetTile>
	SetTile(23,1,FIRST_BORDER_TILE+3);
    9c78:	87 e1       	ldi	r24, 0x17	; 23
    9c7a:	61 e0       	ldi	r22, 0x01	; 1
    9c7c:	47 e2       	ldi	r20, 0x27	; 39
    9c7e:	50 e0       	ldi	r21, 0x00	; 0
    9c80:	0e 94 5b 39 	call	0x72b6	; 0x72b6 <SetTile>
	
	for(uint8_t i=0;i<MAX_PLAYERS;i++){
		DrawPreview(i);
    9c84:	80 e0       	ldi	r24, 0x00	; 0
    9c86:	0e 94 a6 4d 	call	0x9b4c	; 0x9b4c <DrawPreview>
		DrawWell(i);
    9c8a:	80 e0       	ldi	r24, 0x00	; 0
    9c8c:	0e 94 fb 4c 	call	0x99f6	; 0x99f6 <DrawWell>
	SetTile(10,1,FIRST_BORDER_TILE+3);
	SetTile(18,1,FIRST_BORDER_TILE+4);
	SetTile(23,1,FIRST_BORDER_TILE+3);
	
	for(uint8_t i=0;i<MAX_PLAYERS;i++){
		DrawPreview(i);
    9c90:	81 e0       	ldi	r24, 0x01	; 1
    9c92:	0e 94 a6 4d 	call	0x9b4c	; 0x9b4c <DrawPreview>
		DrawWell(i);
    9c96:	81 e0       	ldi	r24, 0x01	; 1
    9c98:	0e 94 fb 4c 	call	0x99f6	; 0x99f6 <DrawWell>
	}
	

}
    9c9c:	08 95       	ret

00009c9e <main>:


int main(){
    9c9e:	ae e0       	ldi	r26, 0x0E	; 14
    9ca0:	b0 e0       	ldi	r27, 0x00	; 0
    9ca2:	e5 e5       	ldi	r30, 0x55	; 85
    9ca4:	fe e4       	ldi	r31, 0x4E	; 78
    9ca6:	0c 94 a9 57 	jmp	0xaf52	; 0xaf52 <__prologue_saves__>
	
	SetUserPostVsyncCallback(&VsyncHook);
    9caa:	8f e0       	ldi	r24, 0x0F	; 15
    9cac:	97 e4       	ldi	r25, 0x47	; 71
    9cae:	0e 94 97 39 	call	0x732e	; 0x732e <SetUserPostVsyncCallback>
	InitMusicPlayer(patches);
    9cb2:	82 ed       	ldi	r24, 0xD2	; 210
    9cb4:	9d e3       	ldi	r25, 0x3D	; 61
    9cb6:	0e 94 01 3c 	call	0x7802	; 0x7802 <InitMusicPlayer>
	GetPrngNumber(GetTrueRandomSeed());
    9cba:	0e 94 c4 39 	call	0x7388	; 0x7388 <GetTrueRandomSeed>
    9cbe:	0e 94 93 3a 	call	0x7526	; 0x7526 <GetPrngNumber>
	SetSpritesTileBank(0,sprite_tiles);
    9cc2:	80 e0       	ldi	r24, 0x00	; 0
    9cc4:	68 e6       	ldi	r22, 0x68	; 104
    9cc6:	75 e3       	ldi	r23, 0x35	; 53
    9cc8:	0e 94 52 39 	call	0x72a4	; 0x72a4 <SetSpritesTileBank>
	SetTileTable(rom_tiles);
    9ccc:	88 ee       	ldi	r24, 0xE8	; 232
    9cce:	90 e0       	ldi	r25, 0x00	; 0
    9cd0:	0e 94 69 39 	call	0x72d2	; 0x72d2 <SetTileTable>
	
//	Intro();
	SetMasterVolume(AS_MASTER_VOLUME);
    9cd4:	84 eb       	ldi	r24, 0xB4	; 180
    9cd6:	0e 94 82 3f 	call	0x7f04	; 0x7f04 <SetMasterVolume>
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

			if((p[i].padState & BTN_START) && !(p[i].oldPadState & BTN_START) && !p[i].sub_state){
				p[i].sub_state = SUBSTATE_PAUSE_MENU_BACK;
			}
			if(p[!i].sub_state)//we cannot continue our game logic until the other player leaves their menu
    9cda:	b2 e7       	ldi	r27, 0x72	; 114
    9cdc:	2b 2e       	mov	r2, r27
    9cde:	31 2c       	mov	r3, r1

			}else if(p[i].state == STATE_CHAIN_END){//possible transitions to: STATE_GRAVITY
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

				uint8_t stars = p[i].chain-1;
				stars = pgm_read_byte(&chain_star_count[stars]);//0,2,4,5,6,12,12,12...
    9ce0:	9e 01       	movw	r18, r28
    9ce2:	2f 5f       	subi	r18, 0xFF	; 255
    9ce4:	3f 4f       	sbci	r19, 0xFF	; 255
    9ce6:	3e 87       	std	Y+14, r19	; 0x0e
    9ce8:	2d 87       	std	Y+13, r18	; 0x0d

				uint8_t weights[WELL_WIDTH];
				
				for(uint8_t x=0;x<WELL_WIDTH;x++){//find the height of each column, where lower columns are more desirable
    9cea:	ce 01       	movw	r24, r28
    9cec:	07 96       	adiw	r24, 0x07	; 7
    9cee:	9c 87       	std	Y+12, r25	; 0x0c
    9cf0:	8b 87       	std	Y+11, r24	; 0x0b
	
//	Intro();
	SetMasterVolume(AS_MASTER_VOLUME);
	
TITLE_TOP:
	TitleScreen();
    9cf2:	0e 94 f4 45 	call	0x8be8	; 0x8be8 <TitleScreen>
	ai[0].pawn = 1;
    9cf6:	91 e0       	ldi	r25, 0x01	; 1
    9cf8:	90 93 76 0e 	sts	0x0E76, r25
	ai[0].state = AI_WAIT_ROUND_START;
    9cfc:	80 e2       	ldi	r24, 0x20	; 32
    9cfe:	80 93 5c 0e 	sts	0x0E5C, r24
	p[1].network_state = 1;
    9d02:	90 93 58 0e 	sts	0x0E58, r25
/*eof(p[0].well);i++){
	p[0].well[i] = (i%BLOCK_STAR)+1;
	p[1].well[i] = p[0].well[i];
}
*/
	p[0].state = STATE_AWAIT_READY;
    9d06:	90 93 7c 0d 	sts	0x0D7C, r25
	p[1].state = STATE_AWAIT_READY;
    9d0a:	90 93 ee 0d 	sts	0x0DEE, r25
	p[0].next[0] = 0;
    9d0e:	10 92 84 0d 	sts	0x0D84, r1
	p[1].next[0] = 0;
    9d12:	10 92 f6 0d 	sts	0x0DF6, r1
	//p[0].next[0] = BLOCK_BLUE;
	//p[0].next[1] = BLOCK_RED;
	//p[1].next[0] = BLOCK_GREEN;
	//p[1].next[1] = BLOCK_RED;
	ResetGame();
    9d16:	0e 94 3b 4c 	call	0x9876	; 0x9876 <ResetGame>
	DrawScreen();
    9d1a:	0e 94 da 4d 	call	0x9bb4	; 0x9bb4 <DrawScreen>
	
	FadeIn(1,false);
    9d1e:	81 e0       	ldi	r24, 0x01	; 1
    9d20:	60 e0       	ldi	r22, 0x00	; 0
    9d22:	0e 94 0a 45 	call	0x8a14	; 0x8a14 <FadeIn>
    9d26:	90 e0       	ldi	r25, 0x00	; 0
    9d28:	0b c0       	rjmp	.+22     	; 0x9d40 <main+0xa2>


void ResetSprites(){

	for(uint8_t i=0;i<MAX_SPRITES;i++)
		sprites[i].x = SCREEN_TILES_H*8;
    9d2a:	e9 2f       	mov	r30, r25
    9d2c:	f0 e0       	ldi	r31, 0x00	; 0
    9d2e:	ee 0f       	add	r30, r30
    9d30:	ff 1f       	adc	r31, r31
    9d32:	ee 0f       	add	r30, r30
    9d34:	ff 1f       	adc	r31, r31
    9d36:	e4 5d       	subi	r30, 0xD4	; 212
    9d38:	fb 4f       	sbci	r31, 0xFB	; 251
    9d3a:	80 ef       	ldi	r24, 0xF0	; 240
    9d3c:	80 83       	st	Z, r24



void ResetSprites(){

	for(uint8_t i=0;i<MAX_SPRITES;i++)
    9d3e:	9f 5f       	subi	r25, 0xFF	; 255
    9d40:	9c 31       	cpi	r25, 0x1C	; 28
    9d42:	98 f3       	brcs	.-26     	; 0x9d2a <main+0x8c>
		sprites[i].x = SCREEN_TILES_H*8;
	sprite_count = 0;
    9d44:	10 92 c9 0e 	sts	0x0EC9, r1
    9d48:	f8 e7       	ldi	r31, 0x78	; 120
    9d4a:	ef 2e       	mov	r14, r31
    9d4c:	fd e0       	ldi	r31, 0x0D	; 13
    9d4e:	ff 2e       	mov	r15, r31
    9d50:	a3 ee       	ldi	r26, 0xE3	; 227
    9d52:	bd e0       	ldi	r27, 0x0D	; 13
    9d54:	ba 87       	std	Y+10, r27	; 0x0a
    9d56:	a9 87       	std	Y+9, r26	; 0x09
    9d58:	e4 ee       	ldi	r30, 0xE4	; 228
    9d5a:	fd e0       	ldi	r31, 0x0D	; 13
    9d5c:	f8 87       	std	Y+8, r31	; 0x08
    9d5e:	ef 83       	std	Y+7, r30	; 0x07
    9d60:	66 24       	eor	r6, r6
    9d62:	77 24       	eor	r7, r7
    9d64:	46 2c       	mov	r4, r6
	UartSend_uint8_t(p[0].padState);//this is compressed, since we don't use all the SNES buttons for this game.
	//do not send anymore, until we calculate the outcome of this tick. They will compare the simulation on their side, and compare to our results.

	//GET INPUT STUFF
	for(uint8_t i=0;i<MAX_PLAYERS;i++){
		if(p[i].state == STATE_DISABLED)
    9d66:	d7 01       	movw	r26, r14
    9d68:	14 96       	adiw	r26, 0x04	; 4
    9d6a:	8c 91       	ld	r24, X
    9d6c:	88 23       	and	r24, r24
    9d6e:	09 f4       	brne	.+2      	; 0x9d72 <main+0xd4>
    9d70:	ca c5       	rjmp	.+2964   	; 0xa906 <main+0xc68>
			}else if(p[i].state == STATE_SET_BLOCKS){//possible transitions to: STATE_GRAVITY
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

				int8_t planet_grid_off = (p[i].y*WELL_WIDTH)+p[i].x;//grid position of the planet piece
				int8_t orbital_grid_off = planet_grid_off+pgm_read_byte(&orbital_grid_lookup[(p[i].r)]);//grid position of the piece that orbits/rotates around
				p[i].well[planet_grid_off] = p[i].blocks[0];
    9d72:	62 9c       	mul	r6, r2
    9d74:	a0 01       	movw	r20, r0
    9d76:	63 9c       	mul	r6, r3
    9d78:	50 0d       	add	r21, r0
    9d7a:	72 9c       	mul	r7, r2
    9d7c:	50 0d       	add	r21, r0
    9d7e:	11 24       	eor	r1, r1
    9d80:	48 58       	subi	r20, 0x88	; 136
    9d82:	52 4f       	sbci	r21, 0xF2	; 242
		if(p[!i].state == STATE_LOST_GAME){
			//p[i].state = STATE_WON_GAME;
			//p[i].state_count = 0;
		}
		
		if(p[i].state == STATE_AWAIT_READY){
    9d84:	f7 01       	movw	r30, r14
    9d86:	84 81       	ldd	r24, Z+4	; 0x04
    9d88:	81 30       	cpi	r24, 0x01	; 1
    9d8a:	c1 f5       	brne	.+112    	; 0x9dfc <main+0x15e>
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//p[0].oldPadState = 0;p[0].padState=BTN_START;
			if(!p[i].next[0])
    9d8c:	84 85       	ldd	r24, Z+12	; 0x0c
    9d8e:	88 23       	and	r24, r24
    9d90:	19 f4       	brne	.+6      	; 0x9d98 <main+0xfa>
				SpawnNewPiece(i);//this also draws the preview
    9d92:	84 2d       	mov	r24, r4
    9d94:	0e 94 88 49 	call	0x9310	; 0x9310 <SpawnNewPiece>
			DrawBigString((i?15:2),3,PSTR("READY]"));
    9d98:	44 20       	and	r4, r4
    9d9a:	11 f0       	breq	.+4      	; 0x9da0 <main+0x102>
    9d9c:	8f e0       	ldi	r24, 0x0F	; 15
    9d9e:	01 c0       	rjmp	.+2      	; 0x9da2 <main+0x104>
    9da0:	82 e0       	ldi	r24, 0x02	; 2
    9da2:	63 e0       	ldi	r22, 0x03	; 3
    9da4:	4a eb       	ldi	r20, 0xBA	; 186
    9da6:	58 e6       	ldi	r21, 0x68	; 104
    9da8:	0e 94 e1 4c 	call	0x99c2	; 0x99c2 <DrawBigString>
			if(p[!i].state == STATE_COUNT_DOWN){
    9dac:	80 e0       	ldi	r24, 0x00	; 0
    9dae:	90 e0       	ldi	r25, 0x00	; 0
    9db0:	44 20       	and	r4, r4
    9db2:	11 f4       	brne	.+4      	; 0x9db8 <main+0x11a>
    9db4:	81 e0       	ldi	r24, 0x01	; 1
    9db6:	90 e0       	ldi	r25, 0x00	; 0
    9db8:	82 9d       	mul	r24, r2
    9dba:	f0 01       	movw	r30, r0
    9dbc:	83 9d       	mul	r24, r3
    9dbe:	f0 0d       	add	r31, r0
    9dc0:	92 9d       	mul	r25, r2
    9dc2:	f0 0d       	add	r31, r0
    9dc4:	11 24       	eor	r1, r1
    9dc6:	e8 58       	subi	r30, 0x88	; 136
    9dc8:	f2 4f       	sbci	r31, 0xF2	; 242
    9dca:	84 81       	ldd	r24, Z+4	; 0x04
    9dcc:	82 30       	cpi	r24, 0x02	; 2
    9dce:	39 f4       	brne	.+14     	; 0x9dde <main+0x140>
				p[i].state = STATE_COUNT_DOWN;
    9dd0:	d7 01       	movw	r26, r14
    9dd2:	14 96       	adiw	r26, 0x04	; 4
    9dd4:	8c 93       	st	X, r24
    9dd6:	14 97       	sbiw	r26, 0x04	; 4
				p[i].state_count = p[!i].state_count;
    9dd8:	86 81       	ldd	r24, Z+6	; 0x06
    9dda:	16 96       	adiw	r26, 0x06	; 6
    9ddc:	8c 93       	st	X, r24
			}
			if((p[i].padState & BTN_START) && !(p[i].oldPadState & BTN_START)){
    9dde:	e9 85       	ldd	r30, Y+9	; 0x09
    9de0:	fa 85       	ldd	r31, Y+10	; 0x0a
    9de2:	80 81       	ld	r24, Z
    9de4:	83 ff       	sbrs	r24, 3
    9de6:	8f c5       	rjmp	.+2846   	; 0xa906 <main+0xc68>
    9de8:	af 81       	ldd	r26, Y+7	; 0x07
    9dea:	b8 85       	ldd	r27, Y+8	; 0x08
    9dec:	8c 91       	ld	r24, X
    9dee:	83 fd       	sbrc	r24, 3
    9df0:	8a c5       	rjmp	.+2836   	; 0xa906 <main+0xc68>
				p[i].state = STATE_COUNT_DOWN;
    9df2:	22 e0       	ldi	r18, 0x02	; 2
    9df4:	f7 01       	movw	r30, r14
    9df6:	24 83       	std	Z+4, r18	; 0x04
				p[i].state_count = (30*4)-1;
    9df8:	87 e7       	ldi	r24, 0x77	; 119
    9dfa:	0f c2       	rjmp	.+1054   	; 0xa21a <main+0x57c>
			}
			
		}else if(p[i].state == STATE_COUNT_DOWN){
    9dfc:	82 30       	cpi	r24, 0x02	; 2
    9dfe:	09 f0       	breq	.+2      	; 0x9e02 <main+0x164>
    9e00:	4d c0       	rjmp	.+154    	; 0x9e9c <main+0x1fe>
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

			DrawBigString((i?15:2),3,PSTR("READY["));
    9e02:	44 20       	and	r4, r4
    9e04:	11 f0       	breq	.+4      	; 0x9e0a <main+0x16c>
    9e06:	8f e0       	ldi	r24, 0x0F	; 15
    9e08:	01 c0       	rjmp	.+2      	; 0x9e0c <main+0x16e>
    9e0a:	82 e0       	ldi	r24, 0x02	; 2
    9e0c:	63 e0       	ldi	r22, 0x03	; 3
    9e0e:	41 ec       	ldi	r20, 0xC1	; 193
    9e10:	58 e6       	ldi	r21, 0x68	; 104
    9e12:	0e 94 e1 4c 	call	0x99c2	; 0x99c2 <DrawBigString>
			if(!p[!i].state || (p[!i].state >= STATE_COUNT_DOWN)){
    9e16:	44 20       	and	r4, r4
    9e18:	19 f4       	brne	.+6      	; 0x9e20 <main+0x182>
    9e1a:	e6 e7       	ldi	r30, 0x76	; 118
    9e1c:	f0 e0       	ldi	r31, 0x00	; 0
    9e1e:	02 c0       	rjmp	.+4      	; 0x9e24 <main+0x186>
    9e20:	e4 e0       	ldi	r30, 0x04	; 4
    9e22:	f0 e0       	ldi	r31, 0x00	; 0
    9e24:	e8 58       	subi	r30, 0x88	; 136
    9e26:	f2 4f       	sbci	r31, 0xF2	; 242
    9e28:	80 81       	ld	r24, Z
    9e2a:	81 30       	cpi	r24, 0x01	; 1
    9e2c:	09 f4       	brne	.+2      	; 0x9e30 <main+0x192>
    9e2e:	6b c5       	rjmp	.+2774   	; 0xa906 <main+0xc68>
					
					if(p[i].state_count > 30)
    9e30:	d7 01       	movw	r26, r14
    9e32:	16 96       	adiw	r26, 0x06	; 6
    9e34:	8c 91       	ld	r24, X
    9e36:	8f 31       	cpi	r24, 0x1F	; 31
    9e38:	78 f0       	brcs	.+30     	; 0x9e58 <main+0x1ba>
						DrawBigChar((i?20:7),6,'0'+(p[i].state_count/30));
    9e3a:	44 20       	and	r4, r4
    9e3c:	11 f4       	brne	.+4      	; 0x9e42 <main+0x1a4>
    9e3e:	27 e0       	ldi	r18, 0x07	; 7
    9e40:	01 c0       	rjmp	.+2      	; 0x9e44 <main+0x1a6>
    9e42:	24 e1       	ldi	r18, 0x14	; 20
    9e44:	6e e1       	ldi	r22, 0x1E	; 30
    9e46:	0e 94 69 57 	call	0xaed2	; 0xaed2 <__udivmodqi4>
    9e4a:	48 2f       	mov	r20, r24
    9e4c:	40 5d       	subi	r20, 0xD0	; 208
    9e4e:	82 2f       	mov	r24, r18
    9e50:	66 e0       	ldi	r22, 0x06	; 6
    9e52:	0e 94 a5 4c 	call	0x994a	; 0x994a <DrawBigChar>
    9e56:	0a c0       	rjmp	.+20     	; 0x9e6c <main+0x1ce>
					else
						DrawBigString((i?17:4),6,PSTR("GO[["));
    9e58:	44 20       	and	r4, r4
    9e5a:	11 f4       	brne	.+4      	; 0x9e60 <main+0x1c2>
    9e5c:	84 e0       	ldi	r24, 0x04	; 4
    9e5e:	01 c0       	rjmp	.+2      	; 0x9e62 <main+0x1c4>
    9e60:	81 e1       	ldi	r24, 0x11	; 17
    9e62:	66 e0       	ldi	r22, 0x06	; 6
    9e64:	48 ec       	ldi	r20, 0xC8	; 200
    9e66:	58 e6       	ldi	r21, 0x68	; 104
    9e68:	0e 94 e1 4c 	call	0x99c2	; 0x99c2 <DrawBigString>
					if(--p[i].state_count == 0){
    9e6c:	f7 01       	movw	r30, r14
    9e6e:	86 81       	ldd	r24, Z+6	; 0x06
    9e70:	81 50       	subi	r24, 0x01	; 1
    9e72:	86 83       	std	Z+6, r24	; 0x06
    9e74:	88 23       	and	r24, r24
    9e76:	09 f0       	breq	.+2      	; 0x9e7a <main+0x1dc>
    9e78:	46 c5       	rjmp	.+2700   	; 0xa906 <main+0xc68>
						p[i].state = STATE_SPAWN_BLOCKS;
    9e7a:	8b e0       	ldi	r24, 0x0B	; 11
    9e7c:	84 83       	std	Z+4, r24	; 0x04
						SpawnNewPiece(i);
    9e7e:	84 2d       	mov	r24, r4
    9e80:	0e 94 88 49 	call	0x9310	; 0x9310 <SpawnNewPiece>
						DrawRectangle((i?15:2),3,12,5,FIRST_BORDER_TILE);//blank out the round start text
    9e84:	44 20       	and	r4, r4
    9e86:	11 f4       	brne	.+4      	; 0x9e8c <main+0x1ee>
    9e88:	82 e0       	ldi	r24, 0x02	; 2
    9e8a:	01 c0       	rjmp	.+2      	; 0x9e8e <main+0x1f0>
    9e8c:	8f e0       	ldi	r24, 0x0F	; 15
    9e8e:	63 e0       	ldi	r22, 0x03	; 3
    9e90:	4c e0       	ldi	r20, 0x0C	; 12
    9e92:	25 e0       	ldi	r18, 0x05	; 5
    9e94:	04 e2       	ldi	r16, 0x24	; 36
    9e96:	0e 94 7b 47 	call	0x8ef6	; 0x8ef6 <DrawRectangle>
    9e9a:	35 c5       	rjmp	.+2666   	; 0xa906 <main+0xc68>
					}
			}
			
		}else if(p[i].state == STATE_LOST_GAME){
    9e9c:	8a 30       	cpi	r24, 0x0A	; 10
    9e9e:	09 f0       	breq	.+2      	; 0x9ea2 <main+0x204>
    9ea0:	84 c0       	rjmp	.+264    	; 0x9faa <main+0x30c>
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

			if(p[i].state_count < 4){
    9ea2:	d7 01       	movw	r26, r14
    9ea4:	16 96       	adiw	r26, 0x06	; 6
    9ea6:	8c 91       	ld	r24, X
    9ea8:	16 97       	sbiw	r26, 0x06	; 6
    9eaa:	84 30       	cpi	r24, 0x04	; 4
    9eac:	08 f4       	brcc	.+2      	; 0x9eb0 <main+0x212>
    9eae:	7b c0       	rjmp	.+246    	; 0x9fa6 <main+0x308>
				p[i].state_count++;
				continue;
			}
			p[i].state_count = 0;
    9eb0:	f7 01       	movw	r30, r14
    9eb2:	16 82       	std	Z+6, r1	; 0x06
    9eb4:	62 9c       	mul	r6, r2
    9eb6:	c0 01       	movw	r24, r0
    9eb8:	63 9c       	mul	r6, r3
    9eba:	90 0d       	add	r25, r0
    9ebc:	72 9c       	mul	r7, r2
    9ebe:	90 0d       	add	r25, r0
    9ec0:	11 24       	eor	r1, r1
    9ec2:	ea e9       	ldi	r30, 0x9A	; 154
    9ec4:	ae 2e       	mov	r10, r30
    9ec6:	ed e0       	ldi	r30, 0x0D	; 13
    9ec8:	be 2e       	mov	r11, r30
    9eca:	a8 0e       	add	r10, r24
    9ecc:	b9 1e       	adc	r11, r25
    9ece:	7b e9       	ldi	r23, 0x9B	; 155
    9ed0:	87 2e       	mov	r8, r23
    9ed2:	7d e0       	ldi	r23, 0x0D	; 13
    9ed4:	97 2e       	mov	r9, r23
    9ed6:	88 0e       	add	r8, r24
    9ed8:	99 1e       	adc	r9, r25
    9eda:	90 e0       	ldi	r25, 0x00	; 0
    9edc:	cc 24       	eor	r12, r12
    9ede:	dd 24       	eor	r13, r13
    9ee0:	68 e0       	ldi	r22, 0x08	; 8
    9ee2:	56 2e       	mov	r5, r22
    9ee4:	5c 0c       	add	r5, r12
			uint8_t loff = WELL_WIDTH+2;
			uint8_t skullplaced = 0;
			for(uint8_t y=1;y<WELL_HEIGHT;y++){

				if(p[i].well[loff+0] && p[i].well[loff+0] != BLOCK_SKULL){
    9ee6:	d5 01       	movw	r26, r10
    9ee8:	8c 91       	ld	r24, X
    9eea:	88 23       	and	r24, r24
    9eec:	91 f0       	breq	.+36     	; 0x9f12 <main+0x274>
    9eee:	89 30       	cpi	r24, 0x09	; 9
    9ef0:	81 f0       	breq	.+32     	; 0x9f12 <main+0x274>
					p[i].well[loff+0] = BLOCK_SKULL;
    9ef2:	e9 e0       	ldi	r30, 0x09	; 9
    9ef4:	ec 93       	st	X, r30
					skullplaced = 1;
					DrawBlockGrid((loff+0)%WELL_WIDTH,(loff+0)/WELL_WIDTH,i);
    9ef6:	85 2d       	mov	r24, r5
    9ef8:	66 e0       	ldi	r22, 0x06	; 6
    9efa:	0e 94 69 57 	call	0xaed2	; 0xaed2 <__udivmodqi4>
    9efe:	29 2f       	mov	r18, r25
    9f00:	85 2d       	mov	r24, r5
    9f02:	0e 94 69 57 	call	0xaed2	; 0xaed2 <__udivmodqi4>
    9f06:	68 2f       	mov	r22, r24
    9f08:	82 2f       	mov	r24, r18
    9f0a:	44 2d       	mov	r20, r4
    9f0c:	0e 94 94 48 	call	0x9128	; 0x9128 <DrawBlockGrid>
    9f10:	91 e0       	ldi	r25, 0x01	; 1
    9f12:	86 01       	movw	r16, r12
    9f14:	07 5f       	subi	r16, 0xF7	; 247
    9f16:	1f 4f       	sbci	r17, 0xFF	; 255
				}
				if(p[i].well[loff+1] && p[i].well[loff+1] != BLOCK_SKULL){
    9f18:	d4 01       	movw	r26, r8
    9f1a:	8c 91       	ld	r24, X
    9f1c:	88 23       	and	r24, r24
    9f1e:	f9 f0       	breq	.+62     	; 0x9f5e <main+0x2c0>
    9f20:	89 30       	cpi	r24, 0x09	; 9
    9f22:	e9 f0       	breq	.+58     	; 0x9f5e <main+0x2c0>
					p[i].well[loff+1] = BLOCK_SKULL;
    9f24:	62 9c       	mul	r6, r2
    9f26:	f0 01       	movw	r30, r0
    9f28:	63 9c       	mul	r6, r3
    9f2a:	f0 0d       	add	r31, r0
    9f2c:	72 9c       	mul	r7, r2
    9f2e:	f0 0d       	add	r31, r0
    9f30:	11 24       	eor	r1, r1
    9f32:	e8 58       	subi	r30, 0x88	; 136
    9f34:	f2 4f       	sbci	r31, 0xF2	; 242
    9f36:	e0 0f       	add	r30, r16
    9f38:	f1 1f       	adc	r31, r17
    9f3a:	89 e0       	ldi	r24, 0x09	; 9
    9f3c:	82 8f       	std	Z+26, r24	; 0x1a
					skullplaced = 1;
					DrawBlockGrid((loff+1)%WELL_WIDTH,(loff+1)/WELL_WIDTH,i);
    9f3e:	c8 01       	movw	r24, r16
    9f40:	66 e0       	ldi	r22, 0x06	; 6
    9f42:	70 e0       	ldi	r23, 0x00	; 0
    9f44:	0e 94 96 57 	call	0xaf2c	; 0xaf2c <__divmodhi4>
    9f48:	28 2f       	mov	r18, r24
    9f4a:	c8 01       	movw	r24, r16
    9f4c:	66 e0       	ldi	r22, 0x06	; 6
    9f4e:	70 e0       	ldi	r23, 0x00	; 0
    9f50:	0e 94 96 57 	call	0xaf2c	; 0xaf2c <__divmodhi4>
    9f54:	82 2f       	mov	r24, r18
    9f56:	44 2d       	mov	r20, r4
    9f58:	0e 94 94 48 	call	0x9128	; 0x9128 <DrawBlockGrid>
    9f5c:	02 c0       	rjmp	.+4      	; 0x9f62 <main+0x2c4>
				}
				if(skullplaced){//only do 1 row per tick
    9f5e:	99 23       	and	r25, r25
    9f60:	71 f0       	breq	.+28     	; 0x9f7e <main+0x2e0>
					if(loff == WELL_WIDTH+2){//this is the first tick of the losing animation, call the sound effect
    9f62:	b8 e0       	ldi	r27, 0x08	; 8
    9f64:	5b 16       	cp	r5, r27
    9f66:	09 f0       	breq	.+2      	; 0x9f6a <main+0x2cc>
    9f68:	ce c4       	rjmp	.+2460   	; 0xa906 <main+0xc68>
						p[i].state_count = 0;
    9f6a:	f7 01       	movw	r30, r14
    9f6c:	16 82       	std	Z+6, r1	; 0x06
						StopSong();
    9f6e:	0e 94 47 3c 	call	0x788e	; 0x788e <StopSong>
	for(uint16_t i=0;i<VRAM_SIZE;i++)
		vram[i] = t;
}

void AS_TriggerFx(uint8_t patch){//use the 5th channel exclusively to allow music(uses 1-4) to be uninterrupted
TriggerFx(patch,255,1);return;
    9f72:	80 e0       	ldi	r24, 0x00	; 0
    9f74:	6f ef       	ldi	r22, 0xFF	; 255
    9f76:	41 e0       	ldi	r20, 0x01	; 1
    9f78:	0e 94 0f 3f 	call	0x7e1e	; 0x7e1e <TriggerFx>
    9f7c:	c4 c4       	rjmp	.+2440   	; 0xa906 <main+0xc68>
    9f7e:	26 e0       	ldi	r18, 0x06	; 6
    9f80:	30 e0       	ldi	r19, 0x00	; 0
    9f82:	a2 0e       	add	r10, r18
    9f84:	b3 1e       	adc	r11, r19
    9f86:	c2 0e       	add	r12, r18
    9f88:	d3 1e       	adc	r13, r19
    9f8a:	82 0e       	add	r8, r18
    9f8c:	93 1e       	adc	r9, r19
				continue;
			}
			p[i].state_count = 0;
			uint8_t loff = WELL_WIDTH+2;
			uint8_t skullplaced = 0;
			for(uint8_t y=1;y<WELL_HEIGHT;y++){
    9f8e:	38 e4       	ldi	r19, 0x48	; 72
    9f90:	c3 16       	cp	r12, r19
    9f92:	d1 04       	cpc	r13, r1
    9f94:	09 f0       	breq	.+2      	; 0x9f98 <main+0x2fa>
    9f96:	a4 cf       	rjmp	.-184    	; 0x9ee0 <main+0x242>
					break;
				}
				loff += WELL_WIDTH;
			}
			if(!skullplaced){//losing animation is done
				if(p[i].state_count < 60){//give the losing sound effect some time to finish
    9f98:	d7 01       	movw	r26, r14
    9f9a:	16 96       	adiw	r26, 0x06	; 6
    9f9c:	8c 91       	ld	r24, X
    9f9e:	16 97       	sbiw	r26, 0x06	; 6
    9fa0:	8c 33       	cpi	r24, 0x3C	; 60
    9fa2:	08 f0       	brcs	.+2      	; 0x9fa6 <main+0x308>
    9fa4:	b0 c4       	rjmp	.+2400   	; 0xa906 <main+0xc68>
					if(++p[i].state_count == 60){//start the song
    9fa6:	8f 5f       	subi	r24, 0xFF	; 255
    9fa8:	8d c4       	rjmp	.+2330   	; 0xa8c4 <main+0xc26>
						//StartSong(MUS_GAME_OVER);
					}
				}
			}
			
		}else if(p[i].state == STATE_WON_GAME){//possible transitions to: STATE_AWAIT_READY
    9faa:	89 30       	cpi	r24, 0x09	; 9
    9fac:	71 f5       	brne	.+92     	; 0xa00a <main+0x36c>
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////			
			
			uint8_t loff = (WELL_SIZE-WELL_WIDTH)-((p[i].state_count/6)*WELL_SIZE);
    9fae:	f7 01       	movw	r30, r14
    9fb0:	86 81       	ldd	r24, Z+6	; 0x06
    9fb2:	66 e0       	ldi	r22, 0x06	; 6
    9fb4:	0e 94 69 57 	call	0xaed2	; 0xaed2 <__udivmodqi4>
    9fb8:	22 eb       	ldi	r18, 0xB2	; 178
    9fba:	3f ef       	ldi	r19, 0xFF	; 255
    9fbc:	82 9f       	mul	r24, r18
    9fbe:	80 2d       	mov	r24, r0
    9fc0:	11 24       	eor	r1, r1
    9fc2:	98 2f       	mov	r25, r24
    9fc4:	98 5b       	subi	r25, 0xB8	; 184
			for(uint8_t x=0;x<WELL_WIDTH;x++)//do 1 row per 6 ticks
				p[i].well[loff++] = BLOCK_EMPTY;
    9fc6:	62 9c       	mul	r6, r2
    9fc8:	90 01       	movw	r18, r0
    9fca:	63 9c       	mul	r6, r3
    9fcc:	30 0d       	add	r19, r0
    9fce:	72 9c       	mul	r7, r2
    9fd0:	30 0d       	add	r19, r0
    9fd2:	11 24       	eor	r1, r1
    9fd4:	28 58       	subi	r18, 0x88	; 136
    9fd6:	32 4f       	sbci	r19, 0xF2	; 242
			
		}else if(p[i].state == STATE_WON_GAME){//possible transitions to: STATE_AWAIT_READY
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////			
			
			uint8_t loff = (WELL_SIZE-WELL_WIDTH)-((p[i].state_count/6)*WELL_SIZE);
			for(uint8_t x=0;x<WELL_WIDTH;x++)//do 1 row per 6 ticks
    9fd8:	82 5b       	subi	r24, 0xB2	; 178
				p[i].well[loff++] = BLOCK_EMPTY;
    9fda:	f9 01       	movw	r30, r18
    9fdc:	e9 0f       	add	r30, r25
    9fde:	f1 1d       	adc	r31, r1
    9fe0:	12 8e       	std	Z+26, r1	; 0x1a
    9fe2:	9f 5f       	subi	r25, 0xFF	; 255
			
		}else if(p[i].state == STATE_WON_GAME){//possible transitions to: STATE_AWAIT_READY
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////			
			
			uint8_t loff = (WELL_SIZE-WELL_WIDTH)-((p[i].state_count/6)*WELL_SIZE);
			for(uint8_t x=0;x<WELL_WIDTH;x++)//do 1 row per 6 ticks
    9fe4:	98 17       	cp	r25, r24
    9fe6:	c9 f7       	brne	.-14     	; 0x9fda <main+0x33c>
				p[i].well[loff++] = BLOCK_EMPTY;

			if((p[i].padState & BTN_START) && !(p[i].oldPadState & BTN_START))
    9fe8:	a9 85       	ldd	r26, Y+9	; 0x09
    9fea:	ba 85       	ldd	r27, Y+10	; 0x0a
    9fec:	8c 91       	ld	r24, X
    9fee:	83 ff       	sbrs	r24, 3
    9ff0:	09 c0       	rjmp	.+18     	; 0xa004 <main+0x366>
    9ff2:	ef 81       	ldd	r30, Y+7	; 0x07
    9ff4:	f8 85       	ldd	r31, Y+8	; 0x08
    9ff6:	80 81       	ld	r24, Z
    9ff8:	83 fd       	sbrc	r24, 3
    9ffa:	04 c0       	rjmp	.+8      	; 0xa004 <main+0x366>
				p[i].state = STATE_AWAIT_READY;
    9ffc:	e1 e0       	ldi	r30, 0x01	; 1
    9ffe:	d7 01       	movw	r26, r14
    a000:	14 96       	adiw	r26, 0x04	; 4
    a002:	ec 93       	st	X, r30
			SynchronizeLFSR();//make sure both players get the same block order next game(and take any network issues into consideration?)
    a004:	0e 94 4a 4b 	call	0x9694	; 0x9694 <SynchronizeLFSR>
    a008:	7e c4       	rjmp	.+2300   	; 0xa906 <main+0xc68>

		}else{//active playing states, where the in game menu can be brought up
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

			if((p[i].padState & BTN_START) && !(p[i].oldPadState & BTN_START) && !p[i].sub_state){
    a00a:	a9 85       	ldd	r26, Y+9	; 0x09
    a00c:	ba 85       	ldd	r27, Y+10	; 0x0a
    a00e:	8c 91       	ld	r24, X
    a010:	83 ff       	sbrs	r24, 3
    a012:	0e c0       	rjmp	.+28     	; 0xa030 <main+0x392>
    a014:	ef 81       	ldd	r30, Y+7	; 0x07
    a016:	f8 85       	ldd	r31, Y+8	; 0x08
    a018:	80 81       	ld	r24, Z
    a01a:	83 fd       	sbrc	r24, 3
    a01c:	09 c0       	rjmp	.+18     	; 0xa030 <main+0x392>
    a01e:	d7 01       	movw	r26, r14
    a020:	15 96       	adiw	r26, 0x05	; 5
    a022:	8c 91       	ld	r24, X
    a024:	15 97       	sbiw	r26, 0x05	; 5
    a026:	88 23       	and	r24, r24
    a028:	19 f4       	brne	.+6      	; 0xa030 <main+0x392>
				p[i].sub_state = SUBSTATE_PAUSE_MENU_BACK;
    a02a:	e1 e0       	ldi	r30, 0x01	; 1
    a02c:	15 96       	adiw	r26, 0x05	; 5
    a02e:	ec 93       	st	X, r30
			}
			if(p[!i].sub_state)//we cannot continue our game logic until the other player leaves their menu
    a030:	00 e0       	ldi	r16, 0x00	; 0
    a032:	10 e0       	ldi	r17, 0x00	; 0
    a034:	44 20       	and	r4, r4
    a036:	11 f4       	brne	.+4      	; 0xa03c <main+0x39e>
    a038:	01 e0       	ldi	r16, 0x01	; 1
    a03a:	10 e0       	ldi	r17, 0x00	; 0
    a03c:	02 9d       	mul	r16, r2
    a03e:	f0 01       	movw	r30, r0
    a040:	03 9d       	mul	r16, r3
    a042:	f0 0d       	add	r31, r0
    a044:	12 9d       	mul	r17, r2
    a046:	f0 0d       	add	r31, r0
    a048:	11 24       	eor	r1, r1
    a04a:	e8 58       	subi	r30, 0x88	; 136
    a04c:	f2 4f       	sbci	r31, 0xF2	; 242
    a04e:	85 81       	ldd	r24, Z+5	; 0x05
    a050:	88 23       	and	r24, r24
    a052:	09 f0       	breq	.+2      	; 0xa056 <main+0x3b8>
    a054:	58 c4       	rjmp	.+2224   	; 0xa906 <main+0xc68>
				continue;
			
			if(p[i].sub_state){//we need to process the menu and pause logic
    a056:	d7 01       	movw	r26, r14
    a058:	15 96       	adiw	r26, 0x05	; 5
    a05a:	2c 91       	ld	r18, X
    a05c:	22 23       	and	r18, r18
    a05e:	91 f1       	breq	.+100    	; 0xa0c4 <main+0x426>
			
				if((p[i].padState & BTN_UP) && !(p[i].oldPadState & BTN_UP)){
    a060:	e9 85       	ldd	r30, Y+9	; 0x09
    a062:	fa 85       	ldd	r31, Y+10	; 0x0a
    a064:	80 81       	ld	r24, Z
    a066:	98 2f       	mov	r25, r24
    a068:	84 ff       	sbrs	r24, 4
    a06a:	0e c0       	rjmp	.+28     	; 0xa088 <main+0x3ea>
    a06c:	af 81       	ldd	r26, Y+7	; 0x07
    a06e:	b8 85       	ldd	r27, Y+8	; 0x08
    a070:	8c 91       	ld	r24, X
    a072:	84 fd       	sbrc	r24, 4
    a074:	09 c0       	rjmp	.+18     	; 0xa088 <main+0x3ea>
					if((--p[i].sub_state) == 0)
    a076:	82 2f       	mov	r24, r18
    a078:	81 50       	subi	r24, 0x01	; 1
    a07a:	f7 01       	movw	r30, r14
    a07c:	85 83       	std	Z+5, r24	; 0x05
    a07e:	88 23       	and	r24, r24
    a080:	09 f0       	breq	.+2      	; 0xa084 <main+0x3e6>
    a082:	41 c4       	rjmp	.+2178   	; 0xa906 <main+0xc68>
						p[i].sub_state = SUBSTATE_PAUSE_MENU_QUIT;
    a084:	22 e0       	ldi	r18, 0x02	; 2
    a086:	0f c0       	rjmp	.+30     	; 0xa0a6 <main+0x408>
				}else if((p[i].padState & BTN_DOWN) && !(p[i].oldPadState & BTN_DOWN)){
    a088:	95 ff       	sbrs	r25, 5
    a08a:	0f c0       	rjmp	.+30     	; 0xa0aa <main+0x40c>
    a08c:	af 81       	ldd	r26, Y+7	; 0x07
    a08e:	b8 85       	ldd	r27, Y+8	; 0x08
    a090:	8c 91       	ld	r24, X
    a092:	85 fd       	sbrc	r24, 5
    a094:	0a c0       	rjmp	.+20     	; 0xa0aa <main+0x40c>
					if((--p[i].sub_state) > SUBSTATE_PAUSE_MENU_QUIT)
    a096:	82 2f       	mov	r24, r18
    a098:	81 50       	subi	r24, 0x01	; 1
    a09a:	f7 01       	movw	r30, r14
    a09c:	85 83       	std	Z+5, r24	; 0x05
    a09e:	83 30       	cpi	r24, 0x03	; 3
    a0a0:	08 f4       	brcc	.+2      	; 0xa0a4 <main+0x406>
    a0a2:	31 c4       	rjmp	.+2146   	; 0xa906 <main+0xc68>
						p[i].sub_state = SUBSTATE_PAUSE_MENU_BACK;
    a0a4:	21 e0       	ldi	r18, 0x01	; 1
    a0a6:	25 83       	std	Z+5, r18	; 0x05
    a0a8:	2e c4       	rjmp	.+2140   	; 0xa906 <main+0xc68>
				}else if((p[i].padState & BTN_START) && !(p[i].oldPadState & BTN_START)){//the user made a selection
    a0aa:	93 ff       	sbrs	r25, 3
    a0ac:	2c c4       	rjmp	.+2136   	; 0xa906 <main+0xc68>
    a0ae:	af 81       	ldd	r26, Y+7	; 0x07
    a0b0:	b8 85       	ldd	r27, Y+8	; 0x08
    a0b2:	8c 91       	ld	r24, X
    a0b4:	83 fd       	sbrc	r24, 3
    a0b6:	27 c4       	rjmp	.+2126   	; 0xa906 <main+0xc68>
					if(p[i].sub_state == SUBSTATE_PAUSE_MENU_BACK)
    a0b8:	21 30       	cpi	r18, 0x01	; 1
    a0ba:	09 f0       	breq	.+2      	; 0xa0be <main+0x420>
    a0bc:	1a ce       	rjmp	.-972    	; 0x9cf2 <main+0x54>
						p[i].sub_state = 0;
    a0be:	f7 01       	movw	r30, r14
    a0c0:	15 82       	std	Z+5, r1	; 0x05
    a0c2:	21 c4       	rjmp	.+2114   	; 0xa906 <main+0xc68>
						return 1;//end logic and return to title screen
				}
				continue;
			}
			
			if(p[i].state == STATE_SPAWN_BLOCKS){//possible transitions to: STATE_LOST_GAME, STATE_MOVING
    a0c4:	d7 01       	movw	r26, r14
    a0c6:	14 96       	adiw	r26, 0x04	; 4
    a0c8:	8c 91       	ld	r24, X
    a0ca:	14 97       	sbiw	r26, 0x04	; 4
    a0cc:	8b 30       	cpi	r24, 0x0B	; 11
    a0ce:	e9 f4       	brne	.+58     	; 0xa10a <main+0x46c>
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				p[i].piece_count++;
    a0d0:	58 96       	adiw	r26, 0x18	; 24
    a0d2:	8c 91       	ld	r24, X
    a0d4:	58 97       	sbiw	r26, 0x18	; 24
    a0d6:	8f 5f       	subi	r24, 0xFF	; 255
    a0d8:	58 96       	adiw	r26, 0x18	; 24
    a0da:	8c 93       	st	X, r24
				if(!(p[i].piece_count&1))
    a0dc:	80 fd       	sbrc	r24, 0
    a0de:	03 c0       	rjmp	.+6      	; 0xa0e6 <main+0x448>
					AddGarbageLine(i);
    a0e0:	84 2d       	mov	r24, r4
    a0e2:	0e 94 9b 4b 	call	0x9736	; 0x9736 <AddGarbageLine>
				if(p[i].well[WELL_WIDTH+2] || p[i].well[WELL_WIDTH+3]){//player loses
    a0e6:	f7 01       	movw	r30, r14
    a0e8:	82 a1       	ldd	r24, Z+34	; 0x22
    a0ea:	88 23       	and	r24, r24
    a0ec:	19 f4       	brne	.+6      	; 0xa0f4 <main+0x456>
    a0ee:	83 a1       	ldd	r24, Z+35	; 0x23
    a0f0:	88 23       	and	r24, r24
    a0f2:	31 f0       	breq	.+12     	; 0xa100 <main+0x462>
					p[i].state = STATE_LOST_GAME;
    a0f4:	8a e0       	ldi	r24, 0x0A	; 10
    a0f6:	d7 01       	movw	r26, r14
    a0f8:	14 96       	adiw	r26, 0x04	; 4
    a0fa:	8c 93       	st	X, r24
    a0fc:	14 97       	sbiw	r26, 0x04	; 4
    a0fe:	83 c0       	rjmp	.+262    	; 0xa206 <main+0x568>
					p[i].state_count = 0;
				}else{
					SpawnNewPiece(i);
    a100:	84 2d       	mov	r24, r4
    a102:	0e 94 88 49 	call	0x9310	; 0x9310 <SpawnNewPiece>
					p[i].state = STATE_MOVING;
    a106:	8c e0       	ldi	r24, 0x0C	; 12
    a108:	58 c0       	rjmp	.+176    	; 0xa1ba <main+0x51c>
				}
				//goto LOGIC_TOP;//this state does not last a whole tick, but it is easier to break it up into more states instead of inline...yes I believe goto makes *some* things easier to understand!

			}else if(p[i].state == STATE_SCORING){//possible transitions to: STATE_SCORE_FLASHING, STATE_CHAIN_END, STATE_GARBAGE
    a10a:	8d 30       	cpi	r24, 0x0D	; 13
    a10c:	09 f0       	breq	.+2      	; 0xa110 <main+0x472>
    a10e:	57 c0       	rjmp	.+174    	; 0xa1be <main+0x520>
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

				p[i].state_count = 0;
    a110:	d7 01       	movw	r26, r14
    a112:	16 96       	adiw	r26, 0x06	; 6
    a114:	1c 92       	st	X, r1
				if(!ProcessScoring(i)){//no score happened
    a116:	84 2d       	mov	r24, r4
    a118:	0e 94 dd 49 	call	0x93ba	; 0x93ba <ProcessScoring>
    a11c:	88 23       	and	r24, r24
    a11e:	91 f5       	brne	.+100    	; 0xa184 <main+0x4e6>
					if(!p[i].added_chain && p[i].chain >= 2)
    a120:	f7 01       	movw	r30, r14
    a122:	91 8d       	ldd	r25, Z+25	; 0x19
    a124:	99 23       	and	r25, r25
    a126:	31 f4       	brne	.+12     	; 0xa134 <main+0x496>
    a128:	86 85       	ldd	r24, Z+14	; 0x0e
    a12a:	82 30       	cpi	r24, 0x02	; 2
    a12c:	18 f0       	brcs	.+6      	; 0xa134 <main+0x496>
						p[i].state = STATE_CHAIN_END;//the end of the player controlled chain, now drop stars until scores stop happening
    a12e:	80 e1       	ldi	r24, 0x10	; 16
    a130:	84 83       	std	Z+4, r24	; 0x04
    a132:	e9 c3       	rjmp	.+2002   	; 0xa906 <main+0xc68>
					else if(p[i].chain >= 2 && p[i].added_chain){
    a134:	d7 01       	movw	r26, r14
    a136:	1e 96       	adiw	r26, 0x0e	; 14
    a138:	8c 91       	ld	r24, X
    a13a:	1e 97       	sbiw	r26, 0x0e	; 14
    a13c:	82 30       	cpi	r24, 0x02	; 2
    a13e:	e0 f0       	brcs	.+56     	; 0xa178 <main+0x4da>
    a140:	99 23       	and	r25, r25
    a142:	d1 f0       	breq	.+52     	; 0xa178 <main+0x4da>
						p[i].state = STATE_ADDED_CHAIN_END;//last star drop didn't score. this state exists only to escap the loop!
    a144:	81 e1       	ldi	r24, 0x11	; 17
    a146:	14 96       	adiw	r26, 0x04	; 4
    a148:	8c 93       	st	X, r24
	ClearScoredBlocks(i);//this is necessary to eliminate any stars that fell
    a14a:	84 2d       	mov	r24, r4
    a14c:	0e 94 f8 4a 	call	0x95f0	; 0x95f0 <ClearScoredBlocks>
	p[!i].total_garbage_rx += p[i].chain-1;
    a150:	02 9d       	mul	r16, r2
    a152:	f0 01       	movw	r30, r0
    a154:	03 9d       	mul	r16, r3
    a156:	f0 0d       	add	r31, r0
    a158:	12 9d       	mul	r17, r2
    a15a:	f0 0d       	add	r31, r0
    a15c:	11 24       	eor	r1, r1
    a15e:	e8 58       	subi	r30, 0x88	; 136
    a160:	f2 4f       	sbci	r31, 0xF2	; 242
    a162:	84 89       	ldd	r24, Z+20	; 0x14
    a164:	95 89       	ldd	r25, Z+21	; 0x15
    a166:	01 97       	sbiw	r24, 0x01	; 1
    a168:	d7 01       	movw	r26, r14
    a16a:	1e 96       	adiw	r26, 0x0e	; 14
    a16c:	2c 91       	ld	r18, X
    a16e:	82 0f       	add	r24, r18
    a170:	91 1d       	adc	r25, r1
    a172:	95 8b       	std	Z+21, r25	; 0x15
    a174:	84 8b       	std	Z+20, r24	; 0x14
    a176:	c7 c3       	rjmp	.+1934   	; 0xa906 <main+0xc68>
					}else{//no chain
						p[i].state = STATE_GARBAGE;
    a178:	84 e1       	ldi	r24, 0x14	; 20
    a17a:	f7 01       	movw	r30, r14
    a17c:	84 83       	std	Z+4, r24	; 0x04
						p[i].chain = 0;
    a17e:	16 86       	std	Z+14, r1	; 0x0e
						p[i].added_chain = 0;
    a180:	11 8e       	std	Z+25, r1	; 0x19
    a182:	c1 c3       	rjmp	.+1922   	; 0xa906 <main+0xc68>
					}
				}else{//a score did happen
					p[i].chain++;
    a184:	d7 01       	movw	r26, r14
    a186:	1e 96       	adiw	r26, 0x0e	; 14
    a188:	8c 91       	ld	r24, X
    a18a:	1e 97       	sbiw	r26, 0x0e	; 14
    a18c:	8f 5f       	subi	r24, 0xFF	; 255
    a18e:	1e 96       	adiw	r26, 0x0e	; 14
    a190:	8c 93       	st	X, r24
    a192:	1e 97       	sbiw	r26, 0x0e	; 14
					p[i].total_stars += p[i].iteration_stars;
    a194:	1f 96       	adiw	r26, 0x0f	; 15
    a196:	2c 91       	ld	r18, X
    a198:	1f 97       	sbiw	r26, 0x0f	; 15
    a19a:	50 96       	adiw	r26, 0x10	; 16
    a19c:	8d 91       	ld	r24, X+
    a19e:	9c 91       	ld	r25, X
    a1a0:	51 97       	sbiw	r26, 0x11	; 17
    a1a2:	82 0f       	add	r24, r18
    a1a4:	91 1d       	adc	r25, r1
    a1a6:	51 96       	adiw	r26, 0x11	; 17
    a1a8:	9c 93       	st	X, r25
    a1aa:	8e 93       	st	-X, r24
    a1ac:	50 97       	sbiw	r26, 0x10	; 16
	for(uint16_t i=0;i<VRAM_SIZE;i++)
		vram[i] = t;
}

void AS_TriggerFx(uint8_t patch){//use the 5th channel exclusively to allow music(uses 1-4) to be uninterrupted
TriggerFx(patch,255,1);return;
    a1ae:	81 e2       	ldi	r24, 0x21	; 33
    a1b0:	6f ef       	ldi	r22, 0xFF	; 255
    a1b2:	41 e0       	ldi	r20, 0x01	; 1
    a1b4:	0e 94 0f 3f 	call	0x7e1e	; 0x7e1e <TriggerFx>
					}
				}else{//a score did happen
					p[i].chain++;
					p[i].total_stars += p[i].iteration_stars;
					AS_TriggerFx(33);
					p[i].state = STATE_SCORE_FLASHING;
    a1b8:	8e e0       	ldi	r24, 0x0E	; 14
    a1ba:	f7 01       	movw	r30, r14
    a1bc:	b9 cf       	rjmp	.-142    	; 0xa130 <main+0x492>
				}
		
			}else if(p[i].state == STATE_SCORE_FLASHING){//possible transitions to: STATE_BOMB, STATE_GRAVITY
    a1be:	8e 30       	cpi	r24, 0x0E	; 14
    a1c0:	29 f5       	brne	.+74     	; 0xa20c <main+0x56e>
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

				if(++p[i].state_count < 48){
    a1c2:	d7 01       	movw	r26, r14
    a1c4:	16 96       	adiw	r26, 0x06	; 6
    a1c6:	8c 91       	ld	r24, X
    a1c8:	16 97       	sbiw	r26, 0x06	; 6
    a1ca:	8f 5f       	subi	r24, 0xFF	; 255
    a1cc:	16 96       	adiw	r26, 0x06	; 6
    a1ce:	8c 93       	st	X, r24
    a1d0:	80 33       	cpi	r24, 0x30	; 48
    a1d2:	50 f4       	brcc	.+20     	; 0xa1e8 <main+0x54a>
					if(p[i].state_count&4)
    a1d4:	82 ff       	sbrs	r24, 2
    a1d6:	04 c0       	rjmp	.+8      	; 0xa1e0 <main+0x542>
						UndrawScored(i);
    a1d8:	84 2d       	mov	r24, r4
    a1da:	0e 94 6a 4d 	call	0x9ad4	; 0x9ad4 <UndrawScored>
    a1de:	93 c3       	rjmp	.+1830   	; 0xa906 <main+0xc68>
					else
						DrawScored(i);
    a1e0:	84 2d       	mov	r24, r4
    a1e2:	0e 94 2d 4d 	call	0x9a5a	; 0x9a5a <DrawScored>
    a1e6:	8f c3       	rjmp	.+1822   	; 0xa906 <main+0xc68>
				}else{//done flashing
					/*uint8_t bombs_cleared = */ClearScoredBlocks(i);//returns >0 if a bomb was cleared
    a1e8:	84 2d       	mov	r24, r4
    a1ea:	0e 94 f8 4a 	call	0x95f0	; 0x95f0 <ClearScoredBlocks>
					if(false){//bombs_cleared){
						p[i].state = STATE_BOMB;
						p[i].state_count = 0;
					}else{//no bombs, apply gravity to fill in any newly opened spaces
						if(p[i].added_chain)
    a1ee:	f7 01       	movw	r30, r14
    a1f0:	81 8d       	ldd	r24, Z+25	; 0x19
    a1f2:	88 23       	and	r24, r24
    a1f4:	19 f0       	breq	.+6      	; 0xa1fc <main+0x55e>
							p[i].state = STATE_CHAIN_END;//drop more stars
    a1f6:	80 e1       	ldi	r24, 0x10	; 16
    a1f8:	84 83       	std	Z+4, r24	; 0x04
    a1fa:	04 c0       	rjmp	.+8      	; 0xa204 <main+0x566>
						else
							p[i].state = STATE_GRAVITY;
    a1fc:	ef e0       	ldi	r30, 0x0F	; 15
    a1fe:	d7 01       	movw	r26, r14
    a200:	14 96       	adiw	r26, 0x04	; 4
    a202:	ec 93       	st	X, r30
						p[i].state_count = 0;
    a204:	d7 01       	movw	r26, r14
    a206:	16 96       	adiw	r26, 0x06	; 6
    a208:	1c 92       	st	X, r1
    a20a:	7d c3       	rjmp	.+1786   	; 0xa906 <main+0xc68>
					}
				}
				
			}else if(p[i].state == STATE_GRAVITY){//possible transitions to: STATE_SCORING
    a20c:	8f 30       	cpi	r24, 0x0F	; 15
    a20e:	79 f4       	brne	.+30     	; 0xa22e <main+0x590>
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				
				if(p[i].state_count < 5+3){//slow gravity down a bit
    a210:	f7 01       	movw	r30, r14
    a212:	86 81       	ldd	r24, Z+6	; 0x06
    a214:	88 30       	cpi	r24, 0x08	; 8
    a216:	18 f4       	brcc	.+6      	; 0xa21e <main+0x580>
					p[i].state_count++;
    a218:	8f 5f       	subi	r24, 0xFF	; 255
    a21a:	86 83       	std	Z+6, r24	; 0x06
    a21c:	74 c3       	rjmp	.+1768   	; 0xa906 <main+0xc68>
					continue;
				}
				if(!ProcessGravity(i)){
    a21e:	84 2d       	mov	r24, r4
    a220:	0e 94 35 49 	call	0x926a	; 0x926a <ProcessGravity>
    a224:	88 23       	and	r24, r24
    a226:	09 f0       	breq	.+2      	; 0xa22a <main+0x58c>
    a228:	6e c3       	rjmp	.+1756   	; 0xa906 <main+0xc68>
					p[i].state = STATE_SCORING;
    a22a:	ed e0       	ldi	r30, 0x0D	; 13
    a22c:	b3 c2       	rjmp	.+1382   	; 0xa794 <main+0xaf6>
					p[i].state_count = 0;
				}//else continue processing gravity until nothing falls

			}else if(p[i].state == STATE_MOVING){//possible transitions to: STATE_SET_BLOCKS
    a22e:	8c 30       	cpi	r24, 0x0C	; 12
    a230:	09 f0       	breq	.+2      	; 0xa234 <main+0x596>
    a232:	7f c2       	rjmp	.+1278   	; 0xa732 <main+0xa94>
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

				//p[i].blocks[0] |= BLOCK_RED;
				//first blank out the block from last frame, in case it moves due to rotation or falling(avoid repeating code, same cycles in worst case)
				uint8_t half_step = p[i].blocks[0] & HALFSTEP;//DrawBlock() always takes into account HALFSTEP(which would draw 1 tile lower), stored in the tile value itself(bitwise). Passing 0(to blank) needs special consideration over the actual block value.
    a234:	d7 01       	movw	r26, r14
    a236:	1a 96       	adiw	r26, 0x0a	; 10
    a238:	ac 90       	ld	r10, X
    a23a:	b0 e2       	ldi	r27, 0x20	; 32
    a23c:	ab 22       	and	r10, r27
				int8_t xo = (p[i].x<<1)+(i?15:2);
    a23e:	f7 01       	movw	r30, r14
    a240:	17 81       	ldd	r17, Z+7	; 0x07
    a242:	44 20       	and	r4, r4
    a244:	11 f0       	breq	.+4      	; 0xa24a <main+0x5ac>
    a246:	8f e0       	ldi	r24, 0x0F	; 15
    a248:	01 c0       	rjmp	.+2      	; 0xa24c <main+0x5ae>
    a24a:	82 e0       	ldi	r24, 0x02	; 2
    a24c:	11 0f       	add	r17, r17
    a24e:	18 0f       	add	r17, r24
				int8_t yo = (p[i].y<<1);
    a250:	d7 01       	movw	r26, r14
    a252:	18 96       	adiw	r26, 0x08	; 8
    a254:	6c 91       	ld	r22, X
    a256:	70 e0       	ldi	r23, 0x00	; 0
    a258:	66 0f       	add	r22, r22
    a25a:	77 1f       	adc	r23, r23
    a25c:	06 2f       	mov	r16, r22
				DrawBlock(xo,yo,0|half_step);//blank out "planet block", taking HALFSTEP of piece into account
    a25e:	81 2f       	mov	r24, r17
    a260:	4a 2d       	mov	r20, r10
    a262:	0e 94 ed 48 	call	0x91da	; 0x91da <DrawBlock>
				DrawBlock(xo+pgm_read_byte(&orbital_vpos_lookup[(p[i].r<<1)+0]),yo+pgm_read_byte(&orbital_vpos_lookup[(p[i].r<<1)+1]),0|half_step);//blank out "orbital block"
    a266:	d7 01       	movw	r26, r14
    a268:	19 96       	adiw	r26, 0x09	; 9
    a26a:	ec 91       	ld	r30, X
    a26c:	2e 2f       	mov	r18, r30
    a26e:	30 e0       	ldi	r19, 0x00	; 0
    a270:	22 0f       	add	r18, r18
    a272:	33 1f       	adc	r19, r19
    a274:	c9 01       	movw	r24, r18
    a276:	8f 59       	subi	r24, 0x9F	; 159
    a278:	97 49       	sbci	r25, 0x97	; 151
    a27a:	fc 01       	movw	r30, r24
    a27c:	84 91       	lpm	r24, Z+
    a27e:	2e 59       	subi	r18, 0x9E	; 158
    a280:	37 49       	sbci	r19, 0x97	; 151
    a282:	f9 01       	movw	r30, r18
    a284:	94 91       	lpm	r25, Z+
    a286:	90 0f       	add	r25, r16
    a288:	81 0f       	add	r24, r17
    a28a:	69 2f       	mov	r22, r25
    a28c:	4a 2d       	mov	r20, r10
    a28e:	0e 94 ed 48 	call	0x91da	; 0x91da <DrawBlock>

				int8_t planet_grid_off = (p[i].y*WELL_WIDTH)+p[i].x;//grid position of the planet piece
    a292:	d7 01       	movw	r26, r14
    a294:	17 96       	adiw	r26, 0x07	; 7
    a296:	6c 91       	ld	r22, X
    a298:	17 97       	sbiw	r26, 0x07	; 7
    a29a:	18 96       	adiw	r26, 0x08	; 8
    a29c:	8c 91       	ld	r24, X
    a29e:	b6 e0       	ldi	r27, 0x06	; 6
    a2a0:	8b 9f       	mul	r24, r27
    a2a2:	c0 01       	movw	r24, r0
    a2a4:	11 24       	eor	r1, r1
    a2a6:	b6 2e       	mov	r11, r22
    a2a8:	b8 0e       	add	r11, r24
				int8_t orbital_grid_off = planet_grid_off+pgm_read_byte(&orbital_grid_lookup[(p[i].r)]);//grid position of the piece that orbits/rotates around
    a2aa:	f7 01       	movw	r30, r14
    a2ac:	71 85       	ldd	r23, Z+9	; 0x09
    a2ae:	e7 2f       	mov	r30, r23
    a2b0:	f0 e0       	ldi	r31, 0x00	; 0
    a2b2:	e7 59       	subi	r30, 0x97	; 151
    a2b4:	f7 49       	sbci	r31, 0x97	; 151
    a2b6:	c4 90       	lpm	r12, Z+
    a2b8:	cb 0c       	add	r12, r11

				
				if((p[i].padState & (BTN_LEFT|BTN_RIGHT)) && !(p[i].oldPadState & (BTN_LEFT|BTN_RIGHT))){
    a2ba:	a9 85       	ldd	r26, Y+9	; 0x09
    a2bc:	ba 85       	ldd	r27, Y+10	; 0x0a
    a2be:	8c 91       	ld	r24, X
    a2c0:	98 2f       	mov	r25, r24
    a2c2:	80 7c       	andi	r24, 0xC0	; 192
    a2c4:	09 f4       	brne	.+2      	; 0xa2c8 <main+0x62a>
    a2c6:	94 c0       	rjmp	.+296    	; 0xa3f0 <main+0x752>
    a2c8:	ef 81       	ldd	r30, Y+7	; 0x07
    a2ca:	f8 85       	ldd	r31, Y+8	; 0x08
    a2cc:	80 81       	ld	r24, Z
    a2ce:	80 7c       	andi	r24, 0xC0	; 192
    a2d0:	09 f0       	breq	.+2      	; 0xa2d4 <main+0x636>
    a2d2:	8e c0       	rjmp	.+284    	; 0xa3f0 <main+0x752>

						if((p[i].padState & BTN_LEFT)){
    a2d4:	96 ff       	sbrs	r25, 6
    a2d6:	49 c0       	rjmp	.+146    	; 0xa36a <main+0x6cc>
							if(p[i].x && !p[i].well[planet_grid_off-1] && !p[i].well[orbital_grid_off-1] && ((p[i].r != 3) || (p[i].x > 1))){//would either block move into something, or the edge?
    a2d8:	66 23       	and	r22, r22
    a2da:	09 f4       	brne	.+2      	; 0xa2de <main+0x640>
    a2dc:	89 c0       	rjmp	.+274    	; 0xa3f0 <main+0x752>
    a2de:	4b 2d       	mov	r20, r11
    a2e0:	55 27       	eor	r21, r21
    a2e2:	47 fd       	sbrc	r20, 7
    a2e4:	50 95       	com	r21
    a2e6:	62 9c       	mul	r6, r2
    a2e8:	90 01       	movw	r18, r0
    a2ea:	63 9c       	mul	r6, r3
    a2ec:	30 0d       	add	r19, r0
    a2ee:	72 9c       	mul	r7, r2
    a2f0:	30 0d       	add	r19, r0
    a2f2:	11 24       	eor	r1, r1
    a2f4:	28 58       	subi	r18, 0x88	; 136
    a2f6:	32 4f       	sbci	r19, 0xF2	; 242
    a2f8:	f9 01       	movw	r30, r18
    a2fa:	e4 0f       	add	r30, r20
    a2fc:	f5 1f       	adc	r31, r21
    a2fe:	81 8d       	ldd	r24, Z+25	; 0x19
    a300:	88 23       	and	r24, r24
    a302:	09 f0       	breq	.+2      	; 0xa306 <main+0x668>
    a304:	75 c0       	rjmp	.+234    	; 0xa3f0 <main+0x752>
    a306:	ac 2d       	mov	r26, r12
    a308:	bb 27       	eor	r27, r27
    a30a:	a7 fd       	sbrc	r26, 7
    a30c:	b0 95       	com	r27
    a30e:	f9 01       	movw	r30, r18
    a310:	ea 0f       	add	r30, r26
    a312:	fb 1f       	adc	r31, r27
    a314:	81 8d       	ldd	r24, Z+25	; 0x19
    a316:	88 23       	and	r24, r24
    a318:	09 f0       	breq	.+2      	; 0xa31c <main+0x67e>
    a31a:	6a c0       	rjmp	.+212    	; 0xa3f0 <main+0x752>
    a31c:	73 30       	cpi	r23, 0x03	; 3
    a31e:	19 f4       	brne	.+6      	; 0xa326 <main+0x688>
    a320:	62 30       	cpi	r22, 0x02	; 2
    a322:	08 f4       	brcc	.+2      	; 0xa326 <main+0x688>
    a324:	65 c0       	rjmp	.+202    	; 0xa3f0 <main+0x752>
								if(!(p[i].blocks[0] & HALFSTEP) || (!p[i].well[planet_grid_off+WELL_WIDTH-1] && !p[i].well[orbital_grid_off+WELL_WIDTH-1])){//are we halfway between 2 grid spaces vertically? If so are we overlapping the top of a block?
    a326:	f7 01       	movw	r30, r14
    a328:	82 85       	ldd	r24, Z+10	; 0x0a
    a32a:	85 ff       	sbrs	r24, 5
    a32c:	17 c0       	rjmp	.+46     	; 0xa35c <main+0x6be>
    a32e:	62 9c       	mul	r6, r2
    a330:	90 01       	movw	r18, r0
    a332:	63 9c       	mul	r6, r3
    a334:	30 0d       	add	r19, r0
    a336:	72 9c       	mul	r7, r2
    a338:	30 0d       	add	r19, r0
    a33a:	11 24       	eor	r1, r1
    a33c:	28 58       	subi	r18, 0x88	; 136
    a33e:	32 4f       	sbci	r19, 0xF2	; 242
    a340:	42 0f       	add	r20, r18
    a342:	53 1f       	adc	r21, r19
    a344:	fa 01       	movw	r30, r20
    a346:	87 8d       	ldd	r24, Z+31	; 0x1f
    a348:	88 23       	and	r24, r24
    a34a:	09 f0       	breq	.+2      	; 0xa34e <main+0x6b0>
    a34c:	51 c0       	rjmp	.+162    	; 0xa3f0 <main+0x752>
    a34e:	a2 0f       	add	r26, r18
    a350:	b3 1f       	adc	r27, r19
    a352:	5f 96       	adiw	r26, 0x1f	; 31
    a354:	8c 91       	ld	r24, X
    a356:	88 23       	and	r24, r24
    a358:	09 f0       	breq	.+2      	; 0xa35c <main+0x6be>
    a35a:	4a c0       	rjmp	.+148    	; 0xa3f0 <main+0x752>
									p[i].x--;//no, then do it
    a35c:	61 50       	subi	r22, 0x01	; 1
    a35e:	d7 01       	movw	r26, r14
    a360:	17 96       	adiw	r26, 0x07	; 7
    a362:	6c 93       	st	X, r22
									planet_grid_off--;
    a364:	ba 94       	dec	r11
									orbital_grid_off--;
    a366:	ca 94       	dec	r12
    a368:	43 c0       	rjmp	.+134    	; 0xa3f0 <main+0x752>
								}
							}
						}else if(p[i].x < WELL_WIDTH-1){//BTN_RIGHT was pushed, would it move into the edge?
    a36a:	65 30       	cpi	r22, 0x05	; 5
    a36c:	08 f0       	brcs	.+2      	; 0xa370 <main+0x6d2>
    a36e:	40 c0       	rjmp	.+128    	; 0xa3f0 <main+0x752>
							if(!p[i].well[planet_grid_off+1] && !p[i].well[orbital_grid_off+1] && ((p[i].r != 1) || (p[i].x < WELL_WIDTH-2))){//would either block move into something?
    a370:	4b 2d       	mov	r20, r11
    a372:	55 27       	eor	r21, r21
    a374:	47 fd       	sbrc	r20, 7
    a376:	50 95       	com	r21
    a378:	62 9c       	mul	r6, r2
    a37a:	90 01       	movw	r18, r0
    a37c:	63 9c       	mul	r6, r3
    a37e:	30 0d       	add	r19, r0
    a380:	72 9c       	mul	r7, r2
    a382:	30 0d       	add	r19, r0
    a384:	11 24       	eor	r1, r1
    a386:	28 58       	subi	r18, 0x88	; 136
    a388:	32 4f       	sbci	r19, 0xF2	; 242
    a38a:	f9 01       	movw	r30, r18
    a38c:	e4 0f       	add	r30, r20
    a38e:	f5 1f       	adc	r31, r21
    a390:	83 8d       	ldd	r24, Z+27	; 0x1b
    a392:	88 23       	and	r24, r24
    a394:	69 f5       	brne	.+90     	; 0xa3f0 <main+0x752>
    a396:	ac 2d       	mov	r26, r12
    a398:	bb 27       	eor	r27, r27
    a39a:	a7 fd       	sbrc	r26, 7
    a39c:	b0 95       	com	r27
    a39e:	f9 01       	movw	r30, r18
    a3a0:	ea 0f       	add	r30, r26
    a3a2:	fb 1f       	adc	r31, r27
    a3a4:	83 8d       	ldd	r24, Z+27	; 0x1b
    a3a6:	88 23       	and	r24, r24
    a3a8:	19 f5       	brne	.+70     	; 0xa3f0 <main+0x752>
    a3aa:	71 30       	cpi	r23, 0x01	; 1
    a3ac:	11 f4       	brne	.+4      	; 0xa3b2 <main+0x714>
    a3ae:	64 30       	cpi	r22, 0x04	; 4
    a3b0:	f9 f0       	breq	.+62     	; 0xa3f0 <main+0x752>
								if(!(p[i].blocks[0] & HALFSTEP) || (!p[i].well[planet_grid_off+WELL_WIDTH+1] && !p[i].well[orbital_grid_off+WELL_WIDTH+1])){//are we half way between 2 grid spaces vertically? If so are we overlapping the top of a block?
    a3b2:	f7 01       	movw	r30, r14
    a3b4:	82 85       	ldd	r24, Z+10	; 0x0a
    a3b6:	85 ff       	sbrs	r24, 5
    a3b8:	15 c0       	rjmp	.+42     	; 0xa3e4 <main+0x746>
    a3ba:	62 9c       	mul	r6, r2
    a3bc:	90 01       	movw	r18, r0
    a3be:	63 9c       	mul	r6, r3
    a3c0:	30 0d       	add	r19, r0
    a3c2:	72 9c       	mul	r7, r2
    a3c4:	30 0d       	add	r19, r0
    a3c6:	11 24       	eor	r1, r1
    a3c8:	28 58       	subi	r18, 0x88	; 136
    a3ca:	32 4f       	sbci	r19, 0xF2	; 242
    a3cc:	42 0f       	add	r20, r18
    a3ce:	53 1f       	adc	r21, r19
    a3d0:	fa 01       	movw	r30, r20
    a3d2:	81 a1       	ldd	r24, Z+33	; 0x21
    a3d4:	88 23       	and	r24, r24
    a3d6:	61 f4       	brne	.+24     	; 0xa3f0 <main+0x752>
    a3d8:	a2 0f       	add	r26, r18
    a3da:	b3 1f       	adc	r27, r19
    a3dc:	91 96       	adiw	r26, 0x21	; 33
    a3de:	8c 91       	ld	r24, X
    a3e0:	88 23       	and	r24, r24
    a3e2:	31 f4       	brne	.+12     	; 0xa3f0 <main+0x752>
									p[i].x++;
    a3e4:	6f 5f       	subi	r22, 0xFF	; 255
    a3e6:	d7 01       	movw	r26, r14
    a3e8:	17 96       	adiw	r26, 0x07	; 7
    a3ea:	6c 93       	st	X, r22
									planet_grid_off++;
    a3ec:	b3 94       	inc	r11
									orbital_grid_off++;
    a3ee:	c3 94       	inc	r12
								}
							}
						}
				}
			
				if((p[i].padState & BTN_DOWN) && p[i].state_count > 1)//fall fast
    a3f0:	e9 85       	ldd	r30, Y+9	; 0x09
    a3f2:	fa 85       	ldd	r31, Y+10	; 0x0a
    a3f4:	80 81       	ld	r24, Z
    a3f6:	85 ff       	sbrs	r24, 5
    a3f8:	09 c0       	rjmp	.+18     	; 0xa40c <main+0x76e>
    a3fa:	d7 01       	movw	r26, r14
    a3fc:	16 96       	adiw	r26, 0x06	; 6
    a3fe:	8c 91       	ld	r24, X
    a400:	16 97       	sbiw	r26, 0x06	; 6
    a402:	82 30       	cpi	r24, 0x02	; 2
    a404:	18 f0       	brcs	.+6      	; 0xa40c <main+0x76e>
					p[i].state_count = 1;
    a406:	e1 e0       	ldi	r30, 0x01	; 1
    a408:	16 96       	adiw	r26, 0x06	; 6
    a40a:	ec 93       	st	X, r30
				else if((p[i].padState & BTN_UP)){//instant drop
				
				}

				uint8_t rr = 255;
				if((p[i].padState & BTN_Y) && !(p[i].oldPadState & BTN_Y)){//try to rotate left(counterclockwise)
    a40c:	a9 85       	ldd	r26, Y+9	; 0x09
    a40e:	ba 85       	ldd	r27, Y+10	; 0x0a
    a410:	8c 91       	ld	r24, X
    a412:	98 2f       	mov	r25, r24
    a414:	81 ff       	sbrs	r24, 1
    a416:	0d c0       	rjmp	.+26     	; 0xa432 <main+0x794>
    a418:	ef 81       	ldd	r30, Y+7	; 0x07
    a41a:	f8 85       	ldd	r31, Y+8	; 0x08
    a41c:	80 81       	ld	r24, Z
    a41e:	81 fd       	sbrc	r24, 1
    a420:	08 c0       	rjmp	.+16     	; 0xa432 <main+0x794>
					rr = p[i].r-1;
    a422:	d7 01       	movw	r26, r14
    a424:	19 96       	adiw	r26, 0x09	; 9
    a426:	1c 91       	ld	r17, X
    a428:	11 50       	subi	r17, 0x01	; 1
					if(rr > 3)//roll over
    a42a:	14 30       	cpi	r17, 0x04	; 4
    a42c:	80 f0       	brcs	.+32     	; 0xa44e <main+0x7b0>
    a42e:	13 e0       	ldi	r17, 0x03	; 3
    a430:	0e c0       	rjmp	.+28     	; 0xa44e <main+0x7b0>
						rr = 3;
				}else if((p[i].padState & BTN_B) && !(p[i].oldPadState & BTN_B)){//try to rotate right(clockwise)
    a432:	90 ff       	sbrs	r25, 0
    a434:	03 c1       	rjmp	.+518    	; 0xa63c <main+0x99e>
    a436:	ef 81       	ldd	r30, Y+7	; 0x07
    a438:	f8 85       	ldd	r31, Y+8	; 0x08
    a43a:	80 81       	ld	r24, Z
    a43c:	80 fd       	sbrc	r24, 0
    a43e:	fe c0       	rjmp	.+508    	; 0xa63c <main+0x99e>
					rr = p[i].r+1;
    a440:	d7 01       	movw	r26, r14
    a442:	19 96       	adiw	r26, 0x09	; 9
    a444:	1c 91       	ld	r17, X
    a446:	1f 5f       	subi	r17, 0xFF	; 255
					if(rr > 3)
    a448:	14 30       	cpi	r17, 0x04	; 4
    a44a:	08 f0       	brcs	.+2      	; 0xa44e <main+0x7b0>
    a44c:	10 e0       	ldi	r17, 0x00	; 0
				}
				
				if(rr != 255){//some rotation was requested, see if it is possible
					//we already know for certain that, in it's unmodified position, both blocks are in free spaces

					int8_t pgo = (p[i].y*WELL_WIDTH)+p[i].x;//grid position of the planet piece
    a44e:	f7 01       	movw	r30, r14
    a450:	50 85       	ldd	r21, Z+8	; 0x08
    a452:	47 81       	ldd	r20, Z+7	; 0x07
    a454:	f6 e0       	ldi	r31, 0x06	; 6
    a456:	5f 9f       	mul	r21, r31
    a458:	c0 01       	movw	r24, r0
    a45a:	11 24       	eor	r1, r1
    a45c:	04 2f       	mov	r16, r20
    a45e:	08 0f       	add	r16, r24
					int8_t ogo = pgo+pgm_read_byte(&orbital_grid_lookup[rr]);//grid position of the piece that orbits/rotates around
    a460:	e1 2f       	mov	r30, r17
    a462:	f0 e0       	ldi	r31, 0x00	; 0
    a464:	e7 59       	subi	r30, 0x97	; 151
    a466:	f7 49       	sbci	r31, 0x97	; 151
    a468:	d4 90       	lpm	r13, Z+
    a46a:	d0 0e       	add	r13, r16
					int8_t pgo2,ogo2;//position in case of HALFSTEP(where basically the block is overlapping 2 grid spaces vertically)
					if(p[i].blocks[0]&HALFSTEP){
    a46c:	d7 01       	movw	r26, r14
    a46e:	1a 96       	adiw	r26, 0x0a	; 10
    a470:	8c 91       	ld	r24, X
    a472:	85 fd       	sbrc	r24, 5
    a474:	02 c0       	rjmp	.+4      	; 0xa47a <main+0x7dc>
    a476:	90 2f       	mov	r25, r16
    a478:	02 c0       	rjmp	.+4      	; 0xa47e <main+0x7e0>
						pgo2 = pgo+WELL_WIDTH;
    a47a:	90 2f       	mov	r25, r16
    a47c:	9a 5f       	subi	r25, 0xFA	; 250
					}else{
						pgo2 = pgo;
						ogo2 = ogo;
					}

					if(rr == 1 && (p[i].x == WELL_WIDTH-1 || p[i].well[pgo+1] || p[i].well[pgo2+1])){//this rotation would be overlapping the well side, or another block to it's side
    a47e:	11 30       	cpi	r17, 0x01	; 1
    a480:	e1 f5       	brne	.+120    	; 0xa4fa <main+0x85c>
    a482:	45 30       	cpi	r20, 0x05	; 5
    a484:	e1 f0       	breq	.+56     	; 0xa4be <main+0x820>
    a486:	e0 2f       	mov	r30, r16
    a488:	ff 27       	eor	r31, r31
    a48a:	e7 fd       	sbrc	r30, 7
    a48c:	f0 95       	com	r31
    a48e:	62 9c       	mul	r6, r2
    a490:	90 01       	movw	r18, r0
    a492:	63 9c       	mul	r6, r3
    a494:	30 0d       	add	r19, r0
    a496:	72 9c       	mul	r7, r2
    a498:	30 0d       	add	r19, r0
    a49a:	11 24       	eor	r1, r1
    a49c:	28 58       	subi	r18, 0x88	; 136
    a49e:	32 4f       	sbci	r19, 0xF2	; 242
    a4a0:	e2 0f       	add	r30, r18
    a4a2:	f3 1f       	adc	r31, r19
    a4a4:	83 8d       	ldd	r24, Z+27	; 0x1b
    a4a6:	88 23       	and	r24, r24
    a4a8:	51 f4       	brne	.+20     	; 0xa4be <main+0x820>
    a4aa:	e9 2f       	mov	r30, r25
    a4ac:	ff 27       	eor	r31, r31
    a4ae:	e7 fd       	sbrc	r30, 7
    a4b0:	f0 95       	com	r31
    a4b2:	e2 0f       	add	r30, r18
    a4b4:	f3 1f       	adc	r31, r19
    a4b6:	83 8d       	ldd	r24, Z+27	; 0x1b
    a4b8:	88 23       	and	r24, r24
    a4ba:	09 f4       	brne	.+2      	; 0xa4be <main+0x820>
    a4bc:	9c c0       	rjmp	.+312    	; 0xa5f6 <main+0x958>
						if(!p[i].well[pgo-1] && !p[i].well[ogo-1]){//can do this rotation by moving left?
    a4be:	e0 2f       	mov	r30, r16
    a4c0:	ff 27       	eor	r31, r31
    a4c2:	e7 fd       	sbrc	r30, 7
    a4c4:	f0 95       	com	r31
    a4c6:	62 9c       	mul	r6, r2
    a4c8:	90 01       	movw	r18, r0
    a4ca:	63 9c       	mul	r6, r3
    a4cc:	30 0d       	add	r19, r0
    a4ce:	72 9c       	mul	r7, r2
    a4d0:	30 0d       	add	r19, r0
    a4d2:	11 24       	eor	r1, r1
    a4d4:	28 58       	subi	r18, 0x88	; 136
    a4d6:	32 4f       	sbci	r19, 0xF2	; 242
    a4d8:	e2 0f       	add	r30, r18
    a4da:	f3 1f       	adc	r31, r19
    a4dc:	81 8d       	ldd	r24, Z+25	; 0x19
    a4de:	88 23       	and	r24, r24
    a4e0:	71 f4       	brne	.+28     	; 0xa4fe <main+0x860>
    a4e2:	ed 2d       	mov	r30, r13
    a4e4:	ff 27       	eor	r31, r31
    a4e6:	e7 fd       	sbrc	r30, 7
    a4e8:	f0 95       	com	r31
    a4ea:	e2 0f       	add	r30, r18
    a4ec:	f3 1f       	adc	r31, r19
    a4ee:	81 8d       	ldd	r24, Z+25	; 0x19
    a4f0:	88 23       	and	r24, r24
    a4f2:	29 f4       	brne	.+10     	; 0xa4fe <main+0x860>
							pgo--;
    a4f4:	01 50       	subi	r16, 0x01	; 1
							ogo--;
    a4f6:	da 94       	dec	r13
    a4f8:	7e c0       	rjmp	.+252    	; 0xa5f6 <main+0x958>
						}else
							rr = 2;
					}
					
					if(rr == 2 && (p[i].y == WELL_HEIGHT-1 || p[i].well[pgo+WELL_WIDTH] || p[i].well[pgo2+WELL_WIDTH])){//this rotation would be overlapping the well bottom, or another block below it
    a4fa:	12 30       	cpi	r17, 0x02	; 2
    a4fc:	e9 f5       	brne	.+122    	; 0xa578 <main+0x8da>
    a4fe:	5c 30       	cpi	r21, 0x0C	; 12
    a500:	e1 f0       	breq	.+56     	; 0xa53a <main+0x89c>
    a502:	e0 2f       	mov	r30, r16
    a504:	ff 27       	eor	r31, r31
    a506:	e7 fd       	sbrc	r30, 7
    a508:	f0 95       	com	r31
    a50a:	62 9c       	mul	r6, r2
    a50c:	90 01       	movw	r18, r0
    a50e:	63 9c       	mul	r6, r3
    a510:	30 0d       	add	r19, r0
    a512:	72 9c       	mul	r7, r2
    a514:	30 0d       	add	r19, r0
    a516:	11 24       	eor	r1, r1
    a518:	28 58       	subi	r18, 0x88	; 136
    a51a:	32 4f       	sbci	r19, 0xF2	; 242
    a51c:	e2 0f       	add	r30, r18
    a51e:	f3 1f       	adc	r31, r19
    a520:	80 a1       	ldd	r24, Z+32	; 0x20
    a522:	88 23       	and	r24, r24
    a524:	51 f4       	brne	.+20     	; 0xa53a <main+0x89c>
    a526:	e9 2f       	mov	r30, r25
    a528:	ff 27       	eor	r31, r31
    a52a:	e7 fd       	sbrc	r30, 7
    a52c:	f0 95       	com	r31
    a52e:	e2 0f       	add	r30, r18
    a530:	f3 1f       	adc	r31, r19
    a532:	80 a1       	ldd	r24, Z+32	; 0x20
    a534:	88 23       	and	r24, r24
    a536:	09 f4       	brne	.+2      	; 0xa53a <main+0x89c>
    a538:	09 c2       	rjmp	.+1042   	; 0xa94c <main+0xcae>
						if(!p[i].well[pgo-WELL_WIDTH] && !p[i].well[ogo+WELL_WIDTH]){//can do this rotation by moving up?
    a53a:	e0 2f       	mov	r30, r16
    a53c:	ff 27       	eor	r31, r31
    a53e:	e7 fd       	sbrc	r30, 7
    a540:	f0 95       	com	r31
    a542:	62 9c       	mul	r6, r2
    a544:	90 01       	movw	r18, r0
    a546:	63 9c       	mul	r6, r3
    a548:	30 0d       	add	r19, r0
    a54a:	72 9c       	mul	r7, r2
    a54c:	30 0d       	add	r19, r0
    a54e:	11 24       	eor	r1, r1
    a550:	28 58       	subi	r18, 0x88	; 136
    a552:	32 4f       	sbci	r19, 0xF2	; 242
    a554:	e2 0f       	add	r30, r18
    a556:	f3 1f       	adc	r31, r19
    a558:	84 89       	ldd	r24, Z+20	; 0x14
    a55a:	88 23       	and	r24, r24
    a55c:	79 f4       	brne	.+30     	; 0xa57c <main+0x8de>
    a55e:	ed 2d       	mov	r30, r13
    a560:	ff 27       	eor	r31, r31
    a562:	e7 fd       	sbrc	r30, 7
    a564:	f0 95       	com	r31
    a566:	e2 0f       	add	r30, r18
    a568:	f3 1f       	adc	r31, r19
    a56a:	80 a1       	ldd	r24, Z+32	; 0x20
    a56c:	88 23       	and	r24, r24
    a56e:	31 f4       	brne	.+12     	; 0xa57c <main+0x8de>
							pgo -= WELL_WIDTH;
    a570:	06 50       	subi	r16, 0x06	; 6
							ogo -= WELL_WIDTH;
    a572:	ba ef       	ldi	r27, 0xFA	; 250
    a574:	db 0e       	add	r13, r27
    a576:	ea c1       	rjmp	.+980    	; 0xa94c <main+0xcae>
						}else
							rr = 3;
					
					}
					
					if(rr == 3 && (p[i].x == 0 || p[i].well[pgo-1] || p[i].well[pgo2-1])){//this rotation would be overlapping the side, or another block to the left
    a578:	13 30       	cpi	r17, 0x03	; 3
    a57a:	e9 f5       	brne	.+122    	; 0xa5f6 <main+0x958>
    a57c:	44 23       	and	r20, r20
    a57e:	d9 f0       	breq	.+54     	; 0xa5b6 <main+0x918>
    a580:	e0 2f       	mov	r30, r16
    a582:	ff 27       	eor	r31, r31
    a584:	e7 fd       	sbrc	r30, 7
    a586:	f0 95       	com	r31
    a588:	62 9c       	mul	r6, r2
    a58a:	90 01       	movw	r18, r0
    a58c:	63 9c       	mul	r6, r3
    a58e:	30 0d       	add	r19, r0
    a590:	72 9c       	mul	r7, r2
    a592:	30 0d       	add	r19, r0
    a594:	11 24       	eor	r1, r1
    a596:	28 58       	subi	r18, 0x88	; 136
    a598:	32 4f       	sbci	r19, 0xF2	; 242
    a59a:	e2 0f       	add	r30, r18
    a59c:	f3 1f       	adc	r31, r19
    a59e:	81 8d       	ldd	r24, Z+25	; 0x19
    a5a0:	88 23       	and	r24, r24
    a5a2:	49 f4       	brne	.+18     	; 0xa5b6 <main+0x918>
    a5a4:	e9 2f       	mov	r30, r25
    a5a6:	ff 27       	eor	r31, r31
    a5a8:	e7 fd       	sbrc	r30, 7
    a5aa:	f0 95       	com	r31
    a5ac:	e2 0f       	add	r30, r18
    a5ae:	f3 1f       	adc	r31, r19
    a5b0:	81 8d       	ldd	r24, Z+25	; 0x19
    a5b2:	88 23       	and	r24, r24
    a5b4:	e9 f0       	breq	.+58     	; 0xa5f0 <main+0x952>
						if(!p[i].well[pgo+1] && !p[i].well[ogo+1]){//can do this rotation by moving right?
    a5b6:	e0 2f       	mov	r30, r16
    a5b8:	ff 27       	eor	r31, r31
    a5ba:	e7 fd       	sbrc	r30, 7
    a5bc:	f0 95       	com	r31
    a5be:	62 9c       	mul	r6, r2
    a5c0:	90 01       	movw	r18, r0
    a5c2:	63 9c       	mul	r6, r3
    a5c4:	30 0d       	add	r19, r0
    a5c6:	72 9c       	mul	r7, r2
    a5c8:	30 0d       	add	r19, r0
    a5ca:	11 24       	eor	r1, r1
    a5cc:	28 58       	subi	r18, 0x88	; 136
    a5ce:	32 4f       	sbci	r19, 0xF2	; 242
    a5d0:	e2 0f       	add	r30, r18
    a5d2:	f3 1f       	adc	r31, r19
    a5d4:	83 8d       	ldd	r24, Z+27	; 0x1b
    a5d6:	88 23       	and	r24, r24
    a5d8:	69 f4       	brne	.+26     	; 0xa5f4 <main+0x956>
    a5da:	ed 2d       	mov	r30, r13
    a5dc:	ff 27       	eor	r31, r31
    a5de:	e7 fd       	sbrc	r30, 7
    a5e0:	f0 95       	com	r31
    a5e2:	e2 0f       	add	r30, r18
    a5e4:	f3 1f       	adc	r31, r19
    a5e6:	83 8d       	ldd	r24, Z+27	; 0x1b
    a5e8:	88 23       	and	r24, r24
    a5ea:	21 f4       	brne	.+8      	; 0xa5f4 <main+0x956>
							pgo++;
    a5ec:	0f 5f       	subi	r16, 0xFF	; 255
							ogo++;
    a5ee:	d3 94       	inc	r13
    a5f0:	13 e0       	ldi	r17, 0x03	; 3
    a5f2:	01 c0       	rjmp	.+2      	; 0xa5f6 <main+0x958>
    a5f4:	10 e0       	ldi	r17, 0x00	; 0
							rr = 0;//a rotation that should always be possible!
					
					}

					
					if(rr != p[i].r){//we requested a new, and valid rotation. So be it!
    a5f6:	f7 01       	movw	r30, r14
    a5f8:	81 85       	ldd	r24, Z+9	; 0x09
    a5fa:	18 17       	cp	r17, r24
    a5fc:	f9 f0       	breq	.+62     	; 0xa63c <main+0x99e>
	for(uint16_t i=0;i<VRAM_SIZE;i++)
		vram[i] = t;
}

void AS_TriggerFx(uint8_t patch){//use the 5th channel exclusively to allow music(uses 1-4) to be uninterrupted
TriggerFx(patch,255,1);return;
    a5fe:	80 e0       	ldi	r24, 0x00	; 0
    a600:	6f ef       	ldi	r22, 0xFF	; 255
    a602:	41 e0       	ldi	r20, 0x01	; 1
    a604:	0e 94 0f 3f 	call	0x7e1e	; 0x7e1e <TriggerFx>
					}

					
					if(rr != p[i].r){//we requested a new, and valid rotation. So be it!
						AS_TriggerFx(0);
						p[i].state_count += 2;//add some time...a player can stall the piece indefinitely..if they can keep up a button press rate of 30hz! Their opponent wont mind when they can't!(not good tactics in VS)
    a608:	d7 01       	movw	r26, r14
    a60a:	16 96       	adiw	r26, 0x06	; 6
    a60c:	8c 91       	ld	r24, X
    a60e:	16 97       	sbiw	r26, 0x06	; 6
    a610:	8e 5f       	subi	r24, 0xFE	; 254
    a612:	16 96       	adiw	r26, 0x06	; 6
    a614:	8c 93       	st	X, r24
    a616:	16 97       	sbiw	r26, 0x06	; 6
						p[i].x = pgo%WELL_WIDTH;//we know both blocks are in bounds
    a618:	80 2f       	mov	r24, r16
    a61a:	66 e0       	ldi	r22, 0x06	; 6
    a61c:	0e 94 75 57 	call	0xaeea	; 0xaeea <__divmodqi4>
    a620:	17 96       	adiw	r26, 0x07	; 7
    a622:	9c 93       	st	X, r25
    a624:	17 97       	sbiw	r26, 0x07	; 7
						p[i].y = pgo/WELL_WIDTH;
    a626:	80 2f       	mov	r24, r16
    a628:	66 e0       	ldi	r22, 0x06	; 6
    a62a:	0e 94 75 57 	call	0xaeea	; 0xaeea <__divmodqi4>
    a62e:	18 96       	adiw	r26, 0x08	; 8
    a630:	8c 93       	st	X, r24
    a632:	18 97       	sbiw	r26, 0x08	; 8
						p[i].r = rr;
    a634:	19 96       	adiw	r26, 0x09	; 9
    a636:	1c 93       	st	X, r17
    a638:	cd 2c       	mov	r12, r13
    a63a:	01 c0       	rjmp	.+2      	; 0xa63e <main+0x9a0>
    a63c:	0b 2d       	mov	r16, r11
						orbital_grid_off = ogo;
					}
				}
				
				
				if(!p[i].state_count){//handle piece dropping
    a63e:	f7 01       	movw	r30, r14
    a640:	86 81       	ldd	r24, Z+6	; 0x06
    a642:	88 23       	and	r24, r24
    a644:	09 f0       	breq	.+2      	; 0xa648 <main+0x9aa>
    a646:	42 c0       	rjmp	.+132    	; 0xa6cc <main+0xa2e>
					p[i].state_count = 45;
    a648:	8d e2       	ldi	r24, 0x2D	; 45
    a64a:	86 83       	std	Z+6, r24	; 0x06
				
					if(half_step){
    a64c:	aa 20       	and	r10, r10
    a64e:	59 f0       	breq	.+22     	; 0xa666 <main+0x9c8>
						//half_step = 0;
						p[i].blocks[0] ^= HALFSTEP;
    a650:	82 85       	ldd	r24, Z+10	; 0x0a
    a652:	90 e2       	ldi	r25, 0x20	; 32
    a654:	89 27       	eor	r24, r25
    a656:	82 87       	std	Z+10, r24	; 0x0a
						p[i].blocks[1] ^= HALFSTEP;
    a658:	83 85       	ldd	r24, Z+11	; 0x0b
    a65a:	89 27       	eor	r24, r25
    a65c:	83 87       	std	Z+11, r24	; 0x0b
						p[i].y++;//a half step will always pass, because the check is made before this state that there is a point to move into for each block(planet and orbital)
    a65e:	80 85       	ldd	r24, Z+8	; 0x08
    a660:	8f 5f       	subi	r24, 0xFF	; 255
    a662:	80 87       	std	Z+8, r24	; 0x08
    a664:	37 c0       	rjmp	.+110    	; 0xa6d4 <main+0xa36>
					}else{
						//we need to make sure there is a place open for the planet and orbital piece before we set the flag. Setting the flag indicates going "half into" a spot, which must be open
						if(((planet_grid_off+WELL_WIDTH) < WELL_SIZE-1) && ((orbital_grid_off+WELL_WIDTH) < WELL_SIZE-1) &&//not going outside of well boundaries?
    a666:	07 34       	cpi	r16, 0x47	; 71
    a668:	6c f5       	brge	.+90     	; 0xa6c4 <main+0xa26>
    a66a:	f6 e4       	ldi	r31, 0x46	; 70
    a66c:	fc 15       	cp	r31, r12
    a66e:	54 f1       	brlt	.+84     	; 0xa6c4 <main+0xa26>
    a670:	e0 2f       	mov	r30, r16
    a672:	ff 27       	eor	r31, r31
    a674:	e7 fd       	sbrc	r30, 7
    a676:	f0 95       	com	r31
    a678:	62 9c       	mul	r6, r2
    a67a:	90 01       	movw	r18, r0
    a67c:	63 9c       	mul	r6, r3
    a67e:	30 0d       	add	r19, r0
    a680:	72 9c       	mul	r7, r2
    a682:	30 0d       	add	r19, r0
    a684:	11 24       	eor	r1, r1
    a686:	28 58       	subi	r18, 0x88	; 136
    a688:	32 4f       	sbci	r19, 0xF2	; 242
    a68a:	e2 0f       	add	r30, r18
    a68c:	f3 1f       	adc	r31, r19
    a68e:	80 a1       	ldd	r24, Z+32	; 0x20
    a690:	88 23       	and	r24, r24
    a692:	c1 f4       	brne	.+48     	; 0xa6c4 <main+0xa26>
    a694:	ec 2d       	mov	r30, r12
    a696:	ff 27       	eor	r31, r31
    a698:	e7 fd       	sbrc	r30, 7
    a69a:	f0 95       	com	r31
    a69c:	e2 0f       	add	r30, r18
    a69e:	f3 1f       	adc	r31, r19
    a6a0:	80 a1       	ldd	r24, Z+32	; 0x20
    a6a2:	88 23       	and	r24, r24
    a6a4:	79 f4       	brne	.+30     	; 0xa6c4 <main+0xa26>
							!p[i].well[planet_grid_off+WELL_WIDTH] && !p[i].well[orbital_grid_off+WELL_WIDTH]){//an open spot below each block?
						
							//half_step = 1;
							p[i].blocks[0] |= HALFSTEP;
    a6a6:	d7 01       	movw	r26, r14
    a6a8:	1a 96       	adiw	r26, 0x0a	; 10
    a6aa:	8c 91       	ld	r24, X
    a6ac:	1a 97       	sbiw	r26, 0x0a	; 10
    a6ae:	80 62       	ori	r24, 0x20	; 32
    a6b0:	1a 96       	adiw	r26, 0x0a	; 10
    a6b2:	8c 93       	st	X, r24
    a6b4:	1a 97       	sbiw	r26, 0x0a	; 10
							p[i].blocks[1] |= HALFSTEP;
    a6b6:	1b 96       	adiw	r26, 0x0b	; 11
    a6b8:	8c 91       	ld	r24, X
    a6ba:	1b 97       	sbiw	r26, 0x0b	; 11
    a6bc:	80 62       	ori	r24, 0x20	; 32
    a6be:	1b 96       	adiw	r26, 0x0b	; 11
    a6c0:	8c 93       	st	X, r24
    a6c2:	08 c0       	rjmp	.+16     	; 0xa6d4 <main+0xa36>
						}else{//at least one of the blocks is not free to move, don't start the move into the position. We must lock the pieces and let gravity takes it's course
							p[i].state = STATE_SET_BLOCKS;
    a6c4:	83 e1       	ldi	r24, 0x13	; 19
    a6c6:	f7 01       	movw	r30, r14
    a6c8:	84 83       	std	Z+4, r24	; 0x04
    a6ca:	04 c0       	rjmp	.+8      	; 0xa6d4 <main+0xa36>
						}
					}

				
				}else
					p[i].state_count--;
    a6cc:	81 50       	subi	r24, 0x01	; 1
    a6ce:	d7 01       	movw	r26, r14
    a6d0:	16 96       	adiw	r26, 0x06	; 6
    a6d2:	8c 93       	st	X, r24

				//draw the blocks in the new position
				xo = (p[i].x<<1)+(i?15:2);//recalculate position in case it changed
    a6d4:	f7 01       	movw	r30, r14
    a6d6:	17 81       	ldd	r17, Z+7	; 0x07
    a6d8:	44 20       	and	r4, r4
    a6da:	11 f4       	brne	.+4      	; 0xa6e0 <main+0xa42>
    a6dc:	82 e0       	ldi	r24, 0x02	; 2
    a6de:	01 c0       	rjmp	.+2      	; 0xa6e2 <main+0xa44>
    a6e0:	8f e0       	ldi	r24, 0x0F	; 15
    a6e2:	11 0f       	add	r17, r17
    a6e4:	18 0f       	add	r17, r24
				yo = (p[i].y<<1);
    a6e6:	d7 01       	movw	r26, r14
    a6e8:	18 96       	adiw	r26, 0x08	; 8
    a6ea:	6c 91       	ld	r22, X
    a6ec:	18 97       	sbiw	r26, 0x08	; 8
    a6ee:	70 e0       	ldi	r23, 0x00	; 0
    a6f0:	66 0f       	add	r22, r22
    a6f2:	77 1f       	adc	r23, r23
    a6f4:	06 2f       	mov	r16, r22
				DrawBlock(xo,yo,p[i].blocks[0]);//draw the "planet block"
    a6f6:	81 2f       	mov	r24, r17
    a6f8:	1a 96       	adiw	r26, 0x0a	; 10
    a6fa:	4c 91       	ld	r20, X
    a6fc:	0e 94 ed 48 	call	0x91da	; 0x91da <DrawBlock>
				DrawBlock(xo+pgm_read_byte(&orbital_vpos_lookup[(p[i].r<<1)+0]),yo+pgm_read_byte(&orbital_vpos_lookup[(p[i].r<<1)+1]),p[i].blocks[1]);//draw the "orbital block"
    a700:	d7 01       	movw	r26, r14
    a702:	19 96       	adiw	r26, 0x09	; 9
    a704:	ec 91       	ld	r30, X
    a706:	19 97       	sbiw	r26, 0x09	; 9
    a708:	2e 2f       	mov	r18, r30
    a70a:	30 e0       	ldi	r19, 0x00	; 0
    a70c:	22 0f       	add	r18, r18
    a70e:	33 1f       	adc	r19, r19
    a710:	c9 01       	movw	r24, r18
    a712:	8f 59       	subi	r24, 0x9F	; 159
    a714:	97 49       	sbci	r25, 0x97	; 151
    a716:	fc 01       	movw	r30, r24
    a718:	84 91       	lpm	r24, Z+
    a71a:	2e 59       	subi	r18, 0x9E	; 158
    a71c:	37 49       	sbci	r19, 0x97	; 151
    a71e:	f9 01       	movw	r30, r18
    a720:	94 91       	lpm	r25, Z+
    a722:	90 0f       	add	r25, r16
    a724:	81 0f       	add	r24, r17
    a726:	69 2f       	mov	r22, r25
    a728:	1b 96       	adiw	r26, 0x0b	; 11
    a72a:	4c 91       	ld	r20, X
    a72c:	0e 94 ed 48 	call	0x91da	; 0x91da <DrawBlock>
    a730:	ea c0       	rjmp	.+468    	; 0xa906 <main+0xc68>
			
			}else if(p[i].state == STATE_SET_BLOCKS){//possible transitions to: STATE_GRAVITY
    a732:	83 31       	cpi	r24, 0x13	; 19
    a734:	61 f5       	brne	.+88     	; 0xa78e <main+0xaf0>
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

				int8_t planet_grid_off = (p[i].y*WELL_WIDTH)+p[i].x;//grid position of the planet piece
    a736:	d7 01       	movw	r26, r14
    a738:	18 96       	adiw	r26, 0x08	; 8
    a73a:	8c 91       	ld	r24, X
    a73c:	b6 e0       	ldi	r27, 0x06	; 6
    a73e:	8b 9f       	mul	r24, r27
    a740:	c0 01       	movw	r24, r0
    a742:	11 24       	eor	r1, r1
    a744:	f7 01       	movw	r30, r14
    a746:	27 81       	ldd	r18, Z+7	; 0x07
    a748:	28 0f       	add	r18, r24
				int8_t orbital_grid_off = planet_grid_off+pgm_read_byte(&orbital_grid_lookup[(p[i].r)]);//grid position of the piece that orbits/rotates around
    a74a:	e1 85       	ldd	r30, Z+9	; 0x09
    a74c:	f0 e0       	ldi	r31, 0x00	; 0
    a74e:	e7 59       	subi	r30, 0x97	; 151
    a750:	f7 49       	sbci	r31, 0x97	; 151
    a752:	94 91       	lpm	r25, Z+
				p[i].well[planet_grid_off] = p[i].blocks[0];
    a754:	a2 2f       	mov	r26, r18
    a756:	bb 27       	eor	r27, r27
    a758:	a7 fd       	sbrc	r26, 7
    a75a:	b0 95       	com	r27
    a75c:	a4 0f       	add	r26, r20
    a75e:	b5 1f       	adc	r27, r21
    a760:	f7 01       	movw	r30, r14
    a762:	82 85       	ldd	r24, Z+10	; 0x0a
    a764:	5a 96       	adiw	r26, 0x1a	; 26
    a766:	8c 93       	st	X, r24
				p[i].well[orbital_grid_off] = p[i].blocks[1];
    a768:	92 0f       	add	r25, r18
    a76a:	e9 2f       	mov	r30, r25
    a76c:	ff 27       	eor	r31, r31
    a76e:	e7 fd       	sbrc	r30, 7
    a770:	f0 95       	com	r31
    a772:	e4 0f       	add	r30, r20
    a774:	f5 1f       	adc	r31, r21
    a776:	d7 01       	movw	r26, r14
    a778:	1b 96       	adiw	r26, 0x0b	; 11
    a77a:	8c 91       	ld	r24, X
    a77c:	1b 97       	sbiw	r26, 0x0b	; 11
    a77e:	82 8f       	std	Z+26, r24	; 0x1a
				p[i].state = STATE_GRAVITY;
    a780:	ef e0       	ldi	r30, 0x0F	; 15
    a782:	14 96       	adiw	r26, 0x04	; 4
    a784:	ec 93       	st	X, r30
    a786:	14 97       	sbiw	r26, 0x04	; 4
				p[i].state_count = 0;
    a788:	16 96       	adiw	r26, 0x06	; 6
    a78a:	1c 92       	st	X, r1
    a78c:	fb ca       	rjmp	.-2570   	; 0x9d84 <main+0xe6>
				goto LOGIC_TOP;//this state does not last a whole tick, but it is easier to break it up into more states instead of inline...yes I believe goto makes *some* things easier to understand!

			}else if(p[i].state == STATE_BOMB){//possible transitions to: STATE_GRAVITY
    a78e:	82 31       	cpi	r24, 0x12	; 18
    a790:	31 f4       	brne	.+12     	; 0xa79e <main+0xb00>
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

				p[i].state = STATE_GRAVITY;
    a792:	ef e0       	ldi	r30, 0x0F	; 15
    a794:	d7 01       	movw	r26, r14
    a796:	14 96       	adiw	r26, 0x04	; 4
    a798:	ec 93       	st	X, r30
    a79a:	14 97       	sbiw	r26, 0x04	; 4
    a79c:	34 cd       	rjmp	.-1432   	; 0xa206 <main+0x568>
				p[i].state_count = 0;

			}else if(p[i].state == STATE_CHAIN_END){//possible transitions to: STATE_GRAVITY
    a79e:	80 31       	cpi	r24, 0x10	; 16
    a7a0:	09 f0       	breq	.+2      	; 0xa7a4 <main+0xb06>
    a7a2:	7d c0       	rjmp	.+250    	; 0xa89e <main+0xc00>
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

				uint8_t stars = p[i].chain-1;
				stars = pgm_read_byte(&chain_star_count[stars]);//0,2,4,5,6,12,12,12...
    a7a4:	d7 01       	movw	r26, r14
    a7a6:	1e 96       	adiw	r26, 0x0e	; 14
    a7a8:	ec 91       	ld	r30, X
    a7aa:	e1 50       	subi	r30, 0x01	; 1
    a7ac:	f0 e0       	ldi	r31, 0x00	; 0
    a7ae:	eb 5b       	subi	r30, 0xBB	; 187
    a7b0:	f8 49       	sbci	r31, 0x98	; 152
    a7b2:	14 91       	lpm	r17, Z+
    a7b4:	ae 01       	movw	r20, r28
    a7b6:	4f 5f       	subi	r20, 0xFF	; 255
    a7b8:	5f 4f       	sbci	r21, 0xFF	; 255
    a7ba:	26 e0       	ldi	r18, 0x06	; 6
    a7bc:	30 e0       	ldi	r19, 0x00	; 0

				uint8_t weights[WELL_WIDTH];
				
				for(uint8_t x=0;x<WELL_WIDTH;x++){//find the height of each column, where lower columns are more desirable
					weights[x] = WELL_HEIGHT;
    a7be:	62 9c       	mul	r6, r2
    a7c0:	b0 01       	movw	r22, r0
    a7c2:	63 9c       	mul	r6, r3
    a7c4:	70 0d       	add	r23, r0
    a7c6:	72 9c       	mul	r7, r2
    a7c8:	70 0d       	add	r23, r0
    a7ca:	11 24       	eor	r1, r1
    a7cc:	8d e0       	ldi	r24, 0x0D	; 13
    a7ce:	fa 01       	movw	r30, r20
    a7d0:	80 83       	st	Z, r24
    a7d2:	f9 01       	movw	r30, r18
    a7d4:	e6 0f       	add	r30, r22
    a7d6:	f7 1f       	adc	r31, r23
    a7d8:	ee 56       	subi	r30, 0x6E	; 110
    a7da:	f2 4f       	sbci	r31, 0xF2	; 242
    a7dc:	91 e0       	ldi	r25, 0x01	; 1
					
					for(uint8_t y=1;y<WELL_HEIGHT;y++){
						if(p[i].well[(y*WELL_WIDTH)+x]){
    a7de:	80 81       	ld	r24, Z
    a7e0:	88 23       	and	r24, r24
    a7e2:	19 f0       	breq	.+6      	; 0xa7ea <main+0xb4c>
							weights[x] = y;
    a7e4:	da 01       	movw	r26, r20
    a7e6:	9c 93       	st	X, r25
    a7e8:	04 c0       	rjmp	.+8      	; 0xa7f2 <main+0xb54>
				uint8_t weights[WELL_WIDTH];
				
				for(uint8_t x=0;x<WELL_WIDTH;x++){//find the height of each column, where lower columns are more desirable
					weights[x] = WELL_HEIGHT;
					
					for(uint8_t y=1;y<WELL_HEIGHT;y++){
    a7ea:	9f 5f       	subi	r25, 0xFF	; 255
    a7ec:	36 96       	adiw	r30, 0x06	; 6
    a7ee:	9d 30       	cpi	r25, 0x0D	; 13
    a7f0:	b1 f7       	brne	.-20     	; 0xa7de <main+0xb40>
    a7f2:	4f 5f       	subi	r20, 0xFF	; 255
    a7f4:	5f 4f       	sbci	r21, 0xFF	; 255
    a7f6:	2f 5f       	subi	r18, 0xFF	; 255
    a7f8:	3f 4f       	sbci	r19, 0xFF	; 255
				uint8_t stars = p[i].chain-1;
				stars = pgm_read_byte(&chain_star_count[stars]);//0,2,4,5,6,12,12,12...

				uint8_t weights[WELL_WIDTH];
				
				for(uint8_t x=0;x<WELL_WIDTH;x++){//find the height of each column, where lower columns are more desirable
    a7fa:	eb 85       	ldd	r30, Y+11	; 0x0b
    a7fc:	fc 85       	ldd	r31, Y+12	; 0x0c
    a7fe:	4e 17       	cp	r20, r30
    a800:	5f 07       	cpc	r21, r31
    a802:	21 f7       	brne	.-56     	; 0xa7cc <main+0xb2e>
    a804:	70 e0       	ldi	r23, 0x00	; 0
							mag = weights[x];
							max = x;
						}
					}
					weights[max] = 0;//don't use this column again
					p[i].well[max+WELL_WIDTH] = BLOCK_STAR|SCORE;
    a806:	62 9c       	mul	r6, r2
    a808:	90 01       	movw	r18, r0
    a80a:	63 9c       	mul	r6, r3
    a80c:	30 0d       	add	r19, r0
    a80e:	72 9c       	mul	r7, r2
    a810:	30 0d       	add	r19, r0
    a812:	11 24       	eor	r1, r1
    a814:	28 58       	subi	r18, 0x88	; 136
    a816:	32 4f       	sbci	r19, 0xF2	; 242
    a818:	39 c0       	rjmp	.+114    	; 0xa88c <main+0xbee>
						}
					}
				}
				
				for(uint8_t s=0;s<stars;s++){
					if(stars >= WELL_WIDTH){
    a81a:	16 30       	cpi	r17, 0x06	; 6
    a81c:	28 f4       	brcc	.+10     	; 0xa828 <main+0xb8a>
    a81e:	de 01       	movw	r26, r28
    a820:	11 96       	adiw	r26, 0x01	; 1
    a822:	80 e0       	ldi	r24, 0x00	; 0
    a824:	e2 e0       	ldi	r30, 0x02	; 2
    a826:	18 c0       	rjmp	.+48     	; 0xa858 <main+0xbba>
						for(uint8_t x=0;x<WELL_WIDTH;x++)//the top invisible row is only used if more than 6 stars are dropped
							p[i].well[x+0] = BLOCK_STAR|SCORE;
    a828:	e6 e4       	ldi	r30, 0x46	; 70
    a82a:	d7 01       	movw	r26, r14
    a82c:	5a 96       	adiw	r26, 0x1a	; 26
    a82e:	ec 93       	st	X, r30
    a830:	5a 97       	sbiw	r26, 0x1a	; 26
    a832:	f6 e4       	ldi	r31, 0x46	; 70
    a834:	5b 96       	adiw	r26, 0x1b	; 27
    a836:	fc 93       	st	X, r31
    a838:	5b 97       	sbiw	r26, 0x1b	; 27
    a83a:	86 e4       	ldi	r24, 0x46	; 70
    a83c:	5c 96       	adiw	r26, 0x1c	; 28
    a83e:	8c 93       	st	X, r24
    a840:	5c 97       	sbiw	r26, 0x1c	; 28
    a842:	5d 96       	adiw	r26, 0x1d	; 29
    a844:	8c 93       	st	X, r24
    a846:	5d 97       	sbiw	r26, 0x1d	; 29
    a848:	5e 96       	adiw	r26, 0x1e	; 30
    a84a:	8c 93       	st	X, r24
    a84c:	5e 97       	sbiw	r26, 0x1e	; 30
    a84e:	5f 96       	adiw	r26, 0x1f	; 31
    a850:	8c 93       	st	X, r24
						stars -= WELL_WIDTH;
    a852:	16 50       	subi	r17, 0x06	; 6
    a854:	1a c0       	rjmp	.+52     	; 0xa88a <main+0xbec>
    a856:	89 2f       	mov	r24, r25
    a858:	6a 2f       	mov	r22, r26
    a85a:	9d 85       	ldd	r25, Y+13	; 0x0d
    a85c:	69 1b       	sub	r22, r25

					uint8_t max = 2;
					uint8_t mag = 0;
					
					for(uint8_t x=0;x<WELL_WIDTH;x++){//scan through and find the lowest column available
						if(weights[x] > mag){
    a85e:	9c 91       	ld	r25, X
    a860:	89 17       	cp	r24, r25
    a862:	10 f0       	brcs	.+4      	; 0xa868 <main+0xbca>
    a864:	98 2f       	mov	r25, r24
    a866:	01 c0       	rjmp	.+2      	; 0xa86a <main+0xbcc>
    a868:	e6 2f       	mov	r30, r22
    a86a:	11 96       	adiw	r26, 0x01	; 1
					}

					uint8_t max = 2;
					uint8_t mag = 0;
					
					for(uint8_t x=0;x<WELL_WIDTH;x++){//scan through and find the lowest column available
    a86c:	a4 17       	cp	r26, r20
    a86e:	b5 07       	cpc	r27, r21
    a870:	91 f7       	brne	.-28     	; 0xa856 <main+0xbb8>
						if(weights[x] > mag){
							mag = weights[x];
							max = x;
						}
					}
					weights[max] = 0;//don't use this column again
    a872:	f0 e0       	ldi	r31, 0x00	; 0
    a874:	a1 e0       	ldi	r26, 0x01	; 1
    a876:	b0 e0       	ldi	r27, 0x00	; 0
    a878:	ac 0f       	add	r26, r28
    a87a:	bd 1f       	adc	r27, r29
    a87c:	ae 0f       	add	r26, r30
    a87e:	bf 1f       	adc	r27, r31
    a880:	1c 92       	st	X, r1
					p[i].well[max+WELL_WIDTH] = BLOCK_STAR|SCORE;
    a882:	e2 0f       	add	r30, r18
    a884:	f3 1f       	adc	r31, r19
    a886:	a6 e4       	ldi	r26, 0x46	; 70
    a888:	a0 a3       	std	Z+32, r26	; 0x20
							break;
						}
					}
				}
				
				for(uint8_t s=0;s<stars;s++){
    a88a:	7f 5f       	subi	r23, 0xFF	; 255
    a88c:	71 17       	cp	r23, r17
    a88e:	28 f2       	brcs	.-118    	; 0xa81a <main+0xb7c>
					weights[max] = 0;//don't use this column again
					p[i].well[max+WELL_WIDTH] = BLOCK_STAR|SCORE;
				}

			//	p[i].well[2] = p[i].well[3] = BLOCK_STAR|SCORE;//set SCORE to make sure it goes away at the end
				p[i].added_chain = 1;//we need to keep track of this, to avoid getting stuck in a loop of STATE_CHAIN_END->STATE_GRAVITY->STATE_SCORING->STATE_CHAIN_END->STATE_GRAVITY...
    a890:	21 e0       	ldi	r18, 0x01	; 1
    a892:	f7 01       	movw	r30, r14
    a894:	21 8f       	std	Z+25, r18	; 0x19
				//seems to always prefer the lowest stacks first
				p[i].state = STATE_GRAVITY;//pull these stars down, then see if they score
    a896:	3f e0       	ldi	r19, 0x0F	; 15
    a898:	34 83       	std	Z+4, r19	; 0x04
				p[i].state_count = 0;
    a89a:	16 82       	std	Z+6, r1	; 0x06
    a89c:	34 c0       	rjmp	.+104    	; 0xa906 <main+0xc68>
				
			}else if(p[i].state == STATE_ADDED_CHAIN_END){//TODO IS THIS EVEN NECESSARY???!?!
    a89e:	81 31       	cpi	r24, 0x11	; 17
    a8a0:	41 f4       	brne	.+16     	; 0xa8b2 <main+0xc14>
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				p[i].chain = 0;//break the cycle!
    a8a2:	d7 01       	movw	r26, r14
    a8a4:	1e 96       	adiw	r26, 0x0e	; 14
    a8a6:	1c 92       	st	X, r1
    a8a8:	1e 97       	sbiw	r26, 0x0e	; 14
				p[i].state = STATE_GRAVITY;//TODO IS THIS STATE EVEN NECESSARY????!?
    a8aa:	ef e0       	ldi	r30, 0x0F	; 15
    a8ac:	14 96       	adiw	r26, 0x04	; 4
    a8ae:	ec 93       	st	X, r30
    a8b0:	2a c0       	rjmp	.+84     	; 0xa906 <main+0xc68>
				
			}else if(p[i].state == STATE_GARBAGE){//possible transitions: STATE_SPAWN_BLOCKS
    a8b2:	84 31       	cpi	r24, 0x14	; 20
    a8b4:	41 f5       	brne	.+80     	; 0xa906 <main+0xc68>
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////				

				if(p[i].state_count){
    a8b6:	d7 01       	movw	r26, r14
    a8b8:	16 96       	adiw	r26, 0x06	; 6
    a8ba:	8c 91       	ld	r24, X
    a8bc:	16 97       	sbiw	r26, 0x06	; 6
    a8be:	88 23       	and	r24, r24
    a8c0:	21 f0       	breq	.+8      	; 0xa8ca <main+0xc2c>
					p[i].state_count--;
    a8c2:	81 50       	subi	r24, 0x01	; 1
    a8c4:	16 96       	adiw	r26, 0x06	; 6
    a8c6:	8c 93       	st	X, r24
    a8c8:	1e c0       	rjmp	.+60     	; 0xa906 <main+0xc68>
					continue;
				}
				if(p[i].total_garbage_processed < p[i].total_garbage_rx){
    a8ca:	f7 01       	movw	r30, r14
    a8cc:	22 89       	ldd	r18, Z+18	; 0x12
    a8ce:	33 89       	ldd	r19, Z+19	; 0x13
    a8d0:	84 89       	ldd	r24, Z+20	; 0x14
    a8d2:	95 89       	ldd	r25, Z+21	; 0x15
    a8d4:	28 17       	cp	r18, r24
    a8d6:	39 07       	cpc	r19, r25
    a8d8:	90 f4       	brcc	.+36     	; 0xa8fe <main+0xc60>
					AddGarbageLine(i);
    a8da:	84 2d       	mov	r24, r4
    a8dc:	0e 94 9b 4b 	call	0x9736	; 0x9736 <AddGarbageLine>
					p[i].state_count = 15;
    a8e0:	ef e0       	ldi	r30, 0x0F	; 15
    a8e2:	d7 01       	movw	r26, r14
    a8e4:	16 96       	adiw	r26, 0x06	; 6
    a8e6:	ec 93       	st	X, r30
    a8e8:	16 97       	sbiw	r26, 0x06	; 6
					p[i].total_garbage_processed++;
    a8ea:	52 96       	adiw	r26, 0x12	; 18
    a8ec:	8d 91       	ld	r24, X+
    a8ee:	9c 91       	ld	r25, X
    a8f0:	53 97       	sbiw	r26, 0x13	; 19
    a8f2:	01 96       	adiw	r24, 0x01	; 1
    a8f4:	53 96       	adiw	r26, 0x13	; 19
    a8f6:	9c 93       	st	X, r25
    a8f8:	8e 93       	st	-X, r24
    a8fa:	52 97       	sbiw	r26, 0x12	; 18
    a8fc:	04 c0       	rjmp	.+8      	; 0xa906 <main+0xc68>
					
				}else if(false){//p[i].padState & BTN_)){//player is intentionally adding garbage to fill an empty well(presumably to attack with!)
					AddGarbageLine(i);
					p[i].state_count = 30;//check again in 1/2 second, they can add as much as they want by holding down the button
				}else
					p[i].state = STATE_SPAWN_BLOCKS;
    a8fe:	8b e0       	ldi	r24, 0x0B	; 11
    a900:	d7 01       	movw	r26, r14
    a902:	14 96       	adiw	r26, 0x04	; 4
    a904:	8c 93       	st	X, r24
    a906:	08 94       	sec
    a908:	61 1c       	adc	r6, r1
    a90a:	71 1c       	adc	r7, r1
    a90c:	e2 e7       	ldi	r30, 0x72	; 114
    a90e:	f0 e0       	ldi	r31, 0x00	; 0
    a910:	ee 0e       	add	r14, r30
    a912:	ff 1e       	adc	r15, r31
    a914:	29 85       	ldd	r18, Y+9	; 0x09
    a916:	3a 85       	ldd	r19, Y+10	; 0x0a
    a918:	2e 58       	subi	r18, 0x8E	; 142
    a91a:	3f 4f       	sbci	r19, 0xFF	; 255
    a91c:	3a 87       	std	Y+10, r19	; 0x0a
    a91e:	29 87       	std	Y+9, r18	; 0x09
    a920:	8f 81       	ldd	r24, Y+7	; 0x07
    a922:	98 85       	ldd	r25, Y+8	; 0x08
    a924:	8e 58       	subi	r24, 0x8E	; 142
    a926:	9f 4f       	sbci	r25, 0xFF	; 255
    a928:	98 87       	std	Y+8, r25	; 0x08
    a92a:	8f 83       	std	Y+7, r24	; 0x07
	UartSend_uint16_t(p[0].tick);//we are always player 1 and they are always player 2, in our mind. They view us as player 2, and themself as player 1.
	UartSend_uint8_t(p[0].padState);//this is compressed, since we don't use all the SNES buttons for this game.
	//do not send anymore, until we calculate the outcome of this tick. They will compare the simulation on their side, and compare to our results.

	//GET INPUT STUFF
	for(uint8_t i=0;i<MAX_PLAYERS;i++){
    a92c:	92 e0       	ldi	r25, 0x02	; 2
    a92e:	69 16       	cp	r6, r25
    a930:	71 04       	cpc	r7, r1
    a932:	09 f0       	breq	.+2      	; 0xa936 <main+0xc98>
    a934:	17 ca       	rjmp	.-3026   	; 0x9d64 <main+0xc6>
		}//active playing states, where the in game menu can be brought up
	}//for(uint8_t i=0;i<MAX_PLAYERS;i++)
		
	
	////every tick, we send the other side an authorative state about 1 grid space of our well. Over time(about 1 second), this should allow us to fix desyncs automatically
	if(++p[0].net_last_sync_spot == WELL_SIZE)
    a936:	80 91 e7 0d 	lds	r24, 0x0DE7
    a93a:	8f 5f       	subi	r24, 0xFF	; 255
    a93c:	80 93 e7 0d 	sts	0x0DE7, r24
    a940:	8e 34       	cpi	r24, 0x4E	; 78
    a942:	31 f4       	brne	.+12     	; 0xa950 <main+0xcb2>
		p[0].net_last_sync_spot = WELL_WIDTH;
    a944:	86 e0       	ldi	r24, 0x06	; 6
    a946:	80 93 e7 0d 	sts	0x0DE7, r24
    a94a:	02 c0       	rjmp	.+4      	; 0xa950 <main+0xcb2>
    a94c:	12 e0       	ldi	r17, 0x02	; 2
    a94e:	53 ce       	rjmp	.-858    	; 0xa5f6 <main+0x958>
	*/
	while(1){
		ResetSprites();
		if(ProcessLogic())
			goto TITLE_TOP;
		ProcessAI();
    a950:	0e 94 b9 54 	call	0xa972	; 0xa972 <ProcessAI>
		AnimateStars();
    a954:	0e 94 45 4c 	call	0x988a	; 0x988a <AnimateStars>
		ProcessParticles();
    a958:	0e 94 5f 45 	call	0x8abe	; 0x8abe <ProcessParticles>
		global_frame++;
    a95c:	80 91 c8 0c 	lds	r24, 0x0CC8
    a960:	8f 5f       	subi	r24, 0xFF	; 255
    a962:	80 93 c8 0c 	sts	0x0CC8, r24
//DrawScreen();
		WaitVsync(1);
    a966:	81 e0       	ldi	r24, 0x01	; 1
    a968:	90 e0       	ldi	r25, 0x00	; 0
    a96a:	0e 94 f3 44 	call	0x89e6	; 0x89e6 <WaitVsync>
    a96e:	90 e0       	ldi	r25, 0x00	; 0
    a970:	dc c9       	rjmp	.-3144   	; 0x9d2a <main+0x8c>

0000a972 <ProcessAI>:
}

uint16_t AISimulateMove(uint8_t i, uint8_t m);
uint16_t AIEvaluateLayout(uint8_t i);

void ProcessAI(){
    a972:	1f 93       	push	r17
//	DrawBigChar(14,10,'0'+ai[0].state);
//	DrawBigChar(14,12,'0'+ai[0].target_x);
//	DrawBigChar(14,14,'0'+ai[0].target_rotation);
	for(uint8_t i=0;i<MAX_AIS;i++){
		if(!ai[i].state)
    a974:	80 91 5c 0e 	lds	r24, 0x0E5C
    a978:	88 23       	and	r24, r24
    a97a:	09 f4       	brne	.+2      	; 0xa97e <ProcessAI+0xc>
    a97c:	d8 c0       	rjmp	.+432    	; 0xab2e <ProcessAI+0x1bc>
			continue;
		uint8_t pawn = ai[i].pawn;
		
		if(p[pawn].state == STATE_LOST_GAME || p[pawn].state == STATE_WON_GAME)
    a97e:	80 91 76 0e 	lds	r24, 0x0E76
    a982:	48 2f       	mov	r20, r24
    a984:	50 e0       	ldi	r21, 0x00	; 0
    a986:	82 e7       	ldi	r24, 0x72	; 114
    a988:	90 e0       	ldi	r25, 0x00	; 0
    a98a:	48 9f       	mul	r20, r24
    a98c:	f0 01       	movw	r30, r0
    a98e:	49 9f       	mul	r20, r25
    a990:	f0 0d       	add	r31, r0
    a992:	58 9f       	mul	r21, r24
    a994:	f0 0d       	add	r31, r0
    a996:	11 24       	eor	r1, r1
    a998:	e8 58       	subi	r30, 0x88	; 136
    a99a:	f2 4f       	sbci	r31, 0xF2	; 242
    a99c:	24 81       	ldd	r18, Z+4	; 0x04
    a99e:	82 2f       	mov	r24, r18
    a9a0:	89 50       	subi	r24, 0x09	; 9
    a9a2:	82 30       	cpi	r24, 0x02	; 2
    a9a4:	08 f4       	brcc	.+2      	; 0xa9a8 <ProcessAI+0x36>
    a9a6:	c3 c0       	rjmp	.+390    	; 0xab2e <ProcessAI+0x1bc>
			continue;
		
		if(p[pawn].state == STATE_SPAWN_BLOCKS){
    a9a8:	2b 30       	cpi	r18, 0x0B	; 11
    a9aa:	51 f4       	brne	.+20     	; 0xa9c0 <ProcessAI+0x4e>
	//	db();
			ai[i].state = AI_CALCULATE_MOVE;
    a9ac:	88 e0       	ldi	r24, 0x08	; 8
    a9ae:	80 93 5c 0e 	sts	0x0E5C, r24
			ai[i].padState |= BTN_DOWN;
    a9b2:	80 91 c8 0e 	lds	r24, 0x0EC8
    a9b6:	80 62       	ori	r24, 0x20	; 32
			ai[i].padState ^= BTN_DOWN;
    a9b8:	90 e2       	ldi	r25, 0x20	; 32
    a9ba:	89 27       	eor	r24, r25
    a9bc:	80 93 c8 0e 	sts	0x0EC8, r24
		}
		
		if(ai[i].state & AI_CALCULATE_MOVE){
    a9c0:	90 91 5c 0e 	lds	r25, 0x0E5C
    a9c4:	93 ff       	sbrs	r25, 3
    a9c6:	34 c0       	rjmp	.+104    	; 0xaa30 <ProcessAI+0xbe>
//db();
		//	if(!(p[pawn].state & STATE_MOVING))
			//	continue;
			if(ai[i].iteration < WELL_WIDTH*4)
    a9c8:	10 91 5d 0e 	lds	r17, 0x0E5D
    a9cc:	18 31       	cpi	r17, 0x18	; 24
    a9ce:	70 f4       	brcc	.+28     	; 0xa9ec <ProcessAI+0x7a>
				ai[i].score[ai[i].iteration] = AISimulateMove(i,ai[i].iteration++);
    a9d0:	1f 5f       	subi	r17, 0xFF	; 255
    a9d2:	10 93 5d 0e 	sts	0x0E5D, r17
    a9d6:	11 50       	subi	r17, 0x01	; 1
    a9d8:	80 e0       	ldi	r24, 0x00	; 0
    a9da:	61 2f       	mov	r22, r17
    a9dc:	0e 94 df 56 	call	0xadbe	; 0xadbe <AISimulateMove>
    a9e0:	e1 2f       	mov	r30, r17
    a9e2:	f0 e0       	ldi	r31, 0x00	; 0
    a9e4:	e4 5a       	subi	r30, 0xA4	; 164
    a9e6:	f1 4f       	sbci	r31, 0xF1	; 241
    a9e8:	82 83       	std	Z+2, r24	; 0x02
    a9ea:	a1 c0       	rjmp	.+322    	; 0xab2e <ProcessAI+0x1bc>
    a9ec:	ee e5       	ldi	r30, 0x5E	; 94
    a9ee:	fe e0       	ldi	r31, 0x0E	; 14
    a9f0:	20 e0       	ldi	r18, 0x00	; 0
    a9f2:	30 e0       	ldi	r19, 0x00	; 0
    a9f4:	50 e0       	ldi	r21, 0x00	; 0
    a9f6:	40 e0       	ldi	r20, 0x00	; 0
			else{//done thinking about all moves, now choose the best one
				uint16_t mag = 0;
				uint8_t best = 0;//(WELL_WIDTH*4)/2;//a default incase of an all-way tie
				
				for(uint8_t j=0;j<WELL_WIDTH*4;j++){
					if(ai[i].score[j] >= mag){
    a9f8:	80 81       	ld	r24, Z
    a9fa:	90 e0       	ldi	r25, 0x00	; 0
    a9fc:	82 17       	cp	r24, r18
    a9fe:	93 07       	cpc	r25, r19
    aa00:	10 f4       	brcc	.+4      	; 0xaa06 <ProcessAI+0x94>
    aa02:	c9 01       	movw	r24, r18
    aa04:	01 c0       	rjmp	.+2      	; 0xaa08 <ProcessAI+0x96>
    aa06:	54 2f       	mov	r21, r20
				ai[i].score[ai[i].iteration] = AISimulateMove(i,ai[i].iteration++);
			else{//done thinking about all moves, now choose the best one
				uint16_t mag = 0;
				uint8_t best = 0;//(WELL_WIDTH*4)/2;//a default incase of an all-way tie
				
				for(uint8_t j=0;j<WELL_WIDTH*4;j++){
    aa08:	4f 5f       	subi	r20, 0xFF	; 255
    aa0a:	31 96       	adiw	r30, 0x01	; 1
    aa0c:	48 31       	cpi	r20, 0x18	; 24
    aa0e:	11 f0       	breq	.+4      	; 0xaa14 <ProcessAI+0xa2>
    aa10:	9c 01       	movw	r18, r24
    aa12:	f2 cf       	rjmp	.-28     	; 0xa9f8 <ProcessAI+0x86>
					if(ai[i].score[j] >= mag){
						mag = ai[i].score[j];
						best = j;
					}
				}
				ai[i].state = AI_IMPLEMENT_MOVE;
    aa14:	84 e0       	ldi	r24, 0x04	; 4
    aa16:	80 93 5c 0e 	sts	0x0E5C, r24
				ai[i].target_x = best/4;
    aa1a:	85 2f       	mov	r24, r21
    aa1c:	86 95       	lsr	r24
    aa1e:	86 95       	lsr	r24
    aa20:	80 93 c6 0e 	sts	0x0EC6, r24
				ai[i].target_rotation = best%4;
    aa24:	53 70       	andi	r21, 0x03	; 3
    aa26:	50 93 c5 0e 	sts	0x0EC5, r21
				ai[i].iteration = 0;
    aa2a:	10 92 5d 0e 	sts	0x0E5D, r1
    aa2e:	7f c0       	rjmp	.+254    	; 0xab2e <ProcessAI+0x1bc>
			}
			
		}else if(ai[i].state & AI_IMPLEMENT_MOVE){
    aa30:	92 ff       	sbrs	r25, 2
    aa32:	5e c0       	rjmp	.+188    	; 0xaaf0 <ProcessAI+0x17e>
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

			//handle rotation
			if(!(ai[i].padState & (BTN_SL|BTN_SR|BTN_Y|BTN_B))){//let the button up first
    aa34:	20 91 c8 0e 	lds	r18, 0x0EC8
    aa38:	82 2f       	mov	r24, r18
    aa3a:	90 e0       	ldi	r25, 0x00	; 0
    aa3c:	83 70       	andi	r24, 0x03	; 3
    aa3e:	9c 70       	andi	r25, 0x0C	; 12
    aa40:	89 2b       	or	r24, r25
    aa42:	d1 f4       	brne	.+52     	; 0xaa78 <ProcessAI+0x106>
				if(p[pawn].r != ai[i].target_rotation){
    aa44:	82 e7       	ldi	r24, 0x72	; 114
    aa46:	90 e0       	ldi	r25, 0x00	; 0
    aa48:	48 9f       	mul	r20, r24
    aa4a:	f0 01       	movw	r30, r0
    aa4c:	49 9f       	mul	r20, r25
    aa4e:	f0 0d       	add	r31, r0
    aa50:	58 9f       	mul	r21, r24
    aa52:	f0 0d       	add	r31, r0
    aa54:	11 24       	eor	r1, r1
    aa56:	e8 58       	subi	r30, 0x88	; 136
    aa58:	f2 4f       	sbci	r31, 0xF2	; 242
    aa5a:	91 85       	ldd	r25, Z+9	; 0x09
    aa5c:	80 91 c5 0e 	lds	r24, 0x0EC5
    aa60:	98 17       	cp	r25, r24
    aa62:	79 f0       	breq	.+30     	; 0xaa82 <ProcessAI+0x110>
					if(ai[i].target_rotation == 0 && p[pawn].r == 3)
    aa64:	88 23       	and	r24, r24
    aa66:	11 f4       	brne	.+4      	; 0xaa6c <ProcessAI+0xfa>
    aa68:	93 30       	cpi	r25, 0x03	; 3
    aa6a:	59 f0       	breq	.+22     	; 0xaa82 <ProcessAI+0x110>
						ai[i].padState |= BTN_SR;
					else{
						if(ai[i].target_rotation < p[pawn].r)
    aa6c:	89 17       	cp	r24, r25
    aa6e:	10 f4       	brcc	.+4      	; 0xaa74 <ProcessAI+0x102>
							ai[i].padState |= BTN_Y;
    aa70:	22 60       	ori	r18, 0x02	; 2
    aa72:	05 c0       	rjmp	.+10     	; 0xaa7e <ProcessAI+0x10c>
						else
							ai[i].padState |= BTN_B;
    aa74:	21 60       	ori	r18, 0x01	; 1
    aa76:	03 c0       	rjmp	.+6      	; 0xaa7e <ProcessAI+0x10c>
					}
				}
			}else{//clear it for this frame
				ai[i].padState |= (BTN_SL|BTN_SR|BTN_Y|BTN_B);
    aa78:	23 60       	ori	r18, 0x03	; 3
				ai[i].padState ^= (BTN_SL|BTN_SR|BTN_Y|BTN_B);
    aa7a:	83 e0       	ldi	r24, 0x03	; 3
    aa7c:	28 27       	eor	r18, r24
    aa7e:	20 93 c8 0e 	sts	0x0EC8, r18
			}
			
			//handle translation
			if(!(ai[i].padState & (BTN_LEFT|BTN_RIGHT|BTN_UP|BTN_DOWN))){//let the button up first
    aa82:	20 91 c8 0e 	lds	r18, 0x0EC8
    aa86:	82 2f       	mov	r24, r18
    aa88:	80 7f       	andi	r24, 0xF0	; 240
    aa8a:	b1 f4       	brne	.+44     	; 0xaab8 <ProcessAI+0x146>
				if(p[pawn].x != ai[i].target_x){
    aa8c:	82 e7       	ldi	r24, 0x72	; 114
    aa8e:	90 e0       	ldi	r25, 0x00	; 0
    aa90:	48 9f       	mul	r20, r24
    aa92:	f0 01       	movw	r30, r0
    aa94:	49 9f       	mul	r20, r25
    aa96:	f0 0d       	add	r31, r0
    aa98:	58 9f       	mul	r21, r24
    aa9a:	f0 0d       	add	r31, r0
    aa9c:	11 24       	eor	r1, r1
    aa9e:	e8 58       	subi	r30, 0x88	; 136
    aaa0:	f2 4f       	sbci	r31, 0xF2	; 242
    aaa2:	97 81       	ldd	r25, Z+7	; 0x07
    aaa4:	80 91 c6 0e 	lds	r24, 0x0EC6
    aaa8:	98 17       	cp	r25, r24
    aaaa:	59 f0       	breq	.+22     	; 0xaac2 <ProcessAI+0x150>
					if(ai[i].target_x < p[pawn].x)
    aaac:	89 17       	cp	r24, r25
    aaae:	10 f4       	brcc	.+4      	; 0xaab4 <ProcessAI+0x142>
						ai[i].padState |= BTN_LEFT;
    aab0:	20 64       	ori	r18, 0x40	; 64
    aab2:	05 c0       	rjmp	.+10     	; 0xaabe <ProcessAI+0x14c>
					else
						ai[i].padState |= BTN_RIGHT;
    aab4:	20 68       	ori	r18, 0x80	; 128
    aab6:	03 c0       	rjmp	.+6      	; 0xaabe <ProcessAI+0x14c>
				}
			}else{//clear it for this frame
				ai[i].padState |= (BTN_LEFT|BTN_RIGHT|BTN_UP|BTN_DOWN);
    aab8:	20 6f       	ori	r18, 0xF0	; 240
				ai[i].padState ^= (BTN_LEFT|BTN_RIGHT|BTN_UP|BTN_DOWN);
    aaba:	80 ef       	ldi	r24, 0xF0	; 240
    aabc:	28 27       	eor	r18, r24
    aabe:	20 93 c8 0e 	sts	0x0EC8, r18
			}
			
			if(p[pawn].r == ai[i].target_rotation && p[pawn].x == ai[i].target_x){
    aac2:	82 e7       	ldi	r24, 0x72	; 114
    aac4:	90 e0       	ldi	r25, 0x00	; 0
    aac6:	48 9f       	mul	r20, r24
    aac8:	f0 01       	movw	r30, r0
    aaca:	49 9f       	mul	r20, r25
    aacc:	f0 0d       	add	r31, r0
    aace:	58 9f       	mul	r21, r24
    aad0:	f0 0d       	add	r31, r0
    aad2:	11 24       	eor	r1, r1
    aad4:	e8 58       	subi	r30, 0x88	; 136
    aad6:	f2 4f       	sbci	r31, 0xF2	; 242
    aad8:	91 85       	ldd	r25, Z+9	; 0x09
    aada:	80 91 c5 0e 	lds	r24, 0x0EC5
    aade:	98 17       	cp	r25, r24
    aae0:	31 f5       	brne	.+76     	; 0xab2e <ProcessAI+0x1bc>
    aae2:	97 81       	ldd	r25, Z+7	; 0x07
    aae4:	80 91 c6 0e 	lds	r24, 0x0EC6
    aae8:	98 17       	cp	r25, r24
    aaea:	09 f5       	brne	.+66     	; 0xab2e <ProcessAI+0x1bc>
				//if(p[pawn].state != STATE_MOVING)//done moving the piece, think about the next one
					ai[i].state = AI_WAIT_NEXT_MOVE;
    aaec:	80 e1       	ldi	r24, 0x10	; 16
    aaee:	1d c0       	rjmp	.+58     	; 0xab2a <ProcessAI+0x1b8>
				//else
				//	ai[i].padState |= BTN_DOWN;//drop the piece faster
			}

		}else if(ai[i].state & AI_WAIT_NEXT_MOVE){
    aaf0:	94 ff       	sbrs	r25, 4
    aaf2:	06 c0       	rjmp	.+12     	; 0xab00 <ProcessAI+0x18e>
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ai[i].padState |= BTN_DOWN;
    aaf4:	80 91 c8 0e 	lds	r24, 0x0EC8
    aaf8:	80 62       	ori	r24, 0x20	; 32
    aafa:	80 93 c8 0e 	sts	0x0EC8, r24
    aafe:	17 c0       	rjmp	.+46     	; 0xab2e <ProcessAI+0x1bc>
			//if(p[pawn].state & STATE_SPAWN_BLOCKS)
				//ai[i].state = AI_CALCULATE_MOVE;

		}else if(ai[i].state & AI_WAIT){
    ab00:	90 ff       	sbrs	r25, 0
    ab02:	0d c0       	rjmp	.+26     	; 0xab1e <ProcessAI+0x1ac>
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

			if(ai[i].wait == 0)
    ab04:	80 91 c7 0e 	lds	r24, 0x0EC7
    ab08:	88 23       	and	r24, r24
    ab0a:	29 f4       	brne	.+10     	; 0xab16 <ProcessAI+0x1a4>
				ai[i].state ^= AI_WAIT;
    ab0c:	81 e0       	ldi	r24, 0x01	; 1
    ab0e:	98 27       	eor	r25, r24
    ab10:	90 93 5c 0e 	sts	0x0E5C, r25
    ab14:	0c c0       	rjmp	.+24     	; 0xab2e <ProcessAI+0x1bc>
			else
				ai[i].wait--;
    ab16:	81 50       	subi	r24, 0x01	; 1
    ab18:	80 93 c7 0e 	sts	0x0EC7, r24
    ab1c:	08 c0       	rjmp	.+16     	; 0xab2e <ProcessAI+0x1bc>
		}else if(ai[i].state & AI_WAIT_ROUND_START){
    ab1e:	95 ff       	sbrs	r25, 5
    ab20:	06 c0       	rjmp	.+12     	; 0xab2e <ProcessAI+0x1bc>
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

			if((p[pawn].state == STATE_AWAIT_READY) || (p[pawn].state == STATE_COUNT_DOWN)){
    ab22:	21 50       	subi	r18, 0x01	; 1
    ab24:	22 30       	cpi	r18, 0x02	; 2
    ab26:	18 f0       	brcs	.+6      	; 0xab2e <ProcessAI+0x1bc>
				
			}else
				ai[i].state = AI_CALCULATE_MOVE;
    ab28:	88 e0       	ldi	r24, 0x08	; 8
    ab2a:	80 93 5c 0e 	sts	0x0E5C, r24
			
		}
	}
}
    ab2e:	1f 91       	pop	r17
    ab30:	08 95       	ret

0000ab32 <AISimulateScoring>:
	}
}

void AIDrawWell(uint8_t i);

uint8_t AISimulateScoring(uint8_t i){
    ab32:	a0 e0       	ldi	r26, 0x00	; 0
    ab34:	b0 e0       	ldi	r27, 0x00	; 0
    ab36:	ef e9       	ldi	r30, 0x9F	; 159
    ab38:	f5 e5       	ldi	r31, 0x55	; 85
    ab3a:	0c 94 ac 57 	jmp	0xaf58	; 0xaf58 <__prologue_saves__+0x6>
    ab3e:	68 2e       	mov	r6, r24
    ab40:	dd 24       	eor	r13, r13
    ab42:	77 24       	eor	r7, r7
    ab44:	cc 24       	eor	r12, r12
			return numscores;
	}else{
		chain++;
//db();
		numscores += iterationscores;//add the score, apply gravity, and try for another
		numscores *= chain;
    ab46:	86 e0       	ldi	r24, 0x06	; 6
    ab48:	58 2e       	mov	r5, r24

	do{
		fell = 0;
		off = WELL_WIDTH;
		while(off < (WELL_SIZE-WELL_WIDTH)){//simulate gravity
			if(ai[i].well[off] && !ai[i].well[off+WELL_WIDTH]){
    ab4a:	86 2d       	mov	r24, r6
    ab4c:	90 e0       	ldi	r25, 0x00	; 0
    ab4e:	2d e6       	ldi	r18, 0x6D	; 109
    ab50:	30 e0       	ldi	r19, 0x00	; 0
    ab52:	ac 01       	movw	r20, r24
    ab54:	42 9f       	mul	r20, r18
    ab56:	c0 01       	movw	r24, r0
    ab58:	43 9f       	mul	r20, r19
    ab5a:	90 0d       	add	r25, r0
    ab5c:	52 9f       	mul	r21, r18
    ab5e:	90 0d       	add	r25, r0
    ab60:	11 24       	eor	r1, r1
    ab62:	0c e5       	ldi	r16, 0x5C	; 92
    ab64:	e0 2e       	mov	r14, r16
    ab66:	0e e0       	ldi	r16, 0x0E	; 14
    ab68:	f0 2e       	mov	r15, r16
    ab6a:	e8 0e       	add	r14, r24
    ab6c:	f9 1e       	adc	r15, r25
	//scan vertically
	for(uint8_t x=0;x<WELL_WIDTH;x++){
		up = down = 255;//clear the markers for a new column
		off = WELL_WIDTH+x;
		for(uint8_t y=1;y<WELL_HEIGHT;y++){
			t = ai[i].well[off];//flags are dropped during copy
    ab6e:	57 01       	movw	r10, r14

	uint8_t up,down;
	uint8_t uppos=0,downpos=0;
	uint8_t fell = 0;
	//scan vertically
	for(uint8_t x=0;x<WELL_WIDTH;x++){
    ab70:	1d e7       	ldi	r17, 0x7D	; 125
    ab72:	81 2e       	mov	r8, r17
    ab74:	1e e0       	ldi	r17, 0x0E	; 14
    ab76:	91 2e       	mov	r9, r17
    ab78:	88 0e       	add	r8, r24
    ab7a:	99 1e       	adc	r9, r25
    ab7c:	ba c0       	rjmp	.+372    	; 0xacf2 <AISimulateScoring+0x1c0>

	//scan horizontally
	for(uint8_t y=1;y<WELL_HEIGHT;y++){
		left = right = 255;//clear the markers for a new row
		for(uint8_t x=0;x<WELL_WIDTH;x++){
			t = ai[i].well[off++];//flags are dropped during copy
    ab7e:	f7 01       	movw	r30, r14
    ab80:	ea 0f       	add	r30, r26
    ab82:	f1 1d       	adc	r31, r1
    ab84:	93 8d       	ldd	r25, Z+27	; 0x1b
    ab86:	af 5f       	subi	r26, 0xFF	; 255
			if(t || right != 255){
    ab88:	99 23       	and	r25, r25
    ab8a:	21 f4       	brne	.+8      	; 0xab94 <AISimulateScoring+0x62>
    ab8c:	4f 3f       	cpi	r20, 0xFF	; 255
    ab8e:	11 f4       	brne	.+4      	; 0xab94 <AISimulateScoring+0x62>
    ab90:	5f ef       	ldi	r21, 0xFF	; 255
    ab92:	30 c0       	rjmp	.+96     	; 0xabf4 <AISimulateScoring+0xc2>
				if(left == 255){//we must find a left score marker first
    ab94:	5f 3f       	cpi	r21, 0xFF	; 255
    ab96:	29 f4       	brne	.+10     	; 0xaba2 <AISimulateScoring+0x70>
					if(t <= BLOCK_BLUE && t >= BLOCK_RED){//it is a score marker
    ab98:	89 2f       	mov	r24, r25
    ab9a:	81 50       	subi	r24, 0x01	; 1
    ab9c:	83 30       	cpi	r24, 0x03	; 3
    ab9e:	40 f1       	brcs	.+80     	; 0xabf0 <AISimulateScoring+0xbe>
    aba0:	29 c0       	rjmp	.+82     	; 0xabf4 <AISimulateScoring+0xc2>
						left = t;//store it
						leftpos = x;
					}
				}else if(right == 255){//once we have a left, we must find a right
    aba2:	4f 3f       	cpi	r20, 0xFF	; 255
    aba4:	51 f4       	brne	.+20     	; 0xabba <AISimulateScoring+0x88>
					if(t <= BLOCK_BLUE && t >= BLOCK_RED){//it is  not a star or anything else, this can make or break the score
    aba6:	89 2f       	mov	r24, r25
    aba8:	81 50       	subi	r24, 0x01	; 1
    abaa:	83 30       	cpi	r24, 0x03	; 3
    abac:	18 f5       	brcc	.+70     	; 0xabf4 <AISimulateScoring+0xc2>
						if(t != left){//we found a different color marker, so everything to the left is not a score. start a new scan from here
    abae:	95 17       	cp	r25, r21
    abb0:	f9 f4       	brne	.+62     	; 0xabf0 <AISimulateScoring+0xbe>
							left = t;//store the new left marker for the new search
							leftpos = x;
						}else{
							right = t;
							rightpos = x;
							if(x == WELL_WIDTH-1)//need to short circuit, otherwise this score wont process. Would need redundant code without the goto
    abb2:	25 30       	cpi	r18, 0x05	; 5
    abb4:	69 f0       	breq	.+26     	; 0xabd0 <AISimulateScoring+0x9e>
								goto AI_SCORING_HORIZONTAL_SHORT_CIRCUIT;
    abb6:	45 2f       	mov	r20, r21
    abb8:	04 c0       	rjmp	.+8      	; 0xabc2 <AISimulateScoring+0x90>
						}
					}
				}else{//we have a left and a right so a score did happen, we just need to see how far it goes(more of the same color on the right or side of well?)
AI_SCORING_HORIZONTAL_SHORT_CIRCUIT:

					if((x == WELL_WIDTH-1) || (t != right && t <= BLOCK_BLUE)){//the score has ended, found the edge of the well or a different color marker or empty spot
    abba:	25 30       	cpi	r18, 0x05	; 5
    abbc:	39 f0       	breq	.+14     	; 0xabcc <AISimulateScoring+0x9a>
    abbe:	94 17       	cp	r25, r20
    abc0:	11 f4       	brne	.+4      	; 0xabc6 <AISimulateScoring+0x94>
    abc2:	62 2f       	mov	r22, r18
    abc4:	17 c0       	rjmp	.+46     	; 0xabf4 <AISimulateScoring+0xc2>
    abc6:	94 30       	cpi	r25, 0x04	; 4
    abc8:	20 f0       	brcs	.+8      	; 0xabd2 <AISimulateScoring+0xa0>
    abca:	14 c0       	rjmp	.+40     	; 0xabf4 <AISimulateScoring+0xc2>
						
						if(t == right)//must have found the well edge, don't leave this one behind(not trivial to understand why this is needed..)
    abcc:	94 17       	cp	r25, r20
    abce:	09 f4       	brne	.+2      	; 0xabd2 <AISimulateScoring+0xa0>
    abd0:	65 e0       	ldi	r22, 0x05	; 5
							rightpos = x;

						leftpos += (y*WELL_WIDTH);
    abd2:	37 0f       	add	r19, r23
						rightpos += (y*WELL_WIDTH);
    abd4:	67 0f       	add	r22, r23
    abd6:	07 c0       	rjmp	.+14     	; 0xabe6 <AISimulateScoring+0xb4>
						
						while(leftpos <= rightpos){
							ai[i].well[leftpos++] |= SCORE;//mark everything from the left to rightmost marker(there could be more than 1 right marker, but we store the last found)
    abd8:	f7 01       	movw	r30, r14
    abda:	e3 0f       	add	r30, r19
    abdc:	f1 1d       	adc	r31, r1
    abde:	83 8d       	ldd	r24, Z+27	; 0x1b
    abe0:	80 64       	ori	r24, 0x40	; 64
    abe2:	83 8f       	std	Z+27, r24	; 0x1b
    abe4:	3f 5f       	subi	r19, 0xFF	; 255
							rightpos = x;

						leftpos += (y*WELL_WIDTH);
						rightpos += (y*WELL_WIDTH);
						
						while(leftpos <= rightpos){
    abe6:	63 17       	cp	r22, r19
    abe8:	b8 f7       	brcc	.-18     	; 0xabd8 <AISimulateScoring+0xa6>
    abea:	5f ef       	ldi	r21, 0xFF	; 255
    abec:	4f ef       	ldi	r20, 0xFF	; 255
    abee:	02 c0       	rjmp	.+4      	; 0xabf4 <AISimulateScoring+0xc2>
    abf0:	59 2f       	mov	r21, r25
    abf2:	32 2f       	mov	r19, r18
	uint8_t iterationscores = 0;

	//scan horizontally
	for(uint8_t y=1;y<WELL_HEIGHT;y++){
		left = right = 255;//clear the markers for a new row
		for(uint8_t x=0;x<WELL_WIDTH;x++){
    abf4:	2f 5f       	subi	r18, 0xFF	; 255
    abf6:	26 30       	cpi	r18, 0x06	; 6
    abf8:	11 f6       	brne	.-124    	; 0xab7e <AISimulateScoring+0x4c>
    abfa:	7a 5f       	subi	r23, 0xFA	; 250
	uint8_t left,right,t;
	uint8_t leftpos=0,rightpos=0;
	uint8_t iterationscores = 0;

	//scan horizontally
	for(uint8_t y=1;y<WELL_HEIGHT;y++){
    abfc:	7e 34       	cpi	r23, 0x4E	; 78
    abfe:	29 f0       	breq	.+10     	; 0xac0a <AISimulateScoring+0xd8>
    ac00:	a7 2f       	mov	r26, r23
    ac02:	5f ef       	ldi	r21, 0xFF	; 255
    ac04:	4f ef       	ldi	r20, 0xFF	; 255
    ac06:	20 e0       	ldi	r18, 0x00	; 0
    ac08:	ba cf       	rjmp	.-140    	; 0xab7e <AISimulateScoring+0x4c>
    ac0a:	30 e0       	ldi	r19, 0x00	; 0
    ac0c:	40 e0       	ldi	r20, 0x00	; 0
    ac0e:	70 e0       	ldi	r23, 0x00	; 0
    ac10:	a7 2f       	mov	r26, r23
    ac12:	aa 5f       	subi	r26, 0xFA	; 250
    ac14:	6f ef       	ldi	r22, 0xFF	; 255
    ac16:	5f ef       	ldi	r21, 0xFF	; 255
    ac18:	21 e0       	ldi	r18, 0x01	; 1
	//scan vertically
	for(uint8_t x=0;x<WELL_WIDTH;x++){
		up = down = 255;//clear the markers for a new column
		off = WELL_WIDTH+x;
		for(uint8_t y=1;y<WELL_HEIGHT;y++){
			t = ai[i].well[off];//flags are dropped during copy
    ac1a:	f5 01       	movw	r30, r10
    ac1c:	ea 0f       	add	r30, r26
    ac1e:	f1 1d       	adc	r31, r1
    ac20:	93 8d       	ldd	r25, Z+27	; 0x1b
			off += WELL_WIDTH;
    ac22:	aa 5f       	subi	r26, 0xFA	; 250
			if(t || down != 255){
    ac24:	99 23       	and	r25, r25
    ac26:	21 f4       	brne	.+8      	; 0xac30 <AISimulateScoring+0xfe>
    ac28:	5f 3f       	cpi	r21, 0xFF	; 255
    ac2a:	11 f4       	brne	.+4      	; 0xac30 <AISimulateScoring+0xfe>
    ac2c:	6f ef       	ldi	r22, 0xFF	; 255
    ac2e:	36 c0       	rjmp	.+108    	; 0xac9c <AISimulateScoring+0x16a>
				if(up == 255){//we must find a top score marker first
    ac30:	6f 3f       	cpi	r22, 0xFF	; 255
    ac32:	29 f4       	brne	.+10     	; 0xac3e <AISimulateScoring+0x10c>
					if(t <= BLOCK_BLUE && t >= BLOCK_RED){//it is a score marker
    ac34:	89 2f       	mov	r24, r25
    ac36:	81 50       	subi	r24, 0x01	; 1
    ac38:	83 30       	cpi	r24, 0x03	; 3
    ac3a:	70 f1       	brcs	.+92     	; 0xac98 <AISimulateScoring+0x166>
    ac3c:	2f c0       	rjmp	.+94     	; 0xac9c <AISimulateScoring+0x16a>
						up = t;//store it
						uppos = y;
					}
				}else if(down == 255){//once we have a top, we must find a bottom
    ac3e:	5f 3f       	cpi	r21, 0xFF	; 255
    ac40:	51 f4       	brne	.+20     	; 0xac56 <AISimulateScoring+0x124>
					if(t <= BLOCK_BLUE && t >= BLOCK_RED){//it is  not a star or anything else, this can make or break the score
    ac42:	89 2f       	mov	r24, r25
    ac44:	81 50       	subi	r24, 0x01	; 1
    ac46:	83 30       	cpi	r24, 0x03	; 3
    ac48:	48 f5       	brcc	.+82     	; 0xac9c <AISimulateScoring+0x16a>
						if(t != up){//we found a different color marker, so everything to the top is not a score. start a new scan from here
    ac4a:	96 17       	cp	r25, r22
    ac4c:	29 f5       	brne	.+74     	; 0xac98 <AISimulateScoring+0x166>
							up = t;//store the new top marker for the new search
							uppos = y;
						}else{
							down = t;
							downpos = y;
							if(y == WELL_HEIGHT-1)//need to short circuit, otherwise this score wont process. Would need redundant code without the goto
    ac4e:	2c 30       	cpi	r18, 0x0C	; 12
    ac50:	69 f0       	breq	.+26     	; 0xac6c <AISimulateScoring+0x13a>
								goto AI_SCORING_VERTICAL_SHORT_CIRCUIT;
    ac52:	56 2f       	mov	r21, r22
    ac54:	04 c0       	rjmp	.+8      	; 0xac5e <AISimulateScoring+0x12c>
						}
					}
				}else{//we have an up and a down so a score did happen, we just need to see how far it goes(more of the same color on the bottom or edge of well?)
AI_SCORING_VERTICAL_SHORT_CIRCUIT:

					if((y == WELL_HEIGHT-1) || (t != down && t <= BLOCK_BLUE)){//the score has ended, found the edge of the well or a different color marker or empty spot
    ac56:	2c 30       	cpi	r18, 0x0C	; 12
    ac58:	39 f0       	breq	.+14     	; 0xac68 <AISimulateScoring+0x136>
    ac5a:	95 17       	cp	r25, r21
    ac5c:	11 f4       	brne	.+4      	; 0xac62 <AISimulateScoring+0x130>
    ac5e:	42 2f       	mov	r20, r18
    ac60:	1d c0       	rjmp	.+58     	; 0xac9c <AISimulateScoring+0x16a>
    ac62:	94 30       	cpi	r25, 0x04	; 4
    ac64:	20 f0       	brcs	.+8      	; 0xac6e <AISimulateScoring+0x13c>
    ac66:	1a c0       	rjmp	.+52     	; 0xac9c <AISimulateScoring+0x16a>
						
						if(t == down)//must have found the well edge, don't leave this one behind(not trivial to understand why this is needed..)
    ac68:	95 17       	cp	r25, r21
    ac6a:	09 f4       	brne	.+2      	; 0xac6e <AISimulateScoring+0x13c>
    ac6c:	4c e0       	ldi	r20, 0x0C	; 12
							downpos = y;

						//THIS IS THE BROKEN PART??!?
						uppos *= WELL_WIDTH;//uppos += (y*WELL_WIDTH);
    ac6e:	35 9d       	mul	r19, r5
    ac70:	30 2d       	mov	r19, r0
    ac72:	11 24       	eor	r1, r1
						downpos *= WELL_WIDTH;//downpos += (y*WELL_WIDTH);
    ac74:	45 9d       	mul	r20, r5
    ac76:	40 2d       	mov	r20, r0
    ac78:	11 24       	eor	r1, r1
						uppos += x;
    ac7a:	37 0f       	add	r19, r23
						downpos += x;
    ac7c:	47 0f       	add	r20, r23
    ac7e:	07 c0       	rjmp	.+14     	; 0xac8e <AISimulateScoring+0x15c>
						
						while(uppos <= downpos){
							ai[i].well[uppos] |= SCORE;//mark everything from the top to bottom marker(there could be more than 1 bottom marker, but we store the last found)
    ac80:	f5 01       	movw	r30, r10
    ac82:	e3 0f       	add	r30, r19
    ac84:	f1 1d       	adc	r31, r1
    ac86:	83 8d       	ldd	r24, Z+27	; 0x1b
    ac88:	80 64       	ori	r24, 0x40	; 64
    ac8a:	83 8f       	std	Z+27, r24	; 0x1b
							uppos += WELL_WIDTH;
    ac8c:	3a 5f       	subi	r19, 0xFA	; 250
						uppos *= WELL_WIDTH;//uppos += (y*WELL_WIDTH);
						downpos *= WELL_WIDTH;//downpos += (y*WELL_WIDTH);
						uppos += x;
						downpos += x;
						
						while(uppos <= downpos){
    ac8e:	43 17       	cp	r20, r19
    ac90:	b8 f7       	brcc	.-18     	; 0xac80 <AISimulateScoring+0x14e>
    ac92:	6f ef       	ldi	r22, 0xFF	; 255
    ac94:	5f ef       	ldi	r21, 0xFF	; 255
    ac96:	02 c0       	rjmp	.+4      	; 0xac9c <AISimulateScoring+0x16a>
    ac98:	69 2f       	mov	r22, r25
    ac9a:	32 2f       	mov	r19, r18
	uint8_t fell = 0;
	//scan vertically
	for(uint8_t x=0;x<WELL_WIDTH;x++){
		up = down = 255;//clear the markers for a new column
		off = WELL_WIDTH+x;
		for(uint8_t y=1;y<WELL_HEIGHT;y++){
    ac9c:	2f 5f       	subi	r18, 0xFF	; 255
    ac9e:	2d 30       	cpi	r18, 0x0D	; 13
    aca0:	09 f0       	breq	.+2      	; 0xaca4 <AISimulateScoring+0x172>
    aca2:	bb cf       	rjmp	.-138    	; 0xac1a <AISimulateScoring+0xe8>

	uint8_t up,down;
	uint8_t uppos=0,downpos=0;
	uint8_t fell = 0;
	//scan vertically
	for(uint8_t x=0;x<WELL_WIDTH;x++){
    aca4:	7f 5f       	subi	r23, 0xFF	; 255
    aca6:	76 30       	cpi	r23, 0x06	; 6
    aca8:	09 f0       	breq	.+2      	; 0xacac <AISimulateScoring+0x17a>
    acaa:	b2 cf       	rjmp	.-156    	; 0xac10 <AISimulateScoring+0xde>
    acac:	e4 01       	movw	r28, r8
    acae:	06 e0       	ldi	r16, 0x06	; 6
    acb0:	10 e0       	ldi	r17, 0x00	; 0
	
	

	off = WELL_WIDTH;
	while(off < WELL_SIZE){//clear out scored blocks
		if(ai[i].well[off] & SCORE){
    acb2:	88 81       	ld	r24, Y
    acb4:	86 ff       	sbrs	r24, 6
    acb6:	07 c0       	rjmp	.+14     	; 0xacc6 <AISimulateScoring+0x194>
			if(false){//ai[i].well[s] == BLOCK_BOMB){
				
			}else{
				ai[i].well[off] = 0;
    acb8:	18 82       	st	Y, r1

#define PARTICLE_STAR	0
#define PARTICLE_NORMAL_TIME	45

void db(){
	TriggerFx(0,255,1);
    acba:	80 e0       	ldi	r24, 0x00	; 0
    acbc:	6f ef       	ldi	r22, 0xFF	; 255
    acbe:	41 e0       	ldi	r20, 0x01	; 1
    acc0:	0e 94 0f 3f 	call	0x7e1e	; 0x7e1e <TriggerFx>
			if(false){//ai[i].well[s] == BLOCK_BOMB){
				
			}else{
				ai[i].well[off] = 0;
db();
				iterationscores++;
    acc4:	1f 5f       	subi	r17, 0xFF	; 255
			}
		}
		off++;
    acc6:	0f 5f       	subi	r16, 0xFF	; 255
    acc8:	21 96       	adiw	r28, 0x01	; 1
	}
	
	

	off = WELL_WIDTH;
	while(off < WELL_SIZE){//clear out scored blocks
    acca:	0e 34       	cpi	r16, 0x4E	; 78
    accc:	91 f7       	brne	.-28     	; 0xacb2 <AISimulateScoring+0x180>
				iterationscores++;
			}
		}
		off++;
	}
	AIDrawWell(i);
    acce:	86 2d       	mov	r24, r6
    acd0:	0e 94 a3 56 	call	0xad46	; 0xad46 <AIDrawWell>
	if(!iterationscores){//no score this time through
    acd4:	11 23       	and	r17, r17
    acd6:	41 f4       	brne	.+16     	; 0xace8 <AISimulateScoring+0x1b6>
		if(chain > 1){//could stars drop?
    acd8:	51 e0       	ldi	r21, 0x01	; 1
    acda:	5d 15       	cp	r21, r13
    acdc:	70 f5       	brcc	.+92     	; 0xad3a <AISimulateScoring+0x208>
			if(didstars)//already dropped stars, and there was no score.
    acde:	77 20       	and	r7, r7
    ace0:	61 f5       	brne	.+88     	; 0xad3a <AISimulateScoring+0x208>
    ace2:	77 24       	eor	r7, r7
    ace4:	73 94       	inc	r7
    ace6:	05 c0       	rjmp	.+10     	; 0xacf2 <AISimulateScoring+0x1c0>

			}
		}else//no score, no stars, done.
			return numscores;
	}else{
		chain++;
    ace8:	d3 94       	inc	r13
//db();
		numscores += iterationscores;//add the score, apply gravity, and try for another
    acea:	1c 0d       	add	r17, r12
		numscores *= chain;
    acec:	1d 9d       	mul	r17, r13
    acee:	c0 2c       	mov	r12, r0
    acf0:	11 24       	eor	r1, r1
    acf2:	26 e0       	ldi	r18, 0x06	; 6
    acf4:	30 e0       	ldi	r19, 0x00	; 0
    acf6:	16 c0       	rjmp	.+44     	; 0xad24 <AISimulateScoring+0x1f2>

	do{
		fell = 0;
		off = WELL_WIDTH;
		while(off < (WELL_SIZE-WELL_WIDTH)){//simulate gravity
			if(ai[i].well[off] && !ai[i].well[off+WELL_WIDTH]){
    acf8:	82 2f       	mov	r24, r18
    acfa:	90 e0       	ldi	r25, 0x00	; 0
    acfc:	d7 01       	movw	r26, r14
    acfe:	a8 0f       	add	r26, r24
    ad00:	b9 1f       	adc	r27, r25
    ad02:	5b 96       	adiw	r26, 0x1b	; 27
    ad04:	4c 91       	ld	r20, X
    ad06:	5b 97       	sbiw	r26, 0x1b	; 27
    ad08:	44 23       	and	r20, r20
    ad0a:	59 f0       	breq	.+22     	; 0xad22 <AISimulateScoring+0x1f0>
    ad0c:	fc 01       	movw	r30, r24
    ad0e:	36 96       	adiw	r30, 0x06	; 6
    ad10:	ee 0d       	add	r30, r14
    ad12:	ff 1d       	adc	r31, r15
    ad14:	83 8d       	ldd	r24, Z+27	; 0x1b
    ad16:	88 23       	and	r24, r24
    ad18:	21 f4       	brne	.+8      	; 0xad22 <AISimulateScoring+0x1f0>
				ai[i].well[off+WELL_WIDTH] = ai[i].well[off];
    ad1a:	43 8f       	std	Z+27, r20	; 0x1b
				ai[i].well[off] = 0;
    ad1c:	5b 96       	adiw	r26, 0x1b	; 27
    ad1e:	1c 92       	st	X, r1
    ad20:	31 e0       	ldi	r19, 0x01	; 1
				fell = 1;
			}
			off++;
    ad22:	2f 5f       	subi	r18, 0xFF	; 255
AI_SCORING_GRAVITY:

	do{
		fell = 0;
		off = WELL_WIDTH;
		while(off < (WELL_SIZE-WELL_WIDTH)){//simulate gravity
    ad24:	28 34       	cpi	r18, 0x48	; 72
    ad26:	40 f3       	brcs	.-48     	; 0xacf8 <AISimulateScoring+0x1c6>
				fell = 1;
			}
			off++;
		}
//AIDrawWell(i);
	}while(fell);
    ad28:	33 23       	and	r19, r19
    ad2a:	19 f0       	breq	.+6      	; 0xad32 <AISimulateScoring+0x200>
    ad2c:	26 e0       	ldi	r18, 0x06	; 6
    ad2e:	30 e0       	ldi	r19, 0x00	; 0
    ad30:	e3 cf       	rjmp	.-58     	; 0xacf8 <AISimulateScoring+0x1c6>
    ad32:	76 e0       	ldi	r23, 0x06	; 6
    ad34:	30 e0       	ldi	r19, 0x00	; 0
    ad36:	60 e0       	ldi	r22, 0x00	; 0
    ad38:	63 cf       	rjmp	.-314    	; 0xac00 <AISimulateScoring+0xce>
	
	goto AI_SCORING_TOP;//go back through it all until a score fails to happen
}
    ad3a:	8c 2d       	mov	r24, r12
    ad3c:	cd b7       	in	r28, 0x3d	; 61
    ad3e:	de b7       	in	r29, 0x3e	; 62
    ad40:	ef e0       	ldi	r30, 0x0F	; 15
    ad42:	0c 94 c8 57 	jmp	0xaf90	; 0xaf90 <__epilogue_restores__+0x6>

0000ad46 <AIDrawWell>:

void AIDrawWell(uint8_t i){
    ad46:	ef 92       	push	r14
    ad48:	ff 92       	push	r15
    ad4a:	0f 93       	push	r16
    ad4c:	1f 93       	push	r17
    ad4e:	cf 93       	push	r28
    ad50:	df 93       	push	r29
    ad52:	28 2f       	mov	r18, r24
if(!(p[0].padState & BTN_B))
    ad54:	80 91 e3 0d 	lds	r24, 0x0DE3
    ad58:	80 ff       	sbrs	r24, 0
    ad5a:	2c c0       	rjmp	.+88     	; 0xadb4 <AIDrawWell+0x6e>
return;
    ad5c:	36 e0       	ldi	r19, 0x06	; 6
    ad5e:	f3 2e       	mov	r15, r19
    ad60:	92 e0       	ldi	r25, 0x02	; 2
    ad62:	e9 2e       	mov	r14, r25

	uint8_t woff = WELL_WIDTH;//first row is invisible
	for(uint8_t y=0+2;y<2+24;y+=2){
		for(uint8_t x=0+2;x<2+12;x+=2){
			uint8_t t = ai[i].well[woff++]&0x0F;
    ad64:	30 e0       	ldi	r19, 0x00	; 0
    ad66:	8d e6       	ldi	r24, 0x6D	; 109
    ad68:	90 e0       	ldi	r25, 0x00	; 0
    ad6a:	28 9f       	mul	r18, r24
    ad6c:	e0 01       	movw	r28, r0
    ad6e:	29 9f       	mul	r18, r25
    ad70:	d0 0d       	add	r29, r0
    ad72:	38 9f       	mul	r19, r24
    ad74:	d0 0d       	add	r29, r0
    ad76:	11 24       	eor	r1, r1
    ad78:	c4 5a       	subi	r28, 0xA4	; 164
    ad7a:	d1 4f       	sbci	r29, 0xF1	; 241
    ad7c:	14 c0       	rjmp	.+40     	; 0xada6 <AIDrawWell+0x60>
    ad7e:	fe 01       	movw	r30, r28
    ad80:	e0 0f       	add	r30, r16
    ad82:	f1 1d       	adc	r31, r1
    ad84:	43 8d       	ldd	r20, Z+27	; 0x1b
    ad86:	4f 70       	andi	r20, 0x0F	; 15
    ad88:	0f 5f       	subi	r16, 0xFF	; 255
			DrawBlock(x,y,t);
    ad8a:	81 2f       	mov	r24, r17
    ad8c:	6e 2d       	mov	r22, r14
    ad8e:	0e 94 ed 48 	call	0x91da	; 0x91da <DrawBlock>
if(!(p[0].padState & BTN_B))
return;

	uint8_t woff = WELL_WIDTH;//first row is invisible
	for(uint8_t y=0+2;y<2+24;y+=2){
		for(uint8_t x=0+2;x<2+12;x+=2){
    ad92:	1e 5f       	subi	r17, 0xFE	; 254
    ad94:	1e 30       	cpi	r17, 0x0E	; 14
    ad96:	99 f7       	brne	.-26     	; 0xad7e <AIDrawWell+0x38>
    ad98:	86 e0       	ldi	r24, 0x06	; 6
    ad9a:	f8 0e       	add	r15, r24
void AIDrawWell(uint8_t i){
if(!(p[0].padState & BTN_B))
return;

	uint8_t woff = WELL_WIDTH;//first row is invisible
	for(uint8_t y=0+2;y<2+24;y+=2){
    ad9c:	82 e0       	ldi	r24, 0x02	; 2
    ad9e:	e8 0e       	add	r14, r24
    ada0:	8e e4       	ldi	r24, 0x4E	; 78
    ada2:	f8 16       	cp	r15, r24
    ada4:	19 f0       	breq	.+6      	; 0xadac <AIDrawWell+0x66>
    ada6:	0f 2d       	mov	r16, r15
    ada8:	12 e0       	ldi	r17, 0x02	; 2
    adaa:	e9 cf       	rjmp	.-46     	; 0xad7e <AIDrawWell+0x38>
			uint8_t t = ai[i].well[woff++]&0x0F;
			DrawBlock(x,y,t);
		}
	}

	WaitVsync(60);
    adac:	8c e3       	ldi	r24, 0x3C	; 60
    adae:	90 e0       	ldi	r25, 0x00	; 0
    adb0:	0e 94 f3 44 	call	0x89e6	; 0x89e6 <WaitVsync>
}
    adb4:	cd b7       	in	r28, 0x3d	; 61
    adb6:	de b7       	in	r29, 0x3e	; 62
    adb8:	e6 e0       	ldi	r30, 0x06	; 6
    adba:	0c 94 d1 57 	jmp	0xafa2	; 0xafa2 <__epilogue_restores__+0x18>

0000adbe <AISimulateMove>:

uint16_t AISimulateMove(uint8_t i, uint8_t m){
    adbe:	ef 92       	push	r14
    adc0:	ff 92       	push	r15
    adc2:	0f 93       	push	r16
    adc4:	1f 93       	push	r17
    adc6:	cf 93       	push	r28
    adc8:	df 93       	push	r29
    adca:	e8 2e       	mov	r14, r24
	//the AI does not even think about the next piece to come, better to move faster
	uint8_t rotation = m%4;
    adcc:	76 2f       	mov	r23, r22
    adce:	73 70       	andi	r23, 0x03	; 3
	uint8_t column = m/4;
    add0:	66 95       	lsr	r22
    add2:	66 95       	lsr	r22
	
	if((column == 0 && rotation == 3) || (column == (WELL_WIDTH-1) && rotation == 1))//impossible, game logic will push the piece off the wall
    add4:	d1 f4       	brne	.+52     	; 0xae0a <AISimulateMove+0x4c>
    add6:	73 30       	cpi	r23, 0x03	; 3
    add8:	09 f4       	brne	.+2      	; 0xaddc <AISimulateMove+0x1e>
    adda:	73 c0       	rjmp	.+230    	; 0xaec2 <AISimulateMove+0x104>
	}

	WaitVsync(60);
}

uint16_t AISimulateMove(uint8_t i, uint8_t m){
    addc:	2e 2d       	mov	r18, r14
    adde:	30 e0       	ldi	r19, 0x00	; 0
    ade0:	8d e6       	ldi	r24, 0x6D	; 109
    ade2:	90 e0       	ldi	r25, 0x00	; 0
    ade4:	ac 01       	movw	r20, r24
    ade6:	24 9f       	mul	r18, r20
    ade8:	c0 01       	movw	r24, r0
    adea:	25 9f       	mul	r18, r21
    adec:	90 0d       	add	r25, r0
    adee:	34 9f       	mul	r19, r20
    adf0:	90 0d       	add	r25, r0
    adf2:	11 24       	eor	r1, r1
    adf4:	dc 01       	movw	r26, r24
    adf6:	a9 58       	subi	r26, 0x89	; 137
    adf8:	b1 4f       	sbci	r27, 0xF1	; 241
    adfa:	40 e0       	ldi	r20, 0x00	; 0
    adfc:	50 e0       	ldi	r21, 0x00	; 0
}

void AIBufferWell(uint8_t i){
	
	for(uint8_t j=0;j<WELL_SIZE;j++)
		ai[i].well[j] = (p[ai[i].pawn].well[j]);//copy the well and drop any flags
    adfe:	ec 01       	movw	r28, r24
    ae00:	ca 58       	subi	r28, 0x8A	; 138
    ae02:	d1 4f       	sbci	r29, 0xF1	; 241
    ae04:	02 e7       	ldi	r16, 0x72	; 114
    ae06:	10 e0       	ldi	r17, 0x00	; 0
    ae08:	05 c0       	rjmp	.+10     	; 0xae14 <AISimulateMove+0x56>
uint16_t AISimulateMove(uint8_t i, uint8_t m){
	//the AI does not even think about the next piece to come, better to move faster
	uint8_t rotation = m%4;
	uint8_t column = m/4;
	
	if((column == 0 && rotation == 3) || (column == (WELL_WIDTH-1) && rotation == 1))//impossible, game logic will push the piece off the wall
    ae0a:	65 30       	cpi	r22, 0x05	; 5
    ae0c:	39 f7       	brne	.-50     	; 0xaddc <AISimulateMove+0x1e>
    ae0e:	71 30       	cpi	r23, 0x01	; 1
    ae10:	29 f7       	brne	.-54     	; 0xaddc <AISimulateMove+0x1e>
    ae12:	57 c0       	rjmp	.+174    	; 0xaec2 <AISimulateMove+0x104>
}

void AIBufferWell(uint8_t i){
	
	for(uint8_t j=0;j<WELL_SIZE;j++)
		ai[i].well[j] = (p[ai[i].pawn].well[j]);//copy the well and drop any flags
    ae14:	f8 80       	ld	r15, Y
    ae16:	8f 2d       	mov	r24, r15
    ae18:	90 e0       	ldi	r25, 0x00	; 0
    ae1a:	80 9f       	mul	r24, r16
    ae1c:	f0 01       	movw	r30, r0
    ae1e:	81 9f       	mul	r24, r17
    ae20:	f0 0d       	add	r31, r0
    ae22:	90 9f       	mul	r25, r16
    ae24:	f0 0d       	add	r31, r0
    ae26:	11 24       	eor	r1, r1
    ae28:	e8 58       	subi	r30, 0x88	; 136
    ae2a:	f2 4f       	sbci	r31, 0xF2	; 242
    ae2c:	e4 0f       	add	r30, r20
    ae2e:	f5 1f       	adc	r31, r21
    ae30:	82 8d       	ldd	r24, Z+26	; 0x1a
    ae32:	8d 93       	st	X+, r24
    ae34:	4f 5f       	subi	r20, 0xFF	; 255
    ae36:	5f 4f       	sbci	r21, 0xFF	; 255
	}
}

void AIBufferWell(uint8_t i){
	
	for(uint8_t j=0;j<WELL_SIZE;j++)
    ae38:	4e 34       	cpi	r20, 0x4E	; 78
    ae3a:	51 05       	cpc	r21, r1
    ae3c:	59 f7       	brne	.-42     	; 0xae14 <AISimulateMove+0x56>
	AIBufferWell(i);//put the current state of the well into our brain

	uint8_t pawn = ai[i].pawn;
	uint8_t orbit_off;
	
	if(rotation == 0)
    ae3e:	77 23       	and	r23, r23
    ae40:	19 f4       	brne	.+6      	; 0xae48 <AISimulateMove+0x8a>
		orbit_off = column+(WELL_WIDTH*1);
    ae42:	76 2f       	mov	r23, r22
    ae44:	7a 5f       	subi	r23, 0xFA	; 250
    ae46:	0c c0       	rjmp	.+24     	; 0xae60 <AISimulateMove+0xa2>
	else if(rotation == 1)
    ae48:	71 30       	cpi	r23, 0x01	; 1
    ae4a:	19 f4       	brne	.+6      	; 0xae52 <AISimulateMove+0x94>
		orbit_off = column+(WELL_WIDTH*2)+1;
    ae4c:	76 2f       	mov	r23, r22
    ae4e:	73 5f       	subi	r23, 0xF3	; 243
    ae50:	07 c0       	rjmp	.+14     	; 0xae60 <AISimulateMove+0xa2>
	else if(rotation == 2)
    ae52:	72 30       	cpi	r23, 0x02	; 2
    ae54:	19 f4       	brne	.+6      	; 0xae5c <AISimulateMove+0x9e>
		orbit_off = column+(WELL_WIDTH*3);
    ae56:	76 2f       	mov	r23, r22
    ae58:	7e 5e       	subi	r23, 0xEE	; 238
    ae5a:	02 c0       	rjmp	.+4      	; 0xae60 <AISimulateMove+0xa2>
	else
		orbit_off = column+(WELL_WIDTH*2)-1;
    ae5c:	76 2f       	mov	r23, r22
    ae5e:	75 5f       	subi	r23, 0xF5	; 245
	
	//put the current piece in the well
	if(!ai[i].well[column+(WELL_WIDTH*3)])
    ae60:	8d e6       	ldi	r24, 0x6D	; 109
    ae62:	90 e0       	ldi	r25, 0x00	; 0
    ae64:	28 9f       	mul	r18, r24
    ae66:	a0 01       	movw	r20, r0
    ae68:	29 9f       	mul	r18, r25
    ae6a:	50 0d       	add	r21, r0
    ae6c:	38 9f       	mul	r19, r24
    ae6e:	50 0d       	add	r21, r0
    ae70:	11 24       	eor	r1, r1
    ae72:	44 5a       	subi	r20, 0xA4	; 164
    ae74:	51 4f       	sbci	r21, 0xF1	; 241
    ae76:	fa 01       	movw	r30, r20
    ae78:	e6 0f       	add	r30, r22
    ae7a:	f1 1d       	adc	r31, r1
    ae7c:	85 a5       	ldd	r24, Z+45	; 0x2d
    ae7e:	88 23       	and	r24, r24
    ae80:	01 f5       	brne	.+64     	; 0xaec2 <AISimulateMove+0x104>
		ai[i].well[column+(WELL_WIDTH*2)] = p[pawn].blocks[0];//planetary
    ae82:	2f 2d       	mov	r18, r15
    ae84:	30 e0       	ldi	r19, 0x00	; 0
    ae86:	82 e7       	ldi	r24, 0x72	; 114
    ae88:	90 e0       	ldi	r25, 0x00	; 0
    ae8a:	28 9f       	mul	r18, r24
    ae8c:	d0 01       	movw	r26, r0
    ae8e:	29 9f       	mul	r18, r25
    ae90:	b0 0d       	add	r27, r0
    ae92:	38 9f       	mul	r19, r24
    ae94:	b0 0d       	add	r27, r0
    ae96:	11 24       	eor	r1, r1
    ae98:	a8 58       	subi	r26, 0x88	; 136
    ae9a:	b2 4f       	sbci	r27, 0xF2	; 242
    ae9c:	1a 96       	adiw	r26, 0x0a	; 10
    ae9e:	8c 91       	ld	r24, X
    aea0:	1a 97       	sbiw	r26, 0x0a	; 10
    aea2:	87 a3       	std	Z+39, r24	; 0x27
	else
		return 0;
	if(!ai[i].well[orbit_off+(WELL_WIDTH*1)])
    aea4:	fa 01       	movw	r30, r20
    aea6:	e7 0f       	add	r30, r23
    aea8:	f1 1d       	adc	r31, r1
    aeaa:	81 a1       	ldd	r24, Z+33	; 0x21
    aeac:	88 23       	and	r24, r24
    aeae:	49 f4       	brne	.+18     	; 0xaec2 <AISimulateMove+0x104>
		ai[i].well[orbit_off] = p[pawn].blocks[1];//orbital
    aeb0:	1b 96       	adiw	r26, 0x0b	; 11
    aeb2:	8c 91       	ld	r24, X
    aeb4:	83 8f       	std	Z+27, r24	; 0x1b
		}else
			break;
		AIDrawWell(i);
	}
	*/
	score = AISimulateScoring(i);
    aeb6:	8e 2d       	mov	r24, r14
    aeb8:	0e 94 99 55 	call	0xab32	; 0xab32 <AISimulateScoring>
    aebc:	28 2f       	mov	r18, r24
    aebe:	30 e0       	ldi	r19, 0x00	; 0
    aec0:	02 c0       	rjmp	.+4      	; 0xaec6 <AISimulateMove+0x108>
//	score *= score;
//	score *= score;
	//score *= 32UL;
	score += AIEvaluateLayout(i);

	return score;
    aec2:	20 e0       	ldi	r18, 0x00	; 0
    aec4:	30 e0       	ldi	r19, 0x00	; 0
}
    aec6:	c9 01       	movw	r24, r18
    aec8:	cd b7       	in	r28, 0x3d	; 61
    aeca:	de b7       	in	r29, 0x3e	; 62
    aecc:	e6 e0       	ldi	r30, 0x06	; 6
    aece:	0c 94 d1 57 	jmp	0xafa2	; 0xafa2 <__epilogue_restores__+0x18>

0000aed2 <__udivmodqi4>:
    aed2:	99 1b       	sub	r25, r25
    aed4:	79 e0       	ldi	r23, 0x09	; 9
    aed6:	04 c0       	rjmp	.+8      	; 0xaee0 <__udivmodqi4_ep>

0000aed8 <__udivmodqi4_loop>:
    aed8:	99 1f       	adc	r25, r25
    aeda:	96 17       	cp	r25, r22
    aedc:	08 f0       	brcs	.+2      	; 0xaee0 <__udivmodqi4_ep>
    aede:	96 1b       	sub	r25, r22

0000aee0 <__udivmodqi4_ep>:
    aee0:	88 1f       	adc	r24, r24
    aee2:	7a 95       	dec	r23
    aee4:	c9 f7       	brne	.-14     	; 0xaed8 <__udivmodqi4_loop>
    aee6:	80 95       	com	r24
    aee8:	08 95       	ret

0000aeea <__divmodqi4>:
    aeea:	87 fb       	bst	r24, 7
    aeec:	08 2e       	mov	r0, r24
    aeee:	06 26       	eor	r0, r22
    aef0:	87 fd       	sbrc	r24, 7
    aef2:	81 95       	neg	r24
    aef4:	67 fd       	sbrc	r22, 7
    aef6:	61 95       	neg	r22
    aef8:	ec df       	rcall	.-40     	; 0xaed2 <__udivmodqi4>
    aefa:	0e f4       	brtc	.+2      	; 0xaefe <__divmodqi4_1>
    aefc:	91 95       	neg	r25

0000aefe <__divmodqi4_1>:
    aefe:	07 fc       	sbrc	r0, 7
    af00:	81 95       	neg	r24

0000af02 <__divmodqi4_exit>:
    af02:	08 95       	ret

0000af04 <__udivmodhi4>:
    af04:	aa 1b       	sub	r26, r26
    af06:	bb 1b       	sub	r27, r27
    af08:	51 e1       	ldi	r21, 0x11	; 17
    af0a:	07 c0       	rjmp	.+14     	; 0xaf1a <__udivmodhi4_ep>

0000af0c <__udivmodhi4_loop>:
    af0c:	aa 1f       	adc	r26, r26
    af0e:	bb 1f       	adc	r27, r27
    af10:	a6 17       	cp	r26, r22
    af12:	b7 07       	cpc	r27, r23
    af14:	10 f0       	brcs	.+4      	; 0xaf1a <__udivmodhi4_ep>
    af16:	a6 1b       	sub	r26, r22
    af18:	b7 0b       	sbc	r27, r23

0000af1a <__udivmodhi4_ep>:
    af1a:	88 1f       	adc	r24, r24
    af1c:	99 1f       	adc	r25, r25
    af1e:	5a 95       	dec	r21
    af20:	a9 f7       	brne	.-22     	; 0xaf0c <__udivmodhi4_loop>
    af22:	80 95       	com	r24
    af24:	90 95       	com	r25
    af26:	bc 01       	movw	r22, r24
    af28:	cd 01       	movw	r24, r26
    af2a:	08 95       	ret

0000af2c <__divmodhi4>:
    af2c:	97 fb       	bst	r25, 7
    af2e:	09 2e       	mov	r0, r25
    af30:	07 26       	eor	r0, r23
    af32:	0a d0       	rcall	.+20     	; 0xaf48 <__divmodhi4_neg1>
    af34:	77 fd       	sbrc	r23, 7
    af36:	04 d0       	rcall	.+8      	; 0xaf40 <__divmodhi4_neg2>
    af38:	e5 df       	rcall	.-54     	; 0xaf04 <__udivmodhi4>
    af3a:	06 d0       	rcall	.+12     	; 0xaf48 <__divmodhi4_neg1>
    af3c:	00 20       	and	r0, r0
    af3e:	1a f4       	brpl	.+6      	; 0xaf46 <__divmodhi4_exit>

0000af40 <__divmodhi4_neg2>:
    af40:	70 95       	com	r23
    af42:	61 95       	neg	r22
    af44:	7f 4f       	sbci	r23, 0xFF	; 255

0000af46 <__divmodhi4_exit>:
    af46:	08 95       	ret

0000af48 <__divmodhi4_neg1>:
    af48:	f6 f7       	brtc	.-4      	; 0xaf46 <__divmodhi4_exit>
    af4a:	90 95       	com	r25
    af4c:	81 95       	neg	r24
    af4e:	9f 4f       	sbci	r25, 0xFF	; 255
    af50:	08 95       	ret

0000af52 <__prologue_saves__>:
    af52:	2f 92       	push	r2
    af54:	3f 92       	push	r3
    af56:	4f 92       	push	r4
    af58:	5f 92       	push	r5
    af5a:	6f 92       	push	r6
    af5c:	7f 92       	push	r7
    af5e:	8f 92       	push	r8
    af60:	9f 92       	push	r9
    af62:	af 92       	push	r10
    af64:	bf 92       	push	r11
    af66:	cf 92       	push	r12
    af68:	df 92       	push	r13
    af6a:	ef 92       	push	r14
    af6c:	ff 92       	push	r15
    af6e:	0f 93       	push	r16
    af70:	1f 93       	push	r17
    af72:	cf 93       	push	r28
    af74:	df 93       	push	r29
    af76:	cd b7       	in	r28, 0x3d	; 61
    af78:	de b7       	in	r29, 0x3e	; 62
    af7a:	ca 1b       	sub	r28, r26
    af7c:	db 0b       	sbc	r29, r27
    af7e:	0f b6       	in	r0, 0x3f	; 63
    af80:	f8 94       	cli
    af82:	de bf       	out	0x3e, r29	; 62
    af84:	0f be       	out	0x3f, r0	; 63
    af86:	cd bf       	out	0x3d, r28	; 61
    af88:	09 94       	ijmp

0000af8a <__epilogue_restores__>:
    af8a:	2a 88       	ldd	r2, Y+18	; 0x12
    af8c:	39 88       	ldd	r3, Y+17	; 0x11
    af8e:	48 88       	ldd	r4, Y+16	; 0x10
    af90:	5f 84       	ldd	r5, Y+15	; 0x0f
    af92:	6e 84       	ldd	r6, Y+14	; 0x0e
    af94:	7d 84       	ldd	r7, Y+13	; 0x0d
    af96:	8c 84       	ldd	r8, Y+12	; 0x0c
    af98:	9b 84       	ldd	r9, Y+11	; 0x0b
    af9a:	aa 84       	ldd	r10, Y+10	; 0x0a
    af9c:	b9 84       	ldd	r11, Y+9	; 0x09
    af9e:	c8 84       	ldd	r12, Y+8	; 0x08
    afa0:	df 80       	ldd	r13, Y+7	; 0x07
    afa2:	ee 80       	ldd	r14, Y+6	; 0x06
    afa4:	fd 80       	ldd	r15, Y+5	; 0x05
    afa6:	0c 81       	ldd	r16, Y+4	; 0x04
    afa8:	1b 81       	ldd	r17, Y+3	; 0x03
    afaa:	aa 81       	ldd	r26, Y+2	; 0x02
    afac:	b9 81       	ldd	r27, Y+1	; 0x01
    afae:	ce 0f       	add	r28, r30
    afb0:	d1 1d       	adc	r29, r1
    afb2:	0f b6       	in	r0, 0x3f	; 63
    afb4:	f8 94       	cli
    afb6:	de bf       	out	0x3e, r29	; 62
    afb8:	0f be       	out	0x3f, r0	; 63
    afba:	cd bf       	out	0x3d, r28	; 61
    afbc:	ed 01       	movw	r28, r26
    afbe:	08 95       	ret

0000afc0 <_exit>:
    afc0:	f8 94       	cli

0000afc2 <__stop_program>:
    afc2:	ff cf       	rjmp	.-2      	; 0xafc2 <__stop_program>
